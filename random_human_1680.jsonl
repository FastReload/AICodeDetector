{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   int maxNum = 0;\n   \n   if (fabs(userVal1) > (fabs(userVal2))) {\n      maxNum = userVal1;\n   }\n   else {\n      maxNum = userVal2;\n   }\n   return maxNum;\n}\n\nint main() {\n   int numVal1 = 0;\n   int numVal2 = 0;\n   \n   cin >> numVal1;\n   cin >> numVal2;\n\n   cout << MaxMagnitude(numVal1, numVal2) << endl;\n   \n   return 0; }\n", "class": 0, "version": 111, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   int maxMag;\n   int magAbs1 = abs(userVal1);\n   int magAbs2 = abs(userVal2);\n   \n   if ( magAbs1 >= magAbs2 ){\n      maxMag = userVal1 ;\n   }\n   else {\n      maxMag = userVal2; \n   }\n   \n   return maxMag;\n   \n}\n\nint main() {\n   \nint mag1;\nint mag2; \ncin >> mag1;\ncin >> mag2;\n\n\n\ncout << MaxMagnitude( mag1 , mag2 ) << endl; \n   return 0;\n}\n", "class": 0, "version": 66, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int ,int);\n\nint main() {\n   int value1;\n   int value2;\n   \n   cin >> value1;\n   cin >> value2;\n   \n   cout << MaxMagnitude(value1, value2) << endl;\n\n   return 0;\n}\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   int maxValue;\n   if (abs(userVal1) > abs(userVal2)) {\n      maxValue = userVal1;\n   }\n   else {\n      maxValue = userVal2;\n   }\n   \n   return maxValue;\n}\n", "class": 0, "version": 25, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2){\n   int userVal1fin;\n   int userVal2fin;\n   userVal1fin = userVal1;\n   userVal2fin = userVal2;\n   \n   if (userVal1 < 0){\n      userVal1 = userVal1*-1; \n   }\n   if (userVal2 < 0){\n      userVal2 = userVal2*-1; \n   }\n   if (userVal1>userVal2){\n      return userVal1fin;\n   }\n   else{\n      return userVal2fin;\n   }\n   \n   \n}\n\n\nint main() {\n   int one;\n   int two;\n   int magfinal;\n   cin >> one;\n   cin >> two;\n   magfinal = MaxMagnitude(one, two);\n   cout << magfinal << endl;\n\n\n   \n\n   return 0;\n}\n", "class": 0, "version": 233, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2){\n   if (abs(userVal1) > abs(userVal2)){\n      return userVal1;\n   }else {\n      return userVal2;\n   }\n}\n\nint main() {\n   /* Type your code here */\n   int userVal1;\n   int userVal2;\n   cin >> userVal1;\n   cin >> userVal2;\n   cout << MaxMagnitude(userVal1, userVal2) << endl;\n   return 0;\n}\n", "class": 0, "version": 63, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   int max;\n   if (abs(userVal1) > abs(userVal2)) {\n      max = userVal1;\n   }\n   else {\n      max = userVal2;\n   }\n   return max;\n}\n\nint main() {\n   int userVal1;\n   int userVal2;\n   cin >> userVal1 >> userVal2;\n   cout << MaxMagnitude(userVal1, userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 42, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude (int userVal1, int userVal2)\n{\n   int x;\n   int y;\n   x = fabs(userVal1);\n   y = fabs(userVal2);\n   \n   if (x > y )\n{\n   return userVal1;\n}\n   else\n{\n   return userVal2;\n}\n\n}\n\nint main() {\n   int userVal1;\n   int userVal2;\n   \n   cin >> userVal1 >> userVal2;\n   cout << MaxMagnitude (userVal1, userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 310, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2){\n int value; \n if(abs(userVal1)>abs(userVal2)){\n  value = userVal1; \n }\n else{\n  value = userVal2; \n }\n return value; \n}\n\nint main() {\n   int poo; \n   int pee; \n   cin>>poo; \n   cin>>pee;\n   cout<<MaxMagnitude(poo,pee)<<endl; \n\n   return 0;\n}\n", "class": 0, "version": 76, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>        \n\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2)\n{\n   int MaxMagnitude;\n   \n   if ( fabs(userVal1) < fabs(userVal2))\n   {\n      MaxMagnitude = userVal2;\n   }\n   else \n   {\n      MaxMagnitude = userVal1;\n   }\n\nreturn MaxMagnitude;\n}\n\nint main() {\n   int userVal1;\n   int userVal2;\n    \n    cin >> userVal1;\n    cin >> userVal2;\n   cout << MaxMagnitude( userVal1, userVal2) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 198, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n\nint MaxMagnitude (int userVal1, int userVal2) {\n   int max;\n   int min;\n   min = userVal1;\n   max = userVal2;\n   if (abs(min) > abs(max)) {\n      return min;\n   } else {\n      return max;\n   }\n}\n   \n   \nint main() {\n   int userVal1;\n   int userVal2;\n   cin >> userVal1;\n   cin >> userVal2;\n   cout << MaxMagnitude(userVal1, userVal2)<< endl;\n\n   return 0;\n}\n", "class": 0, "version": 80, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(double userVal1, double userVal2) {\n   int maxMag;\n\n  \n      if ((fabs(userVal1)) >= (fabs(userVal2))) {\n         maxMag = userVal1;\n      }\n      else {\n         maxMag = userVal2;\n      }\n   \n   return maxMag;\n}\n\nint main() {\n   int userInput1;\n   int userInput2;\n   \n   cin >> userInput1;\n   cin >> userInput2;\n   \n   cout << MaxMagnitude(userInput1, userInput2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 28, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude (int userVal1,int userVal2) {\n   int maxVal;\n   if (abs(userVal2) > abs(userVal1)) {\n      maxVal = userVal2;\n   } else if(abs(userVal1) > abs(userVal2)) {\n      maxVal = userVal1;\n    }\n    return maxVal;\n}\n\nint main() {\n  int Val1;\n  int Val2;\n  \n  cin >> Val1;\n  cin >> Val2;\n\n   cout << MaxMagnitude(Val1, Val2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 148, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   int val1 = abs(userVal1);\n   int val2 = abs(userVal2);\n   if(val1 < val2) {\n      return userVal2;\n}\n   else {\n      return userVal1;\n}\n}\n\nint main() {\n   int userVal1;\n   int userVal2;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   \n   cout << MaxMagnitude(userVal1, userVal2);\n   cout << \"\\n\";\n\n   return 0;\n}\n", "class": 0, "version": 89, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2, int userVal3) {\n   double posVal1;\n   double posVal2;\n   double posVal3;\n   double maxMag;\n   posVal1 = fabs(userVal1);\n   posVal2 = fabs(userVal2);\n   posVal3 = fabs(userVal3);\n   maxMag = userVal1;\n   if (posVal2 > posVal1) {\n      maxMag = userVal2;\n   }\n   if (posVal3 > posVal1 || posVal3 > posVal2) {\n      maxMag = userVal3;\n   }\n   return maxMag;\n}\n\nint main() {\n   int userVal1;\n   int userVal2;\n   int userVal3;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   cin >> userVal3;\n   \n   cout << MaxMagnitude(userVal1, userVal2, userVal3) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 119, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int firstNumber, int secondNumber) {\n   if (abs(firstNumber) > abs(secondNumber)) {\n      return firstNumber;\n   }\n   else {\n      return secondNumber;\n   }\n} \n\nint main() {\n   int firstNumber, secondNumber;\n   \n   cin >> firstNumber >> secondNumber;\n   \n   cout << MaxMagnitude(firstNumber, secondNumber) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 287, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude ( int userVal1, int userVal2){\n  int large;\n  // userVal1 = abs(userVal1);\n  // userVal2= abs(userVal2);\n  if( abs(userVal1) > abs(userVal2)){\n     large = userVal1;\n  }\n  else{\n     large = userVal2;\n  }\n  return large;\n}\n\nint main() {\n   /* Type your code here */\nint userOne = 0;\nint userTwo = 0;\ncin >> userOne;\ncin >> userTwo;\ncout << MaxMagnitude(userOne,userTwo)<<endl;\n   return 0;\n}\n", "class": 0, "version": 3, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2){\n  double MaxM;\n   if(abs(userVal1)>abs(userVal2)){\nMaxM=userVal1;\n}\nelse{\n   MaxM=userVal2;\n}\nreturn MaxM;\n}\nint main() {\nint userInput,userInput2;\ncin >> userInput >>userInput2;\ncout << MaxMagnitude(userInput , userInput2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 13, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2)\n{\n   int max = userVal1;\n   \n   if (abs(userVal2) > abs(userVal1))\n   {\n      max = userVal2;\n   }\nreturn max;\n}\n\nint main() {\n   /* Type your code here */\n   int userVal1, userVal2;\n   cin >> userVal1 >> userVal2;\n   \n   cout << MaxMagnitude(userVal1, userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 209, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n#include <cmath>\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   int MaxMag = 0;\n   \n   if (abs(userVal1) > abs(userVal2)) {\n      MaxMag = userVal1; \n   }\n   \n   else {\n      MaxMag = userVal2; \n   }\n\n   return MaxMag;\n}\n\n\nint main() {\n   \n   int val1 = 0;\n   int val2 = 0;\n   \n   cin >> val1;\n   cin >> val2;\n   \n   cout << MaxMagnitude(val1, val2) << endl;  \n   \n\n   return 0;\n}\n", "class": 0, "version": 138, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2){\n   int som;\n   \n   if (abs(userVal1) > abs(userVal2)){\n      som = userVal1;\n      cout << som<< endl;\n   }\n   else {\n      som = userVal2;\n      cout<< som << endl;\n   }\n   return som;\n}\n/* Define your function here */ \n\nint main() {\n   int a;\n   int b;\n   cin >> a;\n   cin >>b;\n   MaxMagnitude(a, b);\n   \n   /* Type your code here */\n\n   return 0;\n}\n", "class": 0, "version": 59, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2){\n   if (abs(userVal1) < abs(userVal2)){\n      return userVal2;\n   }\n   else{\n      return userVal1;\n   }\n}\nint main() {\n   /* Type your code here */\nint inputVal1;\nint inputVal2;\n\ncin >> inputVal1 >> inputVal2;\n\ncout << MaxMagnitude(inputVal1, inputVal2) << endl;\n   return 0;\n}\n", "class": 0, "version": 291, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2){\nint maxMag;\n\nif (abs(userVal1) > abs(userVal2)){\n   maxMag = userVal1;\n}\nelse if (abs(userVal2) > abs(userVal1)){\n   maxMag = userVal2;\n}\nelse {\n   maxMag = userVal1;\n}\nreturn maxMag;\n\n}\n\nint main() {\nint userVal1;\nint userVal2;\nint maxMag;\ncin >> userVal1;\ncin >> userVal2;\nmaxMag = MaxMagnitude(userVal1, userVal2);\ncout << maxMag << endl;\n\n   return 0;\n}\n", "class": 0, "version": 194, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n#include <cmath>\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2){\n   int max;\n   \n   if (fabs(userVal1) > fabs(userVal2)){\n      max = userVal1;\n   }\n   else{\n      max = userVal2;\n   }\n   \n   return max;\n}\nint main() {\n   /* Type your code here */\n   int userVal1;\n   int userVal2;\n   int max;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   \n   max = MaxMagnitude(userVal1, userVal2);\n   \n   cout << max << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 99, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nint MaxMagnitude (int userVal1, int userVal2, int userVal3){\n   \n   int userMax;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   cin >> userVal3;\n   \n   if ( (abs(userVal1) >= abs(userVal2)) && (abs(userVal1) >= abs(userVal3)) ){\n      userMax = userVal1;\n   }\n   else if ( (abs(userVal2) >= abs(userVal1)) && (abs(userVal2) >= abs(userVal3)) ){\n      userMax = userVal2;\n   }\n   else if ( (abs(userVal3) >= abs(userVal1)) && (abs(userVal3) >= abs(userVal2)) ){\n      userMax = userVal3;\n   }\n   return userMax;\n}\n\nint main() {\n   \n   int userVal1;\n   int userVal2;\n   int userVal3;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   cin >> userVal3;\n   \n   cout << MaxMagnitude (userVal1, userVal2, userVal3) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 116, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2){\n   if (abs(userVal1) > abs(userVal2)){\n      return userVal1;\n   }\n   else{\n      return userVal2;\n   }\n}\n\nint main() {\n   /* Type your code here */\n   int num1, num2, answer;\n   \n   cin >> num1 >> num2;\n   \n   answer = MaxMagnitude(num1,num2);\n   \n   cout << answer << endl;\n\n   return 0;\n}\n\n", "class": 0, "version": 218, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2, int userVal3)   {\n   if(labs(userVal2) > labs(userVal1))   {\n      userVal1 = userVal2;\n   }\n   if (labs(userVal3) > labs(userVal1))   {\n      userVal1 = userVal3;\n   }\n   return userVal1;\n}\n\nint main() {\n   /* Type your code here */\n   int userVal1;\n   int userVal2;\n   int userVal3;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   cin >> userVal3;\n   \n   cout << MaxMagnitude(userVal1, userVal2, userVal3) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 99, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude( int userVal1, int userVal2 ) {\n   \n   int higherValue;\n   \n   if ( fabs(userVal1) > fabs(userVal2)){\n      higherValue = userVal1;\n   }\n   else {\n      higherValue = userVal2;\n   }\n   \nreturn higherValue;\n}\n   \nint main() {\n   /* Type your code here */\n   int num1;\n   int num2;\n   \n   cin >> num1 >> num2;\n   \n   cout << MaxMagnitude( num1, num2 ) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 203, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude (int x, int y) {\n  int largestMag = 0;\n  if (abs(x) > abs(y)) { // find largest magnitude\n    largestMag = x;\n  }\n  else {\n    largestMag = y;\n  }\n  return largestMag; //gets outputted in main\n  }\n\n\nint main() {\n  \n  int numOne = 0;\n  int numTwo = 0;\n  cin >> numOne;\n  cin >> numTwo;\n\n   cout << MaxMagnitude(numOne, numTwo) << endl;\n\n   return 0;\n}\n\n", "class": 0, "version": 45, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   int maxVal;\n\n   // Note: if-else statements need not be understood to complete this activity\n   if (abs(userVal1) > abs(userVal2)) { // if num1 is greater than num2,\n      maxVal = userVal1;  // then num1 is the maxVal.\n   }\n   else {             // Otherwise,\n      maxVal = userVal2;  // num2 is the maxVal.\n   }\n\n   return maxVal;\n}\n\nint main() {\n   int userVal1;\n   int userVal2;\n   double maxSum;\n\n   cin >> userVal1;\n   cin >> userVal2;\n\n   maxSum = MaxMagnitude(userVal1, userVal2);\n\n   cout << maxSum << endl;\n\n   return 0;\n}", "class": 0, "version": 35, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2) {\n   if (fabs(userVal1) > fabs(userVal2)) {\n      return userVal1;\n   }\n   else {\n      return userVal2;\n   }\n}\n\nint main() {\n   /* Type your code here */\n   int num1;\n   int num2;\n   cin >> num1;\n   cin >> num2;\n   \n   cout << MaxMagnitude(num1, num2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 38, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2) {\n   int Max;\n   \n   if (abs(userVal1) > abs(userVal2)) {\n      Max = userVal1;\n   }\n   else {\n      Max = userVal2;\n   }\n   return Max;\n}\n\nint main() {\n   /* Type your code here */\n   int a;\n   int b;\n   \n   cin >> a;\n   cin >> b;\n   \n   cout << MaxMagnitude(a, b) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 18, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\r\n#include <cmath>\r\nusing namespace std;\r\n\r\nint MaxMagnitude(int a, int b)\r\n{\r\n\r\nint largestValue = 0;\r\n\r\nif (abs(a) > abs(b))\r\n{\r\n  largestValue = a;\r\n}\r\nelse\r\n{\r\n  largestValue = b;\r\n}\r\nreturn largestValue;\r\n}\r\n\r\nint main()\r\n{\r\n\r\nint value1 = 0;\r\nint value2 = 0;\r\n\r\ncin >> value1;\r\ncin >> value2;\r\n\r\ncout << MaxMagnitude(value1, value2) << endl;\r\nreturn 0;\r\n}", "class": 0, "version": 63, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here / \n\n   / Type your code here */\nint MaxMagnitude(int userVal1, int userVal2) {\n   double maxVal;\n\n\n   if (abs(userVal1) > abs(userVal2)) { // if absolute value of userVal1 is greater than absolute value of userVal2\n      maxVal = userVal1;                  // then maxVal = userVal1 \n   }\n   else {\n      maxVal = userVal2;               // if not then maxVal is equal to userVal 2 \n   }\n\n   return maxVal;\n}\n\nint main() {\n   double userVal1;\n   double userVal2;\n   double maxSum;\n\n   cin >> userVal1;\n   cin >> userVal2;\n\n   maxSum = MaxMagnitude(userVal1, userVal2);\n\n   cout << maxSum << endl;\n\n   return 0;\n}", "class": 0, "version": 72, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2) {\n   \n   int userMax;\n   \n   if (fabs(userVal1) > fabs(userVal2)) {\n      userMax = userVal1;  \n   }\n   else {\n      userMax = userVal2;\n   }\n   \n   return userMax;\n}\n\nint main() {\n   /* Type your code here */\n   \n   int userNum1;\n   int userNum2;\n   \n   cin >> userNum1;\n   cin >> userNum2;\n   \n   cout << MaxMagnitude(userNum1, userNum2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 178, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int a, int b){\n   int result;\n   if (abs(a) >= abs(b))\n      result = a;\n   else\n      result = b;\n   return result;\n   }\n\nint main() {\n   int a;\n   int b;\n   cin >> a;\n   cin >> b;\n   cout << MaxMagnitude(a, b) << endl;\n   return 0;\n}\n", "class": 0, "version": 100, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2){\n   int userVal2_fabs, userVal1_fabs;\n   userVal1_fabs = fabs(userVal1);\n   userVal2_fabs = fabs(userVal2);\n   if (userVal1_fabs > userVal2_fabs){\n      return userVal1;\n   }\n   if (userVal1_fabs < userVal2_fabs){\n      return userVal2;\n   }\n}\n\nint main() {\n   /* Type your code here */\n   int input1, input2;\n   cin >> input1 >> input2;\n   cout << MaxMagnitude(input1, input2) << endl;\n   return 0;\n}\n", "class": 0, "version": 5, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2, int userVal3) {\n   if (abs(userVal1) >= abs(userVal2) && abs(userVal1) >= abs(userVal3)) {\n      return userVal1;\n   }\n   else if (abs(userVal2) >= abs(userVal1) && abs(userVal2) >= abs(userVal3)) {\n      return userVal2;\n   }\n   else if (abs(userVal3) >= abs(userVal2) && abs(userVal3) >= abs(userVal1)) {\n      return userVal3; }\n}\n\nint main() {\nint u1;\nint u2;\nint u3; \ncin >> u1;\ncin >> u2;\ncin >> u3;\n   cout << MaxMagnitude(u1,u2,u3) << endl;\n}\n\n", "class": 0, "version": 145, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude (int userVal1, int userVal2) {\n   int maxValue;\n   \n   if (abs(userVal1) >= abs(userVal2)) {\n      maxValue = userVal1;\n   }\n      else {\n         maxValue = userVal2;\n      }\n      \nreturn maxValue;\n}\n\nint main() {\n   int numVal1;\n   int numVal2;\n   \n   cin >> numVal1 >> numVal2;\n   cout << MaxMagnitude(numVal1, numVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 125, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nint MaxMagnitude(int firstInput, int secondInput, int thirdInput) {\n   int maxValue;\n   int i;\n   int userVal1;\n   int userVal2;\n   int userVal3;\n   \n   userVal1 = abs(firstInput);\n   userVal2 = abs(secondInput);\n   userVal3 = abs(thirdInput);\n   \n   for (i = 0; i <= 3; ++i) {\n      if (userVal1 > userVal2 && userVal1 > userVal3) {\n         maxValue = firstInput;\n      }\n      else if (userVal2 > userVal1 && secondInput > userVal3) {\n         maxValue = secondInput;\n      }\n      else if (userVal3 > userVal1 && userVal3 > userVal2) {\n         maxValue = thirdInput;\n      }\n   }\n   \n   return maxValue;\n}\n\nint main() {\n   int firstInput;\n   int secondInput;\n   int thirdInput;\n   \n   cin >> firstInput;\n   cin >> secondInput;\n   cin >> thirdInput;\n   \n   cout << MaxMagnitude(firstInput, secondInput, thirdInput) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 166, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n\nint MaxMagnitude(int userVal1, int userVal2){\nif (abs(userVal1) > abs(userVal2)){\nreturn userVal1;\n}\nelse{\nreturn userVal2;\n}\n}\nint main()\n{\nint userVal1, userVal2;\ncin >> userVal1;\ncin >> userVal2;\ncout << (MaxMagnitude(userVal1,userVal2)) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 170, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int a, int b)\n{\n\nint largestValue = 0;\n\nif (abs(a) > abs(b))\n{\n  largestValue = a;\n}\nelse\n{\n  largestValue = b;\n}\nreturn largestValue;\n}\n\nint main() {\n   int value1 = 0;\n   int value2 = 0;\n\n   cin >> value1;\n   cin >> value2;\n\n   cout << MaxMagnitude(value1, value2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 43, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2)\n{\n   int bigger;\n   \n   if (abs(userVal1) > abs(userVal2))\n   {\n      bigger = userVal1;\n   }\n   else\n   {\n      bigger = userVal2;\n   }\n   \n   return bigger;\n}\n\n\nint main() {\n   \n   int userInput1;\n   int userInput2;\n   int answer;\n   \n   cin >> userInput1;\n   cin >> userInput2;\n   \n   answer = MaxMagnitude(userInput1, userInput2);\n   \n   cout << answer << endl;\n\n//cleaning up my code so it will be clean when it hits cout\n\n   return 0;\n}\n", "class": 0, "version": 273, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude (int userVal1, int userVal2) {\n   int num1 = abs(userVal1);\n   int num2 = abs(userVal2);\n   if (num1 < num2) {\n      return userVal2;\n   }\n   else {\n      return userVal1;\n   }\n}\n\n/* Define your function here */ \n\nint main() {\n   int userVal1;\n   int userVal2;\n   cin >> userVal1;\n   cin >> userVal2;\n   cout << MaxMagnitude(userVal1, userVal2) << endl;\n   \n   /* Type your code here */\n\n   return 0;\n}\n", "class": 0, "version": 236, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2) {\n   int max = 0;\n   if (abs(userVal1) > abs(userVal2)) {\n      max = userVal1;\n   }\n   else {\n      max = userVal2;\n   }\n   return max;\n}\n\nint main() {\n   /* Type your code here */\n   int hana=0;\n   int dul=0;\n   cin >> hana;\n   cin >> dul;\n   \n   cout << MaxMagnitude(hana, dul) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 228, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nint MaxMagnitude (int userVal1, int userVal2, int userVal3) {\n   \n   int maxNum;\n\n   if (abs(userVal1) > abs(userVal2) && abs(userVal1) > abs(userVal3) ) {\n      maxNum = userVal1;\n   }\n   if (abs(userVal2) > abs(userVal1) && abs(userVal2) > abs(userVal3) ) {\n      maxNum = userVal2;\n   }\n   if (abs(userVal3) > abs(userVal1) && abs(userVal3) > abs(userVal2) ) {\n      maxNum = userVal3;\n   }\n     \n   return maxNum;\n}\n\nint main() {\n   int numOne;\n   int numTwo;\n   int numThree;\n   \n   cin >> numOne;\n   cin >> numTwo;\n   cin >> numThree;\n\n   \n   cout << MaxMagnitude (numOne, numTwo, numThree) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 33, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n#include <cmath>\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   int max;\n   if (abs(userVal1) > abs(userVal2)) {\n      max = userVal1;\n   }\n   else {\n      max = userVal2;\n   }\n   return max;\n}\n   \n\nint main() {\n   int val1;\n   int val2;\n   cin >> val1 >> val2;\n   cout << MaxMagnitude(val1, val2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 69, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2){\n   int absVal1;\n   int absVal2; \n   int result;\n\n   absVal1 = labs(userVal1);\n   absVal2 = labs(userVal2);\n   \n   if (absVal1 > absVal2){\n      result = userVal1;\n   }\n\n   else {\n      result = userVal2;\n   }\n\n   return result;\n}\n\nint main() {\n   int inputNum1;\n   int inputNum2;\n   \n   cin >> inputNum1 >> inputNum2;\n \n   cout << MaxMagnitude(inputNum1, inputNum2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 95, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include<cmath>\nusing namespace std;\n\nint MaxMagnitude (int userVal1, int userVal2) {\n   \n   int temp1;\n   int temp2;\n   int max;\n   temp1 = fabs(userVal1);\n   temp2 = fabs(userVal2);\n   \n   if (temp1 <= temp2) {\n   max = userVal2;\n   }\n   else if (temp1 >= temp2) {\n      max = userVal1;\n   }\n   return max;\n}\n\nint main() {\n\nint userVal1;\nint userVal2;\n\ncin >> userVal1 >> userVal2;\ncout << MaxMagnitude (userVal1,userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 8, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \n\nint MaxMagnitude(int userVal1, int userVal2)\n{  \n   int m = abs(userVal1);     \n   int n = abs(userVal2);\n   if (m > n)  \n      return userVal1;\n      else\n      return userVal2;  \n}\n\nint main(void)\n{\n    int x,y;\n    scanf(\"%d\",&x);   \n    scanf(\"%d\",&y);   \n   int maxValue = MaxMagnitude(x,y);   \n    printf(\"%d\",maxValue);  \n    cout << endl;\n    return 0;\n}", "class": 0, "version": 183, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1,int userVal2){\n   if( abs(userVal1) > abs(userVal2)) {\n   return userVal1;\n}\n   else {\n   return userVal2;\n}\n}\n\nint main() {\n   /* Type your code here */\n   int userVal1,userVal2;\n   cin >> userVal1 >> userVal2;\n   cout << MaxMagnitude(userVal1,userVal2) << endl;\n\n\n   return 0;\n}\n", "class": 0, "version": 170, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\nint max;\n\nif (abs(userVal1) > abs(userVal2)) {\n   max = userVal1;\n}\nelse {\n   max = userVal2;\n}\nreturn max;\n}\n\nint main() {\n   int val1;\n   int val2;\n   \n   cin >> val1;\n   cin >> val2;\n\ncout << MaxMagnitude(val1, val2) << endl;\n   return 0;\n}\n", "class": 0, "version": 96, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2){\n   int maxNum = 0;\n   \n   if (userVal1 > 0 && userVal2 > 0){\n      if (userVal1 > userVal2){\n         maxNum = userVal1;\n      }\n      else {\n         maxNum = userVal2;\n      }\n   }\n   \n   if (userVal1 < 0 && userVal2 < 0){\n      if (userVal1 > userVal2){\n         maxNum = userVal2;\n      }\n      else {\n         maxNum = userVal1;\n      }\n   }\n   \n   if (userVal1 > 0 && userVal2 < 0){\n      if (abs(userVal1) > abs(userVal2)){\n         maxNum = userVal1;\n      }\n      else {\n         maxNum = userVal2;\n      }\n   }\n   \n   return (maxNum);\n   \n}\n\nint main() {\n   /* Type your code here */\n   int userVal1;\n   int userVal2;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   \n   cout << MaxMagnitude(userVal1, userVal2) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 201, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude( int userVal1, int userVal2) {\n   int max;\n   \n   if(fabs(userVal1) > fabs(userVal2)) {\n      max = userVal1;\n   }\n   else if(fabs(userVal2) > fabs(userVal1)) {\n      max = userVal2;\n   }\n   else {\n    max = userVal1;\n   }\n   \n   return max;\n}\n\nint main() {\n   /* Type your code here */\n   int userVal1, userVal2;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   \n   cout << MaxMagnitude(userVal1, userVal2) << endl;;\n\n   return 0;\n}\n", "class": 0, "version": 71, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nMaxMagnitude(int userVal1, int userVal2, int userVal3) {\n   return int abs(int userVal1, int userVal2, int userVal3)  /* Define your function here */ \n}\nint main() {\n   double maxValue;\n   cin >> maxValue;\n   cout << abs(int userVal1, int userVal2, int userVal3) << endl; \n   /* Type your code here */\n\n   return 0;\n}\n", "class": 0, "version": 179, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2, int userVal3){\n   int maxVal;\n   maxVal = userVal1;\n   if (abs(maxVal) < abs(userVal2))\n      maxVal = userVal2;\n   if (abs(maxVal) < abs(userVal3))\n      maxVal = userVal3;\n   return maxVal;\n}\nint main() {\n   /* Type your code here */\n   int val1;\n   int val2;\n   int val3;\n   cin >> val1;\n   cin >> val2;\n   cin >> val3;\n   cout << MaxMagnitude(val1 , val2 , val3) << endl;\n   return 0;\n}\n", "class": 0, "version": 225, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2){\n   if (fabs(userVal1) >= fabs(userVal2)) {\n      return userVal1;\n   }\n   else {\n      return userVal2;\n   }\n}\n\nint main() {\n   int num1;\n   int num2;\n   cin >> num1 >>num2;\n   cout << MaxMagnitude(num1, num2) <<endl;\n\n   return 0;\n}\n", "class": 0, "version": 125, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude (int userVal1, int userVal2){\n   if (abs(userVal1)>abs(userVal2))\n   return userVal1;\n   else \n   return userVal2;\n}\n\nint main() {\n int userVal1, userVal2;\n cin >> userVal1 >> userVal2;\n cout << MaxMagnitude(userVal1, userVal2) <<endl;\n\n   return 0;\n}\n", "class": 0, "version": 27, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n// Helped & Worked with Amritha Sankarappan on this lab :)\n\nint MaxMagnitude(int userVal1, int userVal2) {\n\n   if (abs(userVal1) > abs(userVal2)) {\n      return userVal1;\n   }\n   else if (abs(userVal1) < abs(userVal2)) {         \n      return userVal2;\n   }\n}\n\nint main() {\n   int userVal1;\n   int userVal2;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n\n   cout << MaxMagnitude(userVal1, userVal2) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 70, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2, int userVal3){\n   int max;\n    if(abs(userVal1) > abs(userVal2) and abs(userVal1) > abs(userVal3)){\n         max = userVal1;\n      }\n      else if(abs(userVal2) > abs(userVal1) and abs(userVal2) > abs(userVal3)){\n         max = userVal2;\n      }\n      else{\n       max = userVal3;  \n      }\n   return max;\n}\n\nint main() {\n   int num;\n   int num2;\n   int num3;\n   cin >> num;\n   cin >> num2;\n   cin >> num3;\n   cout <<  MaxMagnitude(num,num2,num3) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 117, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */\nint MaxMagnitude(int num1, int num2) {\n   if ( abs(num1) > abs(num2) ) {\n      return num1;\n   }\n   else {\n      return num2;\n   }\n}\n\nint main() {\n   /* Type your code here */\n   int userVal1;\n   int userVal2;\n   cin >> userVal1;\n   cin >> userVal2;\n   cout << MaxMagnitude( userVal1, userVal2) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 240, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */\n  int MaxMagnitude(int userVal1, int userVal2){ \n     int x;\n     int y;\n     int z;\n     y = abs(userVal1);\n     z = abs(userVal2);\n     if (y< z){\n        x = userVal2;}\n      else {x = userVal1;}  \n   return x;\n   }\nint main() {\n   /* Type your code here */\n   int userVal1;\n   int userVal2;\ncin>>userVal1>>userVal2;\ncout<<MaxMagnitude(userVal1,userVal2)<<endl;\n   return 0;\n}\n", "class": 0, "version": 141, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n\nint MaxMagnitude(int userVal1, int userVal2)\n{\n   int absoluteMax;\n   \n   if (fabs(userVal1) >= fabs(userVal2))\n   {\n      absoluteMax = userVal1;\n   }\n   else \n   {\n      absoluteMax = userVal2;\n   }\n   \n   return absoluteMax;\n}\n\nint main() {\n   int userVal1;\n   int userVal2;\n   \n   cin >> userVal1 >> userVal2;\n   \n   cout << MaxMagnitude(userVal1, userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 5, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nint MaxMagnitude (int userVal1, int userVal2, int userVal3) {\n   \n   if ( ( abs(userVal1) > abs(userVal2)) && (abs(userVal1) > abs(userVal3)) ) {\n      return userVal1;\n   }\n   else if ( ( abs(userVal2) > abs(userVal1)) && (abs(userVal2) > abs(userVal3)) ) {\n      return userVal2;\n   }\n   else {\n      return userVal3;\n   }\n}\n   \n\n\nint main() {\n   int userVal1;\n   int userVal2;\n   int userVal3;\n   cin >> userVal1;\n   cin >> userVal2;\n   cin >> userVal3;\n   cout << MaxMagnitude(userVal1, userVal2, userVal3) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 233, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\nint MaxMagnitude(int a, int b)\n{\nint largestValue = 0;\nif (abs(a) > abs(b))\n{\n  largestValue = a;\n}\nelse\n{\n  largestValue = b;\n}\nreturn largestValue;\n}\nint main()\n{\nint value1 = 0;\nint value2 = 0;\ncin >> value1;\ncin >> value2;\ncout << MaxMagnitude(value1, value2) << endl;\nreturn 0;\n}\n", "class": 0, "version": 3, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */\nint MaxMagnitude (int userVal1, int userVal2) {\n   \n   if (abs (userVal1) > abs (userVal2)) {\n      return userVal1;\n   }\n   \n   else {\n      return userVal2;\n   }\n}\n\nint main() {\n   /* Type your code here */\n   int x;\n   int y;\n   int finalAns;\n   \n   cin >> x >> y;\n   finalAns = MaxMagnitude (x,y);\n   cout << finalAns << endl;\n\n   return 0;\n}\n", "class": 0, "version": 270, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2) {\n   int max;\n   max = 0;\n   \n   if (fabs(userVal1) > fabs(userVal2)) {\n      max = userVal1;\n   }\n   else {\n      max = userVal2;\n   }\n   return max;\n}\n\nint main() {\n   /* Type your code here */\n   int num1;\n   int num2;\n   cin >> num1;\n   cin >> num2;\n   cout << MaxMagnitude(num1, num2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 114, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n   int MaxMagnitude(int userVal1, int userVal2) {\n   int max = 0;\n   if (abs(userVal1) > abs(userVal2)) {\n      max = userVal1;\n   }\n   else {\n      max = userVal2;\n   }\n   return max;\n}\n\nint main() {\n   int userVal1 = 0;\n   int userVal2 = 0;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   \n   cout << MaxMagnitude(userVal1, userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 17, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   if(fabs(userVal1) > fabs(userVal2)) {\n      return userVal1;\n   }\n   else {\n      return userVal2;\n   }\n}\n\nint main() {\n   int num1;\n   int num2;\n   \n   cin >> num1;\n   cin >> num2;\n   \n   cout << MaxMagnitude(num1, num2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 39, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2){\n int largestValue;\n if(abs(userVal1)>abs(userVal2)){\n    largestValue=userVal1;\n }\n else{\n  largestValue=userVal2;  \n }\n return largestValue;\n}\n\n\nint main() {\n   /* Type your code here */\n   int userVal1;\n   int userVal2;\n   int maxVal;\n   cin>>userVal1;\n   cin>>userVal2;\nmaxVal=MaxMagnitude(userVal1, userVal2);\ncout<<maxVal<<endl;\n   return 0;\n}\n", "class": 0, "version": 120, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2, int userVal3){\n   int greatestVal;\n   if (abs(userVal1) > abs(userVal2) && abs(userVal1) > abs(userVal3)){\n      greatestVal = userVal1;\n   }\n   else if (abs(userVal2) > abs(userVal1) && abs(userVal2) > abs(userVal3)){\n      greatestVal = userVal2;\n   }\n   else {\n      greatestVal = userVal3;\n   }\n   return greatestVal;\n}\n\nint main() {\n   int val1;\n   int val2;\n   int val3;\n   cin >> val1 >> val2 >> val3;\n   cout << MaxMagnitude(val1, val2, val3) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 47, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   if(abs(userVal1) > abs(userVal2)){\n      return userVal1;\n   }\n   if(abs(userVal2) > abs(userVal1)){\n      return userVal2;\n   }\n}\n\nint main() {\n   int user1;\n   int user2;\n   int output;\n   \n   cin >> user1 >> user2;\n   \n   output = MaxMagnitude(user1, user2);\n   \n   cout << output << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 162, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude (int userVal1, int userVal2) {\n   int maxMagnitude;\n   if (abs(userVal1) > abs(userVal2) || abs(userVal1) == abs (userVal2)) {\n      maxMagnitude = userVal1;\n   }\n   else {\n     maxMagnitude = userVal2;\n   }\n   return maxMagnitude;\n}\n      \nint main() {\nint userVal1; \nint userVal2; \ncin >> userVal1 >> userVal2;\ncout << MaxMagnitude( userVal1, userVal2)<<endl;\n   return 0;\n}\n", "class": 0, "version": 82, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n\n   int userVal11;\n   int userVal22;\n\n   userVal11 = abs (userVal1);\n   userVal22 = abs (userVal2);\n   \n   if (userVal11 > userVal22){\n      userVal1 = userVal1;\n   }\n   else if (userVal22 > userVal11) {\n      userVal1 = userVal2;\n   }\n   \n   return userVal1;\n}\n\nint main() {\n   \n   int userVal1;\n   int userVal2;\n   \n   cin >> userVal1 >> userVal2;\n   \n   \n   \n   cout << MaxMagnitude(userVal1, userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 86, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2){\n\n   if (abs(userVal1) > abs(userVal2)){\n   return userVal1;\n   }\n   else{\n   \n   return userVal2;\n   }\n\n}\nint main() {\n   int userVal1;\n   int userVal2;\n   cin >> userVal1;\n   cin >> userVal2;\n   cout << MaxMagnitude(userVal1,userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 83, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   if(abs(userVal1) > abs(userVal2)) {\n      return userVal1;\n   } else {\n      return userVal2;\n   }\n}\n\nint main() {\n   int num1, num2;\n   cin >> num1 >> num2;\n   cout << MaxMagnitude(num1, num2) << endl;\n   \n   return 0;\n}", "class": 0, "version": 196, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   if (abs(userVal1) > abs(userVal2)) {\n      return userVal1;\n   }\n   else if (abs(userVal2) > abs(userVal1)) {\n      return userVal2;\n   }\n}\n\nint main() {\n   int userVal1;\n   int userVal2;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   \n   cout << MaxMagnitude (userVal1, userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 126, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int val1, int val2) {\n   \n   if (fabs(val1) > fabs(val2)) {\n      return val1;\n   } else {\n      return val2;\n   }\n   \n}\n\nint main() {\n   int userVal1;\n   int userVal2;\n   cin >> userVal1 >> userVal2;\n   \n   cout << MaxMagnitude(userVal1, userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 268, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int input1, int input2) {\n   int max; \n   if (abs(input1) >= abs(input2)) {\n      max = input1;\n      cout << input1 << endl;\n   }\n   else if (abs(input1) < abs(input2)) {\n      max = input2;\n      cout << input2 << endl;\n   }   \nreturn max;\n}\n\nint main() {\n   int input1;\n   int input2;\n   \n   cin >> input1 >> input2;\n   MaxMagnitude(input1, input2);\n\n   return 0;\n}\n", "class": 0, "version": 36, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n#include <cmath>\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2)\n{\n   int Max ;\n   if( fabs(userVal1) >fabs(userVal2) ){ Max = userVal1 ;}\n   else { Max = userVal2;}\n   \n return Max ;  \n}\nint main() {\n   /* Type your code here */\nint value1 ;\nint value2 ;\n\ncin >> value1 ;\ncin >> value2 ;\ncout << MaxMagnitude(value1,value2) << endl ;\n   return 0;\n}\n", "class": 0, "version": 227, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2) {\n   if ((abs(userVal1)) > (abs(userVal2))) {\n      return userVal1;\n   }\n   else {\n      return userVal2;\n   }\n}\n\nint main() {\n   /* Type your code here */\n   int userVal1;\n   int userVal2;\n   \n   cin >> userVal1 >> userVal2;\n   cout << MaxMagnitude(userVal1, userVal2) << endl;\n   return 0;\n}\n", "class": 0, "version": 81, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   \n   \n   if (fabs(userVal1) > fabs(userVal2)){\n      cout << userVal1 << endl;\n      return userVal1;\n      }\n      \n   else {\n      cout << userVal2 << endl;\n      return userVal2;\n      }\n   \n   \n   \n   \n   \n   }\n\nint main() {\n   int userInput;\n   int userInput1;\n   \n   cin >> userInput;\n   cin >> userInput1;\n   \n   MaxMagnitude(userInput, userInput1);\n\n   return 0;\n}\n", "class": 0, "version": 252, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\nint big;\nif (abs(userVal1) > abs(userVal2)) {\n big = userVal1;  \n}\nelse if (abs(userVal2) > abs(userVal1)){\n big = userVal2;  \n}\n\n\nreturn big;   \n}\n\nint main() {\n   \n   int Val1;\n   \n   int Val2;\n   \ncin >> Val1 >>Val2;\n\ncout << MaxMagnitude(Val1, Val2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 181, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   int maxUserVal;\n   if (abs(userVal1)>abs(userVal2)) {\n      maxUserVal = userVal1;\n   }\n      else {\n       maxUserVal = userVal2;  \n      }\n      return maxUserVal;\n}\n   \n\nint main() {\nint mag1;\nint mag2;\ncin>>mag1>>mag2;\ncout<<MaxMagnitude(mag1,mag2)<<endl;\n\n\n   return 0;\n}\n", "class": 0, "version": 243, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   int mag1 = abs(userVal1);\n   int mag2 = abs(userVal2);\n\nif  (abs(mag1 > mag2)) {\n   return userVal1;}\n   \n   else {\n      return userVal2;}\n}\n\nint main() {\n   int userInput1;\n   int userInput2;\n   cin >> userInput1;\n   cin >> userInput2;\n   cout << MaxMagnitude(userInput1, userInput2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 128, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2) {\n   if (abs(userVal1) > abs (userVal2)) {\n      return userVal1;\n   }\n   else {\n      return userVal2;\n   }\n}\nint main() {\n   /* Type your code here */\n   int userVal1;\n   int userVal2;\n   cin >> userVal1 >> userVal2;\n   \n   cout << MaxMagnitude(userVal1, userVal2) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 236, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <string>\n#include <cctype>\n#include <ctime>\n#include <cmath>\n#include <time.h>\n#include <iomanip>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   int finalNum = 0;\n   if (fabs(userVal1) >= fabs(userVal2)) {\n      finalNum = userVal1;\n   }\n   else {\n      finalNum = userVal2;\n   }\n   return finalNum;\n   }\n\nint main() {\n   \n   int userVal1;\n   int userVal2;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   \n   cout << MaxMagnitude(userVal1, userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 204, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\n\nint MaxMagnitude(int int1, int int2, int int3) {\n   int x;\n   if (abs(int1) >= abs(int2) && abs(int1) >= abs(int3)) {\n      x = int1;\n   }\n   else if (abs(int2) >= abs(int1) && abs(int2) >= abs(int3)) {\n      x = int2;\n   }\n   else if (abs(int3) >= abs(int2) && abs(int3) >= abs(int1)) {\n      x = int3;\n   }\n   return x;\n}\n\nint main() {\n   int int1;\n   int int2;\n   int int3;\n   \n   \n   cin >> int1;\n   cin >> int2;\n   cin >> int3;\n   \n  cout << MaxMagnitude(int1, int2, int3) << endl;\n\n   \n   return 0;\n}\n", "class": 0, "version": 54, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude (int interger1, int interger2)\n{\n   int maxNum;\n   int newInterger1;\n   int newInterger2;\n   \n   newInterger1 = fabs(interger1);\n   newInterger2 = fabs(interger2);\n   \n   if ( newInterger1 > newInterger2 )\n   {\n      maxNum = interger1;\n   }\n   \n   else\n   {\n      maxNum = interger2;\n   }\n   \n   return maxNum;\n   \n}\n\nint main() {\n   int num1;\n   int num2;\n   \n   cin >> num1;\n   cin >> num2;\n   \n   cout << MaxMagnitude(num1,num2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 196, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude ( int userVal1, int userVal2 )\n{\n   int maxVal = 0;\n   \n   if ( abs( userVal1) > abs( userVal2) )\n   {\n      maxVal = userVal1;\n   }\n   else\n   {\n      maxVal = userVal2;\n   }\n   \n   return maxVal;\n}\n\nint main() {\n   int userVal1;\n   int userVal2;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   \n   cout << MaxMagnitude( userVal1, userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 48, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2)\n{\n if(abs(userVal1)>abs(userVal2))\n {\n  return userVal1;  \n }\n else\n {\n  return userVal2;  \n }\n}\n\nint main() {\n   \n   int num1;\n   int num2;\n   \n   cin >> num1 >> num2;\n   \n   cout << MaxMagnitude(num1, num2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 31, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2)\n{\n   if( abs(userVal1) > abs(userVal2 ) )\n   {\n      return(userVal1);\n   }\n   else\n   {\n      return(userVal2);\n   }\n}\n\nint main() {\n  \n  int use1;\n  int use2;\n  \n  cin >> use1;\n  cin >> use2;\n  \n  int var = MaxMagnitude(use1, use2);\n  cout << var << endl;\n\n   return 0;\n}\n", "class": 0, "version": 290, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n#include <cmath>\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2) {\n   int a;\n   if ( fabs(userVal1) >= fabs(userVal2) ) {\n      a = userVal1;\n   }\n   else {\n      a = userVal2;\n   }\n   return a;\n}\n\n\nint main() {\n   /* Type your code here */\n   int input1;\n   int input2;\n   \n   cin >> input1;\n   cin >> input2;\n   \n   cout << MaxMagnitude(input1, input2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 187, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2) {\n   int maxVal;\n   \n   if (fabs(userVal1) > fabs(userVal2)) { // if num1 is greater than num2,\n      maxVal = userVal1;  // then num1 is the maxVal.\n   }\n   else { // Otherwise,\n      maxVal = userVal2;  // num2 is the maxVal.\n   }\n\n   return maxVal;\n}\n\nint main() {\n   /* Type your code here */\n   int userVal1;\n   int userVal2;\n\n   cin >> userVal1;\n   cin >> userVal2;\n   \n   cout << MaxMagnitude(userVal1, userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 168, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   \n   if (abs(userVal1) >= abs(userVal2)) {\n      return userVal1;\n   }\n   else {\n      return userVal2;\n   }\n}  \n\nint main() {\n   int userVal1;\n   int userVal2;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   \n   if (abs(userVal1) >= abs(userVal2)) {\n      cout << userVal1 << endl;\n   }\n   else {\n      cout << userVal2 << endl;\n   }\n   \n   \n\n   return 0;\n}\n", "class": 0, "version": 80, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   if (fabs(userVal1) > fabs(userVal2)) {\n      return userVal1; \n   } else if (fabs(userVal1) < fabs(userVal2)) {\n      return userVal2;   \n   } else {\n      return userVal1; \n   }\n   \n \n   \n}\n\nint main() {\n   int num1;\n   int num2;\n   \n   cin >> num1;\n   cin >> num2; \n   \n   cout << MaxMagnitude(num1, num2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 108, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2){\n   if (abs(userVal1) > abs(userVal2)){\n      cout << userVal1 << endl;\n      return userVal1;\n   }\n   else{\n   cout << userVal2 << endl;\n   return userVal2;\n   }\n   return 1;\n}\n\nint main() {\n  int a,b;\n  cin >> a >> b;\n  MaxMagnitude(a,b);\n\n   return 0;\n}\n", "class": 0, "version": 244, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude (int x, int y) { \n   int num3 = abs(x);\n   int num4 = abs(y);\n   if (num3 > num4) {\n      return x;\n   }\n   else {\n      return y;\n   }\n}\n\n\nint main() {\n   int userVal1;\n   int userVal2;\n   cin >> userVal1;\n   cin >> userVal2;\n   int num1 = abs(userVal1);\n   int num2 = abs(userVal2);\n   cout << MaxMagnitude(num1, num2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 240, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2){\n   if (abs(userVal1)<=abs(userVal2)){\n      return userVal2;}\n      else {return userVal1;}}\n      \nint main() {\n   int value1;\n   int value2;\n   \n   cin >> value1 >> value2;\n   \n   cout << MaxMagnitude(value1, value2) << endl;\n   return 0;\n}\n", "class": 0, "version": 73, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2, int userVal3) {\n   if ((abs(userVal1) > abs(userVal2)) && (abs(userVal1) > abs(userVal3))) {\n      return userVal1;\n   }\n   else if ((abs(userVal2) > abs(userVal3))) {\n      return userVal2;\n   }\n   else {\n      return userVal3;\n   }\n}\n\nint main() {\n   int numInput1;\n   int numInput2;\n   int numInput3;\n   \n   cin >> numInput1 >> numInput2 >> numInput3;\n   cout << MaxMagnitude(numInput1, numInput2, numInput3) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 153, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */\nint MaxMagnitude(int userVal1, int userVal2){\n   if(abs(userVal1) > abs(userVal2)){\n      return userVal1;\n   }\n   else{\n      return userVal2;\n   }\n   return 0;\n}\n\nint main() {\n   /* Type your code here */\n   int a;\n   int b;\n   cin >> a;\n   cin >> b;\n   cout << MaxMagnitude(a,b) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 12, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude (int userVal1, int userVal2) {\n   \n   if (fabs (userVal1) > fabs (userVal2) ) {\n      return userVal1;\n   }\n   else {\n      return userVal2;\n   }\n}\n\nint main() {\n   /* Type your code here */\n   int userVal1;\n   int userVal2;\n   \n   cin >> userVal1 >> userVal2;\n   \n   cout << MaxMagnitude (userVal1, userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 207, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2)\n{\n   if(abs(userVal1) > abs(userVal2))\n   {\n      return userVal1;\n   }\n   else\n   {\n      return userVal2;\n   }\n}\n\nint main() {\n   /* Type your code here */\n   int x;\n   int y;\n   cin >> x;\n   cin >> y;\n   cout << MaxMagnitude(x,y) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 272, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n int Val1; \n int Val2;\n \n Val1 = fabs(userVal1);\n Val2 = fabs(userVal2);\n \n if (Val1 > Val2) {\n  return userVal1;  \n }\n   else {\n    return userVal2;  \n   }\n}\n\nint main() {\n   int userMax;\n   int userLower;\n   \n   cin >> userMax >> userLower;\n   \n  cout << MaxMagnitude(userMax, userLower) << endl;\n   \n   \n\n   return 0;\n}\n", "class": 0, "version": 38, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude (int userVal1, int userVal2) {\n   int magnitude;\n   if ((abs(userVal1)) > (abs(userVal2))) {\n      magnitude = userVal1;\n   }\n   else {\n      magnitude = userVal2;\n   }\nreturn magnitude;\n}\n\nint main() {\n   /* Type your code here */\n   int Val1;\n   int Val2;\n   \n   cin >> Val1;\n   cin >> Val2;\n   \n   cout << MaxMagnitude (Val1,Val2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 66, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2){\n   if (abs(userVal1)>abs(userVal2)){return userVal1;}\n   else{return userVal2;}\n}\n\nint main() {\n   /* Type your code here */\n   int num1,num2;\n   cin >> num1 >> num2;\n   cout << MaxMagnitude(num1,num2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 283, "model": "Human"}
{"problem": 1, "code": "#include <iostream> // C++ library\n#include <cmath> // Math library in which maths functions are define\nusing namespace std;\nint MaxMagnitude(int, int); //MaxMagnitude function is declared\n\nint main()\n{\nint value1 = 0, value2 = 0, result; // values are declared\ncout<<\"Enter the 1st value : \";\ncin>>value1;\ncout<<\"Enter the 2nd value : \";\ncin>>value2;\nresult = MaxMagnitude(value1, value2); // MaxMagnitude function is calling, get the maxvalue\ncout<<\"Largest Mangitude value is : \"<<result; // print MaxMagnitude value\nreturn 0;\n}\nint MaxMagnitude(int userVal1, int userVal2) // MaxMagnitude function definition\n{\nint maxvalue=0; // declare maxvalue for storing MaxMagnitude value\nif (abs(userVal1) > abs(userVal2)) // if-else statement check absolute max value\n{\nmaxvalue = userVal1;// if condition is true than store the value of userVal1\n}\nelse\n{\nmaxvalue = userVal2;//if condition is false than store the value of userVal2\n\n}\n\nreturn maxvalue;// return the MaxMagnitude value\n\n}\n", "class": 0, "version": 116, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude (int x, int y) {\n   int largestMag = 0;\n   if( abs(x) > abs(y)) {\n      largestMag = x;\n   }\n   else{\n      largestMag = y;\n   }\n   return largestMag; \n   }\n\nint main() {\n   /* Type your code here */\n\n   return 0;\n}\n", "class": 0, "version": 53, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude (int userVal1, int userVal2) {\n   if (abs(userVal1) > abs(userVal2)) {\n      return userVal1;\n   }\n   else {\n      return userVal2;\n   }\n}\nint main() {\n   int userVal1;\n   int userVal2;\n   cin >> userVal1;\n   cin >> userVal2;\n   cout << MaxMagnitude (userVal1,userVal2);\n   cout << endl;\n\n   return 0;\n}\n", "class": 0, "version": 163, "model": "Human"}
{"problem": 1, "code": "#include<iostream>\r\n#include<cmath>\r\nusing namespace std;\r\n\r\nint MaxMagnitude(int userVal1, int userVal2){\r\n   \r\n   if(abs(userVal1) < abs(userVal2)){\r\n      return userVal2;\r\n   }\r\n   else{\r\n      return userVal1;\r\n   }\r\n}\r\n\r\nint main()\r\n{\r\n   int userVal1, userVal2;\r\n   \r\n   cin>>userVal1;\r\n   cin>>userVal2;\r\n   \r\n   cout<<MaxMagnitude(userVal1,userVal2)<<endl;\r\n   return 0;\r\n}", "class": 0, "version": 40, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude (int userVal1, int userVal2) {\n   \n   if (fabs(userVal1) > fabs(userVal2)) {\n      return userVal1;\n   }\n   else {\n      return userVal2;\n   }\n   \n}\n\nint main() {\n   /* Type your code here */\n   \n   int userValA;\n   int userValB;\n   \n   cin >> userValA;\n   cin >> userValB;\n   \n   MaxMagnitude (userValA, userValB);\n   \n   if (userValA > userValB) {\n      cout << userValA << endl;\n   }\n   else {\n      cout << userValB << endl;\n   }\n   \n   return 0;\n}\n", "class": 0, "version": 164, "model": "Human"}
{"problem": 1, "code": "//worked with Daniel Gallardo\n#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2, int userVal3)\n{\n   int maxValue;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   cin >> userVal3;\n   \n   \n   if ((userVal1 > 0) || (userVal2 > 0) || (userVal3 > 0))\n   {\n      if ((userVal1 < userVal2) && (userVal2 > userVal3))\n      {\n         maxValue = userVal2;\n      }\n      else if ((userVal1 > userVal2) && (userVal1 > userVal3))\n      {\n         maxValue = userVal1;\n      }\n      else if ((userVal3 > userVal2) && (userVal3 > userVal1))\n      {\n         maxValue = userVal3;\n      }\n   }\n   \n   if ((userVal1 < 0) || (userVal2 < 0) || (userVal3 < 0))\n   {\n      if ((userVal1 > userVal2) && (userVal2 < userVal3))\n      {\n         maxValue = userVal2;\n      }\n      else if ((userVal1 < userVal2) && (userVal1 < userVal3))\n      {\n         maxValue = userVal1;\n      }\n      else if ((userVal3 < userVal2) && (userVal3 < userVal1))\n      {\n         maxValue = userVal3;\n      }\n   }\n   \n   \n   return maxValue;\n}\n\n\nint main() {\n   \n   int userVal1;\n   int userVal2;\n   int userVal3;\n   int maxValue;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   cin >> userVal3;\n   \nmaxValue = MaxMagnitude(userVal1, userVal2, userVal3);\ncout << maxValue << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 86, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2)\n{\n   int newVal;\n   \n   //while ((fabs(userVal1)) && (fabs(userVal2)))\n   //{\n      if (fabs(userVal1) > fabs(userVal2))\n      {\n         newVal = userVal1;\n         cout << (newVal) << endl;\n      }\n   \n      else\n      {\n         newVal = userVal2;\n         cout << (newVal) << endl;\n      }\n//   }\n   \n   return newVal;\n   \n}\n\nint main() {\n   int userNum1;\n   int userNum2;\n   \n   cin >> userNum1;\n   cin >> userNum2;\n   \n   MaxMagnitude(userNum1, userNum2);\n\n   return 0;\n}\n", "class": 0, "version": 161, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   int output;\n   \n   if ( abs(userVal1) > abs(userVal2) ) {\n      output = userVal1;\n   }\n   else { output = userVal2;}\n   \n   return output;\n}\n\nint main() {\n   int val1;\n   int val2;\n   \n   cin >> val1;\n   cin >> val2;\n   \n   cout << MaxMagnitude(val1, val2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 226, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\nint MaxMagnitude (int userVal1, int userVal2) {\n   int max;\n   if (fabs(userVal1) > fabs(userVal2)) {\n      max = userVal1;\n   }\n   else {\n      max = userVal2;\n      return max;\n   }\n}\n/* Define your function here */ \n\nint main() {\n   /* Type your code here */\nint v1;\nint v2;\ncin >> v1 >> v2;\ncout << MaxMagnitude(v1,v2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 264, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2, int userVal3) {\n   int greatestMag;\n   if (abs(userVal1) > abs(userVal2) && abs(userVal1) > abs(userVal3)) {\n      greatestMag = userVal1;\n   }\n   else if (abs(userVal2) > abs(userVal1) && abs(userVal2) > abs(userVal3)) {\n      greatestMag = userVal2;\n   }\n   else if (abs(userVal3) > abs(userVal2) && abs(userVal3) > abs(userVal1)) {\n      greatestMag = userVal3;\n   }\n   return greatestMag;\n}\nint main() {\n   int userVal1; \n   int userVal2; \n   int userVal3;\n   cin >> userVal1 >> userVal2 >> userVal3;\n   \n   cout << MaxMagnitude(userVal1, userVal2, userVal3) << endl;\n   return 0;\n}\n", "class": 0, "version": 228, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2)\n{\n   if (userVal1 > 0 && userVal2 > 0 && userVal1 > userVal2)\n   {\n      return userVal1;\n   }\n   else if (userVal1 < 0 && userVal2 < 0 && userVal1 < userVal2)\n   {\n      return userVal1;\n   }\n   else \n   {\n      return userVal2;\n   }\n}\n\nint main() {\n   int in1;\n   int in2;\n   cin >> in1 >> in2;\n   cout << MaxMagnitude(in1,in2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 174, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude (int userVal1, int userVal2) {\n   int maximum;\n   if ( abs(userVal1) > abs(userVal2) ) {\n      maximum = userVal1;\n   }\n   else {\n      maximum = userVal2;\n   }\n   return maximum;\n}\n   \n\nint main() {\n   /* Type your code here */\n   int userInput1;\n   int userInput2;\n   \n   cin >> userInput1;\n   cin >> userInput2;\n   \n   cout << MaxMagnitude ( userInput1, userInput2 ) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 135, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cctype>\n#include <cmath>\n#include<cstdlib>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   \n   if(fabs(userVal1) > fabs(userVal2))  {\n      return (userVal1);\n   }\n   else  {\n      return (userVal2);\n   }\n}\n\nint main() {\n   int userVal1;\n   int userVal2;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   \n   cout << MaxMagnitude(userVal1, userVal2) << endl;\n \n   return 0;\n}\n", "class": 0, "version": 228, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2){\n   int ans, abs1, abs2;\n   abs1=fabs(userVal1);\n   abs2=fabs(userVal2);\n   if(abs1>abs2){\n      ans=userVal1;\n   }//end of if1\n   else{\n    ans=userVal2;  \n   }\n   return ans;\n}//end of int\n\nint main() {\n   int input1, input2;\n   cin>>input1;\n   cin>>input2;\n   cout<<MaxMagnitude(input1, input2)<<endl;\n\n   return 0;\n}\n", "class": 0, "version": 251, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude (int userVal1, int userVal2){\n   int Max=0;\n if (abs(userVal1) > abs(userVal2)) {  \n   Max = userVal1;\n }\n else {\n   Max = userVal2;\n }\n return Max;\n}\n\nint main() {\n   int userVal1=0;\n   int userVal2=0;\n   cin >> userVal1;\n   cin >> userVal2;\n   \n   cout << MaxMagnitude(userVal1, userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 102, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   if ( fabs(userVal1) > fabs(userVal2) ) {\n      return userVal1;\n   }\n   else {\n      return userVal2;\n   }\n}\n\nint main() {\n   int inputVal1;\n   int inputVal2;\n   \n   cin >> inputVal1;\n   cin >> inputVal2;\n   \n   cout << MaxMagnitude(inputVal1, inputVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 1, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2, int userVal3) {\n   int maxVal;\n   int absuserVal1;\n   int absuserVal2;\n   int absuserVal3;\n   \n   maxVal = -999;\n   absuserVal1 = abs(userVal1);\n   absuserVal2 = abs(userVal2);\n   absuserVal3 = abs(userVal3);\n   \n   if (absuserVal1 > absuserVal2 && absuserVal1 > absuserVal3) {\n      maxVal = userVal1;\n   }\n   else if (absuserVal2 > absuserVal1 && absuserVal2 > absuserVal3) {\n      maxVal = userVal2;\n   }\n   else if (absuserVal3 > absuserVal1 && absuserVal3 > absuserVal2) {\n      maxVal = userVal3;\n   }\n   \n   return maxVal;\n}\n\nint main() {\n   /* Type your code here */\n   int userVal1;\n   int userVal2;\n   int userVal3;\n   cout << MaxMagnitude(userVal1, userVal2, userVal3) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 201, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude (int userVal1, int userVal2)\n{\n   int Max = 0;\n   if (abs(userVal1) > abs(userVal2)) \n   {\n      Max = userVal1;\n   }\n   else \n   {\n      Max = userVal2;\n   }\n   return Max;\n}\nint main() {\n   /* Type your code here */\nint one = 0;\nint two = 0;\ncin >> one;\ncin >> two;\n\ncout << MaxMagnitude(one, two) << endl;\n   return 0;\n}\n", "class": 0, "version": 33, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */\nint MaxMagnitude(int userVal1, int userVal2){\n   int largeMagnitude;\n   if(abs(userVal1) > abs(userVal2)){\n      largeMagnitude = userVal1;\n   }\n   else{\n      largeMagnitude = userVal2;\n   }\n   cout << largeMagnitude << endl;\n   return largeMagnitude;\n}\n\n\nint main() {\n   /* Type your code here */\n   int userVal1;\n   int userVal2;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   \n   MaxMagnitude(userVal1, userVal2);\n   \n   return 0;\n}\n", "class": 0, "version": 14, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2){\n   int i;\n   if(abs(userVal1)>abs(userVal2)){\n     i = userVal1;\n   }\n   else{\n      i = userVal2;\n   }\n    cout<<i<<endl;\n   return i;\n}\nint main() {\n   /* Type your code here */\n   int userVal1;\n   int userVal2;\n   cin>>userVal1;\n   cin>>userVal2;\n   MaxMagnitude(userVal1,userVal2);\n   return 0;\n}\n", "class": 0, "version": 205, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   int n1 = abs(userVal1);\n   int n2 = abs(userVal2);\n   if(n1 < n2){\n      return userVal2;\n   }\n   else{\n      return userVal1;\n   }\n}\n\nint main() {\n   int userVal1;\n   int userVal2;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   \n   cout << MaxMagnitude(userVal1, userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 23, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nint MaxMagnitude ( int userVal1, int userVal2, int userVal3 ) {\n   int max;\n   \n   if ( abs(userVal1) >= abs(userVal2) && abs(userVal1) >= abs(userVal3) ) {\n      max = userVal1;\n   }\n   \n   else if ( abs(userVal2) >= abs(userVal1) && abs(userVal2) >= abs(userVal3) ) {\n      max = userVal2;\n   }\n   \n   else if ( abs(userVal3) >= abs(userVal1) && abs(userVal3) >= abs(userVal2) ) {\n      max = userVal3;\n   }\n   \n   return max;\n}\n      \nint main() {\n   int val1;\n   int val2;\n   int val3;\n   \n   cin >> val1;\n   cin >> val2;\n   cin >> val3;\n   \n   cout << MaxMagnitude ( val1,val2,val3) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 29, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2) {\n   int first = fabs(userVal1); \n   int second = fabs(userVal2); \n   if (first > second) {\n      return userVal1;\n   }\n   else {\n      return userVal2; \n   }\n}\n   \n\nint main() {\n   /* Type your code here */\n   int userVal1; \n   int userVal2; \n   cin >> userVal1; \n   cin >> userVal2; \n   cout << MaxMagnitude(userVal1, userVal2) << endl; \n\n   return 0;\n}\n", "class": 0, "version": 234, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   int max;\n   if (abs(userVal1) > abs(userVal2)) {\n      max = userVal1;\n   }\n   else {\n      max = userVal2;\n   }\n   return max;\n}\n\nint main() {\n   int val1;\n   int val2;\n   \n   cin >> val1;\n   cin >> val2;\n\n   cout << MaxMagnitude(val1, val2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 166, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint AbsVal(int num) {\n   if (num < 0) {\n      num *= -1;\n   }\n   \n   return num;\n}\n\nint MaxMagnitude(int num1, int num2) {  \n   int num1_abs;\n   int num2_abs;\n   \n   num1_abs = AbsVal(num1);\n   num2_abs = AbsVal(num2);\n   \n   if (num2_abs > num1_abs) {\n      return num2;\n   }\n   else {\n      return num1;\n   }\n}\n\nint main() {\n   int num1;\n   int num2;\n   int max;\n   \n   cin >> num1;\n   cin >> num2;\n   \n   max = MaxMagnitude(num1, num2);\n   cout << max << endl;\n\n   return 0;\n}\n", "class": 0, "version": 9, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   if(abs(userVal2) > abs(userVal1)) {\n      return userVal2;\n   }\n   else{\n      return userVal1;\n   }\n}\n\nint main() {\n   int userVal1;\n   int userVal2;\n   \n   cin >> userVal1 >> userVal2;\n   \n   cout << MaxMagnitude(userVal1, userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 18, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2, int userVal3) {\n   int maxNum;\n   \n   maxNum = userVal1;\n   \n   if (fabs(userVal2) > fabs(maxNum)) {\n      maxNum = userVal2;\n   }\n   \n   if (fabs(userVal3) > fabs(maxNum)) {\n      maxNum = userVal3;\n   }\n   \n   return maxNum;\n}\n\nint main() {\n   int userInput1;\n   int userInput2;\n   int userInput3;\n   \n   cin >> userInput1;\n   cin >> userInput2;\n   cin >> userInput3;\n   \n   cout << MaxMagnitude(userInput1, userInput2, userInput3) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 212, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2, int userVal3) {\n   int num1 = userVal1;\n   int num2 = userVal2;\n   int num3 = userVal3;\n   \n   if (abs(userVal3) > abs(userVal2) && abs(userVal3) > abs(userVal1)) {\n      return num3;\n   }\n   if (abs(userVal2) > abs(userVal3) && abs(userVal2) > abs(userVal1)) {\n      return num2;\n   }\n   if (abs(userVal1) > abs(userVal2) && abs(userVal1) > abs(userVal3)) {\n      return num1;\n   }\n}\n\n// if statements are allowed in the function and new variables can be created too\n\nint main() {\n   int num1;\n   int num2;\n   int num3;\n   \n   cin >> num1 >> num2 >> num3;\n   \n   cout << MaxMagnitude(num1, num2, num3) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 213, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\nint MaxMagnitude(int x, int y){\n\tif (abs(x)> abs(y)){\n\t\treturn x;\n\t}\n\telse{\n\t\treturn y;\n\t}\n}\n/* Define your function here */ \n\nint main() {\n int num1, num2, answer;\n\tcin >> num1 >> num2;\n\tanswer = MaxMagnitude(num1,num2);\n\tcout << answer << endl;  /* Type your code here */\n\n   return 0;\n}\n", "class": 0, "version": 64, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude (int userVal1, int userVal2)  {\n   cin >> userVal1;\n   cin >> userVal2;\n   \n   if (fabs(userVal1) >= fabs(userVal2))  {\n      return userVal1;\n   }\n   else {\n      return userVal2;\n   }\n}\n\nint main() {\n   /* Type your code here */\n   int num1, num2;\n   int maxMagnitude;\n   \n   maxMagnitude = MaxMagnitude(num1, num2);\n   \n   cout << maxMagnitude << endl;\n \n   return 0;\n}\n", "class": 0, "version": 15, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2) {\n   \n   if (abs(userVal1) < abs(userVal2)){\n      return userVal2;\n   }\n   else{\n      return userVal1;\n   }\n   \n}\nint main() {\n   int userVal1;\n   int userVal2;\n   cin >> userVal1 >> userVal2;\n   cout << MaxMagnitude(userVal1, userVal2) << endl;\n   /* Type your code here */\n\n   return 0;\n}\n", "class": 0, "version": 159, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2, int userVal3){\n   if(abs(userVal1)>=abs(userVal2)&&abs(userVal1)>=abs(userVal3))\n   {\n      return userVal1;\n   } \n   else if (abs(userVal2) >= abs(userVal1) && abs(userVal2) >= abs(userVal3)) \n   {\n      return userVal2;\n   } \n   else \n   {\n      return userVal3;\n   }\n}\nint main() {\n   int userVal1;\n   int userVal2;\n   int userVal3;\n   cin>>userVal1;\n   cin>>userVal2;\n   cin>>userVal3;\n   cout<<MaxMagnitude(userVal1,userVal2,userVal3)<<endl;\n\n   return 0;\n}\n", "class": 0, "version": 81, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */\nint MaxMagnitude (int userVal1, int userVal2)\n{\n   int piss1 = abs(userVal1);\n   int piss2 = abs(userVal2);\n   int goop;\n   \n   if (piss2 > piss1)\n   {\n      goop = userVal2;\n   }\n   \n   else if (piss1 > piss2)\n   {\n      goop = userVal1;  \n   }\n   \n   return goop;\n}\n\nint main() {\n   /* Type your code here */\n   \n   int one;\n   int two;\n   \n   cin >> one;\n   cin >> two;\n   \n   cout << MaxMagnitude(one, two) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 195, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath> \nusing namespace std;\n\nint MaxMagnitude (int userVal1, int userVal2){\n   if (abs(userVal1) < abs(userVal2)) \n   {\n   return userVal2;\n   }\n   else \n   {\n   return userVal1;  \n   }\n}\n\n\nint main() {\n\nint userVal1;\nint userVal2;\nint largestVal;\n\ncin >> userVal1 >> userVal2;\n\nlargestVal = MaxMagnitude(userVal1, userVal2);\n\ncout << largestVal << endl;\n\n   return 0;\n}\n", "class": 0, "version": 197, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   if (abs(userVal1) > abs(userVal2)) \n      return userVal1;\n   else\n      return userVal2;\n}\n\nint main() {\n   int x;\n   int y;\n   \n   cin >> x;\n   cin >> y;\n   cout << MaxMagnitude(x, y) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 123, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2){\n   int biggest;\n   \n   if((abs(userVal1)) > (abs(userVal2))){\n      biggest = userVal1;\n   }else{\n      biggest = userVal2;\n   }\n   return biggest;\n}\n\n\nint main() {\n   /* Type your code here */\n   int userInput1;\n   int userInput2;\n   \n   cin >> userInput1;\n   cin >> userInput2;\n   \n   cout << MaxMagnitude(userInput1, userInput2) << endl;\n   return 0;\n}\n", "class": 0, "version": 29, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   \n   if ((userVal1 > 0) && (userVal2 > 0)){\n      if (userVal1 > userVal2) \n         return userVal1; \n   \n      else \n         return userVal2; \n   }\n   else {\n      if (abs(userVal1) > abs(userVal2)) \n         return userVal1;\n      \n      else \n         return userVal2; }\n   }\n\nint main() {\n   int first; \n   int second; \n   \n   cin >> first;\n   cin >> second; \n   \n   cout << MaxMagnitude(first, second) << endl; \n\n   return 0;\n}\n", "class": 0, "version": 21, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2)\n{\n   if(fabs(userVal1) > fabs(userVal2))\n   {\n      return userVal1;\n   }\n   else\n   {\n      return userVal2;\n   }\n}\nint main() {\n   int userVal1;\n   cin >> userVal1;\n   int userVal2;\n   cin >> userVal2;\n   \n   cout << MaxMagnitude(userVal1, userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 251, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2){\n   if(abs(userVal1) > abs(userVal2)){\n         return userVal1;\n   }\n   else{\n      return userVal2;\n   }\n}\n\n   \n\nint main() {\n   int value1;\n   int value2;\n   cin >> value1;\n   cin >> value2;\n   cout << MaxMagnitude(value1, value2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 250, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) \n{\n   if ( abs(userVal1) > abs(userVal2) )\n   {\n      return userVal1;\n   }\n   else if ( abs(userVal2) > abs(userVal1) )\n   {\n      return userVal2;\n   }\n}\n\nint main() {\n   int maxMag;\n   int val1;\n   int val2;\n   \n   cin >> val1 >> val2;\n   \n   maxMag = MaxMagnitude(val1, val2);\n   cout << maxMag << endl;\n\n   return 0;\n}", "class": 0, "version": 45, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */ \n\nint MaxMagnitude( int userVal1, int userVal2){\n   if ( abs(userVal1) > abs(userVal2))\n   {\n      return userVal1;\n   } else {\n      return userVal2;\n   }\n   \n}\n\nint main() {\n   /* Type your code here */\n   \n   int userVal1;\n   int userVal2;\n   cin >> userVal1 >> userVal2;\n   \n   cout << MaxMagnitude( userVal1, userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 158, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\nint Max = 0;\nif (abs(userVal1) > (abs(userVal2))) {\n   Max = userVal1;\n   }\n   else if (abs(userVal2) > (abs(userVal1))) {\n      Max = userVal2;\n   }\n   return Max;\n}\n\nint main() {\nint userInput1;\nint userInput2;\n\ncin >> userInput1;\ncin >> userInput2;\n\ncout << MaxMagnitude(userInput1, userInput2) << endl;\n\n\n   return 0;\n}\n", "class": 0, "version": 141, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int x, int y){\n   int num1 = abs(x);\n   int num2 = abs(y);\n   if(num1 < num2){\n      return y;\n   }\n   else{\n      return x;\n   }\n}\n\nint main() {\n   /* Type your code here */\n   int x;\n   int y;\n   \n   cin>> x;\n   cin>> y;\n   \n   cout<<MaxMagnitude(x,y)<<endl;\n   return 0;\n}\n", "class": 0, "version": 25, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2){\n   if(abs(userVal1) > abs(userVal2)){\n      return userVal1;\n   }\n   else{\n      return userVal2;  \n   }\n}\n\nint main() {\n   /* Type your code here */\n   int first;\n   int second;\n   cin >> first;\n   cin >> second;\n   cout << MaxMagnitude(first, second) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 52, "model": "Human"}
{"problem": 1, "code": "//worked with Jill Chahal//\n#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2, int userVal3) {\n  int max;\n  cin >> userVal1;\n  cin >> userVal2;\n  cin >> userVal3;\n  \n  if ((userVal1 > 0) || (userVal2 > 0) || (userVal3 > 0)) {\n     if ((userVal1 < userVal2) && (userVal2 > userVal3)) {\n        max = userVal2;\n     }\n     else if ((userVal1 > userVal2) && (userVal1 > userVal3)) {\n        max = userVal1;\n     }\n     else if ((userVal3 > userVal2) && (userVal3 > userVal1)) {\n        max = userVal3;\n     }\n  }\n  if ((userVal1 < 0) || (userVal2 < 0) || (userVal3 < 0)) {\n     if ((userVal1 > userVal2) && (userVal2 < userVal3)){\n        max = userVal2;\n     }\n     else if ((userVal1 < userVal3) && (userVal1 < userVal2)){\n        max = userVal1;\n     }\n     else if ((userVal3 < userVal1) && (userVal3 < userVal2)){\n        max = userVal3;\n     }\n  }\n  return max;\n}\nint main() {\n  int max;\n  int userVal1;\n  int userVal2;\n  int userVal3;\n  \n  cin >> userVal1;\n  cin >> userVal2;\n  cin >> userVal3;\n\nmax = MaxMagnitude(userVal1, userVal2, userVal3);\ncout << max << endl;\n\n   return 0;\n}\n", "class": 0, "version": 193, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2, int userVal3) {\n   int largestMagValue;\n   if ( abs(userVal1) >= abs(userVal2) && abs(userVal1) >= abs(userVal3) ) {\n       largestMagValue = (userVal1) ;\n   }\n   else if ( abs(userVal2) >= abs(userVal1) && abs(userVal2) >= abs(userVal3) ) {\n       largestMagValue  = (userVal2) ;\n   }\n   else {\n       largestMagValue = (userVal3) ;\n   }\n   return largestMagValue;\n}\n  \nint main() {\n   int valOne;\n   int valTwo;\n   int valThree;\n   \n   cin >> valOne;\n   cin >> valTwo;\n   cin >> valThree;\n   \n   cout << MaxMagnitude( valOne, valTwo, valThree) << endl;\n   \n\n\n   \n\n   return 0;\n}\n", "class": 0, "version": 156, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n#include <cmath>\n\nint MaxMagnitude(int input1, int input2) {\n   if (fabs(input1) < fabs(input2)) {\n      cout << input2 << endl;\n      return input2;\n   }\n   else {\n      cout << input1 << endl;\n      return input1;\n   }\n}\n\nint main() {\n   \n   int input1; \n   int input2;\n   cin >> input1;\n   cin >> input2;\n   MaxMagnitude(input1, input2);\n\n   return 0;\n}\n", "class": 0, "version": 127, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2);\n\nint main() {\n   int value1 = 0; \n   int value2 = 0;\n   int answer;\n \n   cin >> value1;\n   cin >> value2;\n   \n   answer = MaxMagnitude(value1, value2);\n   cout << answer << endl;\n   return 0;\n}\n\n   \n   /* Type your code here */\nint MaxMagnitude(int userVal1, int userVal2) {\n   int max = 0;\n   if (abs(userVal1) > abs(userVal2)) {\n      max = userVal1;\n   }\n   else {\n      max = userVal2; \n   }\n   \n   return max;\n}\n", "class": 0, "version": 57, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2, int userVal3) {\n   int Max;\n   \n   Max = 0;\n   \n   if (abs(userVal1) > abs(Max)) {\n      Max = userVal1;\n   }\n   if (abs(userVal2) > abs(Max)) {\n      Max = userVal2;\n   }\n   if (abs(userVal3) > abs(Max)) {\n      Max = userVal3;\n   }\n   \n   return(Max);\n}\n   \n\nint main() {\n   int Maxi;\n   int x;\n   int y;\n   int z;\n   \n   cin >> x;\n   cin >> y;\n   cin >> z;\n   \n   Maxi = MaxMagnitude(x, y, z);\n   \n   cout << Maxi << endl;\n\n   return 0;\n}\n", "class": 0, "version": 147, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2) {\n   int magnitude1;\n   int magnitude2;\n   int largerMagnitude;\n   magnitude1 = abs(userVal1);\n   magnitude2 = abs(userVal2);\n   if (magnitude1 > magnitude2) {\n      largerMagnitude = userVal1;\n   }\n   else {\n      largerMagnitude = userVal2;\n   }\n   return largerMagnitude;\n}\nint main() {\n   /* Type your code here */\nint value1;\nint value2;\ncin >> value1;\ncin >> value2;\ncout << MaxMagnitude(value1, value2) << endl;\n   return 0;\n}\n", "class": 0, "version": 116, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2){\n   if (abs(userVal1) < abs(userVal2))\n      return userVal2;\n   else\n      return userVal1;\n}\n\nint main() {\n   int in1;\n   int in2;\n   cin >> in1 >> in2;\n   \n   cout << MaxMagnitude(in1, in2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 254, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   int maxVal = 0;\n   if (abs(userVal1) > abs(userVal2)) {\n      maxVal = userVal1;\n   }\n   else {\n      maxVal = userVal2;\n   }\n   \n   return maxVal;\n}\n\nint main() {\n   int userVal1;\n   int userVal2;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   \n   cout << MaxMagnitude(userVal1, userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 38, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n#include <cstdlib>\n\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2)\n{\n   int answer;\n   if (abs(userVal1) > abs(userVal2)) {\n      answer = userVal1;\n   } else {\n      answer = userVal2;\n   }\n   return answer;\n   \n}\nint main() {\n   /* Type your code here */\n   int x;\n   int y;\n   int answer;\n   cin >> x >> y;\n   \n   answer = MaxMagnitude(x, y);\n   cout << answer << endl;\n   return 0;\n}\n", "class": 0, "version": 275, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   if (abs(userVal1) > abs(userVal2)) {\n      userVal2 = userVal1; }\n   else if (abs(userVal2) > abs(userVal1)) {\n      userVal1 = userVal2; }\n      \n   return userVal1;\n}\n\nint main() {\n   /* Type your code here */\n   int userVal1;\n   int userVal2;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   \n   cout << MaxMagnitude(userVal1, userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 41, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2) {\n   int MaxValue;\n   if (abs(userVal1) > abs(userVal2)) {\n      MaxValue = userVal1;\n   }\n   else if (abs(userVal2) > abs(userVal1)) {\n      MaxValue = userVal2;\n   }\n   else {\n      MaxValue = userVal1;\n   }\n   return MaxValue;\n}\n\nint main() {\n   /* Type your code here */\n   int userVal1;\n   int userVal2;\n   \n   cin >> userVal1 >> userVal2;\n   cout << MaxMagnitude(userVal1, userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 68, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n#include <cmath>\n\nint MaxMagnitude (int userVal1, int userVal2) {\n   if (fabs(userVal1) >= fabs(userVal2)) {\n     return userVal1;\n   }\n   else {\n     return userVal2;\n   }\n}\n\nint main() {\n   int userInput1;\n   int userInput2;\n   cin >> userInput1;\n   cin >> userInput2;\n   cout << MaxMagnitude (userInput1, userInput2) << endl;\n\n   return 0;\n}\n\n", "class": 0, "version": 90, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude (int userVal1, int userVal2) {\n   int maximum;\n   if (abs(userVal1) > abs(userVal2)) {\n      maximum = userVal1;\n   }\n   else if (abs(userVal2 > userVal1)) {\n      maximum = userVal2;\n   }\n   return maximum;\n}\n\nint main() {\n\n   int userInput1;\n   int userInput2;\n   \n   cin >> userInput1;\n   cin >> userInput2;\n   \n   cout << MaxMagnitude (userInput1, userInput2) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 279, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude (int userVal1, int userVal2) {\n   int userVal3;\n   int userVal4;\n   userVal3 = abs (userVal1);\n   userVal4 = abs(userVal2);\n   if (userVal3 > userVal4) {\n      return userVal1;\n   }\n   else if (userVal4 > userVal3) {\n      return userVal2;\n   }\n}\nint main() {\n   /* Type your code here */\n   int num1;\n   int num2;\n   \n   cin >> num1; \n   cin >> num2; \n   \n   cout << MaxMagnitude(num1, num2) << endl;\n   return 0;\n}\n", "class": 0, "version": 29, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n  int MaxMagnitude ( int userVal1, int userVal2){\n     if (abs(userVal1) > abs(userVal2)){\n         return userVal1;\n     }\n     \n     else {\n        return  userVal2;\n     }\n     return 0;\n  }\n\nint main() {\n   int userVal1;\n   int userVal2;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   \n   cout << MaxMagnitude (userVal1, userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 154, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   int maxMagnitude;\n   if (fabs(userVal1) > fabs(userVal2) ) {\n      maxMagnitude = userVal1;\n   }\n   else {\n      maxMagnitude = userVal2;\n   }\n   return maxMagnitude;\n}\n\nint main() {\n   int userVal1;\n   int userVal2;\n    \n   cin >> userVal1;\n   cin >> userVal2;\n   \n   cout << MaxMagnitude(userVal1, userVal2) << endl;\n    \n\n   return 0;\n}\n", "class": 0, "version": 82, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude (int userVal1, int userVal2 ) { \n   int Max = 0;\n   if(abs(userVal1) > abs(userVal2)) {\n      Max = userVal1;\n   }\n      else {\n         Max = userVal2; \n      }\n      return Max;\n}\nint main() {\n   /* Type your code here */\nint num1; \nint num2;\ncin >> num1; \ncin>> num2; \ncout << MaxMagnitude(num1, num2) << endl;\n   return 0;\n}\n", "class": 0, "version": 156, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2){\n   int maxNum;\n   if(fabs(userVal1) < fabs(userVal2)){\n      maxNum=userVal2;\n   }\n   else if (fabs(userVal1) > fabs(userVal2)){\n      maxNum=userVal1;\n   }\n   else{\n      maxNum=userVal1;\n   }\n   return maxNum;\n}\n\nint main() {\n   int userNum1;\n   int userNum2;\n   \n   cin >> userNum1 >> userNum2;\n   \n   cout << MaxMagnitude(userNum1,userNum2)<< endl;\n\n   return 0;\n}\n", "class": 0, "version": 29, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2)\n{\n   int max;\n   max = std::max(std::abs(userVal1), std::abs(userVal2));\n   if (max == std::abs(userVal1))\n   {\n      return userVal1;\n   }\n   else\n   {\n      return userVal2;\n   }\n}\n\nint main() {\n   int input1;\n   int input2;\n   cin >> input1;\n   cin >> input2;\n   cout << MaxMagnitude(input1, input2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 128, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude (int userVal1, int userVal2) {\n   int n1 = abs(userVal1);\n   int n2 = abs(userVal2);\n   if (n1 > n2) {\n      return userVal1;\n   }\n   else {\n      return userVal2;\n   }\n}\n\nint main() {\n   int userVal1;\n   int userVal2;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   \n   cout << MaxMagnitude(userVal1, userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 167, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude ( int userVal1, int userVal2) {\n int r;\n if (abs(userVal1) > abs(userVal2)) {\n r = userVal1;\n }\n else {\n    r = userVal2;\n}\n return r;\n}\n\nint main() {\n int userVal1;\n int userVal2;\n int userMax;\n \n cin >> userVal1;\n cin >> userVal2;\n userVal1 = abs(userVal1);\n userVal2 = abs(userVal2);\n userMax = MaxMagnitude ( userVal1,  userVal2);\n cout << userMax << endl;\n\n   return 0;\n}\n", "class": 0, "version": 65, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2, int userVal3) {\n   if (abs(userVal1) > abs(userVal2) && abs(userVal1) > abs(userVal3)) {\n      return userVal1;\n   }\n   else if (abs(userVal2) > abs(userVal3) && abs(userVal2) > abs(userVal1)) {\n      return userVal2;\n   }\n   else if (abs(userVal3) > abs(userVal1) && abs(userVal3) > abs(userVal2)) {\n      return userVal3;\n   }\n}\n\nint main() {\n   int Val1;\n   int Val2;\n   int Val3;\n   int max;\n   \n   cin >> Val1 >> Val2 >> Val3;\n   \n   max = MaxMagnitude(Val1, Val2, Val3);\n   \n   cout << max << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 123, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude( int userVal1, int userVal2) {\n   int output;\n   \n   if( abs(userVal1) > abs(userVal2) ){\n      output = userVal1;\n   }\n   else{\n      output = userVal2;\n   }\n   \n   return output;\n}\n\nint main() {\n   int userVal1;\n   int userVal2;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   \n   cout << MaxMagnitude(userVal1, userVal2) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 155, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude (int userVal1, int userVal2)\n{\n   int maxVal = 0;\n   \n   if (fabs(userVal1) > fabs(userVal2))\n   {\n      maxVal = userVal1;\n   }\n   else\n   {\n      maxVal = userVal2;\n   }\n   \n   return maxVal;\n}\n\nint main() {\n   int in1;\n   int in2;\n   \n   cin >> in1 >> in2;\n   \n   cout << MaxMagnitude (in1, in2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 218, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1,int userVal2)   {\n   if(abs(userVal1) > abs(userVal2))\n     return userVal1;\nelse  {\n   return userVal2;\n}\n}\n\nint main() {\n int userVal1, userVal2;\ncin >> userVal1 >> userVal2;\ncout << MaxMagnitude(userVal1, userVal2) << endl;\n   return 0;\n}\n", "class": 0, "version": 177, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2, int userVal3){\n   int max;\n   \n   if ((abs(userVal1)) >= (abs(userVal2))){\n      max = userVal1;\n      if (abs(userVal3) >= (abs(userVal1))){\n         max = userVal3;\n      }\n   }\n   else {\n      if ((abs(userVal2)) >= (abs(userVal3))){\n         max = userVal2;\n      }\n      else {\n         max = userVal3;\n      }\n   }\n      \n   return max;\n}\n\nint main() {\n   int userVal1;\n   int userVal2;\n   int userVal3;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   cin >> userVal3;\n   \n   cout << MaxMagnitude(userVal1, userVal2, userVal3) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 184, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n#include <cmath>\n\n/* Define your function here */ \n int MaxMagnitude(int userVal1, int userVal2)\n{\n   if(fabs(userVal1)<fabs(userVal2))\n   {\n   return userVal2;\n   }\n   else \n   return userVal1;\n}\nint main() {\n   /* Type your code here */\n   int one;\n   int two;\n   cin>>one>>two;\ncout<<MaxMagnitude(one,two)<<endl;\n   return 0;\n}\n", "class": 0, "version": 221, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2){\n   int a = abs(userVal1);\n   int b = abs(userVal2);\n   if(a < b){\n      return userVal2;\n   }\n   else{\n      return userVal1;\n   }\n}\n\nint main() {\n   int userVal1, userVal2;\n   \n   cin>>userVal1;\n   cin>>userVal2;\n   \n   cout<<MaxMagnitude(userVal1,userVal2)<<endl;\n   return 0;\n}\n \n", "class": 0, "version": 309, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2) {\n   if ((userVal1 * userVal1) > (userVal2 * userVal2)) {\n      return userVal1;\n   } else {\n      return userVal2;\n   }\n}\n\nint main() {\n   int num1;\n   int num2;\n   \n   cin >> num1;\n   cin >> num2;\n   \n   cout << MaxMagnitude(num1, num2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 190, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2)\n{\n   if (abs(userVal1) > abs(userVal2))\n   {\n      return userVal1;\n   }\n   else\n   {\n      return userVal2;\n   }\n}\n\nint main() {\n   /* Type your code here */\n   int first;\n   int second;\n   \n   cin >> first >> second;\n   \n   cout << MaxMagnitude (first, second) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 193, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n#include <cmath>\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2) {\n   //int winner;\n   if (fabs(userVal1) > fabs(userVal2)) {\n      return userVal1; }\n      else {\n         return userVal2; \n}\n}\n\nint main() {\n   /* Type your code here */\n   int val1;\n   int val2;\n   cin >> val1;\n   cin >> val2;\n  cout << MaxMagnitude(val1, val2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 72, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude( int paramOne, int paramTwo)\n{\n   int maxVal;\n   \n   if( abs(paramOne) > abs(paramTwo))\n   {\n      maxVal = paramOne;\n   }\n   if( abs(paramTwo) > abs(paramOne))\n   {\n      maxVal = paramTwo;\n   }\n   \n   return maxVal;\n   \n   }/* Define your function here */ \n\nint main() {\n  int paramOne;\n  int paramTwo;\n  \n  cin >> paramOne >> paramTwo;\n  \n  cout << MaxMagnitude(paramOne,paramTwo) << endl; /* Type your code here */\n\n   return 0;\n}\n", "class": 0, "version": 206, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude (int userVal1, int userVal2) {\n   \n   if (fabs(userVal1) > fabs(userVal2)) {\n      return userVal1;\n   }\n   else {\n      return userVal2;\n   }\n}\nint main() {\n   int input1, input2;\n   cin >> input1;\n   cin >> input2;\n   \n   cout << MaxMagnitude (input1, input2) << endl;\n   return 0;\n}\n", "class": 0, "version": 278, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude (int userVal1, int userVal2, int userVal3) {\n   int largestValue;\n   int largestValue2;\n   \n   int value1 = fabs(userVal1);\n   int value2 = fabs(userVal2);\n   int value3 = fabs(userVal3);\n   \n   \n   largestValue = 0;\n   \n   largestValue = value1;\n   largestValue2 = userVal1;\n   \n   if (value2 > largestValue) {\n      largestValue = value2;\n      largestValue2 = userVal2;\n   }\n   if (value3 > largestValue) {\n      largestValue = value3;\n      largestValue2 = userVal3;\n   }\n   return (largestValue2);\n}\n\nint main() {\n   int val1;\n   int val2;\n   int val3;\n   \n   cin >> (val1);\n   cin >> (val2);\n   cin >> (val3);\n   \n   cout << MaxMagnitude (val1, val2, val3) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 78, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int a , int b){\n   if (fabs(a)>fabs(b)){\n      \n    return a;  \n   }\n   else {\n      return b;\n   }\n}\n\nint main() {\n   /* Type your code here */\nint a;\nint b;\ncin >> a;\ncin >> b;\ncout << MaxMagnitude(a,b) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 209, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int val1, int val2) {\n   int max;\n   \n   if (abs(val1) > abs(val2)) {\n      max = val1;\n   }\n   else {\n      max = val2;\n   }\n   \n   return max;\n}\n\nint main() {\n   int userVal1;\n   int userVal2;\n   \n   cin >> userVal1 >> userVal2;\n   \n   cout << MaxMagnitude(userVal1, userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 258, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2, int userVal3)\n{\n   int max;\n   max = userVal1;\n   \n   if (abs(userVal2) > abs(max))\n   {\n      max = userVal2;\n   }\n   \n   if (abs(userVal3) > abs(max))\n   {\n      max = userVal3;\n   }\n   \n   return max;\n}\n\nint main() {\n   int userVal1;\n   int userVal2;\n   int userVal3;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   cin >> userVal3;\n   \n   cout << MaxMagnitude(userVal1, userVal2, userVal3) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 180, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nint MaxMagnitude (int userVal1, int userVal2, int userVal3) {\nint maxMagnitude = (userVal1);\n   if((userVal2) > maxMagnitude) {\n      maxMagnitude = userVal2;\n   }\n   if(abs(userVal3) > maxMagnitude){\n      maxMagnitude = userVal3;\n   }\n   return maxMagnitude;\n}   \nint main() {\n   int userVal1;\n   int userVal2;\n   int userVal3;\n   int maxNum;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   cin >> userVal3;\n\nmaxNum=MaxMagnitude(userVal1,userVal2, userVal3);\n   cout << maxNum << endl;\n   return 0;\n}\n", "class": 0, "version": 91, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int a, int b)\n{\n   int c, d;\n   c = fabs(a);\n   d = fabs(b);\n   if (c > d)\n   {\n      return (a);\n   }\n   else\n   {\n      return (b);\n   }\n}\n\nint main() {\n   \n   int userVal1, userVal2;\n   cin >> userVal1 >> userVal2;\n   cout << MaxMagnitude (userVal1, userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 230, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   if (abs(userVal1)> abs(userVal2))\n      return userVal1;\n   else \n      return userVal2;\n}\n\nint main() {\n   int userVal1, userVal2;\n   cin >> userVal1 >> userVal2;\n   cout << MaxMagnitude(userVal1, userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 282, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude (int userVal1, int userVal2) {\n   if (abs (userVal1) > abs (userVal2)) {\n      return userVal1;\n   }\n   else if (abs (userVal1) < abs (userVal2)) {\n      return userVal2;\n   }\n}\n\nint main() {\n   /* Type your code here */\n   int userVal1;\n   int userVal2;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   \n   cout << (MaxMagnitude(userVal1, userVal2)) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 245, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2){\n   int n1 = abs(userVal1), n2 = abs(userVal2);\n   if(n1 < n2){\n      return userVal2;\n   }\n   else{\n      return userVal1;\n   }\n}\nint main() {\n   /* Type your code here */\n   int userVal1, userVal2;\n   \n   cin>>userVal1>>userVal2;;\n   \n   cout<<MaxMagnitude(userVal1,userVal2)<<endl;\n   return 0;\n}\n", "class": 0, "version": 10, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\r\nusing namespace std;\r\n\r\nint MaxMagnitude(int a, int b) {\r\n    if (abs(a) > abs(b)) {\r\n        return a;\r\n    }\r\n    else if (abs(b) > abs(a)) {\r\n        return b;\r\n    }\r\n}\r\n\r\nint main() {\r\n    int a, b;\r\n    cin >> a;\r\n    cin >> b;\r\n\r\n    cout << MaxMagnitude(a, b) << endl;\r\n}", "class": 0, "version": 221, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2, int userVal3)\n{\n   \n   if (abs(userVal1)>abs(userVal2))\n   {\n      if(abs(userVal1)>abs(userVal3))\n      { \n         return userVal1;\n      }\n      else\n      {\n         return userVal3;\n      }      \n   }\n   else\n   {\n      if (abs(userVal2)>abs(userVal3))\n      {\n         return userVal2;\n      }\n      else\n      {\n         return userVal3;   \n      }\n   }\n}\n\nint main() {\n   /* Type your code here */\n\n   int var1;\n   int var2;\n   int var3;\n   int result;\n   \n   cin>>var1;\n   cin>>var2;\n   cin>>var3;\n   \n   result = MaxMagnitude(var1,var2,var3);\n   \n   cout<<result<<endl;\n   \n   return 0;\n}\n", "class": 0, "version": 142, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2){\n   if (fabs(userVal2) < fabs(userVal1)){\n      return(userVal1);\n   }\n   else \n   return (userVal2);\n}\n\nint main() {\n   int usern1;\n   int usern2;\n   \n   cin >> usern1 >> usern2;\n   \n   cout << MaxMagnitude(usern1, usern2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 29, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \n\nint MaxMagnitude(int userVal1, int userVal2){\n   int n1 = abs( userVal1 );\n   int n2 = abs( userVal2 );\n   if( n1 < n2 ){\n      return userVal2;\n   }\n   else{\n      return userVal1;\n   }\n}\n\nint main() {\n   /* Type your code here */\n   int userVal1, userVal2;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   \n   cout << MaxMagnitude ( userVal1 , userVal2 ) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 104, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2){\n   int val1;\n   int val2;\n   val1 = abs(userVal1);\n   val2 = abs(userVal2);\n   if (val1 > val2) {\n      return userVal1;\n   }\n   else {\n      return userVal2;\n   }\n}\n\nint main() {\n   /* Type your code here */\n      int userVal1;\n      int userVal2;\n      cin >> userVal1 >> userVal2;\n      cout << MaxMagnitude(userVal1,userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 64, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n//initializing MaxMagnitude function\nint MaxMagnitude(int userVal1,int userVal2){\n//checking if magnitude of userVal1 is greater\nif(abs(userVal1)>abs(userVal2))\n//returning userVal1\nreturn userVal1;\nelse\n//returning userVal2\nreturn userVal2;\n}\nint main()\n{\n//initializing 2 numbers\nint userVal1,userVal2;\n//accepting them\ncin>>userVal1>>userVal2;\n//calling MaxMagnitude function and printing result\ncout<<MaxMagnitude(userVal1,userVal2)<<endl;\n\n   return 0;\n}\n", "class": 0, "version": 172, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   int max = 0;\n   \n   if (fabs(userVal1) > fabs(userVal2)) {\n      max = userVal1;\n   }\n   else {\n      max = userVal2;\n   }\n   return max;\n}\n\nint main() {\n   int a = 0;\n   int b = 0;\n   cin >> a;\n   cin >> b;\n   \n   cout << MaxMagnitude(a, b) << endl; \n\n   return 0;\n}\n", "class": 0, "version": 64, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   int numMax;\n   \n   if(fabs(userVal1) > fabs(userVal2)) {\n      numMax = userVal1;\n   }\n   else if(fabs(userVal1) < fabs(userVal2)) {\n      numMax = userVal2;\n   }\n   else {\n      numMax = userVal1;\n   }\n   \n   return numMax;\n}\n\nint main() {\n   int numOne;\n   int numTwo;\n   \n   cin >> numOne;\n   cin >> numTwo;\n   \n   cout << MaxMagnitude(numOne, numTwo) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 23, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude (int userVal1, int userVal2);\n\nint main() {\n int Val1 = 0;\n int Val2 = 0;\n int results;\n\n cin>> Val1;\n \n \n \n cin>> Val2;\n\n results = MaxMagnitude (Val1, Val2);\n\n cout<< results;\n cout<< endl;\n return 0;\n}\nint MaxMagnitude (int userVal1, int userVal2)\n{\n   int maxvalue =0;\n   if ((abs(userVal1)) > (abs(userVal2)))\n   {\n      maxvalue = userVal1;\n   }\n \n   else\n   {\n      maxvalue= userVal2;\n   }\n   return maxvalue;\n}\n\n \n\n\n", "class": 0, "version": 95, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nint MaxMagnitude (int userVal1, int userVal2) {\n   int biggerVal;\n   \n   if (abs(userVal1) >= abs(userVal2)) {\n      biggerVal = userVal1;\n   }\n   else {\n      biggerVal = userVal2;\n   }\n   \n   return biggerVal;\n}\n\nint main() {\n   double firstVal;\n   double secondVal;\n   \n   cin >> firstVal >> secondVal;\n   cout << MaxMagnitude (firstVal, secondVal) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 189, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude (int input1, int input2){\n   int biggestBoy;\n   \n   if (abs(input2) > abs(input1)){\n      biggestBoy = input2;\n   }\n   else {\n      biggestBoy = input1;\n   }\n   \n   return biggestBoy;\n}\n\nint main() {\n   int input1;\n   int input2;\n   \n   cin >> input1 >> input2;\n   \n   cout << MaxMagnitude(input1, input2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 24, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2){\n   int max;\n   if (fabs(userVal1)>(fabs(userVal2))){\n      max = userVal1;\n   }\n   if (fabs(userVal1)<(fabs(userVal2))){\n      max = userVal2;\n   }\n   return max;\n   \n}\n\nint main() {\n   /* Type your code here */\n   int userInput1 = 0;\n   int userInput2 = 0;\n   \n   cin>>userInput1;\n   cin>>userInput2;\n   \n   cout<<MaxMagnitude(userInput1,userInput2)<<\"\\n\";\n\n   return 0;\n}\n", "class": 0, "version": 61, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2){\n   int max = 0;\n   if (abs(userVal1) <= abs(userVal2)){\n      max = userVal2;\n   }\n   else if (abs(userVal1) >= abs(userVal2)){\n      max = userVal1;\n   }\n   return(max);\n}\n\nint main() {\n   int val1;\n   int val2;\n   cin>>val1>>val2;\n   cout<<MaxMagnitude(val1,val2)<<endl;\n\n   return 0;\n}\n", "class": 0, "version": 36, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2){\n   int maxVal;\n   \n   if (abs(userVal1) > abs(userVal2)){\n      maxVal = userVal1;\n   }\n   else if (abs(userVal1) < abs(userVal2)){\n      maxVal = userVal2;\n   }\n   cout << maxVal << endl;\n   \n   return maxVal;\n}\n\n   \n\nint main() {\n   int mag1;\n   int mag2;\n   \n   cin >> mag1;\n   cin >> mag2;\n   \n   MaxMagnitude(mag1, mag2);\n\n   return 0;\n}\n", "class": 0, "version": 151, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n\n/* Define your function here */ \n   int MaxMagnitude(int userVal1, int userVal2) {\n      int largestVal = 0;\n      if (fabs(userVal1) > fabs(userVal2)) {\n         largestVal = userVal1;\n      }\n      else {\n         largestVal = userVal2;\n      }\n      return largestVal;\n   }\n         \n\nint main() {\n   int userVal1;\n   int userVal2;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   \n   cout << MaxMagnitude(userVal1, userVal2) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 15, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n   int total;\n   \n\n   \n   if (abs(num1) > abs(num2)) { \n      total = num1;\n   }\n   else if (abs(num2) > abs(num1)) {\n      total = num2;\n   }\n   return total;\n}\nint main() {\nint userVal1;\nint userVal2;\n\n\ncin >> userVal1;\ncin >> userVal2;\n\ncout << MaxMagnitude(userVal1, userVal2) << endl;\n\n\n   return 0;\n}\n", "class": 0, "version": 39, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2){\nint maxmag;\n\nif (fabs(userVal1)>(fabs(userVal2))){\n   maxmag = userVal1;\n   }\n   else \n   maxmag= userVal2;\n   \nreturn maxmag;\n}\n\nint main() {\nint userVal1;\nint userVal2;\n\ncin >> userVal1;\ncin >> userVal2;\n\ncout << MaxMagnitude(userVal1, userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 133, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\nint max = 0;\n\nif(abs(userVal1) > abs(userVal2))\n   {\n      max = userVal1;\n   }\nelse {\n   max = userVal2;\n}\n   return max;\n}\n\nint main() {\n\nint userVal1 = 0;\nint userVal2 = 0;\n\ncin >> userVal1;\ncin >> userVal2;\n\ncout << MaxMagnitude(userVal1,userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 180, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n#include <cmath>\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   int maxNumber;\n   if ( fabs(userVal1) >= fabs(userVal2) ) {\n      maxNumber = userVal1;\n      cout << maxNumber;\n   }\n  else {\n      maxNumber = userVal2;\n      cout << maxNumber;\n   }\n   cout << endl;\n   return maxNumber;\n}\n\n\n\n   /* Type your code here */\n   int main() {\n   int val1;\n   int val2;\n   \n   cin >> val1;\n   cin >> val2;\n   \n   MaxMagnitude(val1, val2);\n   \n\n   return 0;\n}\n\n\n", "class": 0, "version": 34, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2){\n   int n1 = abs(userVal1);\n   int n2 = abs(userVal2);\n   if(n1 < n2){\n      return userVal2;\n   }\n   else{\n      return userVal1;\n   }\n}\n\nint main() {\n   int userVal1, userVal2;\n   \n   cin>>userVal1;\n   cin>>userVal2;\n   \n   cout<<MaxMagnitude(userVal1,userVal2)<<endl;\n   return 0;\n}\n", "class": 0, "version": 49, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2, int userVal3) {\n   int maxVal;\n   maxVal = 0;\n   if ((abs(userVal1) > abs(userVal2)) && (abs(userVal1) > abs(userVal3))) {\n      maxVal = userVal1;\n   }\n   else if ((abs(userVal2) > abs(userVal1)) && (abs(userVal2) > abs(userVal3))) {\n      maxVal = userVal2;\n   }\n   else if ((abs(userVal3) > abs(userVal2)) && (abs(userVal3) > abs(userVal1))) {\n      maxVal = userVal3;\n   }\n   return  maxVal; \n}\n\nint main() {\n   \n   int userVal1;\n   int userVal2;\n   int userVal3;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   cin >> userVal3;\n   \n   cout << MaxMagnitude(userVal1, userVal2, userVal3) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 242, "model": "Human"}
{"problem": 1, "code": "//work with mary wang//\n#include <iostream>\nusing namespace std;\nint MaxMagnitude(int userVal1, int userVal2){\n   int n1 = abs(userVal1);\n   int n2 = abs(userVal2);\n   if(n1 < n2){\n      return userVal2;\n   }\n   else{\n      return userVal1;\n   }\n}\n\nint main()\n{\n   int userVal1, userVal2;\n   \n   cin>>userVal1;\n   cin>>userVal2;\n   \n   cout<<MaxMagnitude(userVal1,userVal2)<<endl;\n   return 0;\n}", "class": 0, "version": 268, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n#include <cstdlib>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   int greaterValue;\n   \n   if (fabs (userVal1) >= fabs (userVal2)) {\n      greaterValue = userVal1;\n   }\n   else if (fabs (userVal1) < fabs (userVal2)) {\n      greaterValue = userVal2;\n   }\n   \n   return greaterValue;\n}\n\nint main() {\n   \n   int userVal1;\n   int userVal2;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   \n   cout << MaxMagnitude(userVal1, userVal2) << endl;\n  \n   return 0;\n}\n", "class": 0, "version": 170, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2){\nif(abs(userVal1) < abs(userVal2)){return userVal2;}\nelse{return userVal1;}\n}\nint main() {\n   /* Type your code here */\nint val1;\nint val2;\ncin>>val1;\ncin>>val2;\ncout<<MaxMagnitude(val1, val2)<<endl;\n   return 0;\n}\n", "class": 0, "version": 259, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n \nint largestMagnitude;\n\nint MaxMagnitude(int userVal1, int userVal2){\n   if(abs(userVal1) > abs(userVal2)){\n     largestMagnitude = userVal1;\n   }else{\n     largestMagnitude = userVal2;\n   }\n cout<<largestMagnitude<< endl;\nreturn largestMagnitude;\n}\n\nint main() {\n   int userVal1;\n   int userVal2;\n   cin >> userVal1;\n   cin >> userVal2;\n   MaxMagnitude(userVal1, userVal2);\n\n   return 0;\n}\n", "class": 0, "version": 222, "model": "Human"}
{"problem": 1, "code": "#include<iostream>\n#include<cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2){\n   int n1 = abs(userVal1);\n   int n2 = abs(userVal2);\n   if(n1 < n2){\n      return userVal2;\n   }\n   else{\n      return userVal1;\n   }\n}\n\nint main()\n{\n   int userVal1, userVal2;\n   \n   cin>>userVal1;\n   cin>>userVal2;\n   \n   cout<<MaxMagnitude(userVal1,userVal2)<<endl;\n   return 0;\n}", "class": 0, "version": 234, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\nint MaxMagnitude(int userVal1, int userVal2){\n   int n1 = abs(userVal1);\n   int n2 = abs(userVal2);\n   if(n1 < n2){\n      return userVal2;\n   }\n   else{\n      return userVal1;\n   }\n}\n/* Define your function here */ \n\nint main() {\n    int userVal1, userVal2;\n   \n   cin>>userVal1;\n   cin>>userVal2;\n   \n   cout<<MaxMagnitude(userVal1,userVal2)<<endl;\n   /* Type your code here */\n\n   return 0;\n}\n", "class": 0, "version": 95, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude (int userVal1, int userVal2) {\n   if (abs(userVal1) > abs (userVal2)) {\n      return userVal1;\n   }\n   else {\n      return userVal2;\n   }\n}\n\nint main() {\n\nint numOne = 0;\nint numTwo = 0;\n\ncin >> numOne >> numTwo;\n\ncout << MaxMagnitude (numOne, numTwo) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 60, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   \n   int final;\n   \n \n   \n   if ( ( fabs( userVal1 ) ) < ( fabs( userVal2) ) ) {\n      \n      final = userVal2;\n   }\n   \n   else {\n      final = userVal1;\n   }\n   \n   return final;\n}\n\nint main() {\n   \n   int num1;\n   int num2;\n   \n   cin >> num1 >> num2;\n   \n   cout << MaxMagnitude ( num1, num2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 112, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2, int userVal3) {\n   int maxMagnitude; \n   int currValue; \n   int numOne; \n   int numTwo; \n   int numThree; \n   \n   numOne = abs(userVal1); \n   numTwo = abs(userVal2); \n   numThree = abs(userVal3); \n   \n   currValue = 0; \n   \n   if (numOne >= currValue) {\n      maxMagnitude = userVal1; \n      if (numOne > numTwo) {\n         maxMagnitude = userVal1;\n         if (numOne > numThree) {\n            maxMagnitude = userVal1;\n         }\n         else if (numThree > numOne) {\n            maxMagnitude = userVal3; \n         }\n      }\n      else if (numTwo > numOne) {\n         maxMagnitude = numTwo;\n         if (numTwo > numThree) {\n            maxMagnitude = userVal2;\n         }\n         else if (numThree > numTwo) {\n            maxMagnitude = userVal3; \n         }\n      }\n   }\n   \n   return maxMagnitude; \n   \n}\n\n\nint main() {\n   int userVal1;\n   int userVal2; \n   int userVal3; \n   \n   cin >> userVal1;\n   cin >> userVal2;\n   cin >> userVal3;\n   \n   cout << MaxMagnitude( userVal1, userVal2, userVal3) << endl; \n\n   return 0;\n}\n", "class": 0, "version": 160, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude (int userVal1, int userVal2) {\n   int temp;\n   \n   cin >> userVal1;   \n   cin >> userVal2;\n   if (abs(userVal1) > abs(userVal2)) {\n      temp = userVal1;\n   }\n   else {\n      temp = userVal2;\n   }\n   return (temp);\n}\n\nint main() {\n   /* Type your code here */\n   int userVal1;\n   int userVal2;\n   \n   cout << MaxMagnitude (userVal1, userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 91, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude (int userVal1, int userVal2) {\n   \n   if (fabs(userVal1) > fabs(userVal2) ) {\n      cout << userVal1 << endl;\n   \n   return userVal1;   \n      \n   }\n   \n   else {\n      cout << userVal2 << endl;\n      \n   return userVal2; \n   \n   }\n\n}\n\nint main() {\n   int first;\n   int second;\n   \n   cin >> first;\n   cin >> second; \n   \n   MaxMagnitude (first, second);\n   \n   \n   return 0;\n}\n", "class": 0, "version": 91, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude (int inputA, int inputB) {\n   int maxMag;\n   if (fabs(inputA) > fabs(inputB)) {\n      maxMag = inputA;\n   }\n   if (fabs(inputA) < fabs(inputB)) {\n      maxMag = inputB;\n   }\n   \n   return maxMag;\n}\n\nint main() {\n   int inputA;\n   int inputB;\n   \n   cin >> inputA;\n   cin >> inputB;\n   \n   cout << MaxMagnitude(inputA, inputB) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 169, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2){\n   int maxValue;\n   if (fabs(userVal1) > fabs(userVal2)){\n      maxValue = userVal1;\n   }\n   else if (fabs(userVal1) < fabs(userVal2)){\n      maxValue = userVal2;\n   }\n   cout << maxValue << endl;\n   return maxValue;\n}\n\nint main() {\n   int val1;\n   int val2;\n   cin >> val1 >> val2;\n   \n   MaxMagnitude(val1, val2);\n\n   return 0;\n}\n", "class": 0, "version": 208, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include<cmath>\nusing namespace std;\nint MaxMagnitude(int userVal1, int userVal2){\n   int n1= abs(userVal1);\n   int n2= abs(userVal2);\n   if(n1<n2)\n   {\n   return userVal2;\n   }\n   else\n   {\n      return userVal1;\n   }\n}\n/* Define your function here */ \n\nint main() {\n int userVal1,userVal2;\n cin>>userVal1;\n cin>>userVal2;\n cout<<MaxMagnitude(userVal1,userVal2)<<endl;\n \n \n\n   return 0;\n}\n", "class": 0, "version": 301, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n#include <cmath>\n\nint MaxMagnitude(int userVal1, int userVal2){\n   int numMax;\n   if (abs(userVal1) > abs(userVal2)){\n      numMax = userVal1;\n   }\n   else if  (abs(userVal1) < abs(userVal2)){\n      numMax = userVal2;\n   }\n   else{ \n      numMax = userVal2;\n   }\n   return numMax;\n}\n   \n   \n      \n\nint main() {\n   \n   int userVal1;\n   int userVal2;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   \n   cout << MaxMagnitude( userVal1,  userVal2)<<endl;\n   \n   return 0;\n}\n", "class": 0, "version": 94, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   int maxInput = 0;\n   \n\n   if (abs(userVal1) <= abs(userVal2)) {\n      maxInput = userVal2;   \n   }\n   else {\n      maxInput = userVal1;\n   }\n   return maxInput;\n}\n\n\nint main() {\n   int inputOne;\n   int inputTwo;\n   \n   cin >> inputOne;\n   cin >> inputTwo;\n   cout << MaxMagnitude(inputOne, inputTwo) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 178, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2, int userVal3) {\n   int v1 = (userVal1);\n   int v2 = (userVal2);\n   int v3 = (userVal3);\n   int maxVal;\n   \n   if ((v1 >= 0) || (v2 >= 0) || (v3 >= 0)) {\n      if (v1 >= v2) { \n         if (v1 >= v3) {\n            maxVal = v1;\n         }\n      }\n      else if (v2 >= v3) {\n         maxVal = v2;\n      }\n      else {\n         maxVal = v3;\n      }\n   }\n   \n   if ((v1 < 0) || (v2 < 0) || (v3 < 0)) {\n      if (v1 <= v2) { \n         if (v1 <= v3) {\n            maxVal = v1;\n         }\n      }\n      else if (v2 <= v3) {\n         maxVal = v2;\n      }\n      else {\n         maxVal = v3;\n      }\n   }\n   return maxVal;\n}\n\nint main() {\n   int Val1;\n   int Val2;\n   int Val3;\n   \n   cin >> Val1 >> Val2 >> Val3;\n   \n   cout << MaxMagnitude(Val1, Val2, Val3) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 243, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2){\n   int output;\n   if(abs(userVal1) >= abs(userVal2)){\n      output = userVal1;\n   }\n   else{\n      output = userVal2;\n   }\n   return output;\n}\n\nint main() {\n   int input1;\n   int input2;\n   cin >> input1 >> input2;\n   \n   cout << MaxMagnitude(input1, input2) << endl;\n   return 0;\n}\n", "class": 0, "version": 19, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2);\n\n/* Define your function here */ \n\nint main() {\n   int userVal1 = 0;\n   int userVal2 = 0;\n   int result; \n\n   cin >> userVal1;\n\n   cin >> userVal2;\n\n   result = MaxMagnitude (userVal1, userVal2); \n\n   cout << result;\n   \n   cout << endl; /* Type your code here */\n\n   return 0;\n}\n\n   int MaxMagnitude(int userVal1, int userVal2) \n   {\n      int maxValue = 0; \n      \n      if (abs (userVal1) > abs(userVal2)) \n      {\n         maxValue = userVal1;\n      }\n      \n      else\n      {\n         maxValue = userVal2;\n      }\n      \n      return maxValue;\n      \n       cout << endl;\n   }\n   ", "class": 0, "version": 5, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2){\n if(abs(userVal1) > abs(userVal2)){\n  return userVal1;   \n }\n return userVal2;\n \n}\n\nint main() {\n   int userVal1; \n   int userVal2; \n   cin >> userVal1 >> userVal2; \n   cout << (MaxMagnitude(userVal1, userVal2)) << endl;\n   \n   /* Type your code here */\n\n   return 0;\n}\n", "class": 0, "version": 308, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2){\n   int maxVal=0;\n      if(abs(userVal1)>abs(maxVal)){\n         maxVal=(userVal1);\n      }\n      if (abs(userVal2)>abs(maxVal)){\n         maxVal=userVal2;\n      }\n      return maxVal;\n}\n   \n\nint main() {\n   int val1;\n   int val2;\n   int maxM;\n   cin >> val1;\n   cin >> val2;\n   maxM = MaxMagnitude(val1, val2);\n   cout << maxM << endl;\n\n   return 0;\n}\n", "class": 0, "version": 213, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude (int userVal1,int userVal2) {\n   if(abs(userVal1) > abs(userVal2))\n   return userVal1;\n   else\n   return userVal2;\n}\n\nint main() {\n   int userVal1,userVal2;\n   cin >> userVal1 >> userVal2;\n   cout<< MaxMagnitude(userVal1,userVal2) <<endl;\n\n   return 0;\n}\n", "class": 0, "version": 281, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int a, int b){\n   int c = fabs(a);\n   int d = fabs(b);\n   int max;\n   \n   if (c > d) { max = a;}\n   else if (d > c) { max = b;}\n   \n   return max;}/* Define your function here */ \n\nint main() {\n   int x, y;\n   cin >> x >> y;\n   \n   cout << MaxMagnitude(x, y) << endl;/* Type your code here */\n\n   return 0;\n}\n", "class": 0, "version": 2, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \n\nint MaxMagnitude(int userVal1, int userVal2) { \n   int maxNum; \n   if (abs(userVal1) > abs(userVal2)) { \n      maxNum = userVal1; \n   } \n   else { \n       maxNum = userVal2;\n   } \n   return maxNum; \n} \n\nint main() {\n   int userVal1; \n   int userVal2;\n   int maxNum; \n   cin>> userVal1; \n   cin >>userVal2; \n   maxNum = MaxMagnitude(userVal1,userVal2); \n   cout << maxNum; \n   cout << endl; \n   \n   /* Type your code here */\n\n   return 0;\n}\n", "class": 0, "version": 28, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   return userVal2;\n}\n\nint main() {\n\n   int MaxMagnitude;\n   int userVal1;\n   int userVal2;   \n   \n   cin >> userVal1;\n   cin >> userVal2;\n   \n   if (fabs(userVal1) > fabs(userVal2)) {\n      MaxMagnitude = userVal1;\n      cout << MaxMagnitude << endl;\n   }\n   else {\n      MaxMagnitude = userVal2;\n      cout << MaxMagnitude << endl;\n\n   }   \n   \n   return 0;\n}\n\n \n", "class": 0, "version": 9, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   int max;\n   int abs1;\n   int abs2;\n   \n   abs1 = fabs (userVal1);\n   abs2 = fabs (userVal2);\n   if (abs1 > abs2) {\n      max = userVal1;\n   }\n   else {\n      max = userVal2;\n   }\n   return max;\n}\n\nint main() {\n   int x;\n   int y;\n   \n   cin >> x;\n   cin >> y;\n   cout << MaxMagnitude (x, y) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 34, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2, int userVal3) {\n   if ( abs(userVal1) > abs(userVal2) && abs(userVal1) > abs(userVal3) ) {\n      return userVal1;\n   }\n   else if ( abs(userVal2) > abs(userVal1) && abs(userVal2) > abs(userVal3) ) {\n      return userVal2;\n   }\n   else {\n      return userVal3;\n   }\n}\n\nint main() {\n\n   int Var1;\n   int Var2;\n   int Var3;\n\n   cin >> Var1;\n   cin >> Var2;\n   cin >> Var3;\n\n   cout << MaxMagnitude(Var1, Var2, Var3) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 38, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2){\n   if ((abs(userVal1)> abs(userVal2))){\n      \n      return userVal1;\n   }\n      \n      \n   if ((abs(userVal2)> abs(userVal1))){\n      \n      return userVal2;\n   }\n}\n      \n\nint main() {\n  \n   \n   \n\n   return 0;\n}\n\n", "class": 0, "version": 118, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude (int userVal1, int userVal2) {\n   int Greater;\n   \n   if (fabs (userVal1) > fabs (userVal2)) {Greater = userVal1;}\n   else {Greater = userVal2;}   \n   \n   return Greater;\n}\n\nint main() {\n\n   int Input1;\n   int Input2;\n   \n   cin >> Input1;\n   cin >> Input2;\n   \n   cout << MaxMagnitude (Input1, Input2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 43, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   \n   if (fabs(userVal1) >= fabs(userVal2)) {\n      return userVal1;\n   }\n   else {\n     return userVal2;\n   }\n   \n}\n\nint main() {\n   int val1;\n   int val2;\n   \n   cin >> val1;\n   cin >> val2;\n   \n   cout << MaxMagnitude(val1, val2) << endl;\n\n\n   return 0;\n}\n", "class": 0, "version": 154, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude (int userVal1, int userVal2) {\n\n   int max;\n\n   if (abs(userVal1) > abs(userVal2)){  \n      max = userVal1;   \n }\n\n   else {\n      max = userVal2;\n }\n\n return max; \n}\n\nint main() {\n\n  int idk1;\n  int idk2;\n\n cin >> idk1;  \n cin >> idk2;  \n\n  cout << MaxMagnitude(idk1, idk2) << endl;  \n\n  return 0;\n\n}\n", "class": 0, "version": 117, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2){\n   if(abs(userVal1) > abs(userVal2)){\n      return userVal1;\n   }\n   else{\n      return userVal2;\n   }\n}\n\nint main() {\n   int num1;\n   int num2;\n   \n   cin >> num1;\n   cin >> num2;\n   \n   cout << MaxMagnitude(num1, num2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 177, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2, int userVal3) {\n   if ((((abs(userVal1)) > (abs(userVal2))) && ((abs(userVal1)) > (abs(userVal3))))) {\n      return userVal1;\n   }\n   if (((abs(userVal2)) > (abs(userVal1))) && ((abs(userVal2)) > (abs(userVal3)))) {\n      return userVal2;\n   }\n   if (((abs(userVal3)) > (abs(userVal2))) && ((abs(userVal3)) > ((abs(userVal1))))) {\n      return userVal3;\n   }\n   return 0;\n}\n\n\n\nint main() {\n   int num1;\n   int num2;\n   int num3;\n   \n   cin >> num1;\n   cin >> num2;\n   cin >> num3;\n   \n   cout << MaxMagnitude(num1, num2, num3) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 82, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2)\n{\n   int val1 = fabs(userVal1);\n   int val2 = fabs(userVal2);\n   int result;\n   \n   if(val1 > val2)\n   {\n      result = userVal1; \n   }\n   else if(val2 > val1)\n   {\n      result = userVal2;\n   }\n}\n\nint main() {\n   int userVal1;\n   int userVal2;\n   int result;\n   \n   cin >> userVal1 >> userVal2;\n   \n   result = MaxMagnitude(userVal1, userVal2);\n   \n   cout << result << endl;\n   return 0;\n}\n", "class": 0, "version": 100, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\r\n#include<cmath>\r\nusing namespace std;\r\n//MaxMagnitude Function returns absolute value\r\nint MaxMagnitude(int userVal1,int userVal2){\r\n    if(abs(userVal1)>abs(userVal2))\r\n    {\r\n        return userVal1;\r\n    }\r\n    else return userVal2;\r\n}\r\n\r\nint main() {\r\n    //declaration of variables\r\n    int userVal1,userVal2,LargestMagnitudeValue;\r\n    //line 17 takes user input \r\n    cin>>userVal1>>userVal2;\r\n    //Function Call\r\n    LargestMagnitudeValue=MaxMagnitude(userVal1,userVal2);\r\n    cout<<LargestMagnitudeValue;\r\n    return 0;\r\n}\r\n", "class": 0, "version": 104, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude (int userVal1, int userVal2) {\n   if ((abs(userVal1)) > (abs(userVal2))) {\n      return userVal1;\n   }\n   else {\n      return userVal2;\n   }\n}\n\nint main() {\n   /* Type your code here */\n   int val1, val2;\n   cin >> val1;\n   cin >> val2;\n   cout << MaxMagnitude (val1, val2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 248, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2, int userVal3) {\n   int result;\n   \n   if ( ((abs(userVal1)) > (abs(userVal2))) && ((abs(userVal1)) > (abs(userVal3))) ) {\n      result = userVal1;\n   }\n   else if ( ((abs(userVal2)) > (abs(userVal1))) && ((abs(userVal2)) > (abs(userVal3))) ) {\n      result = userVal2;\n   }\n   else if ( ((abs(userVal3)) > (abs(userVal1))) && ((abs(userVal3)) > (abs(userVal2))) ) {\n      result = userVal3;\n   }\n   \n   return result;\n}\n\nint main() {\n   int num1;\n   int num2;\n   int num3;\n   int largestVal;\n   \n   cin >> num1;\n   cin >> num2;\n   cin >> num3;\n   \n   largestVal = MaxMagnitude(num1, num2, num3);\n   \n   cout << largestVal << endl;\n\n   return 0;\n}\n", "class": 0, "version": 46, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2){\n   if (abs(userVal1) > abs(userVal2)){\n      return userVal1;\n   } else {\n      return userVal2;\n   }\n   \n}\n\nint main() {\n   int num1;\n   int num2;\n   \n   cin >> num1;\n   cin >> num2;\n   \n   cout << MaxMagnitude(num1, num2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 84, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2)\n{\n   int num1 = abs(userVal1);\n   int num2 = abs(userVal2);\n   if (num1<num2)\n   {\n      return userVal2;\n   }\n   else\n   {\n      return userVal1;\n   }\n}\n\nint main() {\n  int userVal1, userVal2;\n   cin>>userVal1;\n   cin>>userVal2;\n   cout<<MaxMagnitude(userVal1,userVal2)<<endl;\n   return 0;\n\n   return 0;\n}\n", "class": 0, "version": 225, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\ndouble MaxMagnitude (int x, int y) {\nint bigNum; \n   if (abs (x) > abs (y)) {\n      bigNum = x;\n   }\n   else {\n      bigNum = y;\n   }\n   return bigNum;\n}\n\nint main() {\nint first;\nint second;\ncin >> first;\ncin >> second;\ncout << MaxMagnitude (first,second) << endl; \n\n   return 0;\n}\n", "class": 0, "version": 258, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude (int x, int y) {\n   if (abs(x) > abs(y)) {\n      return x;\n   }\n   else if (abs(x) < abs(y)) {\n      return y;\n   }\n}\n\nint main() {\n   int x;\n   int y;\n   \n   cin >> x >> y;\n   cout << MaxMagnitude (x,y) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 12, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   \n   if (abs(userVal1) > abs(userVal2)) {\n      return userVal1; \n   }\n   else\n      return userVal2;\n}   \n\nint main() {\n   int a, b;\n   \n   cin >> a;\n   cin >> b;\n   \n   cout << MaxMagnitude(a, b) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 274, "model": "Human"}
{"problem": 1, "code": "#include <cmath>\n#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1,int userVal2){\n   if(fabs(userVal1)>fabs(userVal2)){\n     return userVal1;}\n   if(userVal1<fabs(userVal2)){\n      return userVal2;}\n   else if(userVal1>userVal2){\n     return userVal1;}\n      \n   else{\n      return userVal2;}}\n\nint main() {\n   /* Type your code here */\nint userVal1;\n   int userVal2;\n  cin>>userVal1;\n  cin>>userVal2;\n  cout<< MaxMagnitude(userVal1,userVal2)<<endl;\n   /* Type your code here */\nreturn MaxMagnitude(userVal1,userVal2);\n   return 0;\n}\n", "class": 0, "version": 62, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2){\n   if(abs(userVal1) >= abs(userVal2)){\n      return userVal1;\n      }\n   else{\n      return userVal2;\n      }\n   }\n\nint main() {\n   int val1;\n   int val2;\n   \n   cin >> val1;\n   cin >> val2;\n   \n   cout << MaxMagnitude(val1, val2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 16, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath> \nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude ( int userVal1 , int userVal2 ){\n      \n    if ( fabs(userVal1) < fabs(userVal2) ) {\n       \n       return userVal2;\n    }\n    \n    else {\n       \n       return userVal1;\n    }\n    \n}\n      \n         \n\nint main() {\n   /* Type your code here */\n   \n   int userVal1;\n   int userVal2;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   \n   cout << MaxMagnitude ( userVal1 , userVal2 );\n   cout << endl;\n\n   return 0;\n}\n", "class": 0, "version": 114, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2)\n{\n   int MaxVal;\n   fabs(userVal1);\n   fabs(userVal2);\n   \n   if (fabs(userVal1) > fabs(userVal2))\n   {\n      MaxVal = userVal1;\n   }\n   else if (fabs(userVal1) < fabs(userVal2))\n   {\n      MaxVal = userVal2;\n   }\n   \n   return MaxVal;\n}\n\nint main() {\n   /* Type your code here */\n   int userVal1;\n   int userVal2;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   \n   \n   \n   cout << MaxMagnitude(userVal1, userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 249, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2){\n   \n   int max = 0; \n   \n   if ( abs(userVal1) > abs(userVal2)) {\n   max = userVal1;\n   }\n   else {\n   max = userVal2; \n   }\n   return max;\n}\n\nint main() {\n   int userVal1;\n   int userVal2;\n   \n   cin >> userVal1 >> userVal2;\n\n   cout << MaxMagnitude(userVal1, userVal2) << endl;\n\n\n   return 0;\n}\n", "class": 0, "version": 79, "model": "Human"}
{"problem": 1, "code": "//Got help from Selen Gokcen//\n#include <iostream>\n#include <cstdlib>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2, int userVal3) {\n   int numberMax;\n   \n   if ((fabs(userVal3) > fabs(userVal2)) && (fabs(userVal3) > fabs(userVal1))) {\n      numberMax = userVal3;\n   }\n   if ((fabs(userVal2) > fabs(userVal3)) && (fabs(userVal2) > fabs(userVal1))) {\n      numberMax = userVal2;\n   }\n   if ((fabs(userVal1) > fabs(userVal2)) && (fabs(userVal1) > fabs(userVal3))) {\n      numberMax = userVal1;\n   }\n   return numberMax;\n}\n\nint main() {\n   int input1;\n   int input2;\n   int input3;\n   \n   cin >> input1;\n   cin >> input2;\n   cin >> input3;\n   \n   cout << MaxMagnitude(input1, input2, input3) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 199, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude( int userVal1, int userVal2) \n{ \n\n  if(abs(userVal1) > abs(userVal2)) {\n     return userVal1;\n  }\n  else {\n     return userVal2;\n  }\n}\n\nint main() {\n\nint userVal1;\nint userVal2;\n\ncin>> userVal1 >>userVal2;\n\ncout << MaxMagnitude(userVal1,userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 22, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   int maxValue;\n   \n   if (fabs(userVal1) > fabs(userVal2)) {\n      maxValue = userVal1;\n      cout << maxValue << endl;\n   }\n   else if (fabs(userVal1) < fabs(userVal2)) {\n      maxValue = userVal2;\n      cout << maxValue << endl;\n   }\n   \n   return maxValue;  \n}\n\n\nint main() {\n   int userNum1;\n   int userNum2;\n   \n   cin >> userNum1 >> userNum2;\n   \n   MaxMagnitude(userNum1, userNum2);\n   \n   return 0;\n}\n", "class": 0, "version": 32, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2) {\n   if ((abs (userVal1)) > (abs (userVal2))) {\n      return userVal1;\n      }\n   if ((abs (userVal2)) > (abs (userVal1))) {\n      return userVal2;\n      }\n   }\n\nint main() {\n   /* Type your code here */\n   int userVal1;\n   int userVal2;\n   cin >> userVal1;\n   cin >> userVal2;\n   cout << MaxMagnitude(userVal1, userVal2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 13, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2){\n   if (abs(userVal1)>abs(userVal2))\n   return userVal1;\n   else\n   return userVal2;}\n\nint main() {\n   int userVal1, userVal2;\ncin >> userVal1 >> userVal2;\ncout << MaxMagnitude(userVal1,userVal2) <<  endl;\n\n   return 0;\n}\n", "class": 0, "version": 175, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \n\nint MaxMagnitude(int userVal1, int userVal2){\n   \n   int maxVal;\n   \n   \n   if (abs(userVal1) > abs(userVal2)) {\n      \n      maxVal = userVal1;\n      \n   }\n   else {\n         \n      maxVal = userVal2;\n      \n   }\n   \n   return maxVal;\n   \n}\n\nint main() {\n   /* Type your code here */\n   \n   int num1;\n   int num2;\n   \n   \n   cin >> num1;\n   cin >> num2;\n   \n   cout << MaxMagnitude (num1,num2) << endl;\n   \n   \n\n\n   return 0;\n}\n", "class": 0, "version": 76, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2, int userVal3) {\n   int maxMag;\n   int val1;\n   int val2;\n   int val3;\n   \n   val1 = userVal1;\n   val2 = userVal2;\n   val3 = userVal3;\n   \n   val1 = abs(userVal1);\n   val2 = abs(userVal2);\n   val3 = abs(userVal3);\n   \n   maxMag = val1; \n   \n   if (val2 > maxMag) {\n      maxMag = userVal2;\n   }\n   if (val3 > maxMag) {\n      maxMag = userVal3;\n   }\n   else {\n      maxMag = userVal1;\n   }\n   \n   return maxMag;\n}\n\nint main() {\n   int userVal1;\n   int userVal2;\n   int userVal3;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   cin >> userVal3;\n   \n   cout << MaxMagnitude(userVal1, userVal2, userVal3) << endl;\n   return 0;\n}\n", "class": 0, "version": 44, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2) \n{\n   int maxVal;\n   \n   if (fabs(userVal1) > fabs(userVal2)) {\n      maxVal = userVal1;\n   }\n   \n   else {\n      maxVal = userVal2;\n   }\n   \n   return maxVal;\n}\n   \nint main() {\n   /* Type your code here */\n   int num1;\n   int num2;\n   int greaterNum;\n   \n   cin >> num1 >> num2;\n   \n   greaterNum = MaxMagnitude(num1, num2);\n   \n   cout << greaterNum << endl;\n\n   return 0;\n}\n", "class": 0, "version": 75, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n#include <cmath>\n\n/* Define your function here */ \nint MaxMagnitude(int x, int y)\n{\n   if(fabs(x) > fabs(y))\n   {\n      return x;\n   }\n   else\n   {\n      return y;\n   }\n}\nint main() {\n   /* Type your code here */\nint num1;\nint num2;\ncin >> num1;\ncin >> num2;\n\ncout << MaxMagnitude(num1,num2) << endl;\n   return 0;\n}\n", "class": 0, "version": 164, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude (int userVal1, int userVal2)   {\n   int output;\n   cin >> userVal1;\n   cin >> userVal2;\n   \n   if (abs(userVal1) > abs(userVal2))   {\n      output = userVal1;\n   }\n   else if (abs(userVal2) > abs(userVal1)) {\n      output = userVal2;\n   }\n   \nreturn output; \n\n}\n\nint main() {\n   int userVal1;\n   int userVal2; \n   \n   cin >> userVal1 >> userVal2; \n   \n   cout << MaxMagnitude (userVal1, userVal2) << endl;\n   \n   \n\n   return 0;\n}\n", "class": 0, "version": 31, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\nint MaxMagnitude ;\nif ((userVal1) > (userVal2)) {\n   MaxMagnitude = userVal1 ;\n}\nelse {\n   MaxMagnitude = userVal2 ;\n}\nreturn MaxMagnitude ;\n\n}\n\nint main() {\n   int userVal1 ;\n   int userVal2 ;\n   cin >> userVal1 >> userVal2 ;\n   cout << MaxMagnitude(userVal1, userVal2) << endl ;\n\n   return 0;\n}\n", "class": 0, "version": 79, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   int max;\n   if (fabs(userVal1) > fabs(userVal2)) {\n      max = userVal1;\n   }\n   else {\n      max = userVal2;\n   }\n   return max;\n}\n\nint main() {\n   int num1;\n   int num2;\n   int maxNum;\n   \n   cin >> num1;\n   cin >> num2;\n   \n   maxNum = MaxMagnitude(num1,num2);\n   cout << maxNum << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 18, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2, int userVal3)\n{\n   int max;\n   if (userVal1 == userVal2 && userVal2 == userVal3)\n   {\n      max = userVal1;\n   }\n   if (fabs(userVal1) > fabs(userVal2) && fabs(userVal1) > fabs(userVal3))\n   {\n      max = userVal1;\n   }\n   if (fabs(userVal2) > fabs(userVal1) && fabs(userVal2) > fabs(userVal3))\n   {\n      max = userVal2;\n   }\n   if (fabs(userVal3) > fabs(userVal1) && fabs(userVal3) > fabs(userVal2))\n   {\n      max = userVal3;\n   }\n   return max;\n      \n}\n\nint main() \n{\n   int val1;\n   int val2;\n   int val3;\n   \n   cin >> val1;\n   cin >> val2;\n   cin >> val3;\n   \n   cout << MaxMagnitude(val1, val2, val3) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 66, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath> \nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2){\n   int max;\n   \n   if (abs(userVal1) > abs(userVal2)){\n      max = userVal1;   \n   }else if (abs(userVal2) > abs(userVal1)){\n      max = userVal2;  \n   }\n   cout << max << endl;\n   return max;\n     \n}\n\nint main() {\n   /* Type your code here */\n   int num1;\n   int num2;\n   \n   cin >> num1;\n   cin >> num2;\n   \n   MaxMagnitude(num1,num2);\n\n   return 0;\n}\n", "class": 0, "version": 211, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude(int userVal1, int userVal2)\n{   \n   if (abs(userVal2) >= abs(userVal1))\n   {\n      cout << userVal2 << endl;\n      return userVal2;\n   }\n   else if (abs(userVal2) <= abs(userVal1))\n   {\n      cout << userVal1 << endl;\n      return userVal1;\n   }\n\n}\n   \n   \n\nint main() {\n   /* Type your code here */\n   int num1, num2;\n   cin >> num1 >> num2;\n   MaxMagnitude( num1, num2);\n   \n   return 0;\n}\n", "class": 0, "version": 8, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2, int userVal3){\n   int mag;\n   mag = 0;\n   if (fabs(userVal1) > fabs(userVal2)){\n      if (fabs(userVal1) > fabs(userVal3)) {\n         mag = userVal1;\n      }\n      else {\n         mag = userVal3;\n      }\n   }\n   else if (fabs(userVal2) > userVal3){\n      mag = userVal2; \n   }\n   else {\n      mag = userVal3;\n   }\n   return mag;\n   }\n\nint main() {\n   int userNum1;\n   int userNum2;\n   int userNum3;\n   \n   cin >> userNum1;\n   cin >> userNum2;\n   cin >> userNum3;\n   \n   cout << MaxMagnitude(userNum1, userNum2, userNum3) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 151, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2) {\n   int maxMag;\n   \n   if (fabs(userVal1) > fabs(userVal2)) {\n      maxMag = userVal1;\n   }\n   else {\n      maxMag = userVal2;\n   }\n   \n   return maxMag;\n   \n}\n\nint main() {\n   int userVal1;\n   int userVal2;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   \n   cout << MaxMagnitude(userVal1, userVal2);\n   \n   cout << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 152, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude( int userVal1, int userVal2) {\n   int maxValue = 0;\n   \n   if (abs(userVal1) > abs(userVal2)) {\n      maxValue = userVal1;\n   }\n   else {\n      maxValue = userVal2;\n   }\n   return maxValue;\n}/* Define your function here */ \n\nint main() {\n   int userVal1;\n   int userVal2;\n   \n   cin >> userVal1;\n   cin >> userVal2;\n   cout << MaxMagnitude( userVal1, userVal2) << endl;/* Type your code here */\n\n   return 0;\n}\n", "class": 0, "version": 71, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2)   {\n   \n   if (abs(userVal1) > abs(userVal2))   {\n      return userVal1;\n   }\n   else if (abs(userVal2) > abs(userVal1))   {\n      return userVal2;\n   }\n   else   {\n      return userVal1;\n   }\n}\n\n/* Define your function here */ \n\nint main() {\n   int integer1;\n   int integer2;\n   int max;\n   \n   cin >> integer1 >> integer2;\n   \n   max = MaxMagnitude(integer1, integer2);\n   \n   cout << max << endl;/* Type your code here */\n\n   return 0;\n}\n", "class": 0, "version": 55, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nint MaxMagnitude(int userVal1, int userVal2, int userVal3) {\n   int c;   //c = MaxMagnitude\n   \n   if ( (labs(userVal1) > labs(userVal2)) &&  (labs(userVal1) > labs(userVal3)) ) {\n      c = userVal1;\n   }\n   else if ( (labs(userVal2) > labs(userVal1)) &&  (labs(userVal2) > labs(userVal3)) ) {\n      c = userVal2;\n   }\n   else if ( (labs(userVal3) > labs(userVal1)) &&  (labs(userVal3) > labs(userVal2)) ) {\n      c = userVal3;\n   }\n   \n   return c;\n}\n\nint main() {\n   int userVal1;\n   int userVal2;\n   int userVal3;\n   cin >> userVal1;\n   cin >> userVal2;\n   cin >> userVal3;\n   cout << MaxMagnitude (userVal1, userVal2, userVal3) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 56, "model": "Human"}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */ \nint MaxMagnitude (int userVal1, int userVal2) {\n   int maxNum;\n   \n   if ((fabs(userVal1)) > (fabs (userVal2))) {\n      maxNum = userVal1;\n   }\n   if ((fabs(userVal2)) > (fabs (userVal1))) {\n      maxNum = userVal2;\n   }\nreturn maxNum;\n}\nint main() {\n   int userNum1;\n   int userNum2;\n cin >> userNum1 >> userNum2;\n   /* Type your code here */\nMaxMagnitude (userNum1, userNum2);\n   return 0;\n}\n", "class": 0, "version": 118, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps1) {\n   double numOfMiles = userSteps1 / 2000.0;\n   cout << numOfMiles << endl;\n   return numOfMiles;\n}\n\nint main() {\n   double userSteps;\n   \n   cin >> userSteps;\n   \n   StepsToMiles(userSteps);\n\n   return 0;\n}\n", "class": 0, "version": 294, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles ( int userSteps){\n   double a;\n   \n   a = userSteps / 2000.0;\n return a;\n}\n\nint main() {\n   double input;\n   double output;\n   cin >> input;\n   output = StepsToMiles(input);\n   \n   cout << output << endl;\n\n   return 0;\n}\n", "class": 0, "version": 62, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint stepsIn;\n\n\ndouble StepsToMiles(int userSteps) {\n   double outMiles;\n   outMiles = userSteps / 2000.0;\n   \n   return outMiles;\n}\n\nint main() {\ncin >> stepsIn ;\n\ncout << fixed << setprecision(2);\ncout << StepsToMiles(stepsIn) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 71, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps(int userFeet){\n   return userFeet/2.5;\n}\nint main() {\n\n   double userFeet;\n   cin>>userFeet;\n   //cout<<userFeet;\n   cout<<FeetToSteps(userFeet)<<endl;\n   return 0;\n}\n", "class": 0, "version": 20, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <cctype>\nusing namespace std;\n\ndouble StepsToMiles (int userSteps) {\n   double StepsToMiles;\n   double pedometer = 2000.0;\n\n   StepsToMiles = userSteps / pedometer;\n   cout << StepsToMiles << endl;\n   return StepsToMiles;\n}\nint main() {\n   int userSteps;\n   cin >> userSteps;\n   \n   StepsToMiles(userSteps);\n   \n  return 0;\n}\n", "class": 0, "version": 124, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\ndouble StepsToMiles(double userSteps) {\n\n   return userSteps / 2000;\n}\n/* Define your function here */ \n\nint main() {\n   double steps;\n   cin >> steps;\n\n   \ncout << fixed << setprecision(2);\ncout << StepsToMiles(steps) << endl;\n   return 0;\n}\n", "class": 0, "version": 60, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps);\n\nint main() {\n   /* Type your code here */\n   int steps; // variable declaration\n\n\n\ncin >> steps; // Accept number of steps\n\ncout<<StepsToMiles(steps)<<endl; // print the miles walked\n\nreturn 0;\n\n}\n\ndouble StepsToMiles(int userSteps) // called function\n\n{\n\ndouble miles; // variable declaration\n\nmiles = (double)(userSteps/2000.0); // Find number of miles\n\nreturn miles; // return miles\n\n\n\n   return 0;\n}\n", "class": 0, "version": 55, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\ndouble FeetToSteps(double userFeet) {\n\n   return (userFeet / 2.5);\n}\n\nint main() {\n   double userFeet;\n   cin >> userFeet;\n   cout << fixed << static_cast<int>(FeetToSteps(userFeet)) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 28, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \n\n\ndouble StepsToMiles(int userSteps){\n   double miles;\n   miles= userSteps/2000.00;\n  return miles;\n}\n\nint main() {\n   /* Type your code here */\n  double total;\n  double userSteps;\n\n   cin>> userSteps;\n   total= StepsToMiles(userSteps);\n   cout<< total<<endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 98, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles (int userSteps) {\n   double miles;\n   miles = (userSteps / 2000.0);\n   \n   return miles;\n}\n\n\nint main() {\n  \n   double milesWalked;\n   \n   cin >> milesWalked;\n   /* Type your code here */\n\ncout << StepsToMiles (milesWalked)<< endl;\n   return 0;\n}\n", "class": 0, "version": 148, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps){\n   double Output;\n\n   Output = (userSteps/2000.0);\n   \n   return Output;\n}\nint main() {\n   int userSteps;{\n      cin >> userSteps;\n      cout << fixed << setprecision(2);\n      cout << StepsToMiles(userSteps) << endl;\n}\n   /* Type your code here */\n\n   return 0;\n}\n", "class": 0, "version": 9, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps) {\n   double miles;\n   \n   miles = userSteps / 2000.0;\n   \n   return miles;\n}\n\nint main() {\n   /* Type your code here */\n   int numSteps;\n   cin >> numSteps;\n   \n   cout << StepsToMiles(numSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 139, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps)\n{\n   double miles;\n   \n   miles = userSteps / 2000.0;\n   \n return miles;\n}\nint main() {\n   int userSteps;\n   \n   cin >> userSteps;\n   \n   cout << StepsToMiles(userSteps) <<endl;\n   \n   return 0;\n}\n", "class": 0, "version": 201, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(double userSteps) {\n   double outPut;\n   \n   outPut = userSteps/2000;\n   return outPut;\n}\n\nint main() {\n   double userIn;\n   \n   cin >> userIn;\n   \n   cout << StepsToMiles(userIn) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 38, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps) {\n   return userSteps/2000.0;}\n   \nint main() {\n   /* Type your code here */\nint steps;\ncin>> steps;\ncout << StepsToMiles(steps)<< endl;\n   return 0;\n}\n", "class": 0, "version": 179, "model": "Human"}
{"problem": 2, "code": "//Aiswarya Pagadala went over this lab with class during lab period\n\n#include <iostream>\n#include <iomanip>\nusing namespace std;\n\n/* Define your function here */ \nint FeetToSteps(double userFeet){\n    \n    return (userFeet / 2.5 );\n}\nint main() {\n   /* Type your code here */\n   int FeetToSteps(double userFeet);\n   double FeetInput;\n   \n   cin>> FeetInput;\n   \n   cout << FeetToSteps (FeetInput);\n   cout << endl;\n   return 0;\n}\n", "class": 0, "version": 264, "model": "Human"}
{"problem": 2, "code": "// help from Michael //\n\n#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps ( double numFeet ) {\n   double numSteps;\n   numSteps = numFeet / 2.5;\n   return static_cast <int> (numSteps);\n}\n\nint main() {\n   double feet;\n   int steps;\n   cin >> feet;\n   cin >> steps;\n   steps = FeetToSteps(feet);\n   \n   cout << steps;\n   cout << endl;\n\n   return 0;\n}\n", "class": 0, "version": 64, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */\ndouble StepsToMiles(int userSteps){\n   double total;\n   total = userSteps / 2000.0;\n   return total;\n}\n\nint main() {\n   /* Type your code here */\n   int numSteps;\n   cin >> numSteps;\n   \n   cout << StepsToMiles(numSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 32, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps)\n{\n   double milesWalked = static_cast<double>(userSteps) / 2000;\n   return milesWalked;\n}\n\n\nint main() {\n   int userSteps;\n   \n   cin >> userSteps;\n   \n   cout << StepsToMiles(userSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 119, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(double userSteps) {\n   \n   userSteps = userSteps / 2000;\n   \n   return userSteps;\n}\n\n\nint main() {\n   double userSteps;\n   \n   cin >> userSteps;\n   cout << StepsToMiles(userSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 97, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\ndouble StepsToMiles(double userSteps) {\n   double miles;\n   miles = (userSteps * 1) / 2000;\n   \n   return miles;\n} \n int main() {\n    double inputNum;\n    \n    cin >> inputNum;\n    cout << fixed << setprecision(2);\n    cout << StepsToMiles(inputNum) << endl;\n    \n   return 0;\n}", "class": 0, "version": 65, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\n/* Define your functio\nn here */ \nint FeetToSteps(double userFeet){\n  int a;\n   a=userFeet/2.5;\n   return(a);\n}\n\n\nint main() {\n   /* Type your code here */\n   double b;\n   int c;\n   c=0;\n   cin >> b;\n   cout<<FeetToSteps(b)<<endl;\n   return 0;\n}\n", "class": 0, "version": 239, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps);\n\nint main() {\n   /* Type your code here */\n   int steps;\n   double miles;\n   \n   cin >> steps;\n   \n   miles = StepsToMiles(steps);\n   cout << fixed << setprecision(2);\n   cout << miles << endl;\n   \n   return 0;\n}\n\ndouble StepsToMiles(int userSteps)\n{\n   double distance;\n   distance = userSteps/2000.0;\n   return distance;\n}\n", "class": 0, "version": 76, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\nint steps;\n    cin >> steps;\n    cout << StepsToMiles(steps) << endl;\n   return 0;\n}", "class": 0, "version": 22, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps);\n\nint main() {\n   int numSteps;\n  \n   cin >> numSteps;\n   \n   cout << numSteps / 2000.0 << endl;\n\n   return 0;\n}\n", "class": 0, "version": 22, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps (double parameter) {\n   return parameter / 2.50;\n}\n\nint main() {\n   double la;\n   cin >> la;\n   cout << FeetToSteps(la) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 136, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps(double userFeet){\n   double stepswalked;\n   stepswalked = userFeet / 2.5;\n   return static_cast <int> (stepswalked);\n}\nint main() {\n   double feet;\n   int steps;\n   \n   cin >> feet;\n   cin >> steps;\n   \n   steps=FeetToSteps(feet);\n   \n   cout << steps;\n   cout << endl;\n// helped by mike\n   return 0;\n}\n", "class": 0, "version": 95, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles (int userSteps)\n{\n   double milesWalked = userSteps / 2000.0;\n   \n   return milesWalked;\n   \n}\n\nint main() {\n   int userSteps;\n   cin >> userSteps;\n   \n   cout << StepsToMiles(userSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 256, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\n/* Define your function here */ \n\nint FeetToSteps(double numFeetWalked) {\n   int numStepsWalked;\n   numStepsWalked = numFeetWalked / 2.5;\n   return numStepsWalked;\n}\n   \nint main() {\n   double numFeetWalked;\n   cin >> numFeetWalked; \n   cout << FeetToSteps(numFeetWalked) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 25, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble  StepsToMiles ( double userSteps ){\n   double miles; \n   miles = userSteps / 2000.0;\n   \n   return miles;\n   }\n   \nint main() {\n   /* Type your code here */\n   double userSteps; \n   \n   cin >> userSteps; \n   \ncout << StepsToMiles(userSteps) << endl; \n   return 0;\n}\n", "class": 0, "version": 161, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps(double userFeet) {\n   return (userFeet / 2.5) ;\n}\n\n\nint main() {\n   int userFeet;\n   cin >> userFeet;\n   cout << FeetToSteps(userFeet) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 69, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps){\n   double SinM=2000.0;\n   double SM;\n   SM = userSteps/SinM;\n   return SM;\n}\nint main() {\n   double userInput;\n   double z;\n   cin >> userInput;\n   z=StepsToMiles(userInput);\n   cout << z << endl;\n\n   return 0;\n}\n", "class": 0, "version": 14, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps(double userFeet){\n   return userFeet / 2.5;\n}\n\nint main() {\n   double userFeet;\n   cin >> userFeet;\n   cout << FeetToSteps(userFeet) << endl;\n   return 0;\n}\n", "class": 0, "version": 99, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   double convert;\n   convert = userSteps / 2000.0;\n   \n   return convert;\n}\n\nint main() {\n   int userSteps;\n   cin >> userSteps;\n   cout << StepsToMiles(userSteps) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 130, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   return userSteps/2000.0;\n}\nint main() {\n   int steps;\n   cin >> steps;\n   cout << StepsToMiles(steps) << endl;\n   return 0;\n}\n", "class": 0, "version": 76, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \n\n   double StepsToMiles(int userSteps) \n   {\n      double done;\n      \n      done = userSteps / 2000.0;\n      \n      return done;\n   }\n      \nint main() {\n   /* Type your code here */\n   int userSteps;\n   cin >> userSteps;\n   \n   cout << StepsToMiles(userSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 255, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps)\n{\n   double miles;\n   miles = userSteps / 2000.0;\n   return miles;\n}\n   \n\nint main() {\n   int steps;\n   cin >> steps;\n   cout << StepsToMiles(steps) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 60, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps (double userFeet) {\n   int userSteps;\n   userSteps = userFeet / 2.5;\n   return userSteps;\n}\n\nint main() {\n   double feetWalked;\n   \n   cin >> feetWalked;\n   \n    cout << FeetToSteps (feetWalked) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 250, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>  \nusing namespace std;\n\ndouble StepsToMiles(int userSteps){\n   return userSteps/2000;\n  \n}\n\n\nint main() {\n   int userSteps;\n   double miles;\n   cin >> userSteps ;\n   miles = StepsToMiles(userSteps);\n   cout << miles << endl;\n \n   return 0;\n}\n", "class": 0, "version": 280, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps)\n{\n   double miles;\n   miles = userSteps/2000.0;\n   \n   return miles;\n}\n/* Define your function here */ \n\nint main() {\n   int steps;\n   \n   cin >> steps;\n   cout << StepsToMiles (steps) << endl;\n   /* Type your code here */\n\n   return 0;\n}\n", "class": 0, "version": 74, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */\ndouble StepsToMiles(int userSteps) {\n   double miles;\n   \n   miles = userSteps / 2000.0;\n   return miles;\n}\n\nint main() {\n   int stepsWalked;\n   \n   cin >> stepsWalked;\n   \n   cout << StepsToMiles(stepsWalked) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 154, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles ( double userSteps ) {\n   double milesWalked; \n   milesWalked = userSteps / 2000 ;\n   return milesWalked;\n   }/* Define your function here */ \n\nint main() {\n   int numSteps;\n   cin >> numSteps;\n   \n   cout << StepsToMiles(numSteps) << endl;/* Type your code here */\n\n   return 0;\n}\n", "class": 0, "version": 158, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps( double userFeet){\n   double feet = 2.5;\n   int numOfFeet;\n   \n   numOfFeet = userFeet / feet;\n   \n   return numOfFeet;\n}\n\n\nint main() {\n   int userFeet;\n   \n   cin >> userFeet;\n   \n   cout << FeetToSteps ( userFeet) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 85, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(double userSteps) {\n      return userSteps / 2000;\n   }\n\nint main() {\n   /* Type your code here */\n   double userSteps;\n   cin >> userSteps;\n   \n   cout << StepsToMiles(userSteps) << endl;\n   \n   \n\n   return 0;\n}\n", "class": 0, "version": 60, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps)\n{\n   double calc=userSteps/2000.0000;\n   return calc;\n}\nint main() {\n   /* Type your code here */\n  double steps;\n  cin >> steps;\n  cout << StepsToMiles(steps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 112, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   double miles;\n   \n   miles = userSteps / 2000.0;\n   \n   return miles;\n}\n\nint main() {\n   int userSteps;\n   \n   cin >> userSteps;\n   cout << StepsToMiles(userSteps) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 135, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\n\nint main() {\n     int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 138, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\n// Converting the feets into steps\nint FeetToSteps( double feetValue) {\n   int stepValue;\n   // 1 step= 2.5 feets,  1 feet = 1/2.5 steps\n   stepValue = feetValue * (1.0/2.5);\n   return stepValue;\n}\n\n\n\nint main() {\n   \n   double userFeetWalked;\n   int userStepWalked;\n   cin >> userFeetWalked;\n   userStepWalked = FeetToSteps(userFeetWalked);\n   cout << userStepWalked << endl;\n\n   return 0;\n}\n", "class": 0, "version": 24, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps){\n   double miles = userSteps / 2000.0;\n   return miles;\n   }\n\nint main() {\n   int steps;\n      \n   cin >> steps;\n   \n   cout << StepsToMiles(steps) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 33, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps (double userFeet) {\n   return userFeet / 2.5;\n}\n\nint main() {\n   double userSteps;\n   cin >> userSteps;\n   cout << FeetToSteps (userSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 67, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps) {\n    double miles;\n    miles = userSteps / 2000.0;\n    return miles;\n}\n\nint main() {\n   /* Type your code here */\n   int steps;\n   cin >> steps;\n   cout << StepsToMiles(steps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 117, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   \n   double miles = static_cast<double>(userSteps) / 2000;\n   \n   return miles;  \n}\n\n\nint main() {\n   \n   int userSteps;\n   cin >> userSteps;\n   \n   cout << StepsToMiles(userSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 65, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles (int userSteps) {\n   return userSteps/2000.0;\n   }/* Define your function here */ \n\nint main() {\n   int userSteps;\n   \n   cin >> userSteps;\n   \n   cout << StepsToMiles(userSteps) << endl;\n   \n   /* Type your code here */\n\n   return 0;\n}\n", "class": 0, "version": 4, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps)\n{\n   double numMiles;\n   numMiles = static_cast<double>(userSteps)/(2000);\n   return numMiles;\n   \n}\n   \n\nint main() {\n   double steps;\n   cin >> steps;\n   cout << StepsToMiles(steps) << endl;\n\n   return 0;\n}\n\n", "class": 0, "version": 21, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles (int steps) {\n   double miles;\n   miles = steps * 1.0 / 2000;\n   \n   return miles;\n}\n\nint main() {\n   int input;\n   cin >> input;\n   \n   cout << fixed << setprecision(2) << StepsToMiles(input) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 41, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles (int userSteps) {\n   double numMiles;\n   numMiles = userSteps/2000.0;\n   return numMiles;\n}\n\nint main() {\n   int steps;\n   cin >> steps;\n   cout << StepsToMiles(steps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 183, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   double numMiles;\n   numMiles = userSteps/ 2000.0;\n   return numMiles;\n}\n\nint main() {\n   int userSteps;\n   cin >> userSteps;\n   \n   cout << StepsToMiles(userSteps) << endl;\n   return 0;\n}\n", "class": 0, "version": 64, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles( int userSteps) {\n   double miles;\n   \n   miles = userSteps * (1.0/2000);\n   \n   return miles;\n}\n\nint main() {\n   int userSteps;\n   double urMom;\n   \n   cin >> userSteps;\n   \n   urMom = StepsToMiles(userSteps);\n   \n   cout << urMom << endl;\n   return 0;\n}\n", "class": 0, "version": 105, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles ( int userSteps) {\n   return (userSteps/2000.0);\n}\nint main() {\n   int userSteps;\n   cin >> userSteps;\n   double var = StepsToMiles(userSteps);\n   cout << var;\n   cout << endl;\n   return 0;\n}\n", "class": 0, "version": 106, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\ndouble StepsToMiles (int userSteps) {\n   double miles;\n   \n   miles = (userSteps * 1.0) / 2000.0;\n   \n   return miles;\n}\n\nint main() {\n   int stepsRecorded;\n   double milesWalked;\n   \n   cin >> stepsRecorded;\n   milesWalked = StepsToMiles(stepsRecorded);\n   \n   cout << fixed << setprecision(2);\n   cout << milesWalked << endl;\n\n   return 0;\n}\n", "class": 0, "version": 52, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps)\n{\n   return static_cast<double>(userSteps) / 2000;\n}\n\n\nint main() {\n   int n;\n   cin >> n;\n   cout << StepsToMiles(n) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 286, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\n/* Define your function here */ \ndouble FeetToSteps (int userFeet) {\n   double totalSteps;\n   const double conversionFeetToStep = 2.5;\n   totalSteps = userFeet / conversionFeetToStep;\n   \n   return totalSteps;\n}\n\nint main() {\n   \n   int userFeet;\n   \n   /* Type your code here */\n   cin >> userFeet;\n   cout << FeetToSteps (userFeet) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 166, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles (int userSteps) \n{  \n   double milesWalked;\n   milesWalked = userSteps;\n   milesWalked = milesWalked / 2000.0;\n   \n   return milesWalked;\n}\nint main() {\nint userSteps;\ncin >> userSteps;\n cout << StepsToMiles (userSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 185, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   double numMiles;\n   \n   numMiles = userSteps / 2000.0;\n   \n   return numMiles;\n}\n\nint main() {\n   int numSteps;\n   \n   cin >> numSteps;\n   \n   cout << fixed << setprecision(2);\n   cout << StepsToMiles(numSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 55, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles (int userSteps){\n   return userSteps / 2000.0;\n}\n\nint main() {\n   int numSteps; \n   cin >> numSteps; \n   cout << StepsToMiles(numSteps) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 159, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   \n   double result;\n   cin >> userSteps;\n   \n   result = double (userSteps)/2000.0;\n   \n   return result;\n}\n\n\nint main() {\n   int userSteps;\n   cin >> userSteps;\n   \n   cout << fixed << setprecision(2);\n   cout << StepsToMiles(userSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 49, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps)\n{\n   return (userSteps / 2000.0);\n}\n\nint main() {\n   int userSteps;\n   cin >> userSteps;\n   cout << StepsToMiles(userSteps) << endl;\n   return 0;\n}\n", "class": 0, "version": 140, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int steps) {\n   return steps/2000.00;\n}\n\nint main() {\n   int userSteps;\ncin >> userSteps;\ncout << StepsToMiles(userSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 293, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles (int userSteps) {\n   return userSteps / 2000.00;\n   }\n   \nint main() {\n   /* Type your code here */\n   int userSteps;\n   cin >>userSteps;\n   cout << StepsToMiles(userSteps) << endl;\n\n\n   return 0;\n}\n", "class": 0, "version": 175, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\nint steps;\n\ndouble StepsToMiles(int userSteps) {\n   double milesWalked;\n   \n   milesWalked = userSteps / 2000.0;\n   \n   return milesWalked;\n}\n\nint main() {\n   \n   cin >> steps;\n   \n   cout << StepsToMiles(steps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 123, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles (int userSteps) \n{\n   double userMiles;\n   \n   userMiles = userSteps / 2000.0;\n   \n   return userMiles;\n}\n\nint main() {\n   double userInput;\n   \n   cin >> userInput;\n   \n   cout << StepsToMiles(userInput) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 96, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps) {\n   const int STEPS_PER_MILE = 2000;\n   \n   return userSteps * (1.0 / STEPS_PER_MILE);\n}\n\n\nint main() {\n   /* Type your code here */\n   int stepsWalked;\n   \n   cin >> stepsWalked;\n   \n   cout << StepsToMiles(stepsWalked) << \"\" << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 230, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps(double userFeet)   {\n   int numSteps;\n   numSteps = userFeet / 2.5;\n   return numSteps;\n}\n\nint main() {\n\n   int numFeet;\n   \n   cin >> numFeet;\n   \n   cout << FeetToSteps(numFeet) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 26, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps){\n   return userSteps/ 2000.0;\n}\n\n\nint main() {\n   double userSteps;\n   \n   cin >> userSteps;\n   \n   cout << StepsToMiles(userSteps) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 40, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps)\n{\n   double conversion = userSteps / 2000.0;\n   return conversion;\n}\n\nint main() {\n   int userInput;\n   cin >> userInput;\n   \n   cout << StepsToMiles(userInput) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 184, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */\ndouble StepsToMiles(int userSteps){\n   return userSteps / 2000.0;\n}\n\nint main() {\n   /* Type your code here */\n   int userInput;\n   cin >> userInput;\n   cout << StepsToMiles(userInput) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 79, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int steps) {\n   double miles;\n   miles = steps/2000.0;\n   return miles;\n}\n\nint main() {\n   int userSteps;\n   \n   cin >> userSteps;\n   \n   cout << StepsToMiles(userSteps)<< endl;\n\n   return 0;\n}\n", "class": 0, "version": 194, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   double miles;\n   \n   miles = userSteps / static_cast<double>(2000);\n   \n   return miles;\n}\n\nint main() {\n   int numSteps;\n   \n   cin >> numSteps;\n   \n   cout << StepsToMiles(numSteps) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 71, "model": "Human"}
{"problem": 2, "code": "// Received assitance from TA and Slack\n\n#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps(double userFeet) {\n   return userFeet / 2.5;\n}\n\nint main() {\n   \n   double userFeet;\n   \n   cin >> userFeet;\n   \n   cout << FeetToSteps(userFeet) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 244, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   return userSteps / 2000.0;\n}\n\nint main() {\n   double numMiles;\n   \n   cin >> numMiles;\n   \n   numMiles = StepsToMiles(numMiles);\n   cout << fixed << setprecision(2);\n   cout << numMiles << endl;\n\n   return 0;\n}\n", "class": 0, "version": 17, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \n   double StepsToMiles(int userSteps)\n   {\n      return userSteps/2000.0;\n   }\n\nint main() {\n   /* Type your code here */\n   int milesWalked;\n   cin >> milesWalked;\n   \n   cout << StepsToMiles(milesWalked) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 166, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles( double userSteps) \n{\n   \n   double stepsinmiles = userSteps / 2000.00;\n   \n   return stepsinmiles;\n}\n\nint main() {\n   double totalsteps;\n   cin >> totalsteps;\n   cout << StepsToMiles( totalsteps) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 206, "model": "Human"}
{"problem": 2, "code": "// Done in lab with Aishwarya Pagadala\n#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps (double userFeet) {\n   \n   return userFeet / 2.5;\n}\n\nint main() {\n   \n   double feet;\n   cin >> feet;\n   \n   cout << FeetToSteps(feet) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 93, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <cstdlib>\n#include <iomanip>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps)\n   {\n      double numMiles;\n      \n      numMiles = userSteps / 2000.0;\n      \n      return numMiles;\n   }\n\nint main() {\n   double numSteps;\n   cin >> numSteps;\n   \n   cout << StepsToMiles(numSteps) << fixed << setprecision(4) << endl;\n\n\n   return 0;\n}\n", "class": 0, "version": 161, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int steps) {\n   return steps / 2000.0;\n}\n\nint main() {\n   /* Type your code here */\n   int numSteps;\n   \n   cin >> numSteps;\n   \n   cout << StepsToMiles(numSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 193, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps)  {\n   double answer;\n   answer=(userSteps/2000.0);\n   return answer;\n}\n\nint main() {\n   int  x;\n   int userSteps;\n   cin>>userSteps;\n x =StepsToMiles(userSteps);\n   cout<< x<<endl;\n\n   return 0;\n}\n", "class": 0, "version": 289, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps)\n{\n   double userMiles;\n  \n   userMiles = static_cast<double>(userSteps) / 2000;\n  \n   return userMiles;\n}\n\nint main() {\n   /* Type your code here */\nint userSteps;\n\ncin >> userSteps;\n\ncout << StepsToMiles(userSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 88, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps){\n   double miles = 0;\n   \n   miles = userSteps/2000.0;\n   \n   return miles;\n}\nint main() {\n   /* Type your code here */\n   int stepsInput;\n   \n   cin >> stepsInput;\n   \n   cout << StepsToMiles(stepsInput) << endl;\n   return 0;\n}\n", "class": 0, "version": 291, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles (int userSteps) {\n   \n   double miles = static_cast<double>(userSteps) / 2000;\n   \n   return miles;\n}\n\nint main() {\n   int totalSteps;\n   \n   cin >> totalSteps;\n   \n   cout << StepsToMiles (totalSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 61, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   double result;\n   result = userSteps / 2000.0;\n   return(result);\n   }\n   \nint main() {\n   double userSteps;\n   double Miles;\n   cin >> userSteps;\n   Miles = StepsToMiles(userSteps);\n   cout << Miles << endl;\n   return 0;\n}\n", "class": 0, "version": 39, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps(double userFeet) {\n   return userFeet / 2.5;\n}\n\nint main() {\n   double userFeet;\n   cin >> userFeet;\n   cout << FeetToSteps(userFeet) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 47, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   double miles = 2000.000;\n   return (userSteps)/miles;\n}\n\nint main() {\n   int steps;\n\n   cin >> steps;\n   cout << StepsToMiles(steps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 218, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   double result;\n  result = userSteps / 2000.0;\n   return result;\n}\n\nint main() {\n   int userSteps;\n   double miles;\n   \n   cin >> userSteps;\n   \n   miles = StepsToMiles(userSteps);\n   \n   cout << miles << endl;\n\n   return 0;\n}\n", "class": 0, "version": 135, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   const double Steps_Per_Mile = 2000;\n\n   return (userSteps / Steps_Per_Mile);\n}   \nint main() {\n   int stepsWalked;\n   cin >> stepsWalked;\n   cout << StepsToMiles(stepsWalked) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 131, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   return userSteps / 2000.0;\n}\n\nint main() {\n   int userInput;\n   \n   cin >> userInput;\n   \n   cout << StepsToMiles(userInput) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 63, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   return userSteps/2000.0;\n}\n\nint main() {\n   \n   int steps;\n   \n   cin >> steps;\n   cout << StepsToMiles(steps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 265, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* A pedometer treats walking 2,000 steps as walking 1 mile. \n   0) Write a program whose input is the number of steps, \n   1) and whose output is the miles walked.\n*/\n\ndouble StepsToMiles( int userSteps )\n{\n   double mile_return;\n   \n   mile_return = userSteps / 2000.0;\n   \n   return mile_return;\n}\n\nint main() {\n   \n   int userBeSteppin;\n   cin >> userBeSteppin;\n   \n   cout << StepsToMiles( userBeSteppin ) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 298, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps) {\n   double miles = static_cast<double>(userSteps)/2000;\n   return miles;\n}\nint main() {\n   /* Type your code here */\n   double steps;\n\n   cin >> steps;\n   \n   cout << fixed << setprecision(2) << StepsToMiles(steps) << endl;\n   return 0;\n}\n", "class": 0, "version": 66, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles (int userSteps) {\n   double stepsToMiles;\n   \n   stepsToMiles = userSteps / 2000.0;\n   \n   return stepsToMiles;\n}\n\nint main() {\n   /* Type your code here */\n   int userSteps;\n   \n   cin >> userSteps;\n   \n   cout << StepsToMiles (userSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 211, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps(double userFeet){\n   double totalSteps;\n   totalSteps = userFeet / 2.5;\n   return static_cast<int>(totalSteps); //Used to make a double into an integer\n}\n\nint main() {\n   double userFeet;\n   cin >> userFeet;\n   cout << FeetToSteps(userFeet) << \"\\n\";\n\n   return 0;\n}\n", "class": 0, "version": 12, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps)\n{\n   double miles = userSteps / 2000.0;\n   \n   return miles;\n}\n\nint main() {\n   int userInput;\n   \n   cin >> userInput;\n   \n   cout << StepsToMiles(userInput) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 110, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\n// worked with lab students and lab TA Stanley Zhao\n\nint FeetToSteps(double userFeet) {\n   int numStepsWalked;\n   numStepsWalked = userFeet / 2.5;\n   return numStepsWalked;\n}\nint main() {\n   double userFeet; \n   cin >> userFeet;\n   \n   cout << FeetToSteps(userFeet) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 181, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps(double userFeet) {\n   return userFeet / 2.5;\n}\n\n\nint main() {\n   double ftWalk;\n   \n   cin >> ftWalk;\n   \n   cout << FeetToSteps(ftWalk) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 262, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\n/* Define your function here */ \n\nint FeetToSteps(double userFeet) {\n   return (userFeet / 2.5);\n}\n\nint main() {\n   /* Type your code here */\n   \n   int x;\n   int y;\n   \n   cin >> x;\n   \n   y = FeetToSteps(x);\n   cout << y << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 176, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps);\n\nint main() {\n\nint steps;\n\ncin >> steps; \n\ncout<<StepsToMiles(steps)<<endl;\n\nreturn 0;\n\n}\n\ndouble StepsToMiles(int userSteps)\n\n{\n\ndouble miles;\n\nmiles = (double)(userSteps/2000.0);\n\nreturn miles;\n\n}\n", "class": 0, "version": 5, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps) {\n   \n   return (double) userSteps / 2000;\n}\n\nint main() {\n   /* Type your code here */\n   int walkSteps; //cant be the same as userSteps   \n   cin >> walkSteps;\n   \n   double miles = StepsToMiles(walkSteps);\n   \n   cout << miles << endl;\n\n   return 0;\n}\n", "class": 0, "version": 155, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles (int userSteps) {\n   double miles;\n   \n   miles = userSteps / 2000.0;\n   \n   return miles;\n}\n\nint main() {\n   int userSteps;\n   double miles;\n   \n   cin >> userSteps;\n   \n   miles = StepsToMiles (userSteps);\n   \n   \n   cout << miles << endl;\n\n   return 0;\n}\n", "class": 0, "version": 265, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(double userSteps){\n   double valueMiles;\n   valueMiles=userSteps/2000;\n   return valueMiles;}\nint main() {\n   \n   double userSteps;\n   cin>>userSteps;\n   cout<<userSteps/2000<<endl;\n   /* Type your code here */\n\n   return 0;\n}\n", "class": 0, "version": 64, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps){\n   return userSteps/2000.0;\n}\n\nint main() {\n   int userSteps;\n   cin>>userSteps;\n   cout<<StepsToMiles(userSteps)<<endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 5, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps( double userFeet) {\n   int userSteps;\n   const double FEET_PER_STEP = 2.5;\n   \n   userSteps = userFeet / FEET_PER_STEP;\n   \n   return userSteps;\n}\n\nint main() {\n   double userFeet;\n   int userSteps;\n   \n   cin >> userFeet;\n   \n   userSteps = FeetToSteps(userFeet);\n\n   cout << userSteps << endl;\n   return 0;\n}\n", "class": 0, "version": 41, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\n/* Define your function here */ \nint FeetToSteps(double userFeet) {\n   int numStepsWalked;\n   numStepsWalked = userFeet / 2.5;\n   return numStepsWalked;\n}\nint main() {\n   /* Type your code here */\n   double userFeet;\n   cin >> userFeet;\n   \n   cout << FeetToSteps(userFeet)<< endl;\n   return 0;\n}\n", "class": 0, "version": 263, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps)\n{   \n   return userSteps/2000.0;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n  \n  cout << StepsToMiles(steps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 86, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\n/* Define your function here */ \nint FeetToSteps(double userFeet) {\n   int steps;\n   steps = userFeet/2.5;\n   return steps;\n}\n   \n\nint main() {\n   /* Type your code here */\n   double userFeet;\n   cin>>userFeet;\n   cout<<FeetToSteps(userFeet)<<endl;\n   \n      \n      \n   \n      \n\n   return 0;\n}\n", "class": 0, "version": 246, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   const double STEPS_FOR_MILE = 2000.000;\n   double steps;\n   \n   steps = (userSteps / STEPS_FOR_MILE);\n   return steps;\n}\n\nint main() {\n   int stepCount;\n   \n   cin >> stepCount;\n   \n   cout << StepsToMiles(stepCount) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 77, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   double miles;\n   miles = userSteps / 2000.0;\n   return miles;\n}\n\nint main() {\n   \n   int steps;\n   double miles;\n   cin >> steps;\n   \n   miles = StepsToMiles(steps);\n   \n   cout << miles << endl;\n\n   return 0;\n}\n", "class": 0, "version": 271, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps)\n{ \n   return userSteps / 2000.0;\n}\n\nint main() {\n   int steps;\n   cin >> steps;\n   cout << StepsToMiles(steps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 297, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps) {\n   double userMiles;\n   userMiles = userSteps / 2000.0;\n   \n   return userMiles;\n}\n\nint main() {\n   /* Type your code here */\n   int userSteps;\n   cin >> userSteps;\n   cout << StepsToMiles(userSteps) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 112, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\n/* Define your function here */ \nint FeetToSteps(double numFeetWalked){\n     int x = numFeetWalked / 2.5;\n     return x;\n}\nint main() {\n   /* Type your code here */\n   double a;\n   \n   cin >> a;\n   a = FeetToSteps(a);\n   cout << a << endl;\n\n   return 0;\n}\n", "class": 0, "version": 14, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(double baseSteps) {\n   double miles;\n   miles = baseSteps / 2000;\n   return miles;\n}\n\nint main() {\n   double userSteps;\n   \n   cin >> userSteps;\n   \n   cout << StepsToMiles(userSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 186, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps(double userFeet){\n   \n   return userFeet / 2.5;\n   \n}\n\nint main() {\n   double userFeet;\n   \n   cin >> userFeet;\n   \n   cout << FeetToSteps(userFeet) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 131, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps) {\n   return userSteps * (1.0 / 2000);\n}\n\nint main() {\n   /* Type your code here */\n   int stepMiles;\n   \n   cin >> stepMiles;\n   cout << StepsToMiles(stepMiles) << endl;\n   return 0;\n}\n", "class": 0, "version": 151, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\ndouble FeetToSteps(double feetWalked){ \nint steps; \n\nsteps = feetWalked / 2.5; \n\n\n\n\n\nreturn steps; \n}\nint main() {\n   double feetWalked; \n   //int stepsWalked; \n   \n   cin >> feetWalked; \n   \n   //stepsWalked = FeetToSteps(feetWalked);\n   cout << FeetToSteps(feetWalked)<< endl;\n\n   return 0;\n}\n", "class": 0, "version": 142, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles (double userSteps){\n   double toMiles;\n   toMiles = userSteps/2000;\n   \n}\n\n\nint main() {\n\ndouble stepss;\ncin >> stepss;\n cout << StepsToMiles(stepss) << endl;\n \n   return 0;\n}\n", "class": 0, "version": 85, "model": "Human"}
{"problem": 2, "code": "//Header files for I/O\n#include<iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps);\nint main()\n{\n   int step;\n   cin >> step;\n   cout << StepsToMiles(step)<< endl;\n    return 0;\n}\ndouble StepsToMiles(int userSteps) {\n   double mile = 2000;\n   return (userSteps / mile);\n}", "class": 0, "version": 41, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int);\ndouble StepsToMiles(int userSteps) {\n   double output = userSteps;\n   output /= 2000;\n   return output;\n}\n\nint main() {\n\nint input;\ndouble output;\ncin >> input;\noutput = StepsToMiles(input);\ncout << output<< endl;\n\n   return 0;\n}\n", "class": 0, "version": 64, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles (int steps) {\n   double miles;\n\n   miles = steps / 2000.0;\n\n   return miles;\n}\n\nint main() {\n   int stepsInput;\n\n   cin >> stepsInput;\n\n   cout <<StepsToMiles (stepsInput) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 125, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */\ndouble StepsToMiles(int userSteps){\n   double Miles;\n   Miles = userSteps/2000.0;\n   return Miles;\n}\n\nint main() {\n   /* Type your code here */\n   int StepConvert;\n   cin>>StepConvert;\n   cout<<StepsToMiles(StepConvert)<<endl;\n\n   return 0;\n}\n", "class": 0, "version": 105, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles (int userSteps){\n   double milesWalked;\n   milesWalked = userSteps / 2000.0;\n   return milesWalked;\n}\n\nint main() {\n   int steps;\n   cin >> steps;\n   cout << StepsToMiles(steps)<< endl;\n   /* Type your code here */\n\n   return 0;\n}\n", "class": 0, "version": 178, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(double userSteps) {\n   double milesWalked;\n   \n   milesWalked = userSteps / 2000;\n   \n   return milesWalked;\n}\n\nint main() {\n   double userSteps;\n   \n   cin >> userSteps;\n   \n   cout << StepsToMiles(userSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 108, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps){\n   return (double)userSteps/2000;\n}\n\nint main() {\n   /* Type your code here */\n   double a;\n   cin >> a;\n   cout << StepsToMiles(a)<<endl;\n\n   return 0;\n}\n", "class": 0, "version": 225, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\n/* Define your function here */ \nint FeetToSteps(double userFeet){\n   return userFeet/2.5;\n}\n\nint main() {\n   /* Type your code here */\n   double userFeet;\n   \n   cin>> userFeet;\n   cout<<FeetToSteps(userFeet)<<endl;\n\n   return 0;\n}\n", "class": 0, "version": 205, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps(double userfeet) {\n   return userfeet/2.5;}\n\nint main() {\n   double userfeet;\n   cin>>userfeet;\n   cout<<FeetToSteps(userfeet)<<endl;\n   return 0;\n}\n", "class": 0, "version": 220, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\n/* Define your function here */ \nint FeetToSteps(double userFeet) {\n   int StepsToWalk;\n   StepsToWalk  = userFeet / 2.5;     \n   return StepsToWalk;\n}\n\nint main() {\n   /* Type your code here */\n   double userInput;\n   \n   cin >> userInput;\n   cout << FeetToSteps(userInput) << endl;\n   return 0;\n}\n", "class": 0, "version": 18, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\ndouble StepsToMiles( int userSteps) {\n   double miles;\n   miles = userSteps / 2000.0 ;\n   return miles;\n}\n\n/* Define your function here */ \n\nint main() {\n   int userSteps;\n   double miles;\n   cin >> userSteps;\n   miles = StepsToMiles( userSteps);\n   cout << miles << endl;\n   \n   /* Type your code here */\n\n   return 0;\n}\n", "class": 0, "version": 61, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\n/* Define your function here */ \n   double StepsToMiles (int userSteps);\nint main() {\n   /* Type your code here */\n   int userSteps;\n   float milesGone;\n   cin >> userSteps;\n   milesGone = userSteps/2000.0;\n   cout << fixed << setprecision(2);\n   cout << milesGone << endl;\n   return 0;\n}\n", "class": 0, "version": 40, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\n/* Define your function here */ \n\n\n\nint FeetToSteps (double userFeet) {\n   double feetSteps;\n   feetSteps = (userFeet/2.5);\n   return feetSteps;\n}\n\n\nint main() {\n   /* Type your code here */\n   double userFeet;\n   cin >> userFeet;\n   cout << FeetToSteps(userFeet) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 139, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\n/* Define your function here */ \nint FeetToSteps(double feet) {\n   feet = feet/2.5;\n   return feet;\n}\n\nint main() {\n   /* Type your code here */\n   double feet;\n   cin >> feet;\n   cout << FeetToSteps(feet) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 124, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles( int userSteps)\n{\n double miles;\n miles = userSteps / 2000.0;\n return miles;  \n}\n\nint main() {\n   /* Type your code here */\nint steps;\ncin >> steps;\n\ncout << StepsToMiles(steps) << endl;\n\n\n\n   return 0;\n}\n", "class": 0, "version": 215, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   double miles = userSteps/2000.0;\n   return miles;\n}\n\nint main() {\n   \n   double steps;\n   cin >> steps;\n   \n   cout << StepsToMiles(steps) << endl;\n      \n   return 0;\n}\n", "class": 0, "version": 278, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps){\n   double miles = 0;\n   \n   miles = userSteps * (1/2000.0) ;\n   return miles;\n   }\n\nint main() {\n   /* Type your code here */\n   int userSteps;\n   \n   cin >> userSteps;\n   cout << StepsToMiles(userSteps) << endl;\n   return 0;\n}\n", "class": 0, "version": 49, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(double userSteps){\n   double totalMiles = userSteps / 2000;\n   return (totalMiles);\n}\n\nint main() {\n  double userSteps;\n  \n  cin >> userSteps;\n  \n  double miles;\n  miles = StepsToMiles(userSteps);\n  cout << miles << endl;\n\n   return 0;\n}\n", "class": 0, "version": 14, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps( double userFeet) {\n   \n   return userFeet / 2.5;\n}\n\n\nint main() {\n   int numSteps; \n   \n   cin >> numSteps;\n   \n   cout << FeetToSteps ( numSteps ) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 31, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps) {\n   return userSteps / 2000.0;\n}\n\n\nint main() {\n   /* Type your code here */\n   int numSteps;\n   cin >> numSteps;\n   cout << StepsToMiles(numSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 59, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps (double userFeet){\n   int numSteps;\n   \n   numSteps = userFeet / 2.5;\n}\nint main() {\n   int numberFeet;\n   int steps;\n   \n   cin >> numberFeet;\n   \n   steps = numberFeet / 2.5;\n   \n   cout << steps << endl;\n   \n   \n   \n   \n   \n   \n\n   return 0;\n}\n", "class": 0, "version": 177, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps){\n   return static_cast<double>(userSteps) / 2000.0;  \n}\n\nint main() {\n   int steps;\n   cin >> steps;\n   cout << StepsToMiles(steps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 284, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps(double userFeet) {\n   return userFeet/2.5;\n}\n\nint main() {\n   double userFeet;\n   cin >> userFeet;\n   cout << FeetToSteps(userFeet) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 52, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles (int userSteps)\n{\n   return userSteps / 2000.0;\n}\n\nint main() {\n\nint numOfSteps;\ndouble milesWalked;\n\ncin >> numOfSteps;\n\nmilesWalked = StepsToMiles(numOfSteps);\n\ncout << milesWalked << endl;\n\n\n   return 0;\n}\n", "class": 0, "version": 200, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps) { //Given the function: double StepsToMiles(int userSteps); in our function before main we nee\ndouble miles = userSteps / 2000.0;   //to make a statement/equation that will give us steps into miles\ncout << miles << endl;               //then a statement that will output miles\nreturn miles;                        //we want miles to return so we put: return miles;\n}\n\nint main() {\n   /* Type your code here */         //in our main we only declare what function is inputed\n   int userSteps;                    // then in order to output our function we simply write the function we wrote above\n   cin >> userSteps;\n   StepsToMiles(userSteps);\n\n   return 0;\n}\n", "class": 0, "version": 102, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps(double userFeet){ \n   return userFeet / 2.5;\n}\n\nint main() {\n   double feetWalked;\n   cin >> feetWalked;\n   cout << FeetToSteps(feetWalked) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 84, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps (double userFeet)\n{\n   const double FEET_PER_STEP = 2.5;\n   int stepsWalked;\n   \n   stepsWalked = userFeet / FEET_PER_STEP;\n   return stepsWalked;\n}\n\nint main() {\n   double userFt;\n   \n   cin >> userFt;\n   \n   cout << FeetToSteps (userFt) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 186, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps) {\n   double NumOfMiles;\n   NumOfMiles = userSteps / 2000.0;\n   return NumOfMiles;\n}\n   \n\nint main() {\n   /* Type your code here */\n    \n   int userSteps;\n   cin >> userSteps;\n   \n   cout << StepsToMiles(userSteps) << endl;\n   return 0;\n}\n", "class": 0, "version": 25, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps(double userFeet) {\n   return (userFeet / 2.5);\n}\n\nint main() {\n   double userFeet;\n   double userSteps;\n   \n   cin >> userFeet;\n   \n   userSteps = FeetToSteps(userFeet);\n   \n   cout << userSteps << endl;\n   \n   \n\n   return 0;\n}\n", "class": 0, "version": 182, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps(double userFeet) {\n   \n   return userFeet / 2.5;\n}\n\n\nint main() {\n   double userFeet;\n   \n   int steps;\n   \n   cin >> userFeet; \n   \n   steps = userFeet / 2.5;\n   \n   cout << steps << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 80, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(double userSteps) {\n   \n   userSteps =(userSteps)/2000.0;\n   return userSteps;\n   }\n\nint main() {\nint steps;\ncin >>steps;\n\ncout << StepsToMiles(steps) << endl;\n   return 0;\n}\n", "class": 0, "version": 149, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   double milesWalked;\n   \n   milesWalked = userSteps / 2000.0;\n   \n   return milesWalked;\n}\n\nint main() {\n\nint userSteps;\n\ncin >> userSteps;\n\ncout << StepsToMiles(userSteps) << endl;\n\n\n\n   return 0;\n}\n", "class": 0, "version": 249, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps (double userFeet){\n   int userSteps = userFeet / 2.5;\n   \n   return userSteps;\n}\n\nint main() {\n   double userFeet;\n   int steps;\n   \n   cin >> userFeet;\n   \n   steps = FeetToSteps(userFeet);\n   \n   cout << steps << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 267, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\n/* Define your function here */ \n  double StepsToMiles(int userSteps) {\n  double miles = 0;\n  miles = userSteps / 2000.0;\n  return miles;\n  }\nint main() {\n   /* Type your code here */\nint userSteps;\ncin >> userSteps;\ncout << StepsToMiles(userSteps) << endl;\n   return 0;\n}\n", "class": 0, "version": 233, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles (int numSteps) {\n   double numMiles;\n   \n   numMiles = numSteps / 2000.0;\n   \n   return numMiles;\n}\n\nint main() {\n   int numSteps;\n   \n   cin >> numSteps;\n   \n   cout << StepsToMiles(numSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 115, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\ndouble StepsToMiles(double n)\n{\n   double result;\n   result=n/2000;\n   return (result);\n}\nint main(){\n   double userSteps,mw;\n   cin>>userSteps;\n   mw=StepsToMiles(userSteps);\n   cout<<mw<<endl;\n   return 0;}\n", "class": 0, "version": 3, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n   double StepsToMiles (int userSteps){\n      double userMiles;\n      \n      userMiles = userSteps / 2000.0;\n      \n      return userMiles;\n}\nint main() {\n   int stepCount;\n   \n   cin >> stepCount;\n   \n   cout << StepsToMiles (stepCount) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 13, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps(double userFeet){\n   return userFeet/2.5;\n}\nint main() {\n   int stp;\n   cin >> stp;\n   cout << FeetToSteps(stp) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 45, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\nint steps;\ndouble miles;\ndouble StepsToMiles(int userSteps){\nmiles = userSteps/2000.0;\ncout<<fixed<<setprecision(2);\nreturn miles;\n}\n\nint main() {\nint userSteps;\ncin>>userSteps;\ncout<<StepsToMiles(userSteps) <<endl;\n\n   return 0;\n}\n", "class": 0, "version": 2, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n   double StepsToMiles(int userSteps){\n   return userSteps / 2000.0;\n   }/* Define your function here */ \n\nint main() {\n   int userSteps;\n   cin >> userSteps;\n   cout << StepsToMiles(userSteps) << endl;/* Type your code here */\n\n   return 0;\n}\n", "class": 0, "version": 6, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps){\n   return userSteps/2000.0;\n}\n\nint main() {\n   /* Type your code here */\n   int steps;\n   cin >> steps;\n   \n   cout << StepsToMiles(steps) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 240, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   double numMiles;\n   \n   numMiles = userSteps/2000.00;\n   \n   return numMiles;\n}\n\nint main() {\n   double numMiles;\n   double userSteps;\n   \n   cin >> userSteps;\n   \n   numMiles = userSteps/2000.00;\n   \n   cout << numMiles;\n   \n   cout << endl;\n\n   return 0;\n}\n", "class": 0, "version": 30, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles (int userSteps) {\n   return userSteps / 2000.0;\n}\n\nint main() {\n   int numOfSteps;\n   cin >> numOfSteps;\n   cout << StepsToMiles(numOfSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 205, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles (int userSteps) {\n   const double OneMileWalked=2000.0;\n   double StepsToMiles= userSteps/OneMileWalked;\n}\nint main() {\n   int userSteps;\n   \n   cin >> userSteps;\n   \n   cout << StepsToMiles(userSteps) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 41, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int); \n\nint main() {\n   int userSteps;\n   \n   cin >> userSteps;\n   \n   cout << StepsToMiles(userSteps) << endl;\n\n   return 0;\n}\n\ndouble StepsToMiles(int steps) {\n   return steps / 2000.0;\n   }", "class": 0, "version": 123, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps(double userFeet){\n   int steps;\n   return steps = userFeet/2.5;\n}\nint main() {\n   double userFeet;\n   cin>>userFeet;\n   cout<<FeetToSteps(userFeet)<<endl;\n   \n   return 0;\n}\n", "class": 0, "version": 57, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(double userSteps) {\ndouble milesWalked;\nmilesWalked = userSteps/2000;\nreturn milesWalked;\n}\nint main() {\ndouble userInput;\ncin>> userInput;\ncout << StepsToMiles(userInput) << endl;\nreturn 0;\n}\n", "class": 0, "version": 47, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps(double feet){\n   return feet / 2.5;  \n}\n\nint main() {\n   double feetWalked;\n   cin >> feetWalked;\n   cout << FeetToSteps(feetWalked) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 256, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n   double StepsToMiles(double userSteps){\n      userSteps = userSteps / 2000;\n   return userSteps;\n   }\n   \n\nint main() {\n   int steps;\n   \n   cin >> steps;\n   \n   cout << StepsToMiles(steps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 27, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps){ \n   \n   return userSteps/2000.0;\n}\n\nint main() {\n   \n   int steps; \n   \n   cin >> steps; \n   \n   cout << StepsToMiles(steps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 32, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */\ndouble StepsToMiles (int userSteps) {\n   double numMiles;\n   \n   numMiles = userSteps / 2000.0;\n   \n   return numMiles;\n   \n}\n\nint main() {\n   /* Type your code here */\n   int userSteps;\n   cin >> userSteps; \n   cout << StepsToMiles(userSteps) << endl;\n\n   return 0; \n\n}\n", "class": 0, "version": 240, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps){\n   double STM; //steps to miles\n   STM = userSteps / 2000.0;\n   return STM;\n}\n\nint main() {\n   int userInput;\n   cin >> userInput;\n   \n   cout << StepsToMiles(userInput) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 44, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps){\n   return userSteps / 2000.0;   \n}\n\nint main() {\n   double userSteps;\n   double StepsToMiles;\n\ncin >> userSteps;\n\nStepsToMiles = userSteps / 2000;\ncout << fixed << setprecision(2);\ncout << StepsToMiles << endl; \n\n   return 0;\n}\n", "class": 0, "version": 102, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(double userSteps) {\n   return userSteps / 2000;\n}\n\nint main() {\n   /* Type your code here */\n   double numSteps;\n   \n   cin >> numSteps;\n   \n   cout << StepsToMiles(numSteps) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 250, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles (double userSteps)\n{\n   double STEPS_PER_MILE = 2000;\n   \n   userSteps = userSteps * (1/STEPS_PER_MILE);\n   \n   return userSteps;\n}\nint main() {\n   \n   double steps;\n   \n   cin >> steps;\n   \n   cout << StepsToMiles(steps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 140, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   return userSteps/2000.0;\n   \n}\nint main() {\n   double numMiles;\n   int userSteps;\n   cin >> userSteps;\n   numMiles = StepsToMiles(userSteps);\n   \n   cout << numMiles;\n   cout << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 130, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n   double StepsToMiles (double steps) {\n      return steps/2000;\n   }\n   \n\nint main() {\n   double steps;\n   cin >> steps;\n   cout << StepsToMiles (steps) << endl;\n   return 0;\n}\n", "class": 0, "version": 213, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles (int userSteps) {\n   return userSteps / 2000.00;\n}\n\nint main() {\n   /* Type your code here */\n   int userSteps;\n   cin >> userSteps;\n   \n   cout << StepsToMiles(userSteps) << endl;\n   return 0;\n}\n", "class": 0, "version": 174, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps){\n   double milesW = userSteps/2000.0;\n   return milesW;\n}\n\nint main() {\n   int steps;\n   cin >> steps;\n   cout << StepsToMiles(steps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 48, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\n\nint main() {\n   cout<<\"2.67\\n\";\n\n   return 0;\n}\n", "class": 0, "version": 8, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int s)\n{\n   double miles;\n   \n   miles = s / 2000.0;\n   \n   return miles;\n}\n\nint main() {\n   int step;\n   \n   cin >> step;\n   \n   cout << StepsToMiles(step) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 67, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   double userMiles;\n   userMiles = userSteps / 2000.0;\n   return userMiles; \n}\n\nint main() {\n   int userSteps;\n   cin >> userSteps;\n   cout << StepsToMiles (userSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 94, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps) << endl;\n    return 0;\n}\n\n", "class": 0, "version": 90, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps){\n   return userSteps/2000.0;\n}\n\n\nint main() {\n   int stepsWalked;\n   cin >> stepsWalked;\n   cout << StepsToMiles(stepsWalked) << endl;\n\n\n   return 0;\n}\n", "class": 0, "version": 283, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\n\nint FeetToSteps (double userFeet) {\n   return (userFeet / 2.5);\n}\n\nint main() {\n   \n   double userFeet;\n   int stepsWalked;\n   \n   cin >> userFeet;\n   \n   stepsWalked = FeetToSteps(userFeet);\n   \n   cout << stepsWalked << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 118, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps) {\n   return userSteps/2000.0; \n}\n\nint main() {\n   /* Type your code here */\n   int stepsTaken;\n   cin >> stepsTaken;\n   cout << StepsToMiles(stepsTaken) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 11, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps){\ndouble ans;\n\nans=userSteps/2000.00;\nreturn ans;\n   \n}//end of double\n\n\nint main() {\n   int steps;\n   cin>>steps;\n   cout<<StepsToMiles(steps)<<endl;\n\n   return 0;\n}\n", "class": 0, "version": 256, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\r\nusing namespace std;\r\n\r\ndouble StepsToMiles(int userSteps){\r\n   return userSteps / 2000.0;\r\n}\r\n\r\nint main() {\r\n   int steps;\r\n   cin >> steps;\r\n   cout << StepsToMiles(steps) << endl;\r\n\r\n   return 0;\r\n}\r\n", "class": 0, "version": 216, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles (int userSteps){\n   return userSteps/2000.0;\n}\n/* Define your function here */ \n\nint main() {\n int userSteps; \n double miles;\n cin >> userSteps;\n \n \nmiles = StepsToMiles(userSteps);\ncout << miles << endl;/* Type your code here */\n\n   return 0;\n}\n", "class": 0, "version": 19, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps(double userFeet) {\n   return userFeet / 2.5; }\n\nint main() {\n   double userFeet;\n   \n   cin >> userFeet;\n   cout << FeetToSteps(userFeet) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 138, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps){\n   return userSteps / 2000.0;\n}\n\nint main() {\n   int userSteps;\n   cin >> userSteps;\n   \n   cout << StepsToMiles(userSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 32, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles (int userSteps) \n{\n   return userSteps / 2000.0;\n}\n   \n\nint main() {\n   \n   int userInput;\n   double miles;\n   \n   cin >> userInput;\n   \n   miles = StepsToMiles(userInput);\n   \n   cout << miles << endl;\n\n\n   return 0;\n}\n", "class": 0, "version": 184, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int numSteps)\n{\n   double conversion;\n   conversion = numSteps * (1.0/2000);\n   return conversion;\n}\n\nint main() {\n   /* Type your code here */\nint userSteps;\ncin >> userSteps;\n\ncout << StepsToMiles(userSteps) << endl;\n   return 0;\n}\n", "class": 0, "version": 103, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\n/* Define your function here */\nint FeetToSteps(double userFeet) {\n   return userFeet / 2.5;\n   }\n\nint main() {\n   /* Type your code here */\n   int feetConvert;\n   int num;\n   cin >> num;\n   feetConvert = FeetToSteps (num);\n   cout << feetConvert << endl;\n   return 0;\n}\n", "class": 0, "version": 60, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps(double userFeet){\n   return userFeet/2.5;\n}\n\nint main() {\n   int FeetToSteps(double userFeet);\n   double userFeet;\n   \n   cin >> userFeet;\n   cout << FeetToSteps(userFeet)<<endl;\n\n   return 0;\n}\n", "class": 0, "version": 257, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles (double userSteps) {\n   double StepsToMiles = userSteps / 2000;\n   return StepsToMiles;\n}\n\nint main() {\ndouble userSteps;\ncin >> userSteps;\n\ndouble miles = StepsToMiles (userSteps);\ncout << miles << endl;\n\n   return 0;\n}\n", "class": 0, "version": 62, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps)\n{\n   double stepMilesConversion ;\n   \n   stepMilesConversion = userSteps / 2000.0; //1 mile is 2000 steps\n   \n   return stepMilesConversion;   \n}\n\nint main() {\n   int numSteps;\n   \n   cin >> numSteps;\n   \n   cout << StepsToMiles(numSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 196, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps){\n   return userSteps/2000.0;\n}\n\nint main() {\n   int userSteps;\n   \n   cin >> userSteps;\n   \n   cout << StepsToMiles(userSteps) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 28, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps)\n{\n   return userSteps / 2000.0; \n}\n\nint main() {\n   /* Type your code here */\n   int userSteps;\n   cin >> userSteps;\n   cout << StepsToMiles(userSteps) << endl; \n   return 0;\n}\n", "class": 0, "version": 133, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\ndouble StepsToMiles(double userSteps) {\n   return (userSteps / 2000);\n}\n   \n\nint main() {\n   double userSteps;\n   \n   cin >> userSteps;\n   \n   cout << StepsToMiles(userSteps) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 180, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles (int userSteps) {\n   double miles = userSteps/2000.00;\n   return miles;\n}\n\nint main() {\n   double userSteps;\n   cin >> userSteps;\n   double miles = StepsToMiles(userSteps);\n   cout << miles << endl;\n\n   return 0;\n}\n", "class": 0, "version": 251, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(double userSteps){\n   double milesStep;\n   \n   milesStep = userSteps / 2000; \n   \n   return milesStep;\n}\n\nint main() {\n   \n   double stepsTaken;\n   cin >> stepsTaken;\n   \n   cout << StepsToMiles(stepsTaken) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 145, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps){\n   double milesWalked;\n\n   milesWalked = userSteps / 2000.0; \n   \n   return milesWalked;\n}\n\nint main() {\n   /* Type your code here */\n   int steps; \n   cin>> steps; \n\n   cout << fixed << setprecision(2);\n   cout << StepsToMiles(steps)<< endl;\n\n   return 0;\n}\n", "class": 0, "version": 10, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles (int userSteps){\n   float miles = float(userSteps)/2000;\n   return miles;\n}\n\n\n\nint main() {\n   /* Type your code here */\n   \n   int userSteps;\n   cin >> userSteps;\n   cout << StepsToMiles(userSteps) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 86, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\ndouble StepsToMiles (int userSteps) {\n   return userSteps/2000.0;\n}\n\nint main() {\n   int userSteps;\n   cin >> userSteps;\n   \n   cout << fixed << setprecision(2);\n   cout << StepsToMiles(userSteps) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 18, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles (int userSteps){\n   double miles;\n   \n   miles = static_cast <double>(userSteps) / 2000;\n   \n   return miles;\n}\n\nint main() {\n   int steps;\n   \n   cin >> steps;\n   \n   cout << StepsToMiles (steps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 90, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps){\n return (userSteps / 2000.0);\n }\n\nint main() {\n   /* Type your code here */\n   \n\n   return 0;\n}\n", "class": 0, "version": 51, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* 2000 steps=1 mile\ninput= num of steps \noutput= miles walked \n\nfunction = (num/2000 = miles ) */ \n\ndouble StepsToMiles (int userSteps) {\n   \n   return userSteps / (2000.00); \n   \n} \n\nint main() {\n   \n  int userSteps;\n  \n  cin>>userSteps;\n   \n   cout<<StepsToMiles(userSteps)<<endl; \n\n   return 0;\n}\n", "class": 0, "version": 223, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps){\n   double miles; \n   miles = userSteps/2000.0;\nreturn miles;\n}\n\n\nint main() {\n   \n   int userSteps;\n   cin >> userSteps;\n   \n   cout << fixed << setprecision(2)<<StepsToMiles( userSteps)<<endl;\n\n   return 0;\n}\n", "class": 0, "version": 100, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps(double userFeet){\n   return (userFeet / 2.5);\n}\nint main() {\n   double userFeet;\n   cin >> userFeet;\n   cout << FeetToSteps(userFeet) << endl;\n   \n   // Amadi Cayetano helped me form this code//\n      \n\n   return 0;\n}\n", "class": 0, "version": 140, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps)\n{\n   double totalMiles;\n   double mileSteps = 2000.00;\n   totalMiles = userSteps/mileSteps;\n   return totalMiles;\n}\n\nint main() {\n   /* Type your code here */\n   int userSteps;\n   cin >> userSteps;\n   cout << StepsToMiles(userSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 192, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\n\nint main() {\n\nint steps;\ncin >> steps;\ncout << StepsToMiles(steps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 180, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\n\nint FeetToSteps (double userFeet) {\n   double userSteps;\n   userSteps = userFeet / 2.5;\n   return static_cast <int> (userSteps);\n}\n\nint main() {\n   double userFeet;\n   int userSteps;\n   cin >> userFeet;\n   userSteps = FeetToSteps(userFeet);\n   cout << FeetToSteps (userFeet) << endl; \n\n   return 0;\n}\n", "class": 0, "version": 70, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles (int userSteps) {\n   double numMiles;\n   \n   numMiles = userSteps / 2000.0;\n   \n   return numMiles;\n}\n\nint main() {\n   int numSteps;\n   \n   cin >> numSteps;\n   \n   cout << StepsToMiles (numSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 284, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps){\ndouble userMiles;\n userMiles = userSteps/2000.0;\n return userMiles;\n   \n}\nint main() {\n  int userSteps;\n    cin >> userSteps;\n    cout << StepsToMiles(userSteps) << endl;\n   return 0;\n}\n", "class": 0, "version": 100, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   return userSteps / 2000.0;\n}\n\nint main() {\n   double userSteps;\n   \n   cin >> userSteps;\n   cout << StepsToMiles(userSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 263, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(double userSteps){\n   double distance =userSteps/ 2000;\n   \n   return distance; \n}\n\nint main() {\n   int userSteps;\n   cin>> userSteps; \n   \n   cout<<StepsToMiles(userSteps)<< endl; \n   \n   \n   return 0;\n}\n", "class": 0, "version": 191, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps) {\n   double milesWalked;\n   \n   milesWalked = userSteps / 2000.0;\n   \n   return milesWalked;\n}\n\nint main() {\n   /* Type your code here */\nint numSteps;\n\ncin >> numSteps;\n\ncout << StepsToMiles(numSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 110, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\ndouble StepsToMiles(int numberOfSteps){\n\treturn numberOfSteps/2000.0;\n\t// division by 2000.0 instead of 2000\n\t// as the return type is a double\n}\nint main(){\n\tint numSteps;\n\tdouble numMiles;\n\tcin >> numSteps;\n\t// numMiles = StepsToMiles(numSteps);\n\tcout << StepsToMiles(numSteps) << endl;\n}\n", "class": 0, "version": 4, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps){\n//int userSteps;\n double oneMile = 2000;\n double milesWalked;\n\n  // cin >> userSteps;\n milesWalked = userSteps / oneMile;\n//if(milesWalked < 1){\n//   milesWalked = 0;\n//}\nreturn milesWalked;\n}\nint main() {\n int stepsWalked;\n   /* Type your code here */\ncin >> stepsWalked;\ncout << StepsToMiles(stepsWalked) << endl;\n   return 0;\n}\n", "class": 0, "version": 3, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles (int userSteps){\n   double solution;\n   solution = ( userSteps / 2000.0);\n   return solution;\n}\n\nint main() {\n   double x;\n   int userSteps;\n   cin >> userSteps;\n   \n   x= StepsToMiles (userSteps);\n   cout << x << endl;\n\n   return 0;\n}\n", "class": 0, "version": 164, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles (int userSteps) {\n   double milesWalked;\n   \n   milesWalked = userSteps / 2000.0;   \n\n   return milesWalked;\n}\n\nint main() {\n   int stepNumber;\n   \n   cin >> stepNumber;\n   \n   cout << StepsToMiles(stepNumber) << endl;\n\n   return 0;\n}", "class": 0, "version": 171, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(double userSteps)\n{\n   double miles=userSteps/2000.00;\n   return miles;\n}\n\nint main() {\n   /* Type your code here */\n   double enter;\n   cin>>enter;\n   cout<<StepsToMiles(enter)<<endl;\n\n   return 0;\n}\n", "class": 0, "version": 58, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\n/* Define your function here */ \n\nint FeetToSteps(double userFeet) {\n   int numOfSteps;\n   numOfSteps = static_cast<int> (userFeet / 2.5);\n   return numOfSteps;\n}\n\nint main() {\n   /* Type your code here */\n   double userFeet;\n   \n   cin >> userFeet;\n   \n   cout << FeetToSteps(userFeet) << endl;\n   return 0;\n}\n", "class": 0, "version": 228, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps){\n   double out;\n   out = (userSteps/2000.0);\n   return out;\n}\nint main() {\nint stepnum;\ndouble final;\ncin >> stepnum;\nfinal = StepsToMiles(stepnum);\ncout << final << endl;\n\n   return 0;\n}\n", "class": 0, "version": 233, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   double miles;\n   \n   miles = userSteps / 2000.0;\n   \n   return miles;  \n}\n\nint main() {\n   int amtOfSteps;\n   \n   cin >> amtOfSteps;\n   \n   cout << StepsToMiles(amtOfSteps) << endl;\n\n   return 0;\n}", "class": 0, "version": 49, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles (int userSteps) {\n   double numMiles = (userSteps)/2000.0;\n    return numMiles;\n    \n}\n\nint main() {\nint userSteps;\n\n\ncin>>userSteps;\nStepsToMiles (userSteps);\ncout<<StepsToMiles(userSteps)<<endl;\n\n   return 0;\n}\n", "class": 0, "version": 141, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps(double userFeet) {\n   return userFeet / 2.5;\n}\n\nint main() {\n   int numFeet;\n   cin >> numFeet;\n   \n   cout << FeetToSteps(numFeet) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 45, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n/* Define your function here */ \n\nint main() {\n   /* Type your code here */\nint steps;\n    cin >> steps;\n    cout << StepsToMiles(steps) << endl;\n   return 0;\n}\n", "class": 0, "version": 61, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps){\n double sum;\n sum= userSteps/2000.0;\n return sum;\n}\n\nint main() {\n int userSteps;\n   /* Type your code here */\ncin >> userSteps;\ncout << StepsToMiles(userSteps) << endl;\n   return 0;\n}\n", "class": 0, "version": 135, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles (int userSteps) {\n   return userSteps / 2000.0 ;\n}\n\nint main() {\n   /* Type your code here */\n   int steps;\n   cin >> steps; \n   cout << StepsToMiles(steps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 8, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps)\n{\n   return static_cast<double>(userSteps) / 2000;\n}\n\nint main() {\n   /* Type your code here */\n   int steps;\n   cin >> steps;\n   cout << StepsToMiles(steps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 207, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\n\nint main() {\n   /* Type your code here */\nint steps;\n    cin >> steps;\n    cout << StepsToMiles(steps) << endl;\n   return 0;\n}\n", "class": 0, "version": 18, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles (int userSteps) {\n   double miles = double (userSteps)/2000;\n   return miles;\n}\n\nint main() {\n   \n   int userSteps;\n   cin >> userSteps;\n   cout << StepsToMiles(userSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 146, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps(double numFeet) {\n   int numSteps;\n   numSteps = (numFeet / 2.5) * 1;\n   return numSteps;\n   \n}\n\nint main() {\n   \n   double userFeet;\n   \n   cin >> userFeet;\n   \n   cout << (FeetToSteps(userFeet)) << endl;\n\n\n   return 0;\n}\n\n   ", "class": 0, "version": 88, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps(double userFeet)\n{\n   return userFeet / 2.5;\n}\n\nint main() {\n   double userFeet;\n   cin >> userFeet;\n   userFeet = FeetToSteps(userFeet);\n   cout << userFeet << endl;\n\n   return 0;\n}\n", "class": 0, "version": 132, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps(double userFeet){\n   double userSteps = userFeet / 2.5;\n   return userSteps;\n}\n\nint main() {\n   double x;\n   \n   cin >> x;\n   \n   cout << FeetToSteps(x) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 217, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \n\n// Function that calculates the user input of steps and converts them into total miles walked.\n// Returns value of miles walked.\ndouble StepsToMiles(int userSteps) {\n\n   double milesWalked;\n   \n   milesWalked = userSteps / 2000.0;\n   return milesWalked;\n}\n\nint main() {\n   /* Type your code here */\n   // Variable declaration\n   int userInput;\n   \n   // User input for steps.\n   cin >> userInput;\n   \n   // Output statement using function call.\n   // User input is inserted into function and miles walked is the value that's outputted and displayed.\n   cout << StepsToMiles(userInput) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 181, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   double userMiles;\n   userMiles = userSteps/2000.0000;\n   return userMiles;\n}\n\n\nint main() {\n   double numMiles;\n   cin >> numMiles;\n   cout << StepsToMiles(numMiles) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 241, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\n/* Define your function here */ \nint FeetToSteps(double userFeet) {\n   return userFeet/2.5;\n}\nint main() {\n   /* Type your code here */\n   double userFeet;\n   cin >>userFeet;\n   cout << FeetToSteps(userFeet)<< endl;\n   \n   return 0;\n}\n", "class": 0, "version": 247, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps) {\n \n return userSteps / 2000.0;\n}\n\nint main() {\n   /* Type your code here */\n   int steps;\n   \n   cin >> steps;\n   \n   cout << StepsToMiles(steps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 101, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   double milesWalked;\n   \n   milesWalked = userSteps / 2000.0;\n   \n   return milesWalked;\n}\n\nint main() {\n   int userSteps;\n   \n   cin >> userSteps;\n   cout << StepsToMiles(userSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 211, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles (int userSteps) {\n   double userMiles;\n   userMiles = userSteps / 2000.0;\n   \n   return userMiles;\n}\n\nint main() {\n   int userSteps;\n   cin >> userSteps;\n   \n   cout << StepsToMiles(userSteps) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 109, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps(double numFeet) {\n   return (numFeet / 2.5);\n}\n\nint main() {\n   double numFeet;\n   cin >> numFeet;\n   \n   cout << FeetToSteps(numFeet) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 55, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\n/* Define your function here */ \nint FeetToSteps(double userFeet) {\n   // Delcaring variable for calculation\n   int steps;\n   steps = userFeet / 2.5;\n   // returning calculated value\n   return (steps);\n}\n\nint main() {\n   /* Type your code here */\n   // Declaring variable\n   double feet;\n   \n   // Assigning input to variable\n   cin >> feet;\n   \n   // Outputting the calculated steps from feet\n   cout << FeetToSteps(feet);\n   cout << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 260, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n\n/* Converts steps to miles */\ndouble StepsToMiles (int userSteps) {\n   const double S_PER_MI = 2000.0;\n   double milesVal;\n   \n   milesVal = userSteps * 1 / S_PER_MI;  // Conv steps to miles\n   return milesVal;\n}\nint main() {\n\n int userSteps;  // User defined steps\n\n   \n   // Prompt user for steps\n   cin >> userSteps;\n   \n   \n   // Output the conversion result\n   cout << StepsToMiles (userSteps) << endl;\n   return 0;\n}\n", "class": 0, "version": 258, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */\ndouble StepsToMiles(int userSteps) {\n   double miles;\n   miles = userSteps / 2000.0000;\n   \n   return miles;\n}\n\nint main() {\n   /* Type your code here */\n   int steps;\n   cin >> steps;\n   cout << StepsToMiles(steps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 135, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps(double userFeet) {\n   int stepsWalked;\n   \n   stepsWalked = static_cast<int>(userFeet / 2.5);\n   \n   return stepsWalked;\n}\n\nint main() {\n   double feetWalked;\n   \n   cin >> feetWalked;\n   \n   cout << FeetToSteps(feetWalked) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 27, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps) {\n   double oneMile=2000.0;\n   double numMiles;\n   \n   numMiles=userSteps/oneMile;\n   return numMiles;\n}\n\nint main() {\n   /* Type your code here */\n   int userSteps;\n   \n   cin >> userSteps;\n   \n   cout << StepsToMiles(userSteps) << endl;\n   return 0;\n}\n", "class": 0, "version": 220, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles( int userSteps)\n{\n   const double milePerSteps = 1.0/2000.0;\n   double totalMiles;\n   \n   totalMiles = userSteps * milePerSteps;\n   \n   return totalMiles;\n}\n\nint main() {\n   int numOfSteps;\n   \n   cin >> numOfSteps;\n   \n   cout << StepsToMiles(numOfSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 291, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\n/* Define your function here */ \nint FeetToSteps(double userFeet) {\n   return (userFeet / 2.5);\n}\n\nint main() {\n   /* Type your code here */\n   double userFeet;\n   cin >> userFeet; \n   cout << FeetToSteps(userFeet) << endl;\n\n   \n   \n\n   return 0;\n}\n", "class": 0, "version": 137, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles (int userSteps) {\n   double miles = userSteps / 2000.0;\n}\n\nint main() {\n   int steps;\n   cin >> steps;\n   \n   cout << StepsToMiles (steps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 19, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   double userMiles = userSteps/2000.0;\n   \n   return userMiles;\n}\n\nint main() {\n   \n   int userSteps;\n   cin >> userSteps;\n   cout << fixed << setprecision(2);\n   cout << StepsToMiles(userSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 4, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\n   int FeetToSteps (double userFeet){\n      userFeet = userFeet / 2.5;\n      return static_cast<int>(userFeet);\n}\n \n   int main() {\n   int Steps;\n   double FeetWalked;\n   \n   \n   cin >> FeetWalked;  \n   Steps = FeetToSteps (FeetWalked); \n   cout << Steps << endl;\n\n   return 0;\n}\n", "class": 0, "version": 30, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   double stepsPerMile; \n   \n   stepsPerMile = userSteps / 2000.0; \n   \n   return stepsPerMile; \n}\n\nint main() {\n   int steps; \n   double miles; \n   \n   cin >> steps; \n   miles = StepsToMiles(steps);\n   \n   cout << miles << endl; \n\n   return 0;\n}\n", "class": 0, "version": 156, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps) \n{\n   return static_cast<double>(userSteps) / 2000;\n   }\n\nint main() {\n   /* Type your code here */\n   int userSteps;\n   cin >> userSteps;\n   cout << StepsToMiles(userSteps) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 100, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles (int userSteps) {\n   return userSteps/2000.0;\n}\n\nint main() {\n   /* Type your code here */\n   int userSteps;\n   cin >> userSteps;\n   cout << StepsToMiles(userSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 283, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\n/* Define your function here */ \ndouble FeetToSteps(double feetWalked){\n int wow = feetWalked / 2.5;\n \n return wow;\n\n}\n\nint main() {\n   /* Type your code here */\n   double userFeet;\n   cin >> userFeet;\n   cout << FeetToSteps(userFeet) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 2, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) { \nreturn (double) userSteps / 2000;\n\n}\nint main() {\n   int userSteps;\n   cin >> userSteps;\n   cout << StepsToMiles(userSteps) << endl;\n   return 0;\n}\n", "class": 0, "version": 307, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\n// Got help in lab\n\nint FeetToSteps(double userFeet) {\n   int numStepsWalked;\n   numStepsWalked = userFeet/2.5;\n   return numStepsWalked;\n}\n\nint main() {\n   double userFeet;\n   \n   cin >> userFeet;\n   \n   cout << FeetToSteps(userFeet) << endl; \n\n   return 0;\n}\n", "class": 0, "version": 46, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps){\n   double milesWalked;\n   milesWalked = userSteps / 2000.0;\n   return milesWalked;\n}\n\n\nint main() {\n   int userSteps;\n   cin >> userSteps; \n   cout << StepsToMiles( userSteps) << endl;\n\n   \n\n   return 0;\n}\n", "class": 0, "version": 142, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   double miles;\n   miles = userSteps / 2000.0;\n   cout << miles << endl;\n   return miles;\n}\n\nint main() {\n   int numSteps;\n   \n   cin >> numSteps;\n   \n   StepsToMiles(numSteps);\n   \n\n   return 0;\n}\n", "class": 0, "version": 154, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles (int userSteps) {\n  const double STEP_MILE = 2000; \n  double mileWalked = 0;\n  mileWalked = userSteps / STEP_MILE;\n  return mileWalked;\n  }\n\nint main() {\n   int numStep = 0;\n   cin >> numStep;\n   cout << StepsToMiles(numStep) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 9, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps(double userFeet) { \n   return userFeet / 2.5; \n}\nint main() {\n   \n   double userFeet; \n   cin >> userFeet; \n   \n   cout << FeetToSteps(userFeet) << endl; \n\n   return 0;\n}\n", "class": 0, "version": 254, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles( int userSteps) {\n   double miles;\n   miles = userSteps / 2000.0;\n   \n   return miles;\n}\n\nint main() {\n   \nint userSteps;\n\ncin >> userSteps;\n\ncout << StepsToMiles(userSteps) << endl;\n   return 0;\n}\n", "class": 0, "version": 8, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps)\n{\n   double miles;\n   \n   miles = userSteps / 2000.0;\n   \n   return miles;\n}\n\nint main() {\n   int numberOfSteps;\n   double milesWalked;\n   \n   cin >> numberOfSteps;\n   milesWalked = StepsToMiles(numberOfSteps);\n   cout << milesWalked << endl;\n\n   return 0;\n}\n", "class": 0, "version": 235, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int steps){\n   double numMiles;\n   numMiles = steps/2000.0;\n   return numMiles;\n}\n\n\nint main() {\n   int userSteps;\n   cin >> userSteps;\n   cout << StepsToMiles(userSteps) << endl;\n\n\n   return 0;\n}\n", "class": 0, "version": 250, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\n/* Define your function here */\ndouble FeetToSteps( double feetWalked){\n   int steps;\n   steps = feetWalked / 2.5;\n   \n   return steps;\n}\n\n\nint main() {\n   /* Type your code here */\n   double feetWalked;\n   cin >> feetWalked;\n   \n   cout << FeetToSteps(feetWalked) << endl;\n    \n\n   return 0;\n}\n", "class": 0, "version": 65, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\n\nint FeetToSteps (double userFeet){\n   int numFeet;\n   \n   numFeet = userFeet / 2.5;\n   \n   return numFeet;\n}\n\nint main() {\n   int stepsWalked;\n   \n   cin >> stepsWalked;\n   \n   cout << FeetToSteps(stepsWalked) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 9, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps) {\n   return userSteps / 2000.0;\n}  \n\nint main() {\n   /* Type your code here */\n   int userSteps;\n   \n   cin >> userSteps;\n   \n   cout << StepsToMiles(userSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 65, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps (double userFeet) {\n   int steps; \n   \n   steps = userFeet / 2.5; \n   return steps; \n}\nint main() {\n   int feet; \n   \n   cin >> feet; \n   \n   cout << FeetToSteps(feet) << endl;  \n   return 0;\n}\n", "class": 0, "version": 21, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   double userMiles;\n   userMiles = userSteps / 2000.0;\n   return userMiles;\n}\n\n\n\nint main() {\n   int stepsWalked;\n   cin >> stepsWalked;\n   \n   cout << StepsToMiles(stepsWalked) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 178, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(int userSteps) {\n   return userSteps / 2000.0;\n}\n\nint main() {\n   /* Type your code here */\n   double userSteps;\n   double miles;\n   \n   cin >> userSteps;\n   miles = StepsToMiles(userSteps);\n   cout << miles << endl;\n\n   return 0;\n}\n", "class": 0, "version": 17, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \ndouble StepsToMiles(double userSteps) {\n   double milesWalked;\n\n   milesWalked = userSteps/2000;\n   \n   return milesWalked;\n}\n   \n\nint main() {\n   double userSteps;\n   \n   \n   cin >> userSteps;\n   \n   cout << StepsToMiles(userSteps) << endl; \n\n   return 0;\n}\n", "class": 0, "version": 42, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nint FeetToSteps(double userFeet) {\n   int steps;\n   steps = userFeet / 2.5;\n   return steps;\n}\n\n\nint main() {\n   double numFeet;\n  \n   \n   cin >> numFeet;\n   \n   cout << FeetToSteps( numFeet) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 105, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps){\n   return (userSteps/2000.0);\n}\n\nint main() {\n   int feet;\n   cin >> feet;\n   cout << fixed << setprecision(2); \n   cout << StepsToMiles(feet) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 23, "model": "Human"}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   double miles;\n   miles = userSteps / 2000.0;\n   return miles;\n}   \n\nint main() {\n   int userSteps;\n   \n   cin >> userSteps;\n   \n   cout << StepsToMiles(userSteps) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 116, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym (const string &userPhrase) {\n   string end;\n   int length = userPhrase.length();\n   for (int i = 0; i <= length ; ++i) {\n      int c = userPhrase[i];\n      if (isupper(c)) {\n         end += userPhrase.at(i);\n   }\n   }\n   return end;\n}\n      \n\nint main() {\n   string original;\n   \n   getline (cin, original);\n   \n   cout << CreateAcronym (original) << endl;\n\n   return 0;\n}", "class": 0, "version": 132, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase) {\n   string acronym;\n   for (unsigned int i = 0; i < userPhrase.size(); ++i)\n   {\n      if (isupper(userPhrase.at(i)))\n      {\n         acronym = acronym + userPhrase.at(i);\n      }\n   }\n   \n   return acronym;\n}\n\nint main() {\n   string userString;\n   \n   getline(cin, userString);\n   \n   cout << CreateAcronym(userString) << endl;\n\n   return 0;\n}", "class": 0, "version": 18, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym (const string &userPhrase) {\n   string acroNym = \"\";\n   \n   for (unsigned int i = 0; i < userPhrase.size(); ++i) {\n      if (isupper(userPhrase.at(i))) {\n         acroNym = acroNym + userPhrase.at(i);\n      }\n   }\n   \n   return acroNym;\n}\n\nint main() {\n   string userPhrase;\n   \n   getline (cin, userPhrase);\n   \n   cout << CreateAcronym (userPhrase) << endl;\n\n   return 0;\n}", "class": 0, "version": 161, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string input) {\n   \n   string Acronym;\n   \n   Acronym = \"\";\n   \n   for (unsigned int i = 0; i < input.length(); ++i) {\n      if ((isupper(input.at(0)) && (i == 0))) {\n         Acronym = Acronym + input.at(i);\n      }\n      else if ((isupper(input.at(i)) && (input.at(i-1) == ' '))) {\n         Acronym = Acronym + input.at(i);\n      }\n      else  {\n         Acronym = Acronym;\n      }\n      if (islower(input.at(0))) {\n         Acronym = \"empty\";\n      }\n   }\n   \n   return Acronym;\n\n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 204, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase){\n   string newStr;\n   for(long unsigned int i = 0; i < userPhrase.size(); ++i){\n      if(isupper(userPhrase.at(i))){\n         newStr += userPhrase.at(i);\n      }\n   }\n   return newStr;\n}\n\nint main() {\n   string phrase;\n   getline(cin, phrase);\n   cout <<CreateAcronym(phrase) << endl;\n   //cout << phrase;\n\n   return 0;\n}", "class": 0, "version": 143, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym( string user_String) { \n   string finalResult; \n   int i; \n   for ( i = 0; i < user_String.size(); ++i) { \n      if ( (i == 0 || user_String.at( i - 1) == ' ' )  && isupper(user_String.at(i)) ) { \n         finalResult += user_String.at(i); \n      }\n      else { \n         finalResult == \"empty\"; \n      } \n   } \n   \n   return finalResult; \n} \n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 62, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n   string acronym;\n   int length = userPhrase.length();\n   int i;\n   for (i=0; i<length; i++) {\n      if ((int)userPhrase[i] >= 65 && (int)userPhrase[i]<=90 && (i == 0 || userPhrase[i-1] == ' ')) {\n         acronym = acronym + userPhrase[i];\n      }\n   }\n   return acronym;\n}\n\nint main() {\n   string str;\n   getline(cin, str);\n   cout << CreateAcronym(str) << endl;\n\n   return 0;\n}", "class": 0, "version": 14, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(const string &userPhrase) {\n   string x;\n   for (int i = 0; i < userPhrase.size(); ++i) {\n      if (userPhrase.at(i) >= 65 && userPhrase.at(i) <= 90) {\n         x.push_back(userPhrase.at(i));\n      }\n   }\n   \n   return x;\n}\n\nint main() {\n   /* Type your code here */\n   string userPhrase;\n   \n   getline(cin, userPhrase);\n   \n   cout << CreateAcronym(userPhrase) << endl;\n\n   return 0;\n}", "class": 0, "version": 37, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase){\n\n    string res = \"\";\n\n    res=res+userPhrase[0];\n\n    for(int i=1;i<userPhrase.length();i++){\n\n        if(userPhrase[i-1]==' '){\n\n            if(userPhrase[i]>='A' && userPhrase[i]<='Z')\n                res=res+userPhrase[i];\n        }\n    }\n    return res;\n}\n\n\nint main(){\n        string userPhrase;\n        \n        getline(cin, userPhrase);\n        \n        cout<<CreateAcronym(userPhrase)<<endl;\n        \n    return 0;\n}", "class": 0, "version": 25, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase){\n   string phraseRef = userPhrase;\n   string acronym;\n   char ch = phraseRef.at(0);\n   \n   if (isupper(ch)) {\n      acronym = acronym + ch;\n   }\n\n   long unsigned int space = phraseRef.find(' ');\n   \n   while (space != string::npos) {\n      ch = phraseRef.at(space + 1);\n      if (isupper(ch)) {\n         acronym = acronym + ch;\n      }\n      phraseRef = phraseRef.substr(space + 1);\n      space = phraseRef.find(' ');\n   }\n\n   return acronym;\n}\n\nint main() {\n   string userInput;\n   getline(cin, userInput);\n   \n   cout << CreateAcronym(userInput) << endl;\n\n   return 0;\n}", "class": 0, "version": 89, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\n\nstring CreateAcronym ( const string &userPhrase )\n{\n   string acronym;\n   \n   for ( unsigned int i = 0; i < userPhrase.size(); ++i )\n   {\n      if ( isupper(userPhrase.at(i))) \n      {\n         acronym += userPhrase.at(i);\n      }\n   }\n   return acronym;\n   }\n   \n\nint main() {\n\nstring phrase;\n\n//cin >> phrase;\n\ngetline( cin, phrase);\n\ncout << CreateAcronym ( phrase ) << endl;\n\n\n\n\n   return 0;\n}", "class": 0, "version": 210, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n//Got help from classmate & SLACK\n\nstring CreateAcronym(string userString) {\n   string userInput;\n   char beforeX = ' ';\n   char currX;\n   \n   for (unsigned int i = 0; i < userString.size(); ++i) {\n      currX = userString.at(i);\n      if ((beforeX == ' ') && (isupper(currX))) {\n         userInput = userInput + currX;\n      }\n      beforeX = currX;\n   } \n   \n   if (userInput.size() == 0) {\n      userInput = \"empty\"; \n   }\n\n   return userInput;\n}\n         \n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   \n   string s;\n   \n   getline(cin, s);\n   \n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 153, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase){\n   string s = userPhrase;\n   string acronym;\n   \n   for(int i = 0; i < s.size(); i++){\n      if(isupper(s.at(i))){\n         acronym = acronym + s.at(i);\n      }\n   }\n   return acronym;\n\n}\n\nint main() {\n   string input;\n   getline (cin, input);\n   cout << CreateAcronym(input) << endl; \n\n   return 0;\n}", "class": 0, "version": 148, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase)\n{\n   string acr;\n   for (unsigned int i = 0 ; i < userPhrase.size() ; ++i)\n   {\n      if (isupper(userPhrase.at(i)))\n      {\n         acr += userPhrase.at(i);\n      }\n   }\n   return acr;\n}  \n\nint main() {\n   string userPhrase;\n   \n   getline(cin, userPhrase);\n   \n   cout << CreateAcronym(userPhrase) << endl;\n\n   return 0;\n}", "class": 0, "version": 116, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym ( const string &userPhrase ) {\n   string empty;\n   \n   for ( unsigned i = 0 ; i <= userPhrase.size () - 1 ; ++ i ) {\n      if ( userPhrase.at (i) >= 65 && userPhrase.at (i) <= 90 ) {\n         empty = empty + userPhrase.at(i);\n      }\n   }\n   return empty;\n}\n   \n\nint main() {\n   /* Type your code here */\n   string userPhrase;\n   \n   getline ( cin , userPhrase );\n   \n   cout << CreateAcronym ( userPhrase ) << endl;\n   \n   \n\n   return 0;\n}", "class": 0, "version": 126, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase){\nstring s;\n for ( unsigned i = 0; i < userPhrase.size(); ++i){\n    if ( isupper(userPhrase.at(i))) {\n       s += userPhrase.at(i);\n    }\n}\nreturn s;\n}\n\nint main() {\n   /* Type your code here */\n\n   return 0;\n}", "class": 0, "version": 234, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreatAcronym(const string &userPhrase) {\n   \n}\n\nint main() {\n   cout << \"IEEE\" << endl;\n\n   return 0;\n}", "class": 0, "version": 300, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase)\n{\n   string newString = \"\";\n   for (unsigned int i=0; i <userPhrase.length(); ++i)\n   {\n      if (userPhrase.at(i)>= 'A' && userPhrase.at(i)<='Z')\n      {\n         newString.push_back(userPhrase.at(i));\n      }\n   }\n   return newString;\n}\n\nint main() {\n   string userPhrase;\n   getline(cin, userPhrase);\n   \n   cout<<CreateAcronym(userPhrase)<< endl;\n\n   return 0;\n}", "class": 0, "version": 258, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase)\n{\n   string acronym;\n   for (unsigned int i = 0; i < userPhrase.size(); ++i)\n   {\n      if (isupper(userPhrase.at(i)) != 0)\n      {\n         acronym += userPhrase.at(i);\n      }\n   }\n   return acronym;\n}\n\nint main() {\n   string userPhrase;\n   getline(cin, userPhrase);\n   cout << CreateAcronym(userPhrase) << endl;\n\n   return 0;\n}", "class": 0, "version": 129, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << s << endl;\n   \n   return 0;\n}", "class": 0, "version": 59, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase){\n   \n   for(int i=1;i<=userPhrase.length()-1;i++){\n      if(isupper(userPhrase.at(i)==true)){\n        cout<<userPhrase.at(i);\n         \n      }\n   }\n}\n\nint main() {\n   string l;\n   getline(cin,l);\n   cout<<CreateAcronym(l);\n   cout<<endl;\n\n   return 0;\n}", "class": 0, "version": 41, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(const string &userPhrase) {\n   string hold = \"\";\n   \n   for (unsigned int i = 0; i < userPhrase.size(); i++) {\n      if (isupper(userPhrase.at(i))) {\n         hold.push_back(userPhrase.at(i));\n      }\n   }\n   \n   return hold;\n}\n\nint main() {\n   /* Type your code here */\n   string str;\n   \n   getline(cin, str);\n   \n   cout << CreateAcronym(str) << endl;\n\n   return 0;\n}", "class": 0, "version": 153, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string stringPhrase) {\n   string newPhrase;\n   int numString;\n   int i;\n   \n   numString = stringPhrase.size();\n   \n   for (i = 0; i < numString; i++) {\n      if (isupper(stringPhrase.at(i))) {\n         newPhrase.push_back(stringPhrase.at(i));\n      }\n   }\n   \n   return newPhrase;\n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 39, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string& userPhrase){\n   string acro;\n   for(unsigned int i = 0; i < userPhrase.size(); ++i){\n      if(isupper(userPhrase.at(i))){\n         acro.push_back(userPhrase.at(i));\n         }\n      }\n      return acro;\n   }\n\n\nint main() {\nstring userStr;\n getline(cin, userStr);\ncout << CreateAcronym(userStr) << endl;\n\n   return 0;\n}", "class": 0, "version": 57, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string& str)\n{\n   string out = \"\";\n   \n   if(isalpha(str.at(0)) && toupper(str.at(0)) == str.at(0))\n   {\n      out += str.at(0);\n   }\n      \n   for(int i = 0; i < (signed)str.size(); i++)\n   {\n      if(i > 0)\n      {\n         if(isspace(str.at(i - 1)) && isalpha(str.at(i)) && toupper(str.at(i)) == str.at(i))\n         {\n            out += str.at(i);\n         }\n      }\n   }\n   \n   return out;\n}\n\nint main() {\n   string userPhrase;\n   \n   getline(cin, userPhrase);\n   \n   cout << CreateAcronym(userPhrase) << endl;\n\n   return 0;\n}", "class": 0, "version": 68, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userString) {\n   int i;\n   string acronymString;\n   \n   for (i = 0; i < userString.size(); ++i) {\n      if (((isupper(userString.at(i))) && (i == 0)) || ((isupper(userString.at(i))) && (isspace(userString.at(i-1))))) {\n         acronymString.push_back(userString.at(i));\n      }\n   }\n   \n   if (acronymString.size() == 0) {\n      acronymString = \"empty\";\n   }\n   \n   return acronymString;\n}\n         \n\nint main() {\n\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 190, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n   string CreateAcronym(string userPhrase) {\n   string acronym;\n   int length = userPhrase.length();\n   int i;\n\n   for (i=0;i<length;i++) {\n      if ((int)userPhrase[i] >= 65 && (int)userPhrase[i]<=90 && (i == 0 || userPhrase[i-1] == ' ' )) {\n         acronym = acronym + userPhrase[i];\n      }\n   }\n   return acronym;\n   }\n\nint main() {\n   string str;\n   getline(cin,str);\n   cout << CreateAcronym(str) << endl;\n   \n   return 0;\n}", "class": 0, "version": 18, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/*string CreateAcronym (const string &userPhrase) {\n   string dummy = \"\";\n   for ( long unsigned int i = 0; i < userPhrase.length(); i++ ) {\n      if (userPhrase.at(i - 1) == ' ') {\n         if (userPhrase.at(i + 1) >= 'A' && userPhrase.at(i + 1) <= 'Z')\n         if (!(islower(userPhrase.at(i)))) {\n            dummy += userPhrase.at(i);\n         }\n      }\n   }\n   return dummy;\n}*/\n\nstring CreateAcronym (const string &userPhrase) {\n   string dummy = \"\";\n   for ( long unsigned int i = 0; i < userPhrase.length(); i++ ) {\n      if (isupper(userPhrase.at(i))) {\n         dummy += userPhrase.at(i); //why does nothing do into dummyyyyy\n      }\n      else {\n         i++;\n      }\n   }\n   return dummy;\n}\n            \n/* Define your function here */\n\nint main() {\n   string userString;\n   \n   getline (cin, userString);\n   \n   CreateAcronym (userString);\n   \n   cout << endl;\n   \n   /* Type your code here */\n\n   return 0;\n}", "class": 0, "version": 150, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\nstring CreateAcronym(const string & userPhrase)//worked with lab groupmates\n{\n   string acronym= \"\";\n   for (unsigned int i=0; i< userPhrase.size(); ++i)\n   {\n      if (isupper(userPhrase.at(i)))\n      {\n         acronym=acronym+userPhrase.at(i);\n      }\n   }\n   return acronym;\n}\n/* Define your function here */\n\nint main() {\n   string userInput;\n   getline (cin, userInput);\n   cout<< CreateAcronym(userInput)<<endl;\n   /* Type your code here */\n\n   return 0;\n}", "class": 0, "version": 190, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(const string &userPhrase){\n   string p;\n   for(int i = 0; (unsigned)i<userPhrase.size();i++){\n      if(userPhrase.at(i) == ' '){\n         if(isupper(userPhrase.at(i+1))){\n            p += userPhrase.at(i+1);\n         }\n      }else if(i == 0){\n          if(isupper(userPhrase.at(i))){\n            p += userPhrase.at(i);\n         }\n      }\n   }\n   return p;\n}\n\nint main() {\n   /* Type your code here */\n   string x;\n   getline(cin,x);\n   cout << CreateAcronym(x) << endl;\n\n   return 0;\n}", "class": 0, "version": 221, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym (const string &userPhrase) {\n   string acronym = \"\"; \n\n   for (unsigned int i = 0 ; i < userPhrase.size() ; ++i) {\n   if(isupper(userPhrase.at(i))) {\n    acronym += userPhrase.at(i);\n  }\n}\nreturn acronym;\n}\nint main() {\n   /* Type your code here */\nstring userInput;\nstring newPhrase;\n\ngetline (cin, userInput);\n\nnewPhrase = CreateAcronym(userInput);\n\ncout << newPhrase << endl;\n  \n   return 0;\n}", "class": 0, "version": 109, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n//Received help from Simrithi Sethupathi\n// Gave help to Isaac Jun\n\nstring CreateAcronym(string wordAcronym) {\n   string s;\n   int i;\n   \n   if (isupper(wordAcronym.at(0))) {\n      s = s + wordAcronym.at(0); \n   }\n   \n   for (i = 1; i < wordAcronym.size(); i++) {\n      if (isupper(wordAcronym.at(i))) {\n         if (isspace(wordAcronym.at(i-1))) {\n            s = s + wordAcronym.at(i); \n         }\n      } \n   }\n\n   if (s.size() == 0) {\n      s = \"empty\";\n   }\n\n   return s;\n}\n   \n   \n \nint main() {\n\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 161, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nCreateAcronym ( string s)\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 166, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\r\n#include <string>\r\n#include <cctype>\r\nusing namespace std;\r\n\r\n/* Define your function here */\r\nstring CreateAcronym(const string &userPhrase)\r\n{\r\n    string acronym;\r\n    for(unsigned int i = 0; i < userPhrase.size(); ++i)\r\n    {\r\n        if(i == 0 && isupper(userPhrase.at(i)) )\r\n            {\r\n                acronym += userPhrase.at(i);\r\n            }\r\n        else\r\n        {\r\n            if(isupper(userPhrase.at(i)) && isspace(userPhrase.at(i-1) ) )\r\n                {\r\n                    acronym += userPhrase.at(i);\r\n                }\r\n        }\r\n    }\r\n    return acronym;\r\n}\r\n\r\nint main() {\r\n   /* Type your code here */\r\n   string userPhraseMain;\r\n   getline(cin,userPhraseMain);\r\n   cout << CreateAcronym(userPhraseMain) << endl;\r\n\r\n   return 0;\r\n}", "class": 0, "version": 108, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n// I got help from Shaddai for this lab.//\nstring CreateAcronym(string s){\n   string Acronym;\n   unsigned int i;\n   for (i=0; i < s.size(); ++i){\n      if (isupper(s.at(i))){\n         Acronym.append(1,s.at(i));\n      }\n      else{\n         Acronym ==\"\";\n      }\n   }\n   return Acronym;\n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 41, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\r\n\r\nusing namespace std;\r\n\r\nstring CreateAcronym(string userPhrase){\r\n\r\n    string res = \"\";\r\n\r\n    res=res+userPhrase[0];\r\n\r\n    for(int i=1;i<userPhrase.length();i++){\r\n\r\n        if(userPhrase[i-1]==' '){\r\n\r\n            if(userPhrase[i]>='A' && userPhrase[i]<='Z')\r\n                res=res+userPhrase[i];\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\n\r\nint main(){\r\n        string userPhrase;\r\n        \r\n        getline(cin, userPhrase);\r\n        \r\n        cout<<CreateAcronym(userPhrase)<<endl;\r\n        \r\n    return 0;\r\n}", "class": 0, "version": 90, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\nstring CreateAcronym(const string &userPhrase){\n   string acr;\n   acr += userPhrase[0];\n   for(unsigned int i = 0; i <userPhrase.size(); i++){\n      if(userPhrase[i] == ' ' && isupper(userPhrase[i+1])){\n         acr += userPhrase[i+1];\n      }\n   }\n   return acr;\n}\n\nint main() {\nstring str;\ngetline(cin, str);\ncout << CreateAcronym(str) << endl;\n   return 0;\n}", "class": 0, "version": 87, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym (const string &userPhrase) {\n   string acronym;\n   for(int i=0; i<userPhrase.length(); i++) {\n      if(i==0 || userPhrase[i-1] == ' ') {\n         if (isupper(userPhrase[i])) {\n             acronym += userPhrase[i];\n         }\n      }\n   }\n   return acronym;\n}\n\nint main() {\n   string phrase;\n   string acronym;\n   getline (cin, phrase);\n   acronym = CreateAcronym(phrase);\n   cout << acronym << endl;\n\n   return 0;\n}", "class": 0, "version": 119, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n\nstring CreateAcronym(const string &userPhrase){\n   \n   \n   string companyName;\n   \n   companyName = userPhrase;\n   \n   string acronym;\n   char ch = companyName.at(0);\n   \n   if (isupper(ch)) {\n      acronym = acronym + ch;\n   }\n\n   long unsigned int space = companyName.find(' ');\n   \n   while (space != string::npos) {\n      ch = companyName.at(space + 1);\n      if (isupper(ch)) {\n         acronym = acronym + ch;\n      }\n      companyName = companyName.substr(space + 1);\n      space = companyName.find(' ');\n   }\n\n   return acronym;\n}\n\n\n\nint main() {\n   string input;\n   \n   getline(cin, input);\n   \n   cout << CreateAcronym(input) << endl;\n   \n  \n   \n   \n   return 0;\n}\n", "class": 0, "version": 263, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userPhase) {\n   int i;\n   string acronymPhase;\n   \n   for (i = 0; i < userPhase.size(); i = i + 1) {\n      if (!isspace(userPhase.at(i))) {\n         if (userPhase.at(i) == toupper(userPhase.at(i))) {\n            acronymPhase.push_back(userPhase.at(i));\n         }\n      }\n   }\n   \n   return acronymPhase;\n}\n      \n\nint main() {\n   string phase;\n   \n   getline(cin, phase);\n   \n   cout << CreateAcronym(phase) << endl;\n\n   return 0;\n}", "class": 0, "version": 26, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(const string &userPhrase) {\n   string s; \n\n   for (unsigned int i = 0; i < userPhrase.size(); ++i) {\n      if ((isupper(userPhrase.at(i))) && (i == 0)) {\n         s.push_back(userPhrase.at(i)); }\n         \n      if ((i > 0) && (isupper(userPhrase.at(i))) && (userPhrase.at(i - 1) == ' ')) {\n         s.push_back(userPhrase.at(i));}\n      }\n   return s;\n}\n\nint main() {\n   /* Type your code here */\n   string phrase;\n   \n   getline (cin, phrase); \n   \n   cout << CreateAcronym(phrase) << endl;\n   \n   \n\n   return 0;\n}", "class": 0, "version": 89, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\n#include <cstdio>\n#include <ctype.h>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase){\n   string mineCraft;\n for(unsigned int i=0; i < userPhrase.size(); i++) { \n   \n if(isupper(userPhrase.at(i))) {\n    \n mineCraft += userPhrase.at(i);\n    \n}   \n}\nreturn mineCraft;\n}\nint main() {\n   string NFT;\n   getline(cin,NFT);\ncout << CreateAcronym(NFT) << endl;\n   return 0;\n}", "class": 0, "version": 138, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string s) {\n   string output;\n   int i;\n   int length;\n   \n   length = s.size();\n   \n   for (i = 0; i < length; ++i) {\n      if (i == 0) {\n         if (islower(s.at(i))) {\n            output = \"empty\";\n         }\n         else if (isalpha(s.at(i)) && isupper(s.at(i))) {\n            output = output + s.at(i);\n         }\n         else if (isspace(s.at(i)) || isdigit(s.at(i))) {\n            output = output;\n         }\n      }\n      else if (i >= 1) {\n         if (isupper(s.at(i)) && isspace(s.at(i - 1))) {\n            output = output + s.at(i);\n         }\n      }\n   }\n\n   \n   return output;\n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 31, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase) //65 - 90 character list A-Z\n{\n   string renewed;\n   for (unsigned int i = 0; i < userPhrase.size(); ++i)\n   {\n      if (userPhrase.at(i) >= 65 && userPhrase.at(i) <= 90)\n      {\n         renewed += userPhrase.at(i);\n      }\n   }\n   return renewed;\n   \n}\n\nint main() {\n   string word;\n   getline (cin, word);\n   \n   cout << CreateAcronym(word) << endl;\n\n   return 0;\n}", "class": 0, "version": 164, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym (string s){\n   int i;\n   string final;\n   \n   if (isupper(s.at(0))){\n      final = final + s.at(0);\n   }\n   for (i=1;i < s.size()-1; ++i){\n      if ((s.at(i-1) == ' ') && (isupper (s.at(i)))){\n         final = final + s.at(i);\n      }\n   }\n   if (final == \"\"){\n      final = \"empty\";\n   }\n      return (final);\n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 78, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym (const string& userPhrase) {\n  string modString;\n  string modString1;\n \n for (unsigned i = 0; i < userPhrase.size(); ++i) {\n    \n   if (userPhrase.at(i) < 'Z' + 1) {\n      modString += userPhrase.at(i);\n   }\n  \n}\n \n for (unsigned int j = 0; j < modString.size(); ++j) {\n    \n    if (modString.at(j) != ' ') {\n       modString1 += modString.at(j);\n    }\n    else {\n       modString1 = modString1;\n    }\n }\n    \n   return modString1;\n}\n\n\nint main() {\n   string userPhrase;\n   \n   getline (cin, userPhrase);\n   \n   cout << CreateAcronym(userPhrase) << endl;\n\n   return 0;\n}", "class": 0, "version": 86, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string letter)\n{\n   unsigned int i;\n   string word;\n   string s; \n   \n   for (i = 0; i < letter.size(); ++i)\n   {\n   \n      if (isupper(letter.at(i)))\n      {\n         word += letter.at(i);\n      }\n\n   }\n   return word;\n}\n   \n   \n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 160, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n   int i;\n   string str1;\n   int amount;\n   amount = userPhrase.size();\n   \n   for (i = 0; i < amount; i++) {\n      if (isupper(userPhrase.at(i))) {     // For future reference: http://www.cplusplus.com/reference/cctype/isupper/?kw=isupper , check site for new string functions. //\n         str1 = str1 + userPhrase.at(i);\n      }\n   }\n   return str1;\n}\n\nint main() {\n   string phrase;\n   \n   getline(cin, phrase);\n   \n   cout << CreateAcronym(phrase) << endl;\n\n   return 0;\n}", "class": 0, "version": 2, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase)\n\n{\n\nstring acronym;\n\nint length = userPhrase.length();\n\nint i;\n\nfor (i=0;i<length;i++)\n\n{\n\nif ((int)userPhrase[i] >= 65 && (int)userPhrase[i]<=90 && (i == 0 || userPhrase[i-1] == ' ' ))\n\n{\n\nacronym = acronym + userPhrase[i];\n\n}\n\n}\n\nreturn acronym;\n\n}\n\nint main() {\n\nstring str;\n\n\n\ngetline(cin,str);\n\ncout << CreateAcronym(str) << endl;\n\n}", "class": 0, "version": 10, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase)\n{\n   string acronym = \"\";\n   for(unsigned int i = 0; i < userPhrase.size(); ++i)\n   {\n      if (isupper(userPhrase.at(i)))\n      {\n         acronym += userPhrase.at(i);\n      }\n   }\n   return acronym;\n}\n\nint main() {\n   string userInput;\n   getline(cin, userInput);\n\n   cout << CreateAcronym(userInput) << endl;\n\n   return 0;\n}", "class": 0, "version": 47, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string s);\n   string wordAcronym;\n   unsigned int i;\n   wordAcronym = \"\";\n   for(i = 0; i < s.length(); ++i) {\n      if ((s.at(i) == 0) && isupper(s.at(i))) {\n         wordAcronym = wordAcronym + s.at(i);\n      }\n      return wordAcronym;\n}\nint main() {\n\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 196, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym (const string &userPhrase) {\n   string acronym;\n   for (int i = 0; i < userPhrase.size(); ++i) {\n      if (isupper(userPhrase.at(i)))\n      {\n       acronym += userPhrase.at(i);\n       \n      }\n   }\n   cout << acronym;\n   return acronym;\n}\n\nint main() {\n   string user;\n   getline (cin, user);\n   \n   CreateAcronym(user); \n   cout << endl;\n   \n   return 0;\n}", "class": 0, "version": 74, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n   string CreateAcronym(const string &userPhrase){\n      string output;\n      for (unsigned i = 0; i < userPhrase.size(); ++i) {\n         if (isupper(userPhrase.at(i))) {\n           output = output + userPhrase.at(i);\n           \n         }\n      }\n      return output;\n   }\n\n         \n\nint main() {   \n   string userInput;\n   \n   getline (cin, userInput);\n   \n   cout << CreateAcronym(userInput) << endl;\n   \n\n   \n   \n\n   return 0;\n}", "class": 0, "version": 115, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym (const string &userPhrase) {\n   string acro;\n   for (unsigned i = 0; i < userPhrase.size(); ++i) {\n      if (isupper(userPhrase.at(i))) {\n         acro = acro + userPhrase.at(i);\n      }\n   }\n   return acro; \n}\n\nint main() {\n   string inputPhrase;\n   getline(cin, inputPhrase);\n   cout << CreateAcronym(inputPhrase) << endl;\n\n   return 0;\n}", "class": 0, "version": 272, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase){\n\n    string result = \"\";\n\n    result=result+userPhrase.at(0);\n\n    for(int i=1;i<userPhrase.size();i++){\n\n        if(userPhrase[i-1]==' '){\n\n            if(userPhrase.at(i)>='A' && userPhrase.at(i) <='Z')\n                result=result+userPhrase.at(i);\n        }\n    }\n    return result;\n}\n\n\nint main(){\n        string userPhrase;\n        \n        getline(cin, userPhrase);\n        \n        cout<<CreateAcronym(userPhrase)<<endl;\n        \n        return 0;\n}", "class": 0, "version": 14, "model": "Human"}
{"problem": 3, "code": "//got help from friend\n#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(string s){\n   string res = \"\";\n   for(unsigned int i = 0; i < s.size(); ++i){\n      if(i == 0  || s[i - 1] == ' '){\n         if(isupper(s[i]))\n            res += s[i];\n      }\n   }\n   \n   return res == \"\" ? \"empty\" : res; // got help\n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 19, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\nstring CreateAcronym(const string &userPhrase){\n   string newString;\n   for(int i = 0; i < userPhrase.size(); i++){\n      if(isupper(userPhrase.at(i))){\n         newString = newString + userPhrase.at(i);\n         }\n      }\n      return newString;\n   }\n/* Define your function here */\n\nint main() {\n   /* Type your code here */\nstring userPhrase;\ngetline(cin, userPhrase);\ncout << CreateAcronym(userPhrase) << endl;\n   return 0;\n}", "class": 0, "version": 128, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase)\n{\n   int i;\n   int userPhraseSize;\n   string phraseAcronym;\nuserPhraseSize = userPhrase.size();\n\nfor (i=0; i< userPhraseSize; i++)\n{\n    if ((userPhrase.at(i) >= 'A') && (userPhrase.at(i) <='Z'))\n   {\nphraseAcronym = phraseAcronym + userPhrase.at(i);\n   }\n}   \nreturn phraseAcronym;\n\n}\n\nint main() {\nstring userPhrase;\n\ngetline(cin,userPhrase);\n\n cout << CreateAcronym(userPhrase) <<endl;\n\n   return 0;\n}", "class": 0, "version": 1, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n   string acronym;\n   int length = userPhrase.length();\n   int i;\n\n   for (i = 0; i < length; ++i) {\n      if ((int)userPhrase[i] >= 65 && (int)userPhrase[i] <= 90 && (i == 0 || (int)userPhrase[i-1] == ' ' )) {\n         acronym = acronym + userPhrase[i];\n      }\n   }\n\n   return acronym;\n\n\n}\n\nint main() {\n   string userPhrase;\n   getline(cin, userPhrase);\n   cout << CreateAcronym(userPhrase) << endl;\n\n   return 0;\n}", "class": 0, "version": 23, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\nstring CreateAcronym(string userPhrase){\n   int i;\n   int strLength;\n   string newString;\n   strLength = userPhrase.size();\n   newString = userPhrase.at(0);\n   for (i = 0; i < strLength; i++){\n      if (userPhrase.at(i) == ' '){\n         if(userPhrase.at(i+1) >= 'A' && userPhrase.at(i+1) <= 'Z'){\n            newString = newString + userPhrase.at(i+1);\n         }\n      }\n   }\n   return newString;\n}\n         \n/* Define your function here */\n\nint main() {\n   /* Type your code here */\nstring userPhrase;\ngetline(cin, userPhrase);\ncout << CreateAcronym(userPhrase) << endl;\n   return 0;\n}", "class": 0, "version": 55, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase){\n   string acronym = \"\";\n   \n   if (isupper(userPhrase.at(0))){\n         acronym += userPhrase.at(0);\n   }\n   \n   for(unsigned int i = 1; i < userPhrase.size(); ++i){\n  \n      if(isspace(userPhrase.at(i))){\n         \n         if(isupper(userPhrase.at(i+1))){\n            acronym += userPhrase.at(i+1);\n      }\n   }\n}\nreturn acronym;\n}\nint main() {\n  string oldString;\n  \n  getline(cin, oldString);\n  \n  cout << CreateAcronym(oldString) << endl;\n\n   return 0;\n}", "class": 0, "version": 238, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(string userString) {\n   // Declaring variables\n   int i;\n   int a = 0;\n   string acronym;\n   \n   // Checking if the character is capitalized and is the first character in the word\n   for (i = 0; i < userString.size(); ++i) {\n      if (isupper(userString.at(i))) {\n         if ((i == 0)) {\n            acronym = acronym + userString.at(i);\n            a = a + 1;\n         }\n         else if (isspace(userString.at(i - 1))) {\n            acronym = acronym + userString.at(i);\n            a = a + 1;\n         }\n      }\n   }\n   \n   // Return empty if it does not meet the condition for acronym\n   if (a == 0) {\n      acronym = \"empty\";\n   }\n   \n   return acronym;\n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 216, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n   string acronymString;\n   string newPhrase;\n   int i;\n   \n   for (i = 0; i < userPhrase.size(); ++i) {\n      if (userPhrase.at(i) == ' ') {\n         while (userPhrase.at(i) == ' ') {\n            newPhrase = userPhrase.replace(i, 1, \"\");\n         }\n      }\n   }\n   \n   for (i = 0; i < newPhrase.size(); ++i) {\n      if (newPhrase.at(i) == toupper(newPhrase.at(i))) {\n         acronymString = acronymString + userPhrase.at(i);\n      }\n   }\n   \n   return acronymString;\n}\n\nint main() {\n   string userPhrase;\n   \n   getline(cin, userPhrase);\n   \n   cout << CreateAcronym(userPhrase) << endl;\n\n   return 0;\n}", "class": 0, "version": 46, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string& userPhrase) {\n   string newString;\n   \n   for (unsigned int i = 0; i < userPhrase.size(); ++i) {\n      if (isupper(userPhrase.at(i))) {\n         newString.push_back(userPhrase.at(i));\n      }\n   }\n   return newString;\n}\n\nint main() {\n   string phrase;\n   \n   getline(cin, phrase);\n   \n   cout << CreateAcronym(phrase) << endl;\n\n   return 0;\n}", "class": 0, "version": 195, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase)\n{\n   string x;\n   for (unsigned int n = 0; n < userPhrase.size(); ++n)\n   {\n      if (isupper(userPhrase.at(n)))\n      {\n         x += userPhrase.at(n);\n      }\n   }\nreturn x;\n}\n\nint main() {\n   string x;\n   getline(cin, x);\n   cout << CreateAcronym(x) << endl;\n   \n\n   return 0;\n}", "class": 0, "version": 31, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase){\n   int size;\n   int i;\n   string temp;\n   size = userPhrase.length();\n   for ( i=0 ; i < size; ++i){\n      if ((userPhrase.at(i) == toupper(userPhrase.at(i))) && !isspace(userPhrase.at(i))){\n         temp.push_back(userPhrase.at(i));\n      }\n   }\n   return(temp);\n}\n\nint main() {\n   string input;\n   getline(cin, input);\n   cout << CreateAcronym(input) <<endl;\n\n   return 0;\n}", "class": 0, "version": 17, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase){\n   string newString =\"\";\n   for(unsigned int i=0; i<userPhrase.size(); ++i){\n      if(isupper(userPhrase.at(i))){\n         newString +=userPhrase.at(i);  \n      }\n   }\n   return newString;\n}\n\n\nint main() {\nstring userPhrase;\n\ngetline(cin,userPhrase);\n\n\ncout<<CreateAcronym(userPhrase)<<endl;\n//output is an acronym of input\n\n   return 0;\n}", "class": 0, "version": 37, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase) {\n   string acro;\n   int size = userPhrase.size();\n   \n   for(int i = 0; i < size; ++i) {\n      if(isupper(userPhrase.at(i))) {\n         acro += userPhrase.at(i);\n      }\n   }\n   return acro;\n}\n         \n\nint main() {\n   string userInp;\n   \n   getline(cin, userInp);\n   \n   cout << CreateAcronym(userInp) << endl;\n\n   return 0;\n}", "class": 0, "version": 199, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase){\n   string acronym = \"\";\n   for (unsigned int i = 0; i < userPhrase.size(); i++){\n      if (isupper(userPhrase.at(i))){\n         acronym += userPhrase.at(i);\n      }\n   }\n   cout << acronym;\n   return acronym;\n}\n\nint main() {\n   string userInput;\n   getline(cin, userInput);\n   CreateAcronym(userInput);\n   cout << endl;\n   return 0;\n}", "class": 0, "version": 63, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym;\n    int length = userPhrase.length();\n    int i;\n    for (i=0;i<length;i++) {\n      if ((int)userPhrase[i] >= 65 && (int)userPhrase[i]<=90 && (i == 0 || userPhrase[i-1] == ' ' )) {\n            acronym = acronym + userPhrase[i];\n            }\n\n    }\n    return acronym;\n}\nint main() {\n\n   string str;\n\n   getline(cin,str);\n\n   cout << CreateAcronym(str) << endl;\n\n}\n", "class": 0, "version": 49, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\n\nstring CreateAcronym(string theInput)\n{\n   string newString;\n   if(isupper(theInput.at(0)))\n      {\n         newString =+ theInput.at(0);\n      }\n   for(unsigned int i = 0; i+1<theInput.size(); ++i)\n   {\n       \n         \n      if(theInput.at(i)== ' ')\n      {\n      \n         \n         if(isupper(theInput.at(i+1)))\n         {\n         \n         \n         newString += theInput.at(i+1);\n         }\n      }\n      \n      \n   }\n   if (newString.size()==0)\n      {\n         return \"empty\";\n      }\n   return newString;\n}\n\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 133, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Write a program whose input is a phrase and whose output is an acronym \nof the input. If a word begins with a lower-case letter, don't include that \nletter in the acronym. Assume there will be at least one upper case letter in the input. */\n\n//1. get a userstring line\n//2. in the function, output the first letter of each word as an uppercase letter\n//       take in the userPhrase\n//       for each capital letter, add it to the acronym\n//       \n//3. return the acronym\n\nstring CreateAcronym(const string &userPhrase)\n{\n   string acronym = \"\";\n   \n   for (unsigned int i = 0; i < userPhrase.size(); ++i)\n   {\n      if(isupper(userPhrase.at(i)))\n      {\n         acronym = acronym + userPhrase.at(i);\n      }\n   }\n   \n  return acronym;\n}\n\nint main() {\n   string userInput;\n   \n   getline (cin, userInput);\n   \n   cout << CreateAcronym (userInput) << endl;\n   \n   \n\n   return 0;\n}", "class": 0, "version": 87, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase) {\n   string caps;\n   for (unsigned int i = 0; i < userPhrase.size(); i++)\n   {\n      if ((userPhrase.at(i) == 'A') || (userPhrase.at(i) == 'B') || (userPhrase.at(i) == 'C') || \n      (userPhrase.at(i) == 'D') || (userPhrase.at(i) == 'E') || (userPhrase.at(i) == 'F') || \n      (userPhrase.at(i) == 'G') || (userPhrase.at(i) == 'H') || (userPhrase.at(i) == 'I') || \n      (userPhrase.at(i) == 'J') || (userPhrase.at(i) == 'K') || (userPhrase.at(i) == 'L') || \n      (userPhrase.at(i) == 'M') || (userPhrase.at(i) == 'N') || (userPhrase.at(i) == 'O') || \n      (userPhrase.at(i) == 'P') || (userPhrase.at(i) == 'Q') || (userPhrase.at(i) == 'R') || \n      (userPhrase.at(i) == 'S') || (userPhrase.at(i) == 'T') || (userPhrase.at(i) == 'U') || \n      (userPhrase.at(i) == 'V') || (userPhrase.at(i) == 'W') || (userPhrase.at(i) == 'X') || \n      (userPhrase.at(i) == 'Y') || (userPhrase.at(i) == 'Z'))\n      {\n         caps += userPhrase.at(i);\n      }\n   }\n   return caps;\n}\n\nint main() {\n   string sentence;\n   \n   getline(cin, sentence);\n   \n   cout << CreateAcronym(sentence) << endl;\n\n   return 0;\n}", "class": 0, "version": 261, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase){\n   int i;\n   int size;\n   size = userPhrase.size();\n   string acronym;\n   char currentChar;\n   int asciiValue;\n   \n   for(i=0; i < size; ++i){\n      currentChar = userPhrase.at(i);\n      asciiValue = currentChar;\n      if( asciiValue >= 65 && asciiValue <= 90)\n      {\n      acronym = acronym + currentChar;\n      }\n}\nreturn acronym;\n}\n\nint main() {\n   string userPhrase;\n   \n   getline(cin, userPhrase);\n   \n   cout << CreateAcronym(userPhrase) << endl;\n\n   return 0;\n}", "class": 0, "version": 51, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase) {\n   int sizeString = userPhrase.size() - 1;\n   string returnString;\n   for(int i = 0; i < sizeString; ++i) {\n      if(userPhrase.at(i) >= 65 && userPhrase.at(i) <= 90) {\n         returnString.push_back(userPhrase.at(i));\n      }\n   }\n   return returnString;\n}\n\nint main() {\n   string userInput;\n   getline(cin, userInput);\n   \n   cout << CreateAcronym(userInput) << endl;\n\n   return 0;\n}", "class": 0, "version": 56, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstd::string CreateAcronym(string s){\n   unsigned int i;\n   char currChar;\n   string newAcro;\n   for (i=0; i < s.size()-1; ++i){\n      currChar = s.at(i);\n      if (i==0 && isupper(s.at(0))){\n         newAcro.push_back(currChar);\n      }\n      if (currChar == (' ') && isupper(s.at(i + 1))){\n         newAcro.push_back(s.at(i + 1)) ;\n      }\n   }\n   return newAcro;\n}\n//WHY ISNT THIS WORKING I HATE LAB//\nint main() {\n   \n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 181, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\n\nint main() {\nchar ascii;\nint i;\n\ni = 0;\ncin >> ascii;\n\nfor (i = 0; i <= 6; i++){\n   if ((ascii >= 65) && ( ascii <= 90)){\n      cout << int(ascii);\n      cin >> ascii;\n   }\n   else{\n      cin >> ascii;\n   }\n}\n   return 0;\n}", "class": 0, "version": 42, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string& userPhrase) {\n   string acronym;\n   int i;\n    for (i=0; i<userPhrase.size(); ++i) {\n      if (userPhrase.at(i) >= 65 && userPhrase.at(i) <= 90) {\n         cout << userPhrase.at(i);\n         acronym = acronym + userPhrase.at(i);\n      }\n      \n}\nreturn acronym;\n}\nint main() {\n   string userPhrase;\n   getline(cin, userPhrase);\n   CreateAcronym(userPhrase);\n   cout << endl;\n   return 0;\n}", "class": 0, "version": 180, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string w) {\n   string acr;\n   int cnt;\n   unsigned long int i;\n   \n   i = 0;\n   cnt = 0;\n   \n   if (isupper(w.at(0))) {\n      acr = w.at(0);\n   }\n   \n   while (i < w.size() - 1) {\n      if (isspace(w.at(i))) {\n         if (isupper(w.at(i + 1))){\n            acr = acr + w.at(i + 1);\n            cnt = cnt + 1;\n         }\n      \n      }\n      i = i + 1;\n   }\n   if (cnt == 0) {\n      acr = \"empty\";\n   }\n   \n   \n   return(acr);\n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << s;\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 138, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(const string &userPhrase) {\n   string newStr=\"\";\n   unsigned int i;\n   for(i=0; i<userPhrase.size();++i) {\n      if (userPhrase[i]>=65 && userPhrase[i]<91) {\n         newStr.push_back(userPhrase[i]);\n      }\n   }\n   return newStr;\n}\n\nint main() {\n   /* Type your code here */\n   string phrase;\n   getline(cin, phrase);\n   \n   cout << CreateAcronym(phrase) << endl;\n   return 0;\n}", "class": 0, "version": 216, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(const string &userPhrase) {\n   string acronym = \"\";\n   for(unsigned int i = 0; i < userPhrase.length(); i++) {\n      if(isupper(userPhrase[i])) {\n         acronym.push_back(userPhrase[i]);\n      }\n   }\n   return acronym;\n}\n\nint main() {\n   /* Type your code here */\n   string userPhrase;\n   getline(cin, userPhrase);\n   \n   cout << CreateAcronym(userPhrase) << endl;\n\n   return 0;\n}", "class": 0, "version": 94, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string s){\n   string acronym;\n   string add;\n   int size;\n   size = (s.size() - 1);\n   acronym = s.at(0); \n   while (size > 0) {\n      if (isspace(s.at(size))) {\n         add = s.at(size + 1);\n         acronym.insert(1, add);\n          \n         size = size - 1;\n      }\n      else { \n         size = size - 1;}\n   }\n   return acronym;\n}\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 72, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym ( string fullInput )\n{\n   string acronym; \n   int count;\n\n   if ( isupper(fullInput.at(0)))\n   {\n      acronym = acronym + fullInput.at(0);\n   }\n   \n   for (int i = 0; i < fullInput.size(); ++i)\n   {\n      if (fullInput.at(i) == ' ')\n      {\n         if (isupper(fullInput.at(i+1)))\n         {\n            count = count +1;\n            acronym = acronym + fullInput.at(i+1);\n         }\n      }\n   }\n   \n   if ( count == 0 )\n   {\n      acronym = \"empty\";\n   }\n   \n   \n   return acronym;\n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 13, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase)\n{\n   string temp = \"\";\n   for(unsigned int i = 0; i < userPhrase.size(); ++i)\n   {\n      // if it doesnt capitalize and its not a space char then add to string\n      if(toupper(userPhrase.at(i)) == userPhrase.at(i) && userPhrase.at(i) != ' ')\n      {\n         temp += userPhrase.at(i);\n      }\n   }\n   return temp;\n}\n\nint main() {\n   string s;\n   getline(cin, s);\n   \n   cout << CreateAcronym(s) << endl;\n\n   return 0;\n}", "class": 0, "version": 182, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string s) {\n   int i;\n   string arc;\n   int size;\n   size = s.size() - 1 ;\n   for (i = 0; i < size; i++) {\n      if (i == 0 && isupper(s.at(i))) {\n         arc += s.substr(0,1);\n      }\n      else if (isupper(s.at(i))) {\n         if (s.at(i-1) == ' ') {\n            arc += s.substr(i,1);\n         }\n      }\n   }  \n   if (arc.size() == 0) {\n      arc = \"empty\";\n   }\n   return arc;\n}\n   \n   \nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   return 0;\n}", "class": 0, "version": 55, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase){\n   string temp;\n   for ( long unsigned int i = 0; i < userPhrase.size()-1; i++){\n      if (userPhrase.at(i) > 64 && userPhrase.at(i) < 91){\n         temp.push_back(userPhrase.at(i));\n      }\n   }\n   return temp;\n}\n\nint main() {\n   string userPhrase;\n   \n   getline(cin, userPhrase);\n   cout << CreateAcronym(userPhrase) << endl;\n\n   return 0;\n}", "class": 0, "version": 227, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\nstring CreateAcronym(const string &userPhrase){\n   string a;\n   for(int i = 0;i < userPhrase.size();i++){\n      if((userPhrase.at(i) >= 'A') && (userPhrase.at(i) <= 'Z')){\n         a += userPhrase.at(i);\n      }\n   }\n   return a;\n}\nint main() {\n   string a;\n   getline(cin,a);\n   cout << CreateAcronym(a) << endl;\n   return 0;\n}", "class": 0, "version": 203, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string s) {\n   unsigned int i;\n   string newString;\n   int cnt = 0;\n   \n   if (isupper(s.at(0))) {\n         newString = newString + s.at(0);\n         cnt = cnt + 1;\n      }\n      \n   for (i = 0; i < s.size() - 1; ++i) {\n      \n      if (s.at(i) == ' ') {\n         if (isupper(s.at(i + 1 ))) {\n            newString = newString + s.at((i) + 1);\n            cnt = cnt + 1;\n         }\n      }\n   }\n   if (cnt == 0) {\n      newString = \"empty\";\n   }\n   \n   return newString;\n}\n   // find very first letter and find spaces and + 1 to find starts of words\n   // if isupper , then output that letter\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 159, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string s){\n   string text;\n   int i;\n   \n   \n   if (isupper(s.at(0))){\n      text = text + s.at(0);\n   }\n   for (i = 1; i < s.size(); ++i){\n      if (isupper(s.at(i)) && (s.at(i -1) == ' ')){\n         text = text + s.at(i);\n      }\n   \n   }\n   if ( text == \"\"){\n      text = \"empty\";\n   }\n   return text;\n}\n   \n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 210, "model": "Human"}
{"problem": 3, "code": "//collabed with Nova G., Aren M., Lizette L., Cindy L. , Megan W., Allison R., Chloe B., Aaron Z.//\n#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(string userPhrase){\n   string acroNym;\n   unsigned int i;\n   \n   \n   for (i = 0; i < userPhrase.size(); ++i){\n      if (userPhrase.at(i) >= 65 && userPhrase.at(i) <= 90){\n         acroNym += userPhrase.at(i);\n      }\n   }\n   return acroNym;\n}\n      \nint main() {\n   /* Type your code here */\n   string stringName;\n   getline(cin, stringName);\n   cout << CreateAcronym(stringName) << endl;\n   return 0;\n}", "class": 0, "version": 54, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase) {\n   int i;\n   int size;\n   string userOutput;\n   size = userPhrase.size();\n   for(i=0; i<size; ++i) {\n      if(userPhrase.at(i) >= 65 && userPhrase.at(i) <= 90) {\n         userOutput += userPhrase.at(i); }\n   }\n   return userOutput;\n}   \n\nint main() {\n   string  userPhrase;\n   cin >> userPhrase;\n   \n   cout << CreateAcronym(userPhrase);\n\n   return 0;\n}", "class": 0, "version": 243, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase){\n   string acronym = \"\";\n   for (unsigned int i=0 ; i<userPhrase.size() ; ++i){\n      if (isupper(userPhrase.at(i))){\n         acronym += userPhrase.at(i);\n      }\n   }\n   return acronym;\n}\n\nint main() {\n   string phrase;\n   \n   getline (cin , phrase);\n   \n   cout << CreateAcronym(phrase) << endl;\n   \n   return 0;\n}", "class": 0, "version": 293, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string s) {\n   \n   string newS;\n   \n   for (int i = 0; i < s.size(); ++i) {\n\n      if (isupper(s.at(i))) {\n         \n         if (isalpha(s.at(0))) {\n            newS.push_back(s.at(i));\n         }\n         else if (isspace(s.at(i - 1))) {\n            newS.push_back(s.at(i));\n         }\n         \n      }\n      \n   }\n   \n   return newS;\n   \n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 137, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase)\n{\n   string acronym;\n   \n   for (unsigned int i = 0 ; i < userPhrase.length() ; i++)\n   {\n      if (isupper(userPhrase.at(i)))\n      {\n         acronym += userPhrase.at(i); \n      }\n   }\n   \n   return acronym;\n}\n\nint main() {\n   string userText;\n   \n   getline(cin,userText);\n   \n   cout << CreateAcronym(userText) << endl;\n   \n   return 0;\n}", "class": 0, "version": 193, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(string userPhrase){\n   unsigned int i;\n   string myAcronym=\"\";\n   \nif ( isupper(userPhrase.at(0)) ){\n   myAcronym=myAcronym + userPhrase.at(0);\n}\n\nfor (i =0 ; i< userPhrase.size()-1; ++i){\n   if (userPhrase.at(i)==' '){\n      if (isupper(userPhrase.at(i+1))){\n         myAcronym.push_back(userPhrase.at(i+1));\n      }\n   }\n}\nreturn myAcronym;\n}\n\nint main() {\n   /* Type your code here */\nstring userString;\n\ngetline(cin,userString);\n\ncout<< CreateAcronym(userString)<< endl;\n   return 0;\n}", "class": 0, "version": 22, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string a){\n   string b = \"\";\n   for (int i=0;i<a.size();i++){\n      if ((a.at(i) >= 'A') && (a.at(i) <= 'Z')){\n         string temp(1, a.at(i));\n         b.append(temp);\n         }\n      }\n   return b;\n   }\n\nint main() {\n   string a;\n   getline(cin, a);\n   cout << CreateAcronym(a) << endl;\n\n   return 0;\n}", "class": 0, "version": 83, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(const string &userPhrase){\n   string s;\n   if(isupper(userPhrase.at(0))){\n      s = s + userPhrase.at(0);\n   }\n   for (unsigned int i = 0; i < userPhrase.size(); i++){\n      if(isspace(userPhrase.at(i))){\n         if(isupper(userPhrase.at(i + 1))){ \n            s = s + userPhrase.at(i+1);\n   }\n}\n}\nreturn (s);\n}\nint main() {\n   string s;\n   getline(cin,s);\n   cout << CreateAcronym(s) << endl;\n   \n   /* Type your code here */\n\n   return 0;\n}", "class": 0, "version": 186, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase) {\n   string r=\"\";\n   \n   for(int i = 0; i<userPhrase.length();i++) \n   {\n      if (userPhrase[i]>='A' && userPhrase[i]<='Z') \n         r += userPhrase[i];\n   \n   }\nreturn r;\n}\n\nint main() {\n   string userPhrase;\n   getline(cin, userPhrase);\n   cout << CreateAcronym(userPhrase) << endl;\n\n   return 0;\n}", "class": 0, "version": 196, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string s){\n   string newAcronym;\n   int i;\n   bool prevSpace;\n   \n   prevSpace = true;\n   \n   if(isupper(s.at(0))){\n      newAcronym += s.at(i);\n   }\n   \n   for(i = 1; i < s.size(); ++i){\n      if(s.at(i-1) != ' '){\n         prevSpace = false;\n      }\n      else if(s.at(i-1) == ' '){\n         prevSpace = true;\n      }\n      if(isupper(s.at(i))){\n         if(prevSpace){\n            newAcronym += s.at(i);\n         }\n      }\n   }\n   \n   if (newAcronym == \"\"){\n      newAcronym = \"empty\";\n   }\n   \n   return newAcronym;\n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 35, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n   string finalizedAcronym;\n   int i;\n   \n   for (i = 0; i < userPhrase.length(); ++i) {\n      if (userPhrase.at(i) != tolower(userPhrase.at(i))) {\n         finalizedAcronym.push_back(userPhrase.at(i));\n      }\n   }\n\n\n   return finalizedAcronym;\n}\nint main() {\n   string preliminaryPhrase;\n   string finalizedPhrase;\n   \n   getline(cin, preliminaryPhrase);\n   \n   finalizedPhrase = CreateAcronym(preliminaryPhrase);\n   \n   cout << finalizedPhrase << endl;\n\n   return 0;\n}", "class": 0, "version": 13, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(string userPhrase) { \n   string res = \"\"; \n   res = res + userPhrase[0];\n   \n   for(int i = 1; i < userPhrase.length(); i++) {\n      if(userPhrase[i - 1] == ' ') {\n         if(userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') \n         res = res + userPhrase[i]; \n      }\n   }\n   return res; \n}\n\nint main() {\n   /* Type your code here */\n   string userPhase; \n   getline(cin, userPhase);\n   cout << CreateAcronym(userPhase) << endl;\n\n   return 0;\n}", "class": 0, "version": 268, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nbool isupper(char s){\n   if(s == toupper(s)){\n         return true;}\n   return false;\n   }\n\nstring CreateAcronym(string s){\n   string str ;\n   str = s.at(0);\n   if(s.size() == 0){\n      str = \"empty\";\n      return str;\n      }\n   for(unsigned i = 1; i<s.size();++i){\n      if(s.at(i-1)==' '){\n         if(isalpha(s.at(i))){\n            if(isupper(s.at(i))){\n               str = str+s.at(i);\n               }\n         }\n      }\n   }\n   return str;\n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 76, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(const string &userPhrase) \n{\n   string acr=\"\";\n   acr=acr+userPhrase.at(0);\n   for (int i=1; i<userPhrase.length(); i++) \n   {\n      if(userPhrase.at(i)>='A' && userPhrase.at(i)<='Z'){\n      acr=acr+userPhrase.at(i);\n      }\n   }\n   return acr;\n}\n\n\n\nint main() {\n   /* Type your code here */\n   string userPhrase;\n   getline(cin, userPhrase);\n   cout<< CreateAcronym(userPhrase)<< endl;\n\n   return 0;\n}", "class": 0, "version": 26, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase)\n\nbool isupp\n\nint main() {\n   /* Type your code here */\n\n   return 0;\n}", "class": 0, "version": 271, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase) {\n   bool isInWord;\n   string acronym;\n   \n   for (unsigned int i = 0; i < userPhrase.size(); ++i)\n   {\n      if (isspace(userPhrase.at(i)))\n      {\n         isInWord = false;\n      }\n      \n      if (isalpha(userPhrase.at(i)))\n      {\n         isInWord = true;\n      }\n      \n      if (isInWord && isupper(userPhrase.at(i)))\n      {\n         acronym = acronym + userPhrase.at(i);\n      }\n   }\n   \n   return acronym;\n}\n\nint main() {\n   string userPhrase;\n   \n   getline(cin, userPhrase);\n   \n   cout << CreateAcronym(userPhrase) << endl;\n\n   return 0;\n}", "class": 0, "version": 174, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(const string &userPhrase)\n{\n   string acro =\"\";\n   int i = 0;\n   if (isupper(userPhrase.at(0)))\n   {\n      acro += userPhrase.at(0);\n   }\n   for (i = 1; i < userPhrase.size(); ++i)\n   {\n      if(isupper(userPhrase.at(i)))\n      {\n        if (userPhrase.at(i-1) == ' ')\n        {\n           acro += userPhrase.at(i);\n        }\n      }\n      \n   }\n   return acro;\n   \n}\nint main() {\n   /* Type your code here */\nstring userPhrase;\n\ngetline ( cin, userPhrase);\n\ncout << CreateAcronym( userPhrase) << endl;\n\n\n\n   return 0;\n}", "class": 0, "version": 292, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase)\n{\n   int length = userPhrase.size();\n   string acronym;\n   for (int i = 0; i < length; i++)\n   {\n      if (isupper(userPhrase.at(i)))\n      {\n         acronym.push_back(userPhrase.at(i));\n      }   \n   }\n   return acronym;\n}\n\nint main() {\n   string fullName;\n   getline(cin, fullName);\n   \n   cout << CreateAcronym(fullName) << endl;\n\n   return 0;\n}", "class": 0, "version": 156, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\n\nusing namespace std;\n\nstring CreateAcronym(string s) {\n    string a;\n    int i;\n    for (i=0; i < s.size(); ++i) {\n        if ((i == 0 || s[i - 1] == ' ') && isupper(s[i])) {\n            a += s[i];\n        }\n    }\n    if (a!=\"\"){\n      return a;\n    }\n    else{\n      return \"empty\";\n    }\n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   string d;\n   getline(cin, s);\n   d=CreateAcronym(s);\n   cout<<d<<endl;\n   \n   return 0;\n}", "class": 0, "version": 15, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(const string &userPhrase) {\n   string ac;\n   for (unsigned int i=0;i<userPhrase.size();i++) {\n      if (userPhrase.at(i)<=90&&userPhrase.at(i)>=65) {\n         ac+=userPhrase.at(i);\n         }\n      }\n   return ac;\n   }\nint main() {\n   /* Type your code here */\n   string str;\n   getline(cin,str);\n   cout<<CreateAcronym(str)<<endl;\n   return 0;\n}", "class": 0, "version": 61, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase)\n{\n   string acro = \"\";\n   for (unsigned int i = 0; i < userPhrase.size(); ++i)\n   {\n      if (isupper(userPhrase.at(i)))\n      {\n         acro +=userPhrase.at(i);\n      }\n   }\nreturn acro;\n}\n\nint main() {\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n\n   return 0;\n}", "class": 0, "version": 26, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string phrase) {\n   string acronym;\n   \n   for(int i = 0; i < phrase.size(); ++i) {\n      \n      if(i == 0 || phrase[i-1] == ' ') {\n         \n         if(isupper(phrase[i])) {\n            \n            acronym += phrase[i];\n         }\n      }\n   }\n   return acronym;\n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 68, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n   int i;\n   string output; \n   \n   for(i = 0; i < userPhrase.size(); i++) {\n      if (i == 0 && userPhrase.at(0) <= 90) {\n         output.push_back(userPhrase.at(0));\n      }\n      if(isspace(userPhrase.at(i)) && userPhrase.at(i+1) <= 90) {\n         output.push_back(userPhrase.at(i+1));\n      }\n   }\n   \n   return output;\n}\n\nint main() {\n   string input;\n   \n   getline(cin, input);\n   \n   cout << CreateAcronym(input) << endl;\n\n   return 0;\n}", "class": 0, "version": 14, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase){\n\n    string res = \"\";\n\n    res=res+userPhrase[0];\n\n    for(int i=1;i<userPhrase.length();i++){\n\n        if(userPhrase[i-1]==' '){\n\n            if(userPhrase[i]>='A' && userPhrase[i]<='Z')\n                res=res+userPhrase[i];\n        }\n    }\n    return res;\n}\n\n\nint main(){\n        string userPhrase;\n        \n        getline(cin, userPhrase);\n        \n        cout<<CreateAcronym(userPhrase)<<endl;\n        \n    return 0;\n}", "class": 0, "version": 230, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string stringInput) {\n   string finalString = \"\";\n   if (isupper(stringInput.at(0))) {\n      finalString = stringInput.at(0);\n   }\n   for (unsigned i = 1; i < stringInput.size() ; i++) {\n      if (isupper(stringInput.at(i)) && isspace(stringInput.at(i - 1))) {\n         finalString = finalString + stringInput.at(i);\n      }\n   }\n   return finalString;\n}\n\nint main() {\n   \n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 44, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string s) {\n   string newString;\n   int size = s.size();\n   int i;\n   if (isupper(s.at(0))) {\n      newString = s.at(0);\n   }\n   for (i = 1; i <= size - 1; ++i) {\n      if (s.at(i - 1) == ' ') {\n         if (isupper(s.at(i))) {\n            newString = newString + s.at(i);\n         }\n      }\n   }\n   size = newString.size();\n   if (newString.size() == 0) {\n      newString = \"empty\";\n   }\n   \n   return newString;\n}\n\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 112, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n   string acronym;\n   int length = userPhrase.length();\n   int i;\n\n   for (i = 0; i < length; i++) {\n      if ((int)userPhrase[i] >= 65 && (int)userPhrase[i]<=90 && (i == 0 || userPhrase[i-1] == ' ' )) {\n         acronym = acronym + userPhrase[i];\n      }\n   }\n   return acronym;\n}\n\nint main() {\n   string str;\n\n   getline(cin,str);\n\n   cout << CreateAcronym(str) << endl;\n\n   return 0;\n}", "class": 0, "version": 39, "model": "Human"}
{"problem": 3, "code": "#include <iostream> //collaborated with Nova, Megan, Allison, Lizette, Samantha, Chloe\n#include <string>\n#include <cctype>\nusing namespace std;\n\n\nstring CreateAcronym(string userPhrase){\n  int i;\n  string Phrase;\n  \n  for (i = 0; i < userPhrase.length(); ++i){\n     if ((userPhrase.at(i) >= 65) && (userPhrase.at(i) <= 90)){\n        Phrase += userPhrase.at(i);\n     }\n   }\n   return Phrase;\n}\n\nint main() {\n   string Phrase;\n   getline(cin , Phrase);\n\n   cout << CreateAcronym(Phrase) << endl;\n   \n   return 0;\n   \n}", "class": 0, "version": 5, "model": "Human"}
{"problem": 3, "code": "//isupper from standard library\n#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase){\n   string acronym;\n   int i;\n   \n   for(i=0; i< userPhrase.size() ; i++){\n      if(isupper(userPhrase.at(i)) != 0) { //0 = lowercase 1= uppercase \n        acronym.push_back(userPhrase.at(i));\n      }\n     \n   }   \n   \n   \n   \n   return acronym;\n}   \n\n\nint main() {\n   string s;\n   string acronym;\n   \n   getline(cin,s);\n   \n   acronym = CreateAcronym(s); \n   cout <<acronym<< endl;\n   \n   return 0;\n}", "class": 0, "version": 66, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase){\n   string thing =\"\";\n  // string thing1=\"\";\n   thing=(thing + userPhrase.at(0));\n   \n   \n   \n   for (int i =0; i<userPhrase.size();i++){\n      if(userPhrase[i-1]==' '){ //i dont understand this part and needed help, like what does it do?? \n      \n      if ((userPhrase.at(i)>=65)&&(userPhrase.at(i)<=90)){\n         \n         thing=thing+userPhrase.at(i);\n         \n         \n          //thing.replace(0,1,\" \");// im not sure why this isnt working??? ive also tried erase,push_back, and other things but its still not producing what i want...\n          // :(\n          \n       \n          \n         \n      }\n      }\n      \n   }\n   \n   \n   return thing;\n}\n  \n \n\nint main() {\n   string s;\n   getline(cin,s);\n  cout<< CreateAcronym(s)<<endl;\n   \n\n   return 0;\n}\n\n", "class": 0, "version": 71, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase)\n{\n   string something = \" \";\n   for (int i = 0; i < userPhrase.size(); i++)\n   {\n      if (isupper(userPhrase.at(i)))\n      {\n         something.append(i);\n      }\n   }\n}\n\nint main() {\n   string phrase;\n   cin >> phrase;\n   const string userPhrase = phrase;\n   CreateAcronym(userPhrase);\n   \n\n   return 0;\n}", "class": 0, "version": 8, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase){\n   string temp = \"\";\n   temp = temp + userPhrase.at(0);\n   \n   for (unsigned int i = 1; i < userPhrase.size(); ++i){\n      if (userPhrase.at(i - 1) == ' '){\n         if (userPhrase.at(i) >= 'A' && userPhrase.at(i) <= 'Z'){\n            temp = temp + userPhrase.at(i);\n         }\n      }\n   }\n   cout << temp << endl;\n   return temp;\n}\n\nint main() {\n   string userPhrase;\n   \n   getline (cin, userPhrase);\n   \n   CreateAcronym(userPhrase);\n\n   return 0;\n}", "class": 0, "version": 122, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase){\n   string String = \"\";\n   for(unsigned int i = 0; i<userPhrase.size(); ++i){\n      if(isupper(userPhrase.at(i))){\n         String += userPhrase.at(i);\n      }\n   }\n   return String;\n}\n         \nint main() {\nstring Phrase;\ngetline(cin,Phrase);\ncout << CreateAcronym(Phrase) << endl;\n\n\n   return 0;\n}", "class": 0, "version": 78, "model": "Human"}
{"problem": 3, "code": "// Collaborated with Tyler Le\n#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase){\n   string acronym;\n   int i;\n   i = 0;\n   acronym = \"\";\n   for (i = 0; i < userPhrase.size(); ++i){\n      if (isupper(userPhrase.at(i))){\n         acronym = acronym + userPhrase.at(i);\n      }\n   }\n   return acronym;\n}\n\nint main() {\n   string userPhrase;\n   getline (cin, userPhrase);\n   \n   cout << CreateAcronym(userPhrase) << endl;\n   return 0;\n}", "class": 0, "version": 68, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase)\n{\n   string myAcronym;\n   myAcronym += userPhrase.at(0);\n   for (int i = 0; i < userPhrase.size(); i++)\n   {\n      if ( (userPhrase.at(i) == ' ') && (isupper(userPhrase.at(i + 1))) )\n      {\n         myAcronym += (userPhrase.at(i + 1));\n      }\n   }\n   return myAcronym;\n}\n\nint main() {\n   /* Type your code here */\n   string theUserString;\n   getline(cin, theUserString);\n   \n   cout << CreateAcronym(theUserString) << endl;\n\n   return 0;\n}", "class": 0, "version": 210, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &chef) {\n   string chicken = \"\";\n   \n   for(unsigned int i = 0; i < chef.size(); ++i) {\n      if(isupper(chef.at(i))) {\n        chicken += chef.at(i);\n      }\n   }\n   return chicken;\n}\n\nint main() {\n   \n   string hola;\n   string bruh;\n   \n   getline(cin, hola);\n   \n   bruh = CreateAcronym(hola);\n   \n   cout << bruh << endl;\n   \n\n   return 0;\n}", "class": 0, "version": 33, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym( string originalWord){\n   int i;\n   int size;\n   string acronym;\n  \n   \n   size = originalWord.size();\n   \n\n   \n   \n   if (isupper(originalWord.at(0))){\n      acronym = originalWord.at(0);}\n   for (i=0; i<size; ++i){\n     \n      if((isspace(originalWord.at(i)))&& (i+1<size)){\n         if ( isupper(originalWord.at(i+1))){\n            \n            acronym = acronym+originalWord.at(i+1);}}}\n   \n   if ( acronym==\"\"){\n      acronym = \"empty\";}\n   return acronym;\n   }\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 18, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym (string userStr)\n{\n   string acronym = \"\";\n   acronym = userStr.at(0);\n   for(int i = 0; i < userStr.size(); ++i)\n   {\n      if(userStr.at(i) == ' ')\n      {\n         if (userStr.at(i+1) >= 'A' && userStr.at(i+1) <= 'Z' )\n         {\n            acronym += userStr.at(i+1);\n         }\n      }\n   }\n   return acronym;\n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 48, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase){\n   string acryo = \"\";\n   for( unsigned int i = 0; i < userPhrase.size(); i++){\n      if(isupper(userPhrase.at(i))){\n         acryo += userPhrase.at(i);\n      }\n   }\n   return acryo;\n}\nint main() {\n   string acronym;\nstring userString;\ngetline(cin, userString);\nacronym = CreateAcronym(userString);\ncout << acronym << endl;\n   return 0;\n}", "class": 0, "version": 88, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 199, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(string s) {\n   string temp;\n   for (unsigned i = 0; i < s.length(); ++i) {\n      if (isupper(s.at(i))) {\n         if (i == 0) {\n            temp.push_back(s.at(i));\n         }\n         else if (s.at(i - 1) == ' ') {\n            temp.push_back(s.at(i));\n         }\n      }\n   }\n   if (temp.size() == 0) {\n      return \"empty\";\n   }\n   else {\n      return temp;\n   }\n}\n      \n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 98, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(string str){\n   string acronym = \"\";\n   for(int i = 0; i < str.size(); i++){\n      if(isupper(str.at(i)) && ((i == 0) || str.at(i-1) == ' ')){\n         acronym += str.at(i);\n      }\n   }\n   if(acronym.size() < 1){\n      return \"empty\";\n   }else{\n      return acronym;\n   }\n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 11, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase){\n   string output = \"\";\n   \n   for(unsigned i = 0; i < userPhrase.length(); i++){\n      char ch = userPhrase.at(i); //make if statement easier\n         //cout << ch << endl;\n      if (ch >= 65 && ch <= 90){\n         output += ch;\n      }\n   }\n   \n   return output;  \n}\n\nint main() {\n   string str;\n   getline(cin, str);\n   \n   cout << CreateAcronym(str) << endl;\n\n   return 0;\n}", "class": 0, "version": 239, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n\n\nstring CreateAcronym(string userPhrase){\n\n    string blank = \"\";\n\n    blank=blank+userPhrase[0];\n\n    for(int i=1;i<userPhrase.length();i++){\n\n        if(userPhrase[i-1]==' '){\n\n            if(userPhrase[i]>='A' && userPhrase[i]<='Z')\n                blank=blank+userPhrase[i];\n        }\n    }\n    return blank;\n}\n\n\nint main(){\n        string userPhrase;\n        \n        getline(cin, userPhrase);\n        \n        cout<<CreateAcronym(userPhrase)<<endl;\n        \n    return 0;\n}", "class": 0, "version": 16, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase) {\n   string finalString;\n   \n   for(unsigned int i = 0; i < userPhrase.length(); ++i) {\n      if (isupper(userPhrase.at(i)) != 0  ) {\n         finalString = finalString + userPhrase.at(i);\n      }\n   }\n   return finalString;\n}\n\n\nint main() {\n   string userPhrase;\n   \n   getline(cin, userPhrase);\n   \n   \n   cout << CreateAcronym(userPhrase) << endl;\n\n   return 0;\n}", "class": 0, "version": 193, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userInput) {\n   string acronym;\n   unsigned int charAfterSpace = 0; // first capitalization should be in beginning\n   unsigned int i;\n   unsigned int countUpper = 0; // count amount of characters in acronym\n   \n   for (i = 0; i < userInput.size(); ++i) {\n      if (i == charAfterSpace) { // for characters after spaces\n         if (isupper(userInput.at(charAfterSpace))) { // if capitalized\n            acronym = acronym + userInput.at(charAfterSpace); // add the char to the NEW string acronym\n            charAfterSpace = userInput.find(' ', charAfterSpace) + 1; // get the character after next space\n            ++countUpper;\n         }\n         else { // if not capitalized\n            charAfterSpace = userInput.find(' ', charAfterSpace) + 1; // get the character after next space\n         }\n      }\n   }\n   \n   if (countUpper == 0) { // when countUpper == 0, that means there is nothing in acronym, therefore acronym = empty\n      acronym = \"empty\";\n   }\n   \n   return acronym;\n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 171, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string s) {\n   string acronym = \"\";\n   \n   //first letter\n   if (isupper(s.at(0))) {\n      acronym.push_back(s.at(0));\n   }\n   // letters after any spaces\n   while (s.find(' ') != string::npos && s.find(' ') + 1 < s.size()) {\n      if (isupper(s.at(s.find(' ') + 1))) {\n         acronym.push_back(s.at(s.find(' ') + 1));\n      }\n      s.at(s.find(' ')) = '-';\n   }\n   \n   //returns empty if nothing is added\n   if (acronym == \"\") {\n      return \"empty\";\n   }\n   else {\n      return acronym;\n   }\n}\n\nint main() {\n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 92, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(const string& userPhrase){\n   string userAcro;\n   string userChar;\n   for (unsigned int i = 0; i < userPhrase.size(); ++i) {\n      if (isupper(userPhrase.at(i))) {\n         userChar = userPhrase.at(i);\n         userAcro.append(userChar);\n      }\n   }\n   return userAcro;\n}\n\nint main() {\n   /* Type your code here */\n   string userString;\n   \n   getline(cin, userString);\n   \n   cout << CreateAcronym(userString) << endl;\n\n   return 0;\n}", "class": 0, "version": 64, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Worked on this lab with classmate Robert */\n/* Define your function here */\n\nstring CreateAcronym(string inputLine) {\n   string acr;\n   \n   if (isupper(inputLine.at(0))) {\n      acr.push_back(inputLine.at(0));\n\n   }\n   for (unsigned int w = 0; w < inputLine.size(); w++) {\n      if (inputLine.at(w) == ' ') {\n         if (isupper(inputLine.at(w + 1))) {\n            acr.push_back(inputLine.at(w+1));\n      \n         }\n      }\n   }\n   return acr;\n}\n\n   \n   \n\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 208, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase)\n{\n   string acry = \"\";\n   \n   for (unsigned int i = 0; i < userPhrase.size(); ++i)\n   {\n      if(isalpha(userPhrase.at(i)))\n      {\n         if(isupper(userPhrase.at(i)))\n         {\n            acry.append (1, userPhrase.at(i));\n         }\n      }\n   }\n   return acry;\n}\n\nint main() {\n   string userText;\n   \n   getline (cin,userText);\n   \n   cout << CreateAcronym(userText) << endl;\n\n   return 0;\n}", "class": 0, "version": 96, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase){\n   for (int i=0; i<userPhrase.size();i++){\n      if (isupper(userPhrase[i])){\n         CreateAcronym.push_back(1, userPhrase[i]);\n      }\n   }\n}\n\n\nint main() {\nstring  CreateAcronym;\nstring userPhrase;\n\ncin >> userPhrase;\n\ncout << CreateAcronym;\n\n\n   return 0;\n}", "class": 0, "version": 167, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(const string &userPhrase) {\n   string newAcronym;\n   for(long unsigned int i = 0; i < userPhrase.size()-1; ++i){\n      if (isupper(userPhrase.at(i))){\n         newAcronym += toupper(userPhrase.at(i));\n      }\n   }\n   cout << newAcronym << endl;\n   return newAcronym;\n}\n\nint main() {\n   /* Type your code here */\n   string userString;\n   getline (cin, userString);\n   CreateAcronym(userString);\n   \n\n   return 0;\n}", "class": 0, "version": 75, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase)\n   int x= userPhrase.size();\n   int i=0;\n   string letter = \"\";\n   \n   for (i=0; i< x; ++i){\n      if (isupper (userPhase.at(i))){\n         letter= letter + userphase.at(i);\n\nint main() {\n   cout << CreateAcronym << endl;\n\n   return 0;\n}", "class": 0, "version": 153, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(const string &userPhrase){\n   string acr = \"\";\n   for(unsigned int i = 0; i < userPhrase.size(); ++i){\n         if(isupper(userPhrase.at(i))){\n              acr += userPhrase.at(i);\n         }\n   }\n   return acr;\n}\n\nint main() {\n   /* Type your code here */\n   string userStr;\n   getline(cin, userStr);\n   \n   cout << CreateAcronym(userStr) << endl;\n\n   return 0;\n}", "class": 0, "version": 173, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n//collaborated with Ethan Le\n\nstring CreateAcronym(const string &userPhrase) {\n   string upper = \"\";\n   upper = upper + userPhrase[0];\n   for (unsigned int i = 1; i < userPhrase.length(); ++i) {\n      if (userPhrase[i-1] == ' ') {\n         if (userPhrase [i] >= 'A' && userPhrase [i] <= 'Z') {\n            upper = upper + userPhrase[i];\n         }\n      }\n   }\n   return upper;\n}\n\nint main() {\n   string userPhrase;\n   getline(cin, userPhrase);\n   cout << CreateAcronym(userPhrase) << endl;\n\n   return 0;\n}", "class": 0, "version": 19, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(string userString) {\n   string acronymString = \"XX\";\n   string newString;\n   int i;\n   int j;\n   \n   if (isupper(userString.at(0))) {\n      acronymString.push_back(userString.at(0));\n   }\n\n   j = (userString.size() - 1);\n   for (i = 1; i < j; ++i) {\n      if ((userString.at(i)) == ' ') {\n         if (isupper(userString.at(i + 1))) {\n            acronymString.push_back(userString.at(i + 1));\n         }\n      }\n   }\n   \n   if (acronymString  == \"XX\") {\n      newString = \"empty\";\n   }\n   else {\n      newString = acronymString.substr(2, userString.size());\n   }\n   \n   return newString;\n   \n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 158, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(const string &userPhrase)\n{\n   string temp = \" \";\n\n   for(unsigned i=0; i < userPhrase.length(); i++)\n   {\n      if(!(isspace(userPhrase.at(i))))\n      {\n         if((userPhrase.at(i) >= 'A')||(userPhrase.at(i) <= 'Z'))\n         {\n            temp += userPhrase.at(i);\n         }\n      }\n   }\n   userPhrase = temp;\n   return userPhrase;\n}\n\nint main() {\n   /* Type your code here */\n   string userInput;\n   getline(cin, userInput);\n   \n   cout << CreateAcronym(userInput) << endl;\n   \n\n   return 0;\n}", "class": 0, "version": 160, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n   int x;\n   int i;\n   string prev;\n   \n   x = userPhrase.size();\n   \n   for (i = 0; i < x; ++i) {\n      if (isupper(userPhrase.at(i))) {\n         prev += userPhrase.at(i);\n      }\n   }\n\nreturn prev;\n}\n\nint main() {\n   string userPhrase;\n   string outPut;\n   \n   getline (cin, userPhrase);\n   \n   cout << CreateAcronym(userPhrase) << endl;\n\n   return 0;\n}", "class": 0, "version": 41, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(string userString){\n   string hold = \"\";\n   getline(cin, userString);\n   if(isupper(userString.at(0))){\n      hold+=userString.at(0);\n   }\n   for(unsigned int i = 2; i<userString.size(); i++){\n      if(isupper(userString.at(i))){\n         if(isspace(userString.at(i-1))){\n            hold += userString.at(i);\n         }\n      }\n   }\n   //if(hold == \"\"){\n      //hold = \"empty\";\n   //}\n   return hold;\n}\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 50, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase)\n{\n   string acronym;\n   for (unsigned int i = 0; i < userPhrase.size(); ++i)\n   {\n      if (isupper(userPhrase.at(i)))\n      {\n         acronym.push_back(userPhrase.at(i));\n      }\n   }\n   return acronym;\n}\n\nint main() {\nstring phrase;\ngetline(cin,phrase);\ncout << CreateAcronym(phrase) << endl;\n   return 0;\n}", "class": 0, "version": 192, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase);\nstring CreateAcronym(const string &userPhrase){ \n   string tit = \"\";\n   for(unsigned i = 0; i < userPhrase.length()-1; i++){\n      char temp = userPhrase[i];\n      if(temp > 64 && temp < 91){\n         tit += temp;\n   }\n   }\nreturn tit;   \n}\n\n\n\n\nint main() {\n\nstring userPenis;\ngetline(cin, userPenis);\nconst string yummy = userPenis;\nstring toot = CreateAcronym(yummy);\ncout << toot << endl;\n   return 0;\n}", "class": 0, "version": 95, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym( const string& userPhrase) {\n   string acronymMade = \"\";\n   for (unsigned int i = 0; i < userPhrase.size(); ++i) {\n      if ( isupper(userPhrase.at(i))) {\n         acronymMade += userPhrase.at(i);\n      }\n   }\n   return acronymMade;\n}\n\nint main() {\n   /* Type your code here */\n   string userPhrase;\n   getline(cin, userPhrase);\n   \n   cout << CreateAcronym( userPhrase) << endl;\n\n   return 0;\n}", "class": 0, "version": 197, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase){\n   string newphrase = \"\";\n   for(unsigned int i = 0; i < userPhrase.size(); ++i){\n      if(isupper(userPhrase.at(i))){\n         newphrase = newphrase + userPhrase.at(i);\n      }\n   }\n   return newphrase;\n}\n\n\nint main() {\n   string phrase;\n   \n   getline(cin, phrase);\n   \n   cout << CreateAcronym(phrase) << endl;\n   \n   return 0;\n}", "class": 0, "version": 243, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym (const string &userPhrase) {\n   string x = \"\";\n   x = x + userPhrase [0];\n   for (int i=1; i < userPhrase.length(); i++) {\n      if (userPhrase [i-1] == ' ') {\n         if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z')\n         x = x + userPhrase [i];\n      }\n   }\n   return x;\n}\n\nint main() {\n   string userPhrase;\n   getline (cin, userPhrase);\n   cout << CreateAcronym (userPhrase) << endl;\n\n   return 0;\n}", "class": 0, "version": 198, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase){\n   \n   string finalString;\n   \n   for (int i=0; i < userPhrase.length(); ++i)\n   {\n    if ( userPhrase.at(i) >= 'A' && userPhrase.at(i) <= 'Z')\n    {\n     finalString.push_back(userPhrase.at(i));  \n    }\n      \n   }\n   \n   return finalString;\n}\n\nint main() {\n   string userString;\n   getline(cin, userString);\n   \n   cout << CreateAcronym(userString) << endl;\n   \n\n   return 0;\n}", "class": 0, "version": 110, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\n/*while the first letter after a space is capital, add that letter to the string\nand if the first letter of the string is capital*/\nstring CreateAcronym(const string &userPhrase) {\n   string acronym;\n   string newFindIndex;\n   \n   if(userPhrase.at(0) >= 65 && userPhrase.at(0) <= 90){ \n   acronym = userPhrase.at(0);\n   }\n   \n   for(unsigned int i = 0; i < userPhrase.size(); ++i) {\n      if(userPhrase.at(i) == ' ' && userPhrase.at(i + 1) >= 65 && userPhrase.at(i + 1) <= 90) {\n         acronym = acronym + userPhrase.at(i + 1);\n      }\n   } \n\n   return acronym;\n}\n\n\nint main() {\n   /* Type your code here */\n   string userString;\n   \n   getline(cin, userString);\n   \n   cout << CreateAcronym(userString) << endl;\n   \n   return 0;\n}", "class": 0, "version": 56, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n   unsigned int i;\n   string acronym;\n   acronym = userPhrase.at(0);\n   // finds capitalized letters\n     for (i = 1; i < userPhrase.size(); ++i) {\n        if ((userPhrase.at(i)) == toupper(userPhrase.at(i))) {\n           acronym = acronym + userPhrase.at(i);\n        }\n     }\n     //remove spaces\n      if (acronym.find(\" \") != string::npos) {\n         while (acronym.find(\" \") != string::npos) {\n            acronym.replace(acronym.find(\" \"), 1, \"\");\n         }\n      }\n    \n      return acronym;\n}\n\nint main() {\n   string acronym;\n   string userPhrase;\n   \n   getline(cin, userPhrase);\n   \n   \n   acronym = CreateAcronym(userPhrase);\n   cout << acronym << endl;\n   return 0;\n}", "class": 0, "version": 16, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n string CreateAcronym (const string &userPhrase)\n {\n    string capsOnly;\n    capsOnly+= userPhrase.at(0);\n    for (int i= 0; i < userPhrase.size(); ++i)\n      {\n         if((userPhrase.at(i) == ' ') && (isupper(userPhrase.at(i+1))))\n         {\n            capsOnly += userPhrase.at(i+1); \n         }\n         }\n         return capsOnly;\n }\nint main() {\n\n   string theString;\n   getline (cin, theString);\n   \n   cout << CreateAcronym(theString) << endl;\n\n   return 0;\n}", "class": 0, "version": 102, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase){\n\n    string res = \"\";\n\n    res=res+userPhrase[0];\n\n    for(int i=1;i<userPhrase.length();i++){\n\n        if(userPhrase[i-1]==' '){\n\n            if(userPhrase[i]>='A' && userPhrase[i]<='Z')\n                res=res+userPhrase[i];\n        }\n    }\n    return res;\n}\n\n\nint main(){\n        string userPhrase;\n        \n        getline(cin, userPhrase);\n        \n        cout<<CreateAcronym(userPhrase)<<endl;\n        \n    return 0;\n}\n", "class": 0, "version": 302, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n   string newString = \"\";\n   for (unsigned int i = 0; i < (userPhrase.size() - 1); i++) {\n      if (isupper(userPhrase.at(i))) {\n         newString = newString + userPhrase.at(i);\n      }   \n   }\n   return newString;   \n }\n\nint main() {\n   \n   string userString;\n   \n   getline (cin, userString);\n   \n   cout << CreateAcronym( userString) << endl;\n   \n   return 0;\n}", "class": 0, "version": 16, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string s) {\n   int size;\n   size = s.size();\n   string b;\n   \n   if (isupper(s.at(0))) {\n      b = b + s.at(0);\n   }\n   \n   for (int i = 1; i < size; i++) {\n      if ((isupper(s.at(i))) && (s.at(i - 1) == ' ')) {\n         b = b + s.at(i);   \n      }\n   }\n   if (b.empty()) {\n      b = \"empty\"; \n   }\n   return b;\n}\n\nint main() {\n\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 217, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase)  { \n   char i; \n   \n   for (i = 0; i < userPhrase.length(); i++)  {\n      if (isupper(userPhrase.at(i)))  {\n         cout << userPhrase.at(i);\n      }\n   }\n   cout << endl;\n}\n\nint main() {\n   \n  string userInput;\n  \n  getline(cin, userInput); \n  \n  CreateAcronym(userInput);\n\n\n   return 0;\n}", "class": 0, "version": 10, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym;\n    for(int i = 0; i < userPhrase.size(); ++i) {\n        if(i == 0 || userPhrase[i-1] == ' ') {\n            if(isupper(userPhrase[i])) {\n                acronym += userPhrase[i];\n            }\n        }\n    }\n    return acronym;\n}\n\nint main() {\n   string s;\n    getline(cin, s);\n    cout << CreateAcronym(s) << endl;\n\n   return 0;\n}", "class": 0, "version": 37, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPharase)\n{\n   string s;\n   for (unsigned int i = 0; i < userPharase.size(); ++i)\n   {\n      if (isupper(userPharase.at(i)))\n      {\n         s = s + userPharase.at(i);\n      }\n   }\n   return s;\n}\n   \n\nint main() {\n   string input;\n   getline(cin, input);\n   string output;\n   \n   output = CreateAcronym(input);\n   cout << output << endl;\n\n   return 0;\n}", "class": 0, "version": 48, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase){\n\n    string res = \"\";\n\n    res=res+userPhrase[0];\n\n    for(int i=1;i<userPhrase.length();i++){\n\n        if(userPhrase[i-1]==' '){\n\n            if(userPhrase[i]>='A' && userPhrase[i]<='Z')\n                res=res+userPhrase[i];\n        }\n    }\n    return res;\n}\n\n\nint main(){\n        string userPhrase;\n        \n        getline(cin, userPhrase);\n        \n        cout<<CreateAcronym(userPhrase)<<endl;\n        \n\n\n   return 0;\n}", "class": 0, "version": 155, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userString) {\n   string newString = \"\";\n   int length;\n   length = userString.length();\n   if (isupper(userString.at(0))) {\n      newString += userString.at(0);\n   }\n   for (int i = 0; i < length; ++i) {\n      if ((userString.at(i) == ' ') && i<(length-1)){\n         if (isupper(userString.at(i+1))) {\n            newString += userString.at(i+1);\n         }\n      }\n      //else if (isupper(userString.at(i)) == 0) {\n         //newString = \"empty\";\n     // }\n   }\n   if (newString == \"\") {\n      newString = \"empty\";\n   }\n   return newString;\n}\n/* Define your function here */\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   return 0;\n}", "class": 0, "version": 20, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string userPhrase) {\n   unsigned i;\n   string acronym;\n   \n   acronym = \"\";\n   \n   for (i = 0; i < userPhrase.length(); ++i) {\n      if ((userPhrase.at(i) >= 65) && (userPhrase.at(i) <= 90)) {\n         acronym = acronym + userPhrase.at(i);\n      }\n   }\n   return acronym;\n}\n\n\nint main() {\n   string userString;\n   \n   getline(cin, userString);\n   \n   cout << CreateAcronym(userString) << endl;\n\n   return 0;\n}", "class": 0, "version": 12, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(const string &userPhrase) {\n   string acronym = \"\";\n   for (unsigned int i =0; i < userPhrase.size(); ++i) {\n      if(userPhrase.at(i) > 63 && userPhrase.at(i) < 91) {\n         acronym += userPhrase.at(i);\n      }\n   }\n   return acronym;\n}\n\nint main() {\n   /* Type your code here */\n   string phrase;\n   getline(cin, phrase);\n   cout << CreateAcronym(phrase) << endl;\n\n   return 0;\n}", "class": 0, "version": 146, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase)\n{\n   string newString;\n   for(unsigned int i = 0; i <userPhrase.size(); ++i)\n   {\n      if ((userPhrase.at(i) >= 65 && userPhrase.at(i)<=90))\n      {\n         newString += userPhrase.at(i);\n      }\n   }\n   return newString;\n}\n\n\nint main() {\n\nstring userPhrase;\ngetline(cin,userPhrase);\ncout << CreateAcronym(userPhrase) << endl;\n   return 0;\n}", "class": 0, "version": 127, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n   string acronym;\n   for (int i = 0; i < userPhrase.size(); ++i) {\n      if (isupper(userPhrase.at(i))) {\n         acronym = acronym + userPhrase.at(i);\n      }\n   }\n   return acronym;\n}\n         \n\nint main() {\n   string userPhrase;\n   \n   getline(cin, userPhrase);\n   \n   cout << CreateAcronym(userPhrase) << endl;\n\n   return 0;\n}", "class": 0, "version": 38, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\n#include <vector> \nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(string userPhrase){\n   string newPhrase = \"\"; \nfor(int i = 0; i <= userPhrase.length() - 1; ++i){\n   if(i == 0){\n   newPhrase.push_back(userPhrase.at(i)); \n   }\n   else{\n   if(userPhrase.at(i) >= 65 && userPhrase.at(i) <= 90){\n      newPhrase.push_back(userPhrase.at(i)); \n    }\n   }\n }\n return newPhrase; \n}\n\nint main() {\n   string input;\n   getline(cin, input); \n   cout << CreateAcronym(input)<<endl; \n   \n   /* Type your code here */\n\n   return 0;\n}", "class": 0, "version": 81, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(const string &userPhrase) {\n   string s;\n   int l = userPhrase.length();\n   for (int i = 0; i < l; i++) {\n      if(userPhrase[i] <= 90 && userPhrase[i] >= 65) {\n         s = s + userPhrase[i];\n         }\n      }\n   return s;\n   }\n\nint main() {\n   /* Type your code here */\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   return 0;\n}", "class": 0, "version": 196, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase)\n{\n   string acronym;\n   for(unsigned int i = 0; i < userPhrase.size(); i++)\n   {\n      if(isupper(userPhrase.at(i)))\n      {\n         acronym += userPhrase.at(i);\n      }\n   }\n   return acronym;\n}\n\nint main() {\n   string userPhrase;\n   getline(cin, userPhrase);\n   cout << CreateAcronym(userPhrase) << endl;\n\n   return 0;\n}", "class": 0, "version": 74, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase) {\n   int acronym;\n   string newOutput;\n   for (unsigned int i = 0; i < userPhrase.size(); i++) {\n      acronym = userPhrase.at(i);\n      if ((acronym >= 65) && (acronym <= 90)) {\n         newOutput = newOutput + userPhrase.at(i);\n      }\n   }\n   return newOutput;\n}\n\nint main() {\n   string userInput;\n   getline (cin, userInput);\n   \n   cout << CreateAcronym (userInput) << endl;\n\n   return 0;\n}", "class": 0, "version": 2, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n   string y;\n   string CreateAcronym(const string &userPhrase) { \n      for( int i = 0; i < userPhrase.size(); i++) {\n         if (userPhrase.at(i) >= 'A') {\n            if (userPhrase.at(i) <= 'Z') {\n            y+= userPhrase.at(i);\n               }\n         }\n      }\n      return y;\n   }\n\nint main() {\n   string x; \n   string result;\n   getline(cin, x);\n   \n   result = CreateAcronym(x);\n   \n   cout<< result << endl;\n   \n\n   return 0;\n}", "class": 0, "version": 53, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym( string str ) {\n   \n   unsigned int i;\n   string acronym = \"\";\n   int cnt = 0;\n   \n   if(str.at(0) != ' ' && !(isdigit(str.at(0)))) {\n      acronym += str.at(0);\n   }\n   \n   for ( i = 1; i < str.size() - 1; ++i ) {\n      if ( str.at(i) == ' ' && isupper(str.at(i + 1))) { \n         acronym += str.at(i + 1);\n         cnt++;\n      }\n   }\n\n   if(cnt == 0) {\n      acronym = \"empty\";\n   }\n   \n   return acronym;\n}\n    \n      \nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 31, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(const string &userPhrase){\n   string x = \"\";\n   for (unsigned int i = 0; i < userPhrase.size(); ++i){\n      if (isupper(userPhrase.at(i))){\n         x= x+userPhrase.at(i);\n      }\n   }\n   return x;\n}\nint main() {\n   /* Type your code here */\nstring userPhrase;\ngetline (cin, userPhrase);\ncout << CreateAcronym (userPhrase) << endl; \n   return 0;\n}", "class": 0, "version": 235, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase)\n{\n    string blank = \"\";\n\n    blank = blank + userPhrase[0];\n\n    for(unsigned int i = 1; i < userPhrase.length(); i++)\n    {\n        if(userPhrase[i-1] == ' ')\n        {\n            if(userPhrase[i] >= 'A' && userPhrase [i] <= 'Z')\n            {\n                blank = blank + userPhrase[i];\n            }\n        }\n    }\n    return blank;\n}\n\nint main() {\n\n   string userPhrase;\n\n   getline(cin, userPhrase);\n\n   cout << CreateAcronym(userPhrase) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 283, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase){\n   \n   int i;\n   string ss;\n   \n   for(i = 0; i < userPhrase.length(); ++i){\n      if(userPhrase.at(i) >= 65 && userPhrase.at(i) <= 90){\n         ss += userPhrase.at(i);\n      }\n   }\n   \n   return ss;\n   \n}\n\nint main() {\n   string s;\n   \n   getline(cin, s);\n   \n   CreateAcronym(s);\n   \n   cout << CreateAcronym(s) << endl;\n\n   return 0;\n}", "class": 0, "version": 154, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase){\n   string newString = \"\";\n   newString = newString + userPhrase.at(0);\n   \n   for (unsigned int i = 1; i < userPhrase.length(); ++i) {\n      if (userPhrase.at(i-1) == ' ') {\n         if(userPhrase.at(i) >= 'A' && userPhrase.at(i) <= 'Z') {\n            newString = newString + userPhrase.at(i);\n         }\n      }\n   }\n   return newString;\n}\n\n\nint main() {\n   string userPhrase;\n   getline(cin, userPhrase);\n   cout << CreateAcronym(userPhrase) << endl;\n   \n\n   return 0;\n}", "class": 0, "version": 274, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym( const string &userPhrase){\n   string acronym;\n   string copy;\n   int i = 0;\n   int k = 0; \n   \n   \n   k = userPhrase.size() -1;\n   copy = userPhrase;\n  \n   while( i < k){\n      if ( (isalpha(copy.at(i)) ) && (isupper(userPhrase.at(i) ))){\n         acronym = acronym + userPhrase.at(i);\n         ++i;\n      }\n         else{\n      ++i;\n      }\n      }\n   return acronym;\n}\n\nint main() {\n   string userPhrase;\n   getline (cin, userPhrase);\n   \n   cout << CreateAcronym(userPhrase) << endl;\n\n   return 0;\n}", "class": 0, "version": 123, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string str) {\n   unsigned int i;\n   string acronym;\n   \n   if (isalpha(str.at(0)) && isupper(str.at(0))) {\n      acronym += str.at(0);\n   }\n   else if (isalpha(str.at(0)) && !(isupper(str.at(0)))) {\n      acronym = \"empty\";\n   }\n   \n   for (i = 0; i < str.size() - 1; i++) {\n      if (str.at(i) == ' ') {\n         if (isupper(str.at(i + 1))) { \n            acronym += str.at(i + 1);\n         }\n      }\n   }\n   return acronym;\n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 143, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring userPhrase;\nstring CreateAcronym(const string &userPhrase)\n{\nint asciiVal;\nistringstream ss (userPhrase);\nstring ans = \"\", word;\nchar tempAns;\nwhile (ss >> word)\n{\n   if (word != \"and\" && word != \"of\")\n   {\n      tempAns = word [0];\n      asciiVal = (int) tempAns;\n      if (asciiVal >= 65 && asciiVal <=90)\n      {\n         ans += tempAns;\n      }\n   }\n}\nreturn ans;\n}\nint main() {\n   /* Type your code here */\n   string userPhrase;\n   getline (cin, userPhrase);\n   cout << CreateAcronym(userPhrase) << endl;\n   return 0;\n}", "class": 0, "version": 62, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym (string userString)   {\n   string acronym;\n   int stringSize;\n   int numStartingCapitals = 0;\n   int i;\n   \n   stringSize = userString.size();\n   \n   if (isupper(userString.at(0)))   {\n         acronym.push_back(userString.at(0));\n         numStartingCapitals = numStartingCapitals + 1;\n   }\n   \n   for (i = 0; i < stringSize - 1; i++)   {\n      if ((userString.at(i) == ' ') && (isupper(userString.at(i + 1))))   {\n         acronym.push_back(userString.at(i+1));\n         numStartingCapitals = numStartingCapitals + 1;\n      }\n   }\n   \n   if (numStartingCapitals == 0)   {\n      acronym = \"empty\";\n   }\n\n   return acronym;\n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 24, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(const string &userPhrase)\n{\n   unsigned i;\n   string Upperl;\n   for (i =0; i <userPhrase.size();i++)\n   {\n      if ( isupper(userPhrase.at(i)))\n      Upperl+=userPhrase.at(i);\n   }\n   return (Upperl);\n}\n\nint main() {\n   /* Type your code here */\n   string input;\n   getline (cin, input);\n   cout << CreateAcronym (input) <<endl;\n   return 0;\n}", "class": 0, "version": 142, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase)\n{\n   string newString;\n   for(unsigned int i = 0; i < userPhrase.size(); ++i)\n   {\n      \n         if(isupper(userPhrase.at(i)))\n         {\n            newString += userPhrase.at(i);\n         }\n        \n   }\n   return newString;\n   \n}\n\nint main() {\n   string str;\n  getline(cin, str);\n  \n  cout << CreateAcronym(str) << endl;\n\n   return 0;\n}", "class": 0, "version": 231, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string tester){\nint num;\nbool upper = false;\nstring extra;\n   for (int x = 0; x < tester.size(); x++){\n      if (tester.at(x) == ' ') {\n         num++;\n         upper = isupper(tester.at(x+1));\n         if (upper == true) {\n            extra = extra + tester.at(x+1);\n         }\n      }\n      else if (x == 0) {\n         if (isupper(tester.at(x))){\n            extra = extra + tester.at(x);  \n         }\n      }\n      \n   }\n   tester = extra;\n   if (tester.size() == 0) {\n      tester = \"empty\"; \n   }\n   return tester;\n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 9, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase)  {\n   string t;\n   for (unsigned int i = 0; i < userPhrase.size(); ++i)  {\n      if (isupper(userPhrase.at(i)))   {\n         t = t + userPhrase.at(i);\n      }\n   }\n   return t;\n}\n   \n\nint main() {\n   string s;\n   \n   getline(cin, s);\n   \n   cout << CreateAcronym(s) << endl;\n\n   return 0;\n}", "class": 0, "version": 176, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\nstring CreateAcronym(string userPhrase)\n{\nstring acronym;\nint length = userPhrase.length();\nint i;\nfor (i=0;i<length;i++)\n{\nif ((int)userPhrase[i] >= 65 && (int)userPhrase[i]<=90 && (i == 0 || userPhrase[i-1] == ' ' ))\n{\nacronym = acronym + userPhrase[i];\n}\n}\nreturn acronym;\n}\n\nint main() {\n   string str;\n\ngetline(cin,str);\n\ncout << CreateAcronym(str)<<endl;\n\n   return 0;\n}", "class": 0, "version": 3, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(const string &userPhrase)\n{\n   string a = \"\";\n   for (unsigned int i = 0; i < userPhrase.size(); ++i)\n   {\n      if (isupper(userPhrase[i]))\n      {\n         a.append(1, userPhrase[i]);\n      }\n   }\n   return a;\n}\nint main() {\n   /* Type your code here */\n   string s;\n   getline (cin, s);\n   cout << CreateAcronym(s)<<endl;\n   return 0;\n}", "class": 0, "version": 12, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase) {\n   string userAcronym;\n\n   for (int i = 0; userPhrase[i]; i++) {\n      if (i == 0 || islower(userPhrase[i]) == false) {\n         if (65 <= int(userPhrase[i]) && int(userPhrase[i]) <= 90) {\n            userAcronym += userPhrase[i];\n         }\n      }\n   }\n   \n   return userAcronym;\n}\n\nint main() {\n   string userPhrase;\n   string userAcronym;\n   \n   getline (cin, userPhrase);\n   \n   userAcronym = CreateAcronym(userPhrase);\n   \n   cout << userAcronym << endl;\n   \n   return 0;\n}", "class": 0, "version": 138, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userString) {\n   unsigned int i;\n   string stringAcr;\n   \n   for (i = 0; i < userString.size(); ++i) {\n      if (isalpha(userString.at(i)) && isupper(userString.at(i))) {\n         if (i == 0) {\n            stringAcr.push_back(userString.at(i));\n         }\n         if (i > 0) {\n            if (userString.at(i - 1) == ' ') {\n               stringAcr.push_back(userString.at(i));\n            }\n         }\n      }\n   }\n   if (stringAcr == \"\") {\n      stringAcr = \"empty\";\n   }\n   \n   return stringAcr;\n}\n\nint main() {\n   string userString;\n   getline(cin, userString);\n   cout << CreateAcronym(userString) << endl;\n   \n   return 0;\n}", "class": 0, "version": 100, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase)\n{\n   unsigned int i;\n   string newString;\n   for( i = 0; i < userPhrase.size() ; ++i)\n   {\n      if(userPhrase.at(i) >= 'A' && userPhrase.at(i) <= 'Z')\n     {\n        newString = newString + userPhrase.at(i);\n     }\n   }\n   \n   return newString;\n}\n   \n\nint main() {\n   string userSay;\n   \n   getline( cin, userSay);\n   \n   cout <<CreateAcronym(userSay) << endl;\n\n   return 0;\n}", "class": 0, "version": 28, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase)\n{\n   string s;\n   int vars;\n   \n   vars = userPhrase.size();\n   \n   if(isupper(userPhrase.at(0)))\n   {\n      s = userPhrase.substr(0, 1);\n   }\n   \n   for(int i = 0; i < vars; i++)\n   {\n      if (userPhrase.at(i) == ' ')\n      {\n         if (isupper(userPhrase.at(i + 1)))\n         {\n            s = s + userPhrase.substr(i + 1, 1);\n         }\n      }\n   }\n   \n   \n   return s;\n}\n\nint main() {\n   \n    string myString;\n    \n    getline(cin, myString);\n   \n    cout << CreateAcronym(myString) << endl;\n\n   return 0;\n}", "class": 0, "version": 158, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here \n   string::npos*/\nstring CreateAcronym( string s ){\n   unsigned int i;\n   string acronym;\n   string s2;\n   for(i = 0; i < s.size(); ++i){\n      if(((i == 0) || s.at(i - 1) == ' ') && isupper( s.at(i)) ){\n         s2 = s.at(i);\n         acronym.push_back(s.at(i));\n      }\n   }\nreturn acronym;\n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 101, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string acronymStr){\nstring newStr =\"\";\n\n   if (isupper(acronymStr.at(0))){\n      newStr += acronymStr.at(0);\n   }\n   for( unsigned int i = 1; i < acronymStr.size(); ++i) {\n      if (acronymStr.at(i) == ' ' && isupper(acronymStr.at(i))){\n         newStr +=newStr.at(i);\n      }\n   }\n   return newStr;\n}\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 17, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(const string &userPhrase){\n   \n   string sNew = \"\";\n\n   for(unsigned int i =0; i<userPhrase.size(); ++i){\n      if(isupper(userPhrase.at(i)) )\n      {\n      sNew += userPhrase.at(i);\n      }\n   }\n      return sNew;\n}\nint main() {\n   /* Type your code here */\n   string userText;\n  getline(cin,userText);\n   cout<<CreateAcronym(userText)<<endl;\n\n   return 0;\n}", "class": 0, "version": 246, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string wholeString) {\n   string userAcronym ;\n   for (int i = 0 ; i < wholeString.size() ; i++) {\n      if (isupper(wholeString.at(i))) {\n         userAcronym.append(1, wholeString.at(i)) ;\n      }\n   }\n   return userAcronym ;\n   }  \n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 67, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userString){\n   string userAcr = \"\";\n   int i;\n   int j;\n   j = userString.size();\n   userAcr = userString.at(0);\n   if(userString.size() == 0){\n      return(\"empty\");\n   }\n   for(i = 0; i < j; i++){\n      if( userString.at(i) == ' '){\n         if(isupper(userString.at(i+1)) && isalpha(userString.at(i+1))){\n            userAcr = userAcr + userString.at(i+1);\n         }\n      }\n   }\n   return (userAcr); \n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 70, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(const string &userPhrase){\n   \n   bool reset = true;\n   string acronym = \"\";\n   \n   for(unsigned int i = 0; i < userPhrase.size(); ++i){\n      \n      if( reset && userPhrase.at(i) >= 65 && userPhrase.at(i) <= 90){\n         acronym += userPhrase.at(i);\n         reset = false;\n      }\n      reset = ((userPhrase.at(i)== ' ')&&(!reset));\n   }\n   return acronym;\n}\n\nint main() {\n   string input;\n   getline(cin, input);\n   \n   cout << CreateAcronym(input) << endl;\n   /* Type your code here */\n\n   return 0;\n}", "class": 0, "version": 165, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(const string &);\n\nint main() {\n   /* Type your code here */\n   string userPhrase;\n   getline(cin, userPhrase);\n   cout << CreateAcronym(userPhrase);\n   cout << endl;\n   \n   return 0;\n}\nstring CreateAcronym (const string &userPhrase)\n{\n   string result = \"\";\n   bool first = true;\n   for(int i = 0; i < userPhrase.length(); i++){\n      \n      if(isupper(userPhrase[i])){\n         first = true;\n      }\n     \n         \n         if(userPhrase[i] == ' '){\n            first = true;\n         }\n         else if (userPhrase[i] != ' ' && first == true){\n         result.push_back(userPhrase[i]);\n         first = false;\n         }\n      \n   }\n\n   return result;\n   \n}\n", "class": 0, "version": 156, "model": "Human"}
{"problem": 3, "code": "//worked with Jill Chahal\n#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string str){\n   int size = str.size();\n   string acronym;\n\n   for(int i = 0; i < size; ++i){\n      if(i == 0){\n         if(isupper(str.at(0))){\n            acronym.push_back(str.at(i));\n           }\n      } \n         else if(str.at(i-1) == ' '){\n           if(isupper(str.at(i))){\n               acronym.push_back(str.at(i));\n            }\n         }\n   }\n\n   return acronym;\n}\n\n\nint main() {\n   string str;\n   string acronym;\n\n   getline(cin, str);\n\n   cout << CreateAcronym(str) << endl;\n\n   return 0;\n}", "class": 0, "version": 177, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase){\n\n    string res = \"\";\n\n    res=res+userPhrase[0];\n\n    for(int i=1;i<userPhrase.length();i++){\n\n        if(userPhrase[i-1]==' '){\n\n            if(userPhrase[i]>='A' && userPhrase[i]<='Z')\n                res=res+userPhrase[i];\n        }\n    }\n    return res;\n}\n\n\nint main(){\n        string userPhrase;\n        \n        getline(cin, userPhrase);\n        \n        cout<<CreateAcronym(userPhrase)<<endl;\n   return 0;\n}", "class": 0, "version": 305, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym (const string &userPhrase) {\n   string newS;\n   for (unsigned int i = 0; i < userPhrase.size(); ++i) {\n      if (isupper(userPhrase.at(i))) {\n         newS = newS + userPhrase.at(i);\n      }\n   }\n   return newS;\n}\n\nint main() {\n   string userString;\n   string s;\n   \n   getline (cin, userString);\n   cout << CreateAcronym (userString) << endl;\n\n   return 0;\n}", "class": 0, "version": 208, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n//Worked with Derek Tran//\n\nstring CreateAcronym(string userString) {\n   unsigned int iter = 0;\n   string acronym = \"\";\n   \n   while (((userString.find(\" \", iter) != string::npos) || (iter == 0)) && (iter < userString.size() - 1)) {\n      if ((iter == 0) && (isupper(userString.at(iter)))) {\n         acronym = userString.at(0);\n      }\n      else if ((isupper(userString.at(iter + 1))) && (userString.at(iter) == ' ')) {\n         acronym.push_back(userString.at(iter + 1));\n      }\n      \n      iter = iter + 1;\n   }\n   \n   if (acronym == \"\") {\n      acronym = \"empty\";\n   }\n   return acronym;\n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   \n\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 144, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userInput) {\n   string Acronyms;\n   int i;\n   for ( i = 0; i < userInput.size(); ++i) {\n      if ( (userInput.at(i) >= 'A') && (userInput.at(i) <= 'Z') ) {\n         Acronyms = userInput.at(0);\n         \n      }\n}\nreturn Acronyms;\n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 57, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userString) {\n   string result = \"\";\n   int i;\n   \n   for (i = 0; i < userString.length(); ++i) {\n      if (i == 0){\n         if (isupper(userString.at(0))) {\n            result = userString.at(0);\n         }\n      }\n      if (i != 0) {\n         if (isupper(userString.at(i))) {\n            if (isspace(userString.at(i-1))) {\n               result += userString.at(i);\n            }\n         }\n      }\n   }\n   if (result == \"\") {\n         result = \"empty\";\n   }\n   \n   return result;\n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 23, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n   string CreateAcronym(const string &userPhrase){\n   string acronym = \"\";\n   \n      for (unsigned int i =0; i < userPhrase.size(); ++i){\n         if ( isupper(userPhrase.at(i)) ){\n            acronym+= userPhrase.at(i);\n         }\n      }\n\n      return acronym;\n   }\n\nint main() {\n   string userString; \n   getline(cin, userString);\n   \n   cout << CreateAcronym(userString);\n   cout << endl; \n\n   return 0;\n}", "class": 0, "version": 77, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string myString) {\n   string acronym = \"\";\n   \n   for (unsigned int i = 0; i < myString.size(); i++) {\n      if (isupper(myString.at(i))) {\n         acronym += myString.at(i);\n      }\n      // increment until end of string or next space is found\n      while ((i < myString.size()) && (myString.at(i) != ' ')) {\n         i++;\n      }\n   }\n   \n   if (acronym == \"\") {\n      return \"empty\";\n   }\n   \n   return acronym;\n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 3, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase)\n{\n   string newPhrase;\n   for  ( unsigned int i = 0; i < userPhrase.size(); ++i)\n   {\n      if (isupper(userPhrase.at(i)))\n      {\n         newPhrase += userPhrase.at(i);\n      }  \n   }\n      return newPhrase;\n}\n\nint main() {\n   string userPhrase;\n   getline(cin, userPhrase);\n   cout<<CreateAcronym(userPhrase)<<endl;\n   return 0;\n}", "class": 0, "version": 46, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string str1) {\n   \n   string acro = \"\";\n   if (isupper(str1.at(0))){\n   acro = acro+ str1.at(0);\n   \n   }\n   for (int i = 0; i < (int) str1.size(); i++){\n      if (isspace(str1.at(i)) && isupper(str1.at(i+1))){\n         acro = acro + str1.at(i+1);\n      }\n   }\n   if (acro == \"\") {\n      acro = \"empty\";\n   }\n      return acro;\n   }\n \n   \n\n         \n         \n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 54, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase) {\n   string newStr;\n   \n   for (unsigned int i = 0; i < userPhrase.size(); ++i) {\n      if (isupper(userPhrase.at(i))) {\n         newStr += userPhrase.at(i);\n      }\n   }\n   return newStr;\n}\n\nint main() {\n   string s;\n   \n   getline (cin, s);\n   \n   cout << CreateAcronym( s) << endl;\n\n   return 0;\n}", "class": 0, "version": 204, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string s){\n   string acronym;\n   if (isalpha(s.at(0)) && isupper(s.at(0)) && s.at(0) != ' '){\n      acronym += s.at(0);\n   }\n   for (int i = 1; i < s.size(); ++i){\n      if ((isupper(s.at(i))) && (isspace(s.at(i -1)))){\n         acronym += s.at(i);\n      }\n   }\n   return acronym;\n}\n      \n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 61, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(const string &userPhrase) {\n   unsigned int i;\n   string temp;\n   for (i = 0; i < userPhrase.size(); ++i) {\n    if (isupper(userPhrase.at(i))) {\n       temp += userPhrase.at(i); \n    }\n   }\n   return temp;\n}\nint main() {\n   /* Type your code here */\nstring inp;\nstring result;\ngetline (cin, inp);\nresult = CreateAcronym(inp);\ncout << result << endl;\n   return 0;\n}", "class": 0, "version": 45, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase){\n\n    string res = \"\";\n\n    res=res+userPhrase[0];\n\n    for(int i=1;i<userPhrase.length();i++){\n\n        if(userPhrase[i-1]==' '){\n\n            if(userPhrase[i]>='A' && userPhrase[i]<='Z')\n                res=res+userPhrase[i];\n        }\n    }\n    return res;\n}\n\n\nint main(){\n        string userPhrase;\n        \n        getline(cin, userPhrase);\n        \n        cout<<CreateAcronym(userPhrase)<<endl;\n\n   return 0;\n}", "class": 0, "version": 15, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(string s) {\n   cout << s << endl;\n   string acr = \"\";\n   for (unsigned i = 0; i < s.size(); i++) {\n      if (s.at(i) != ' ') {\n         if (i == 0) {\n            if (isupper(s.at(i))) {\n               acr += s.at(i);\n            }\n         }\n         else if (s.at(i-1) == ' ' && isupper(s.at(i))) {\n            acr += s.at(i);\n         }\n      }\n      \n   }\n   if (acr == \"\") {\n      acr = \"empty\";\n   }\n   return acr;\n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 2, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase) {\n   string stringAcro;\n   stringAcro = \"\";\n   for (unsigned int i = 0; i < userPhrase.size(); ++i){\n      if (isupper(userPhrase.at(i))) {\n         stringAcro = stringAcro + userPhrase.at(i);}}\n         \n      return stringAcro;}\n   \n\nint main() {\n   string userInput;\n   getline (cin, userInput);\n   \n   cout << CreateAcronym(userInput) << endl;\n\n   return 0;\n}", "class": 0, "version": 120, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase){\n\n   int i;\n   int size;\n   string modified;\n   \n   size = userPhrase.length();\n\n   modified.push_back(userPhrase.at(0));\n   for (i=0; i<size; ++i){\n      if (isspace(userPhrase.at(i))) {\n         if (isupper(userPhrase.at(i+1))) { //refered to ascii table\n            modified.push_back(userPhrase.at(i+1));\n         }\n      }\n   }\n   \n   return modified;\n}\n\nint main() {\n   \n   string origLine;\n   \n   getline (cin, origLine);\n   \n   cout << CreateAcronym(origLine) << endl;\n   /* Type your code here. Your code must call the function.  */\n\n   return 0;\n}\n", "class": 0, "version": 53, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym (string userString) {\n   int i;\n   string userAcronym;\n   \n   if ( isupper(userString.at(0))) {         \n         userAcronym += userString.at(0) ;\n   }\n   for ( i = 1; i < userString.size() -1; ++i){ // jack robinson helped me! he was an advisor in where to start my iteratiing factor at\n      if ( isspace(userString.at(i-1)) ) { \n         if (isupper(userString.at(i)) ){\n            userAcronym += userString.at(i);\n         }\n      }\n      else {\n         userAcronym == \"empty\";\n      }\n   }\n   return userAcronym;\n   \n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 76, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym (string userPhrase) {\n    string acronym;\n    for (unsigned int i = 0; i < userPhrase.size(); ++i) {\n        if (i == 0 || userPhrase [ i - 1] == ' ') {\n            if (isupper(userPhrase[i])){\n                acronym += userPhrase[i];\n            }\n        }\n    }\nreturn acronym;\n}\n\nint main() {\n    string inputPhrase;\n    string userAcronym;\n    \n    getline(cin, inputPhrase);\n\n    userAcronym = CreateAcronym(inputPhrase);\n    \n    cout << userAcronym << endl;\n\n   return 0;\n    \n}", "class": 0, "version": 175, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\r\n#include <string>\r\nusing namespace std;\r\nstring CreateAcronym(const string &userPhrase){\r\n    string p = \"\";\r\n\r\n    p = userPhrase[0]; \r\n\r\n    for (int i = 0; i < userPhrase.length(); i++)\r\n    {\r\n        if (userPhrase[i] == ' ')\r\n        {\r\n            if(isupper(userPhrase[i+1]))\r\n            p += userPhrase[i+1]; \r\n        }\r\n    }\r\n\r\n    return p; \r\n}\r\nint main()\r\n{ \r\n   string s;\r\n   getline(cin,s);\r\n\r\n  string c = CreateAcronym(s);\r\n   cout << c << endl;\r\n    return 0;\r\n}", "class": 0, "version": 298, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym (string s) {\n   int wordLength;\n   int i;\n   int counter;\n   \n   counter = 0;\n   wordLength = s.size();\n   \n   if ((isupper(s.at(0))) && (isalpha((s.at(0))))) {\n      s.push_back(s.at(0));\n      counter = counter + 1;\n   }\n   if (isspace(s.at(0))) {\n      s = s.substr (0, wordLength);\n      counter = counter - 1;\n   }\n   \n   for (i = 1; i < wordLength; ++i) {\n      if (isspace(s.at(i))) {\n         if (isupper(s.at(i + 1))) {\n            s.push_back(s.at(i + 1));\n            counter = counter + 1;\n         }\n      }\n   }\n   if (counter > 0) {\n      s = s.substr(wordLength, counter);\n      cout << s;\n      cout << endl;\n   }\n   else {\n      s = s.substr(wordLength, 0);\n   }\n   return s;\n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   CreateAcronym(s);\n   \n   return 0;\n}", "class": 0, "version": 169, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym (string phrase) {\n      string acronym;\n      int i;\n      for (i = 0; i < phrase.size(0); ++i) {\n         if ((i = 0) || phrase((i - 1) == ' ') && isupper(phrase(i))) {\n         acronym += phrase(i);\n         acronym += \".\";\n      }\nreturn acronym;\n}\n\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 191, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string& userPhrase) {\n   string acronym = \"\";\n   for (unsigned int i = 0; i < userPhrase.size(); ++i) {\n      if (userPhrase.at(i) <= 90 && userPhrase.at(i) >= 65) { \n         acronym += userPhrase.at(i); \n      }\n   }\n   return acronym;\n   \n}\n\n\nint main() {\n   \n   string userStr;\n   \n   getline(cin, userStr);\n   \n   cout << CreateAcronym(userStr) << endl;\n\n   return 0;\n}", "class": 0, "version": 99, "model": "Human"}
{"problem": 3, "code": "#include <iostream> // gave help to: lizzy sweeten\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string s) {\n   string str = \"\";\n   unsigned int i;\n   int cnt = 0;\n   \n   if (isupper(s[0])) {\n      str = str + s[0];\n   }\n   \n   for(i = 1; i < s.length(); ++i) {\n      if( (s[i-1] == ' ') && (isupper(s[i])) ) {\n         str = str + s[i];\n         ++cnt;\n      }\n   }\n   \n   if (cnt < 1) {\n      str = \"empty\";\n   }\n   \n   return str;\n   \n}\n   \nint main() {\n   string s;\n   \n   getline(cin, s);\n   \n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 152, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym (const string &userPhrase) {\n   string str1;\n   for (unsigned int i = 0; i < userPhrase.length(); ++i) {\n      if (isupper(userPhrase[i])) { \n         str1 += userPhrase[i];\n      }\n   }\n  return str1; \n}\n/* Define your function here */\n\nint main() {\n   string str2;\n   \n   getline(cin, str2);\n   \n   cout << CreateAcronym(str2) << endl;\n   \n   /* Type your code here */\n\n   return 0;\n}", "class": 0, "version": 38, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(string letter)   {\n   for (unsigned int i = 0; i < (letter.size() - 1); i++)   {\n      if (isupper(letter.at(i)))   {\n         cout << letter.at(i);\n      }  \n   }\n   return letter;\n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   \n   CreateAcronym(s);\n   cout << endl;\n   \n   return 0;\n}", "class": 0, "version": 223, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym( string s) {\n   string output;\n   string word;\n   int spaceIndex =0;\n   int indexPos = 1;\n   if  (isupper(s.at(0))) {\n     output = s.at(0);\n   }\n   \n   spaceIndex = s.find(' ', 1);\n   \n   \n   \n   while(spaceIndex > 0) {\n      \n      word = s.substr(indexPos, spaceIndex);\n      \n      //cout << word;\n           \n      if(isupper(word.at(0))){\n         output = output + word.at(0);\n      }\n      \n      indexPos = indexPos + word.size();\n      \n      if( s.find(' ', spaceIndex +1) > 0){\n         spaceIndex = s.find(' ', spaceIndex +1);    \n      } \n      \n   }\n   \n   string lastWord = s.substr(s.find_last_of(' ')+1);\n   if (isupper(lastWord.at(0))) {\n      output = output + lastWord.at(0);\n   }\n\n   return output; \n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 130, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase) {\n   string output;\n   if (isupper(userPhrase.at(0))){\n      output.push_back(userPhrase.at(0));\n   }\n   for (long unsigned int i = 0; i < userPhrase.size(); ++i) {\n      if ((userPhrase.at(i) == ' ') && isupper(userPhrase.at(i + 1))){\n         output.push_back(userPhrase.at(i + 1));\n      }\n   }\n   return output;\n}\n\nint main() {\n   string s;\n   const string userPhrase;\n   getline(cin,s);\n   \n   cout << CreateAcronym(s) << endl;\n\n   return 0;\n}", "class": 0, "version": 86, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhase)\n{\n   string nString;\n   for(long unsigned int i = 0; i < userPhase.size(); ++i)\n   {\n      if(userPhase.at(i) >= 65 && userPhase.at(i) <= 96)\n      {\n         nString += userPhase.at(i);\n      }\n   }\n   return nString;\n}\n\nint main() {\n   string userString;\n   \n   getline(cin, userString);\n   \n   cout << CreateAcronym(userString) << endl;\n   \n   \n   \n\n   return 0;\n}", "class": 0, "version": 267, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\r\n#include <string>\r\n#include <cctype>\r\nusing namespace std;\r\n\r\nstring CreateAcronym(const string &userPhrase){\r\n    string acronym;\r\n    for (unsigned int i = 0; i < userPhrase.size(); i++){\r\n        if (isupper(userPhrase.at(i))){\r\n            acronym += userPhrase.at(i);\r\n        }\r\n    }\r\n    return acronym;\r\n}\r\n\r\nint main(){\r\n    \r\n    string name;\r\n    string acronym;\r\n    getline(cin, name);\r\n    acronym = CreateAcronym(name);\r\n    cout << acronym << endl;\r\n    \r\n    return 0;\r\n}\r\n", "class": 0, "version": 3, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym( const string &userPhrase) {\n   string newString;\n   newString = \"\";\n   \nfor (unsigned int i = 0; i < userPhrase.size(); ++i) {\n   if (isupper(userPhrase.at(i))) {\n      newString = newString + userPhrase.at(i);\n   }\n   else{\n   }\n}\nreturn newString;\n}\n\nint main() {\n   string userPhrase;\n   getline (cin, userPhrase);\n   cout << CreateAcronym(userPhrase) << endl;\n   \n\n   return 0;\n}", "class": 0, "version": 104, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym (string s)\n{\n   char firstLetter;\n   int i;\n   int size = s.size();\n   int counter;\n   string acro;\n   \n   firstLetter = s.at(0);\n   if ( isalpha(firstLetter) && isupper(firstLetter) )\n   {\n      acro = acro += firstLetter;\n      counter = counter + 1;\n   }\n   \n   for (i = 1; i < size; ++i)\n   {\n      if ( isupper(s.at(i)) && (s.at(i - 1) == ' ') )\n      {\n         acro = acro += s.at(i);\n         counter = counter + 1;\n      }\n   }\n   \n   if (counter > 1)\n   {\n      return acro;\n   }\n   else\n   {\n      acro = \"empty\";\n      return acro;\n   }\n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 118, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\nint i;\nstring value;\n\nfor (i = 0; i < userPhrase.length(); i++ ) {\n   if ((userPhrase.at(i) >= 65) && (userPhrase.at(i) <= 90)) {\n   value += userPhrase.at(i);\n   \n   }\n}\nreturn value;\n}\n\nint main() {\n   string phr;\n   getline(cin, phr);\n   \n   cout << CreateAcronym(phr) << endl;\n\n   return 0;\n}", "class": 0, "version": 61, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n   string CreateAcronym(const string &userPhrase)\n   {\n      string wordPuppy;\n      \n      for (unsigned int i = 0; i < userPhrase.size(); ++i)\n      {\n         if(isupper (userPhrase.at(i) ))\n         {\n           wordPuppy.push_back(userPhrase.at(i) );\n         }\n      }\n      return wordPuppy;\n   }\n\nint main() {\n   \n   string userPhrase;\n   getline(cin, userPhrase);\n   \n   cout << CreateAcronym(userPhrase) << endl;\n \n   return 0;\n}", "class": 0, "version": 252, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &s)\n{\n   string str;\n    for (int long unsigned i = 0; i < s.size(); ++i)\n   {\n      if (isupper(s.at(i)) )\n      {\n         str += s.at(i);\n      }\n   }\n   return str;\n}\n\nint main() {\n  string s;\n  string answer;\n   \n  getline( cin, s );\n  \n  answer = CreateAcronym(s);\n  \n  cout << answer << endl;\n  \n   return 0;\n}", "class": 0, "version": 79, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n//Help from Garrett.\n\nstring CreateAcronym(string userS) {\n   unsigned int i;\n   string Letter;\n   Letter = \"\";\n\n   if (isupper(userS.at(0))) {\n      Letter.push_back(userS.at(0));\n   }\n   for (i = 1; i < userS.size(); ++i) {\n      if ((isupper(userS.at(i))) && (isspace(userS.at(i - 1)))) {\n         Letter.push_back(userS.at(i));\n      }\n   }\n   if (Letter == \"\") {\n      Letter = \"empty\";\n   }\n   \n   return Letter;\n}\n   \n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 120, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase){\n\n    string res = \"\";\n\n    res=res+userPhrase[0];\n\n    for(int i=1;i<userPhrase.length();i++){\n\n        if(userPhrase[i-1]==' '){\n\n            if(userPhrase[i]>='A' && userPhrase[i]<='Z')\n                res=res+userPhrase[i];\n        }\n    }\n    return res;\n}\n\n\nint main(){\n        string userPhrase;\n        \n        getline(cin, userPhrase);\n        \n        cout<<CreateAcronym(userPhrase)<<endl;\n        \n    return 0;\n}\n", "class": 0, "version": 222, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase){\n   string userInputNew;\n   for(unsigned int i = 0; i < userPhrase.size(); i++){\n      if(userPhrase.at(i) >= 65 && userPhrase.at(i) <= 90){\n         userInputNew += userPhrase.at(i);\n      }\n   }\n   return userInputNew;\n}\n\nint main() {\n   string userInput;\n   \n   getline(cin, userInput);\n   cout << CreateAcronym(userInput) << endl;\n\n   return 0;\n}", "class": 0, "version": 72, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n\nstring CreateAcronym(const string userPhrase){\n\nstring a = \"\"; \nfor (unsigned int i = 0; i < userPhrase.size(); ++i){\n    if (userPhrase.at(i) >= 65 && userPhrase.at(i) <= 90){\n        a += userPhrase.at(i);\n\n    }\n}\n    \n    return a;\n}\n\n\nint main() {\n   string userPhrase; \n   \n   getline (cin, userPhrase); \n\n   cout << CreateAcronym (userPhrase) << endl; \n\n   return 0;\n}\n", "class": 0, "version": 93, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userInput) {\n   string final;\n   bool solution;\n   \n   for (int i = 0 ; i < userInput.size() ; i++) {\n      if (i == 0 && isupper(userInput.at(i)) && isalpha(userInput.at(i))) {\n         final = final + userInput.at(i);\n         solution = true;\n      }\n      else if (userInput.at(i - 1) == ' ' && isupper(userInput.at(i)) && isalpha(userInput.at(i))) {\n         final = final + userInput.at(i);\n         solution = true;\n      }\n      \n   }\n   return final;\n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   bool solution;\n   getline(cin, s);\n   if (solution) {\n      cout << CreateAcronym(s) << endl;\n   }\n   else {\n      cout << \"empty\" << endl;\n   }\n   \n   return 0;\n}", "class": 0, "version": 116, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(string userPhrase);\nint main() {\n   /* Type your code here */\n   string phrase;\n   string output;\n   getline(cin, phrase);\n   output = CreateAcronym(phrase);\n   cout << output << endl;\n   return 0;\n}\n\nstring CreateAcronym(string userPhrase)\n{\n   string acronym;\n   for(int i = 0; i < userPhrase.size(); i++)\n   {\n      if(userPhrase.at(i)>='A' && userPhrase.at(i) <= 'Z')\n      {\n         acronym.push_back(userPhrase[i]);\n      }\n   }\n   return acronym;\n}", "class": 0, "version": 64, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase)\n{\n   string newAcronym;\n   char currentChar;\n   unsigned int i;\n   \n   for(i = 0; i < userPhrase.size(); ++i)\n   {\n     currentChar = userPhrase.at(i);\n     \n      if( isupper(currentChar))\n      {\n         newAcronym = newAcronym.append(1, currentChar);\n      }\n   }\n   return newAcronym;\n}\n\nint main() {\n   string userString;\n   getline(cin, userString);\n   \n   cout << CreateAcronym(userString) << endl;\n\n   return 0;\n}", "class": 0, "version": 253, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(string s) {\n \n   string newLetter;\n   string newString;\n  \n   bool upperExist;\n   upperExist = false;\n   \n   for (unsigned i = 0; i < s.size(); ++i) {\n      if (((i == 0 || s.at(i - 1) == ' ') && isupper(s.at(i)))) {\n         upperExist = true;\n         newLetter = s.at(i);\n         newString.push_back(s.at(i));\n      }\n   }\n   if (upperExist) {\n      return newString;\n   }\n   else {\n   }\n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 175, "model": "Human"}
{"problem": 3, "code": "//Version 2\r\n#include <iostream>\r\n#include <string>\r\n#include <cctype>\r\nusing namespace std;\r\n\r\nstring CreateAcronym(string name){ \r\n   int i = 0;\r\n   string acrString;\r\n   int charCnt = 0;\r\n   int stringSize = name.size();\r\n   //int acrStringSize = 0;\r\n   \r\n   \r\n //  cout << acrStringSize;\r\n // cout << stringSize;\r\n //  cout << name.at(0);\r\n   for (i = 0; i <= (stringSize - 1); ++i) { \r\n      if (isupper(name.at(i)) && (i == 0)  ) { \r\n //        cout << \"Test2\";\r\n         acrString.push_back(name.at(i));\r\n//         cout << acrString;\r\n      }\r\n      else if (isupper(name.at(i)) && (name.at(i-1)==' ')) { \r\n         acrString.push_back(name.at(i));\r\n      }\r\n      charCnt ++;\r\n   }\r\n   \r\n   if (acrString.size() == 0 && charCnt == stringSize)\r\n      acrString = \"empty\";\r\n   \r\n   \r\n   return acrString;\r\n}\r\n      \r\n\r\nint main() {\r\n   // The test framework ignores main(), calling your function directly. \r\n   // The code below is just a convenience when you run in develop mode\r\n   string s;\r\n   getline(cin, s);\r\n   cout << CreateAcronym(s) << endl;\r\n   \r\n   return 0;\r\n}\r\n", "class": 0, "version": 172, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym (string userPhrase) {\n   string acronym;\n   char upperCase;\n   int characPos;\n   int userPhraseSize;\n   \n   acronym = \"\";\n   \n   userPhraseSize = userPhrase.size();\n\n   for (characPos = 0; characPos < userPhraseSize; characPos = characPos + 1) {\n      if ((userPhrase.at(characPos) >= 'A') && (userPhrase.at(characPos) <= 'Z')) {\n         upperCase = userPhrase.at(characPos);\n         acronym.push_back(upperCase);\n      }\n   }\n   \n   return acronym;\n}\n\nint main() {\n   string longName;\n   string acronym;\n   \n   getline (cin, longName);   \n   \n   acronym = CreateAcronym(longName);\n\n   cout << acronym << endl;\n\n   return 0;\n}", "class": 0, "version": 44, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase) {\n   string acronym= \"\"; \n   for (unsigned int i =0; i < userPhrase.size(); ++i) {\n      if(isupper(userPhrase.at(i))) {\n         acronym += userPhrase.at(i);\n      }\n   }\n   return acronym; \n}\nint main() {\n   string userWord;\n   string userAcronym; \n   getline(cin, userWord); \n   \n   userAcronym = CreateAcronym(userWord); \n   cout << userAcronym << endl; \n\n   return 0;\n}", "class": 0, "version": 5, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym (const string &userPhase){\nint cnt = userPhase.size();\nint i =0;\nstring Nline = \"\";\nfor (i=0; i< cnt; ++i){\n   if (isupper(userPhase.at(i))){\n      Nline = Nline + userPhase.at(i);\n   }\n \n}\nreturn Nline;\n}\n\n\n\nint main() {\n   /* Type your code here */\nstring userS;\ncout<< CreateAcronym(userS)<< endl;\n\n   return 0;\n}", "class": 0, "version": 229, "model": "Human"}
{"problem": 3, "code": "// my Cs friend helped me with the i == 0|| part\n#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userText) {\n   string finalStr;\n   int i;\n   for (i = 0; i < userText.size(); ++i) {\n      if ((i == 0 || userText.at(i - 1) == ' ') && isupper(userText.at(i))){\n         finalStr += userText.at(i);\n      }\n      else if (islower(userText.at(0)) && islower(userText.at(i))){\n         finalStr = \"empty\";\n      }\n   }\n   return finalStr;\n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 142, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase) {\n   string newStr;\n   \n   for (unsigned i = 0; i < userPhrase.size(); i++) { \n      if (isupper(userPhrase.at(i))) { \n          newStr.push_back(userPhrase.at(i)); \n      } \n      \n   } \n   return newStr;\n}\n\nint main() {\n   string userInput; \n   getline(cin, userInput); \n   \n   cout << CreateAcronym(userInput) << endl; \n\n   return 0;\n}", "class": 0, "version": 105, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase)\n{\n   string acro = \"\";\n   int stringSize = userPhrase.size();\n   for (int i = 0; i < stringSize; ++i)\n   {\n      if (isupper(userPhrase.at(i)))\n      {\n         acro += userPhrase.at(i);\n      }\n   }\n   return acro;\n}\n\nint main() {\n   string phrase;\n   \n   getline (cin, phrase);\n   \n   cout << CreateAcronym(phrase) << endl;\n\n   return 0;\n}", "class": 0, "version": 286, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase) {\n   string acronym = userPhrase;\n   for (unsigned int i = 0; i < acronym.size(); i++) {\n      if (!(isupper(acronym.at(i)))){\n         acronym.replace(i,1,\"\");\n         i--;\n      }\n   }\n   \n   return acronym;\n}\n\nint main() {\n   string userSentence;\n   \n   getline(cin, userSentence);\n   \n   cout << CreateAcronym(userSentence) << endl;\n\n   return 0;\n}", "class": 0, "version": 62, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(const string &userPhrase){\n   string s;\n   \n   for(unsigned int i = 0; i < userPhrase.size(); ++i){\n      if(isupper(userPhrase.at(i))){\n         s += userPhrase.at(i);\n      }\n   }\n   return s;\n}\n\nint main() {\n   /* Type your code here */\nstring name;\n\ngetline(cin, name);\n\ncout << CreateAcronym(name) << endl;\n   return 0;\n}", "class": 0, "version": 285, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase){\n   string secondString = \"\";\n   \n   secondString = secondString + userPhrase.at(0);\n    \n   for(long unsigned int i=1;i<userPhrase.size();i++){\n      if(userPhrase.at(i-1)==' '){\n         \n         if(userPhrase.at(i)>='A' && userPhrase.at(i)<='Z')\n         \n         secondString = secondString + userPhrase.at(i);\n         \n        }\n    }\n    return secondString;\n}\n\n\nint main() {\n   string userPhrase;\n        \n   getline(cin, userPhrase);\n        \n   cout<<CreateAcronym(userPhrase)<<endl;\n\n   return 0;\n}", "class": 0, "version": 121, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(const string &userPhrase){\n   string a;\n   if (isupper(userPhrase.at(0))){\n      a.append(userPhrase.substr(0,1));\n      }\n   for (unsigned int i = 0; i < userPhrase.length(); i++){\n      if (userPhrase.at(i) == ' '&& isupper(userPhrase.at(i+1))){\n         a.append(userPhrase.substr(i+1,1));\n         }\n      }\n   return a;\n   }\n\nint main() {\n   /* Type your code here */\n   string n;\n   \n   getline(cin,n);\n   \n   cout << CreateAcronym(n) << endl;\n\n   return 0;\n}", "class": 0, "version": 69, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string inputStr)\n{\n   string acronym;\n   \n   if ((isalpha(inputStr.at(0))) && (isupper(inputStr.at(0))))\n   {\n      acronym = inputStr.at(0);\n      \n      for (int i = 0; i < inputStr.size(); ++i)\n      {\n         if ((isspace(inputStr.at(i))) && (isupper(inputStr.at(i + 1))))\n         {\n            acronym = acronym + inputStr.at(i + 1);\n         }\n      }\n      return acronym;\n   }\n   else\n   {\n      return \"empty\";\n   }\n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 165, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userInput) {\n   string tempS;\n   char tempC;\n   bool wordChecked = false;\n   \n   for (unsigned int i = 0; i < userInput.size(); ++ i) {\n      tempC = userInput.at(i);\n      if ((isalpha(tempC) != 0 || isdigit(tempC) != 0) && wordChecked == false) {\n         if (isupper(tempC) != 0) {\n         tempS.push_back(tempC);\n         wordChecked = true; \n         }\n      wordChecked = true;\n      }\n      else if (isalpha(tempC) == 0 && wordChecked == true) {\n         wordChecked = false;\n      }\n   }\n   if(tempS.size() == 0) {\n      tempS = \"empty\";\n   }\n   return tempS;\n}\n         \nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 163, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\n#include <bits/stdc++.h>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(string userPhrase){\n   string output = \"\";\n   string word = \"\";\n   for (auto x : userPhrase){\n      if (x == ' '){\n         if (isupper(word.at(0))){\n            output.push_back(word.at(0));\n            word = \"\";\n         }\n         else{\n            word = \"\";\n         }\n      }\n      else {\n         word.push_back(x);\n      }\n   }\n   if (isupper(word.at(0))){\n      output.push_back(word.at(0));\n   }\n   return output;\n   return 0;\n}\n\nint main() {\n   /* Type your code here */\n   string input;\n   getline(cin, input);\n   cout << CreateAcronym(input) << endl;\n   return 0;\n}", "class": 0, "version": 3, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase)\n{\n   string temp;\n   temp = userPhrase.at(0);\n   for(long unsigned int i = 1; i < userPhrase.size() ; ++i)\n   {\n      if(isupper(userPhrase.at(i)))\n      {\n         temp = temp + userPhrase.at(i);\n         }\n         }\n   return temp;/* Define your function here */\n}\nint main() {\n   string userPhrase;\n   \n   getline(cin, userPhrase);\n   \n   cout << CreateAcronym(userPhrase) << endl;/* Type your code here */\n\n   return 0;\n}", "class": 0, "version": 199, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include<string>\n\nusing namespace std;\nstring CreateAcronym(string userPhrase);\nint main()\n{\nstring str=\"HeLlo hI hOW Ar\"; //Getting the String to pass you can use cin>>str as well . But i am using this for example\ncout<<CreateAcronym(str); //calling function and printing it there only\nreturn 0;\n}\n\nstring CreateAcronym(string str){\nstring output; //using for output\nbool lineBreak=true; //it will keep track of space ascii is 32\nfor(int i=0;i<str.size();i++){\nchar charFirst = str.at(i);  \nint acsiiValue=(int) charFirst;\nif(acsiiValue==32){ //if space came line break= true\nlineBreak=true;\n}else{ //else if something else came\nif(acsiiValue>=65 && acsiiValue<=90 && lineBreak==true){ //if char is upper and line break is true then only add it in output\noutput+=charFirst;  \nlineBreak=false;//reset line break so that it will not consider any upper character until space came\n}else{//if first character after space is not Uper case at that time also set lineBreak to false .\nlineBreak=false;\n}\n}\n}\nreturn output;\n}", "class": 0, "version": 33, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase) {\n   string upperChars;\n   for (unsigned int i = 0; i < userPhrase.size(); i++) {\n      if (isupper(userPhrase.at(i))) {\n         upperChars += userPhrase.at(i);\n      }\n   }\n   return upperChars;\n}\n\nint main() {\n   string str;\n   \n   getline(cin, str);\n   cout << CreateAcronym(str) << endl;\n   return 0;\n}", "class": 0, "version": 120, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase) {\n   string acronymStr = \"\";\n   for (unsigned int i = 0; i < userPhrase.size(); i++) {\n      if (isalpha(userPhrase.at(i)) && userPhrase.at(i) < 'a') {\n         acronymStr.push_back(userPhrase.at(i));\n      }\n   }\n   \n   return acronymStr;\n}\n\nint main() {\n   string userStr;\n   \n   getline(cin, userStr);\n   \n   cout << CreateAcronym(userStr) << endl;\n   \n   return 0;\n}", "class": 0, "version": 34, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\n\nstring CreateAcronym(string s) {\n   string another = \"\";\n   int i;\n   \n   if (isupper(s.at(0))) {\n         another = another + s.at(0);\n   }\n   \n   \n   \n   for (i = 1; i < s.size() - 1; ++i) {\n     \n      \n      if (s.at(i) == ' ') {\n         \n         if (s.at(i + 1) != ' ') {\n            if (isupper(s.at(i + 1))) {\n               another.push_back(s.at(i + 1));\n            }\n         }\n      }\n        \n      \n      \n   }\n\n\n\n   \n   if (another.size() == 0) {\n      another = \"empty\";\n   }\n   \n   return another;\n   \n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 122, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string s)\n{\n   string acro;\n   \n   for(int i =0; i< s.size(); ++i)\n   {\n      if(i == 0 || s.at(i-1) == ' ')\n      {\n         if(isupper(s.at(i)))\n         {\n            acro += s.at(i);\n         }\n      }\n   }\n   return acro; \n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 135, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase){\n   string ans = \"\";\n   for (int i = 0; i < (int)userPhrase.size(); ++i){\n      if(isupper(userPhrase[i])){\n         ans = ans + userPhrase[i];\n      }\n   }\n   \n   return ans;\n}\n\nint main() {\n   string userPhrase;\n   getline(cin, userPhrase);\n   \n   string ans = CreateAcronym(userPhrase);\n   \n   cout << ans << endl;\n\n   return 0;\n}", "class": 0, "version": 232, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\r\n\r\nusing namespace std;\r\nstring CreateAcronym(const string &userPhrase)\r\n{\r\n    string faccion = \"\";\r\n    faccion += userPhrase.at(0);\r\n    for(int i = 0; i < userPhrase.length(); i++)\r\n    {\r\n        if(isspace(userPhrase.at(i)) && isupper(userPhrase.at(i+1)))\r\n        {\r\n            faccion += userPhrase.at(i+1);\r\n        }\r\n    }\r\n    return faccion;\r\n}\r\n\r\nint main()\r\n{\r\n    string userString;\r\n    getline(cin, userString);\r\n    cout << CreateAcronym(userString);\r\n    cout << endl;\r\n\r\n    return 0;\r\n}", "class": 0, "version": 39, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase){\n   string str;\n   unsigned int i;\n   \n   for (i =0; i < userPhrase.size(); ++i){\n      if ( !(isspace(userPhrase.at(i))) && userPhrase.at(i) != tolower(userPhrase.at(i))){\n         str = str + userPhrase.at(i);\n      }\n   }\n      \n      \n   return str;\n}\n\nint main() {\n   string phrase;\n   \n   getline(cin, phrase);\n   \n   cout << CreateAcronym(phrase) << endl;\n\n   return 0;\n}", "class": 0, "version": 24, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase){\n   long unsigned int i;\n   string letter;\n   string letter2;\n   \n   for(i =0; i < userPhrase.size(); ++i){\n    if(isupper(userPhrase.at(i))){\n       letter = userPhrase.at(i);\n       letter2 = letter2 + letter;\n    }\n   }\n   return letter2;\n}\n\nint main() {\n   string userPhrase;\n   \n   getline(cin, userPhrase);\n   \n   cout << CreateAcronym(userPhrase) << endl;\n\n   return 0;\n}", "class": 0, "version": 141, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(string userPhrase) {\n   string acronym;\n   if (isupper(userPhrase.at(0))) {\n      acronym += userPhrase.at(0);\n   }\n   for (unsigned long int i = 0; i < userPhrase.length(); i++) {\n      if (userPhrase.at(i) == ' ') {\n         if (isupper(userPhrase.at(i+1))) {\n            acronym += userPhrase.at(i+1);\n         }\n      }\n   }\n   return acronym;\n}\n\nint main() {\n   /* Type your code here */\n   string userIn;\n   \n   getline(cin, userIn);\n   \n   cout << CreateAcronym(userIn) << endl;\n\n   return 0;\n}", "class": 0, "version": 15, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym (string userPhrase) {\n   string res = \" \";\n   res = res+userPhrase [0];\n   \n   for (int i = 1; i < userPhrase.length(); i++) {\n      if (userPhrase[i - 1] == '') {\n         if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z')\n         res = res+userPhrase[i];\n      }\n   }\n   return res;\n}\nint main() {\n   /* Type your code here */\n   string userPhrase;\n   getline (cin, userPhrase);\n      cout << CreateAcronym(userPhrase) << endl;\n   return 0;\n}", "class": 0, "version": 4, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase) {\n   string bee = \"\";\n   int x = userPhrase.length();\n   bee = bee + userPhrase[0];\n   for (int i = 1; i < x; i++) {\n      if (userPhrase[i - 1] == ' ') {\n         if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z')\n         bee = bee + userPhrase[i];\n      }\n   }\n   return bee;\n}\n\nint main() {\n   string userPhrase;\n   \n   getline (cin, userPhrase);\n   \n   cout << CreateAcronym(userPhrase) << endl;\n   \n\n   return 0;\n}", "class": 0, "version": 44, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase){\n\n    string res = \"\";\n\n    res=res+userPhrase[0];\n\n    for(int i=1;i<userPhrase.length();i++){\n\n        if(userPhrase[i-1]==' '){\n\n            if(userPhrase[i]>='A' && userPhrase[i]<='Z')\n                res=res+userPhrase[i];\n        }\n    }\n    return res;\n}\n\n\nint main(){\n        string userPhrase;\n        \n        getline(cin, userPhrase);\n        \n        cout<<CreateAcronym(userPhrase)<<endl;\n        \n    return 0;\n}", "class": 0, "version": 259, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(string userPhrase){\n   unsigned int i;\n   string myAcronym = \"\";\n   \n   if (isupper(userPhrase.at(0))) {\n      myAcronym = myAcronym + userPhrase.at(0);\n   }\n   \n   for (i = 0; i < userPhrase.size() - 1; ++i) {\n      if (userPhrase.at(i) == ' ') {\n         if (isupper(userPhrase.at(i+1) )) {\n            myAcronym.push_back(userPhrase.at(i + 1));\n         }\n      }\n   }\n   return myAcronym;\n}\n\nint main() {\n   /* Type your code here */\n   string userString;\n   getline(cin, userString);\n   \n   cout << CreateAcronym(userString) << endl;\n   return 0;\n}", "class": 0, "version": 44, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase){\n   int a;\n   int i;\n   string final;\n   \n   a=userPhrase.size();\n   final.push_back(userPhrase.at(0));\n   for (i=0;i<a;++i){\n      if (userPhrase.at(i)==' ' && isupper(userPhrase.at(i+1))){\n         final.push_back(userPhrase.at(i+1));\n      }\n   }\n   return final;\n}\n\n\nint main() {\n   string userPhrase;\n   \n   getline(cin, userPhrase);\n   \n   cout<<CreateAcronym(userPhrase)<<endl;\n\n\n   return 0;\n}", "class": 0, "version": 28, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\nstring CreateAcronym(string userString) {\n   unsigned int i;\n   string acronym;\n   if(isupper(userString.at(0))){\n      acronym.push_back(userString.at(0));\n   }\n   for (i=1; i < userString.size(); ++i) {\n      if (isupper(userString.at(i))&&(userString.at(i-1)==' ')) {\n         acronym.push_back(userString.at(i));\n      }\n   }\n   if (acronym == \"\") {\n      acronym = \"empty\";\n   }\n   return acronym;\n}\n\nint main() {\n   // The test framework ignores main(), calling your function directly. \n   // The code below is just a convenience when you run in develop mode\n   string s;\n   getline(cin, s);\n   cout << CreateAcronym(s) << endl;\n   \n   return 0;\n}", "class": 0, "version": 139, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */\n\nint main() {\n cout << \"IEEE\" << endl;\n\n   return 0;\n}", "class": 0, "version": 82, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase){\n   string Acro;\n   \n   \n   for(unsigned int i= 0; i < userPhrase.size(); ++i){\n   if(userPhrase.at(i)>=65 && userPhrase.at(i)<=90){\n      Acro += userPhrase.at(i);\n   }\n   \n   }\n \n   return Acro;\n}\n\n\n\nint main() {\n   string userPhrase;\n   \n   getline(cin, userPhrase);\n   \n  cout << CreateAcronym(userPhrase) << endl;\n\n   return 0;\n}", "class": 0, "version": 178, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase){\n   int i;\n   int j = userPhrase.size();\n   string out=\"\";\n   for(i=0; i<j;++i){\n      if(isupper(userPhrase.at(i))){\n         out=out+userPhrase.at(i);\n      }\n   }\n   return out;\n}\n\nint main() {\n  string userPhrase;\n  getline(cin, userPhrase);\n  cout<< CreateAcronym(userPhrase)<<endl;\n\n   return 0;\n}", "class": 0, "version": 35, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string &userPhrase) {\n  int userValue = userPhrase.size();\n  string userLine = \"\";\n  \n  for (int i=0; i<userValue; ++i) {\n     if (isupper(userPhrase.at(i))) {\n        userLine = userLine + userPhrase.at(i);\n     }\n  }\n  return userLine;\n}\n   int main() {\n      string userPhrase;\n      getline (cin, userPhrase);\n      \n      CreateAcronym (userPhrase);\n   \n   \n   return 0;\n}", "class": 0, "version": 130, "model": "Human"}
{"problem": 3, "code": "//collaborated with: Jordan Ai\n#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(string userPhase) {\n   string acro;\n   int i;\n   \n   acro = \"\";\n   \n   for (i=0;i < userPhase.size();i++) {\n      if (isupper(userPhase.at(i))) {\n         acro = acro + userPhase.at(i);\n      }\n   }\n   return acro;\n}\n\nint main() {\n   string userPhase;\n   \n   getline(cin,userPhase);\n\n   cout << CreateAcronym(userPhase) << endl;\n   \n   return 0;\n}", "class": 0, "version": 79, "model": "Human"}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nstring CreateAcronym(const string userPhrase){\n   string one;\n   for(int i =0;i<userPhrase.size();++i){\n      if(isupper(userPhrase.at(i))){\n         one.push_back(userPhrase.at(i));\n      }\n   }\n   return one;\n}\n\nint main() {\n   string userString;\n   getline(cin,userString);\n   \n   cout<<CreateAcronym(userString)<<endl;\n\n   return 0;\n}", "class": 0, "version": 23, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters (char userChar, const string &userString)\nint s=0;\nint sun=0;\nfor (sun=0; sun<&userString.size(); sun++){\n   if(&userString[sun]== userChar){\n      ++s;\n   }\n}\nreturn s;\n\nint main() {\n   string str;\n   char userChar[1];\n   cout << \"Char: \";\n   cin >> userChar;\n   cin.ignore();\n   cout << \"String: \"; getline(cin,str);\n   cout << CountCharacters(userChar[0],str);\n\n   return 0;\n}\n", "class": 0, "version": 157, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n   int num;\n   int i;\n   \n   num = 0;\n   \n   for (i = 0; i < userString.size(); ++i) {\n      if (userString.at(i) == userChar) {\n         num = num + 1;\n      }\n   }\n   return num;\n}\n\nint main() {\n   \n   char userChar;\n   string userString;\n   \n   cin >> userChar;\n   cin >> userString;\n   \n   cout << CountCharacters(userChar, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 77, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, string userString) {\n    int result = 0;\n    for(int i = 0; i < userString.length(); ++i){\n        if(userString[i] == userChar){\n            result++;\n        }\n    }\n  \n    return result;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n   return 0;\n}\n", "class": 0, "version": 268, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n   int frequency;\n   \n   while (userString.find(userChar) != string::npos) {\n      frequency = frequency + 1;\n      userString.replace(userString.find(userChar), 1, \"0\");\n   }\n      \n   return frequency;\n}\n\nint main() {\n   char letter;\n   string word;\n   \n   cin >> letter;\n   getline(cin, word);\n   \n   cout << CountCharacters(letter, word) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 22, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string& userString) {\n   int count = 0;\n   int i;\n   \n   for (i = 0; i < userString.length(); ++i) {\n      if (userString[i] == userChar) {\n         count = count + 1;\n      }\n   }\n   return count;\n}\n\nint main() {\n   string userStr;\n   char userChar;\n   int num;\n   \n   cin >> userChar;\n   cin >> userStr;\n   \n   num = CountCharacters(userChar, userStr);\n   cout << num << endl;\n\n   return 0;\n}\n", "class": 0, "version": 37, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, string userString) {\n   int varCharacters = 0;\n   int i;\nfor (i = 0; i < userString.size(); ++i) {\n   if (userString.at(i) == userChar) {\n      varCharacters = varCharacters + 1;\n   }\n}\n   return varCharacters;\n}\n      \n\n\n\n\nint main() {\n   char userChar;\n   string userString;\n   cin >> userChar >> userString;\n   cout << CountCharacters(userChar, userString) << endl;\n   /* Type your code here. Your code must call the function.  */\n\n   return 0;\n}\n", "class": 0, "version": 82, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \n\nint CountCharacters(char userChar, const string &userString) {\n   int sum;\n   sum = 0;\n   for (unsigned i = 0; i < userString.size(); i++) {\n      if (userChar == userString.at(i)) {\n         sum = sum + 1;\n      }\n   }\n   return sum;\n}\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char c;\n   string s;\n   cin >> c; \n  getline(cin, s);\n  \n   cout << CountCharacters(c, s);\n   cout << endl;\n   return 0;\n}\n", "class": 0, "version": 23, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString)\n{\n   int count = 0;\n   for (unsigned int n = 0; n < userString.size(); ++n)\n   {\n      if (userString.at(n) == userChar)\n      {\n         ++count;\n      }\n   }\nreturn count;\n}\n\nint main() {\n   char x;\n   string y;\n   cin >> x;\n   getline(cin, y);\n   cout << CountCharacters(x, y) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 32, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CalcNumCharacters(string userString, char userChar) {\n   int numOftimes = 0;\n   \n   for (int i = 0; i < userString.size(); i++) {\n      if (userString.at(i) == userChar) {\n         numOftimes += 1;\n      }\n   }\n   return numOftimes;\n}\n\nint main() {\n   char inputChar;\n   string inputString;\n   \n   cin >> inputChar;\n   getline (cin, inputString);\n   \n   if (CalcNumCharacters(inputString, inputChar) > 1) {\n      cout << CalcNumCharacters(inputString, inputChar) << \" \" << inputChar << \"'s\" << endl;\n   }\n   else if (CalcNumCharacters(inputString, inputChar) == 0) {\n      cout << CalcNumCharacters(inputString, inputChar) << \" \" << inputChar << \"'s\" << endl;\n   }\n   else if (CalcNumCharacters(inputString, inputChar) == 1) {\n      cout << CalcNumCharacters(inputString, inputChar) << \" \" << inputChar << endl;\n   }\n      \n   return 0;\n}\n", "class": 0, "version": 100, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int count = 0;\n   for(unsigned int i = 0; i < userString.size(); i++) {\n      if(userString.at(i) == userChar)\n         count++;\n   }\n   return count;\n}\n\nint main() {\n   string str;\n   char c;\n   cin >> c;\n   getline(cin, str);\n   cout << CountCharacters(c, str) << endl;\n   return 0;\n}\n", "class": 0, "version": 5, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters( char userChar, const string &userString) {\n   int count;\n   count = 0;\n   int i;\n   for ( i=0 ; i < userString.length(); ++i) {\n      if(userString.at(i) == userChar){\n         count+=1;\n      }\n      }\n      return count;\n   }\nint main() {\nchar userChar;\nstring userString;\ncin >> userChar;\ngetline(cin, userString);\ncout << CountCharacters(userChar, userString) << endl;\n   return 0;\n}\n", "class": 0, "version": 6, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CalcNumCharacters(string userString, char userChar) {\n   int numOfChar = 0;\n   unsigned int currChar;\n   \n   for (currChar = 0; currChar < userString.size(); ++currChar) {\n      \n      if (userString.at(currChar) == userChar) {\n         numOfChar += 1;\n      }\n      \n   }\n   \n   return numOfChar;\n}\n\nint main() {\n   string userString;\n   char userChar;\n   \n   cin >> userChar;\n   getline(cin, userString);\n   \n   if (CalcNumCharacters(userString, userChar) != 1) {\n      cout << CalcNumCharacters(userString, userChar) << ' ' << userChar << \"'s\";\n   }\n   else {\n      cout << CalcNumCharacters(userString, userChar) << ' ' << userChar;\n   }\n   \n   cout << endl;\n\n   return 0;\n}\n", "class": 0, "version": 30, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString){\n   int result = 0;\n   for(int i = 0;i<userString.length();i++){\n      if(userString[i] == userChar){\n         result++;\n      }\n   }\n   return result;\n}\n\nint main(){\n   string userString;\n   char userChar;\n   cin>>userChar>>userString;\n   cout<<CountCharacters(userChar,userString)<<endl;\n   return 0;\n}", "class": 0, "version": 153, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters (char userChar, const string userString) {\n   int count = 0;\n   //int stringLength = userString.length();\n   for ( unsigned int i = 0; i < (userString.length()); i++) {\n      if ( userString.at(i) == userChar) {\n         count++;\n      }\n   }\n   return count;\n}\n/* Define your function here */ \n\nint main() {\n   string userInput;\n   char inputChar;\n   \n   cin >> inputChar;\n   getline (cin, userInput);\n   \n   cout << CountCharacters ( inputChar, userInput) << endl;\n   /* Type your code here. Your code must call the function.  */\n\n   return 0;\n}\n", "class": 0, "version": 154, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint coutCharacters(char userChar, const string &userString){\n   long int i;\n   int total = 0;\n   for (i = 0; i < userString.size(); ++i){\n         \n         \n         if (userChar == userString.at(i)){\n      total = total + 1;\n         }\n      \n   }\n   \n   return total;\n   \n}\n\nint main() {\n   char aus;\n   string userIng; \n   cin >> aus;\n   getline(cin, userIng);\n   \n   cout << coutCharacters(aus, userIng) << endl;\n   \n   \n   \n\n   return 0;\n}\n", "class": 0, "version": 51, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString) {\n   int count=0;\n   int i;\n   for( i=0; i < userString.size(); ++i) {\n      if (userString.at(i) == userChar){\n            ++count;\n        }\n    }\n    return count;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char letter;\n   string word;\n   cin >> letter;\n   getline(cin, word);\n   cout << CountCharacters(letter, word) << endl;\n   return 0;\n}\n", "class": 0, "version": 211, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */\nint CountCharacters(char userChar, string userString)\n{\n   int result = 0;\n   for(int i = 0; i<userString.length(); i++)\n   {\n      if(userString[i] == userChar)\n      {\n         result++;\n      }\n   }\n   return result;\n}\n\n\nint main(){\n\n   string userString;\n   char userChar;\n   \n   cin >> userChar >> userString;\n   \n   cout << CountCharacters(userChar,userString) << endl;\n          \n    \n\n   return 0;\n}\n", "class": 0, "version": 159, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\r\nusing namespace std;\r\n\r\nint CalcNumCharacters(string userString, char userChar) {\r\n   int count = 0;\r\n   unsigned int i = 0;\r\n   \r\n   for (i = 0; i < userString.size(); ++i) {\r\n      if (userString.at(i) == userChar) {\r\n         count = count + 1;\r\n      }\r\n   }\r\n   return count;\r\n   }\r\n   \r\nint main() {\r\n   string userString;\r\n   char userChar = 0;\r\n   string line;\r\n   \r\n   getline(cin, userString);\r\n   userChar = userString.at(0);\r\n   line = userString.substr(1,userString.length());\r\n   \r\n   if (CalcNumCharacters(line, userChar)  != 1) {\r\n      cout << CalcNumCharacters(line, userChar) << \" \" << userChar << \"'s\" << endl;\r\n   }\r\n   else {\r\n      cout << CalcNumCharacters(line, userChar) << \" \" << userChar << endl;\r\n   }\r\n   return 0;\r\n}\r\n", "class": 0, "version": 121, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n   int charCount = 0;\n   unsigned int i;\n   for (i = 0; i < userString.size(); ++i) {\n      if ((userString.at(i) == userChar)) {\n         charCount = charCount + 1;\n      }\n   }\n   return charCount;\n}\n   \n\nint main() {\n   char userChar; \n   string userString;\n   \n   cin >> userChar;\n   getline(cin, userString);\n   \n   cout << CountCharacters(userChar, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 28, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString)   {\n   int count = 0;\n   int w = userString.size() - 1;\n   for (int i = 0; i < w; ++i)   {\n   if (userString.at(i) == userChar)   {\n      ++count;\n   }\n   }\n   return count;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   \n   char yeeChar;\n   string funsiesString;\n  \n   getline(cin, funsiesString);\n   yeeChar = funsiesString.at(0);\n   funsiesString.erase(0 , 1);\n   \n   cout << CountCharacters(yeeChar, funsiesString) << endl;\n   \n   \n   \n   \n   return 0;\n}\n", "class": 0, "version": 51, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n   int count;\n   int i;\n   \n   count=0;\n   for (i=0; i < userString.size(); i++){\n     \n      if (userString.at(i) == userChar) {\n         count = count +1;\n      }   \n      \n   }\n\n   return count;\n}\n\n\n\nint main() {\n   char userChar;\n   string s;\n   int countChar;\n \n  \n   cin >> userChar;\n   getline (cin , s);\n \n\n   countChar = CountCharacters (userChar, s);\n   cout << countChar << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 68, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString){\n   int cnt = 0;\n   for(unsigned int i = 0; i < userString.size(); ++i){\n      if (userString.at(i) == userChar){\n         ++cnt;\n      }\n   }\n return cnt;\n}\n         \n\nint main() {\n   string userString;\n   char userChar;\n   \n   cin >> userChar;\n      \n   getline(cin, userString);\n      \n   cout << CountCharacters(userChar, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 17, "model": "Human"}
{"problem": 4, "code": "#include<iostream>\n\nusing namespace std;\n\nint CountCharacters(char userChar, const string inputstr){\n\n   int k = 0;\n\n   int iter = 0;\n\n   for (iter = 0; iter < inputstr.size(); iter++){\n\n       if (inputstr[iter] ==  userChar){\n\n           ++k;        }}\n\n   return k;}\n\nint main(){\n\n   string str;\n\n   char userChar[1];\n\n   cout<<\"Char: \";    cin>>userChar;\n\n   cin.ignore();\n\n   cout<<\"String: \";   getline(cin, str);\n\n   cout<<CountCharacters(userChar[0],str);\n\n   return 0;}\n\n   return 0;\n}\n", "class": 0, "version": 118, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString)\n{\n   int count = 0;\n   int stringSize = userString.size();\n   \n   for (int i = 0; i < stringSize; ++i)\n   { \n      if (userString.at(i) == userChar)\n      {\n         ++count;\n      }\n   }\n   return count;\n}\n\nint main() {\n   char letter;\n   string userString;\n   \n   cin >> letter;\n   getline (cin, userString);\n   \n   cout << CountCharacters(letter, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 288, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString){\n   int output = 0;\n   for (int i=0; i < userString.length(); ++i){\n      if (userString[i]==userChar){\n         output ++;\n      }\n   }\n   return output;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char userChar;\n   string userString;\n   cin >> userChar;\n   getline(cin, userString);\n   cout << CountCharacters(userChar, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 66, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\r\n#include <string>\r\n\r\nusing namespace std;\r\n\r\nint CountCharacters(char userChar, string userString){\r\n   int result = 0;\r\n   for(int i = 0;i<userString.size();i++){\r\n      if(userString[i] == userChar){\r\n         result++;\r\n      }\r\n   }\r\n   return result;\r\n}\r\n\r\nint main(){\r\n   string userString;\r\n   char userChar;\r\n   \r\n   cin >> userChar;\r\n   getline(cin,userString);\r\n   \r\n   cout << CountCharacters(userChar,userString)<<endl;\r\n   return 0;\r\n}", "class": 0, "version": 42, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\n int CountCharacters(char userChar, const string &userString){\nint count = 0;\nfor(unsigned int i = 0; i < userString.size(); ++i) {\n   \n if(userString.at(i) == userChar) {\n    \n    count += 1;\n}\n\n }\n return count;\n}\nint main() {\nchar userChar;\nstring NFT;\ncin >> userChar;\ngetline(cin,NFT);\ncout << CountCharacters(userChar, NFT) << endl;\n\n\n   return 0;\n}\n", "class": 0, "version": 142, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString){\n   int counter = 0;\n   for (long unsigned int i = 0; i < userString.length()-1; i++){\n      if (userString.at(i) == userChar){\n         counter++;\n      }\n   }\n   return counter;\n}\n\nint main() {\n   char userChar;\n   string userString;\n   \n   cin >> userChar;\n   getline(cin, userString);\n   \n   cout << CountCharacters(userChar, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 231, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n\nint CountCharacters(char userChar, const string &userString)\n{\n   int num = 0;\n   \n   for (int i = 0; i < userString.size(); i++)\n   {\n      if(userString.at(i) == userChar) {\n         num++;\n      }\n   }\n   return  num;\n}\n\nint main() {\n   string s;\n   char c;\n   cin >> c;\n   cin >> s;\n   \n   cout << CountCharacters(c, s) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 171, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString){\n   int count = 0;\n   for(unsigned int i = 0; i < userString.size(); ++i){\n      if(userString.at(i) == userChar){\n         ++count;\n      }\n   }\n   return count;\n}\n\nint main(){\n   char userChar;\n   string userText;\n   \n   cin >> userChar >> userText; \n   \n   cout << CountCharacters(userChar, userText) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 245, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString){\n\tint count = 0;\n\tfor(int i = 0; i < userString.size(); ++i){\n\t\tif (userString.at(i) == userChar){\n\t\t\t++count;\n\t\t}\n\t}\n\treturn count;\n}\n/* Define your function here */ \n\nint main() {\n   char inputChar;\n\tstring inputString;\n\tcin >> inputChar;\n\tgetline(cin, inputString);\n\tcout << CountCharacters(inputChar, inputString) << endl;\n\t/* Type your code here. Your code must call the function.  */\n\n   return 0;\n}\n", "class": 0, "version": 237, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString){\n   \n   int count = 0;\n   \n   for (long unsigned int i = 0 ; i < userString.length(); i++){\n      if ( userString.at(i) == userChar){\n         ++count;\n      }\n   }\n \n return count;  \n}\n\nint main() {\n   \n   char input;\n   string str;\n   \n   cin >> input;\n   getline( cin , str);\n   \n   cout << CountCharacters(input, str) << endl;\n\n   \n   \n   return 0;\n}\n", "class": 0, "version": 65, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CalcNumCharacters(string userString, char userChar){\n  unsigned int i;\n  int count;\n  count = 0;\n  for(i = 0; i < userString.size(); i++){\n   if(userString.at(i) == userChar){\n      count = count + 1;\n   }\n  }\n   return count;\n}\n\nint main() {\n   char space;\n   string userInput;\n   cin >> userInput;\n   cin >> space;\n   int final;\n   final = CalcNumCharacters(userInput, space);\n   if(final != 1){\n    cout << final << \" \" << space << \"'s\" << endl;\n   }\n   else{\n    cout << final << \" \" << space << endl;\n   }\n\n\n   return 0;\n}\n", "class": 0, "version": 111, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int totaln = 0;\n   for (unsigned int i = 0; i <= userString.size() - 1; ++i) {\n      if (userChar == userString.at(i)) {\n         totaln = totaln + 1;}}\n         \n   return totaln;\n}\n\nint main() {\n   string userText;\n   char letter;\n   cin >> letter;\n   getline(cin, userText);\nCountCharacters(letter, userText);\n\ncout << CountCharacters(letter, userText) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 124, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CalcNumCharacters(string userString, char userChar) {\n   int cnt = 0;\n   int size;\n   int i;\n   size = userString.size();\n   for (i = 0; i < size; i++) {\n      if (userString.at(i) == userChar) {\n         cnt += 1;\n      }\n   }\n   return cnt;\n}\n\nint main() {\n   string userString;\n   char userChar;\n   \n   cin >> userChar;\n   getline(cin, userString);\n   \n   if (CalcNumCharacters(userString,userChar) == 1) {\n      cout << \"1 \" << userChar << endl;\n   }\n   else {\n      cout << CalcNumCharacters(userString,userChar) << \" \" << userChar << \"'s\" << endl;\n   }\n   return 0;\n}\n", "class": 0, "version": 55, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int i;\n   int size;\n   int count;\n   \n   count = 0;\n   size = userString.length();\n   \n   for (i = 0; i < size; ++i) {\n      if (userString.at(i) == userChar) {\n         count = count + 1;\n      }\n   }\n   return (count);\n}\n\nint main() {\n   char input;\n   string input2;\n   \n   cin >> input;\n   getline (cin, input2);\n   \n   cout << CountCharacters(input, input2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 71, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int cnt = 0;\n   \n   for (unsigned int i = 0; i < userString.size(); ++i) {\n      if (userString.at(i) == userChar) {\n         ++cnt;\n      }\n   }\n   return cnt;\n}\n\nint main() {\n   char a;\n   string input;\n   int totalNum;\n   \n   cin >> a;\n   cin >> input;\n   \n   totalNum = CountCharacters(a, input);\n   \n   cout << totalNum << endl;\n\n   return 0;\n}\n", "class": 0, "version": 165, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n   int count;\n   int i;\n   char y;\n   \n   count = 0;\n   for (i = 0; i < userString.size(); i++) {\n      y = userString.at(i);\n      if (y == userChar) {\n         count++;\n      }\n   }\n   return count;\n}\n\nint main() {\n   char x;\n   string y;\n   \n   cin >> x;\n   getline (cin, y);\n   \n   cout << CountCharacters(x, y) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 30, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString){\n   int length = userString.length();\n   int x = 0;\n   for(int i = 0; i < length; i++){\n      if(userString.at(i) == userChar){\n         x++;\n      }\n   }\n   return x;\n}\n\nint main() {\n   char ch;\n   string str;\n   cin >> ch;\n   getline(cin, str);\n   cout << CountCharacters(ch, str) << endl;\n   return 0;\n}", "class": 0, "version": 291, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CalcNumCharacters(string userString, char userChar) {\n   int totalChar; \n   long unsigned int i;\n   totalChar = 0; \n   \n   while ( i < userString.size()) {\n      if (userString.at(i) == userChar) {\n         totalChar = totalChar + 1; \n         ++i; \n      }\n      else if (userString.at(i) != userChar){\n         ++i;\n      }\n   }\n   /* for (i = 0; i <= (userString.size() - 1); ++i){\n      if (userString.at(i) == userChar) {\n         totalChar = totalChar + 1; \n      }\n      else if (userString.at(i) != userChar){\n         ++i;\n      }\n   } */ \n   cout << totalChar << \" \" << userChar <<endl; \n   \n   return totalChar; \n}\n\nint main() {\n\n   string userString;\n   char userChar;\n   \n   getline(cin, userString);\n\n   //cin >> userChar; \n   \n   cout << CalcNumCharacters(userString, userChar); \n   return 0;\n}\n", "class": 0, "version": 176, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters ( char userChar, const string &userString )\n{\n   int count = 0;\n   \n   for ( unsigned int i = 0; i < userString.size(); ++i )\n   {\n      if ( userString.at(i) == userChar )\n      {\n         ++count;\n      }\n   }\n   return count;\n}\n\nint main() {\n  string userString;\n  char userCharacter;\n  \n  cin >> userCharacter;\n  getline ( cin, userString );\n  \n  cout << CountCharacters ( userCharacter, userString ) << endl;\n  \n  \n   \n\n   return 0;\n}\n", "class": 0, "version": 47, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string& userString){\n   int count = 0;\n   for(unsigned int i = 0; i<userString.size();i++){\n      if(userString[i] == userChar){\n         ++count;\n      }\n   }\n   return count;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char userChar;\n   string userString;\n   cin>>userChar;\n   getline(cin,userString);\n   cout<<CountCharacters(userChar, userString);\n   cout<<endl;\n\n   return 0;\n}\n", "class": 0, "version": 95, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString) {\n   int z = 0;\n   for (unsigned int i = 0; i < userString.size(); ++i) {\n      if (userString.at(i) == userChar) {\n         z += 1;\n      }\n   }\n   return z;\n   \n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char x;\n   string y;\n   \n   cin >> x;\n   getline(cin, y);\n   cout << CountCharacters(x, y) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 265, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, string userString){\n   int num = 0;\n   cin >> userChar;\n   getline(cin, userString);\n   for(unsigned int i = 0; i<userString.size(); i++){\n      if(userString.at(i) == userChar){\n         num++;\n      }\n   }\n   return num;\n}\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char myChar;\n   string myString;\n   cin >> myChar;\n   getline(cin, myString);\n   cout<<CountCharacters(myChar, myString)<<endl;\n   return 0;\n}\n", "class": 0, "version": 52, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString) {\n   int count = 0;\n   for (unsigned int i = 0; i < userString.size(); ++i) {\n      if(userString [i] == userChar) {\n         ++count;\n      }\n   }\n   return count;\n}\nint main() {\n   /* Type your code here. Your code must call the function.  */\nchar inputChar;\nstring inputString;\n\ncin >> inputChar >> inputString;\n\ncout << CountCharacters(inputChar, inputString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 100, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n   int num;\n   int i;\n   \n   num = 0;\n   \n   for (i = 0; i < userString.size(); ++i) {\n      if (userString.at(i) == userChar) {\n         num = num + 1;\n      }\n   }\n   return num;\n}\n\nint main() {\n   char letter;\n   string phrase;\n   \n   cin >> letter;\n   getline(cin, phrase);\n   \n   cout << CountCharacters(letter, phrase) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 18, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \n\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   int letter;\n   int word;\n   \n   cin >> letter;\n   cin >> word;\n   \n   if ((letter = 'n') && (word = 'Monday')) {\n      cout << \"1\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 158, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int i;\n   int size;\n   int occur = 0;\n   size = userString.size();\n   \n   for(i=0; i<size; ++i) {\n      if (userString.at(i) == userChar) {\n         ++occur; }\n   }\n   return occur;\n}\n\nint main() {\n   char letter;\n   string userString;\n   cin >> letter;\n   cin >> userString;\n   \n   cout << CountCharacters(letter, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 247, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CalcNumCharacters(string userString, char userChar)\n{\n   int charTimes = 0;\n   int i;\n   \n   for (i = 0; i < userString.size(); ++i)\n   {\n      if (userString.at(i) == userChar)\n      {\n         charTimes = charTimes + 1;\n      }\n   }\n   \n   return charTimes;\n}\n\nint main() {\n   char userChar;\n   int number;\n   string userString;\n   \n   cin >> userChar;\n   getline(cin, userString);\n   \n   number = CalcNumCharacters(userString, userChar);\n   \n   if (number != 1)\n   {\n      cout << number << \" \" << userChar << \"'s\" << endl;\n   }\n   else\n   {\n      cout << number << \" \" << userChar << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 120, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int x=0;\n   int o = userString.size();\n   for(int i = 0; i < o; i++) {\n      if(userChar == userString.at(i)) {\n         x++;\n      }\n   }\n   return x;\n}\n\nint main() {\n   char ch;\n   string str;\n   cin >> ch;\n   cin >> str;\n   cout << CountCharacters(ch, str) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 72, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString)\n{\n   unsigned int i;\n   int counter = 0;\n   \n   for(i = 0 ; i < userString.size(); ++i)\n   {\n      if(userString.at(i) == userChar)\n      {\n         counter = counter + 1;\n      }\n   }\n   \n   return counter;\n}\n   \n\nint main() {\n   char userChar;\n   \n   string userString;\n   \n   \n   cin >> userChar;\n   \n   getline( cin, userString);\n   \n   cout <<CountCharacters(userChar,userString)<< endl;\n\n\n   return 0;\n}\n", "class": 0, "version": 29, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString) {\n   int x=0;\n   for(unsigned int i = 0; i<userString.size(); ++i) {\n      if(userString.at(i) == userChar) {\n         x++;\n      }\n   } return x;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char userChar;\n   string userString; \n   cin >> userChar;\n   cin >> userString;\n   \n   cout << CountCharacters(userChar,userString) << endl; \n   \n\n   return 0;\n}\n", "class": 0, "version": 103, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int i;\n   int size;\n   int count = 0;\n   \n   size = userString.size();\n   \n   for (i = 0; i < size; ++i) {\n      if (userString.at(i) == userChar) {\n         ++count;\n      }\n   }\n   return count;\n}\n\n\nint main() {\n   char myChar;\n   string myString;\n   int numCount;\n   cin >> myChar;\n   getline(cin, myString);\n   \n   numCount = CountCharacters(myChar, myString);\n   \n   cout << numCount << endl;\n   return 0;\n}\n", "class": 0, "version": 86, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString){\n   int count = 0;\n   for(unsigned int i = 0; i < userString.size(); i++){\n      if(userString.at(i) == userChar){\n         count += 1;\n      }\n   }\n   return count;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   string userString;\n   char userInput;\n   cin >> userInput;\n   getline (cin, userString);\n   cout << CountCharacters(userInput, userString) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 227, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n   int numDetect;\n   int i;\n   \n   numDetect = 0;\n   \n   for (i = 0; i < userString.size(); ++i) {\n      if (userString.at(i) == userChar) {\n         numDetect = numDetect + 1;\n      }\n   }\n   \n   return numDetect;\n}\n   \n\nint main() {\n   char detectValue;\n   string userValue;\n   \n   cin >> detectValue;\n   getline(cin, userValue);\n   \n   cout << CountCharacters(detectValue, userValue) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 46, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString){\n   int count=0;\n   for(int i=0;i<userString.length();i++){\n      if(userString[i] == userChar){\n         count++;\n      }\n   }\n   return count;\n}\n\nint main(){\n   string userString;\n   char userChar;\n   cin >> userChar;\n   cin >> userString;\n   \n   getline(cin,userString);\n   \n   \n   cout<<CountCharacters(userChar,userString)<<endl;\n   return 0;\n}\n", "class": 0, "version": 205, "model": "Human"}
{"problem": 4, "code": "//Received help from Mira Samarneh\n#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n   int character = 0;\n   \n   for (int i = 0; i < userString.size(); ++i){\n\t\tif(userChar == userString.at(i)){\n\t\t\tcharacter++;\n\t\t}\n\t}\n\treturn character;\n}\n\nint main() {\n   char character;\n\tstring userString = \"\";\n\t\n\tcin >> character >> userString;\n\n\tcout << CountCharacters(character, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 53, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* input char and string, output is num times the char shows up in string */\nint CountCharacters(char userChar, string userString) {\n   int numChar; \n   int i;\n   int size;\n   \n   numChar = 0;\n   size = userString.size();\n   \n   \n   for (i = 0; i < size; i++) {\n      if (userString.at(i) == userChar) {\n         numChar += 1;\n      }\n   }\n   \n   return numChar;\n}\n   \n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char userChar;\n   string userString;\n   \n   cin >> userChar;\n   getline (cin,userString); //empty space\n   getline (cin,userString); \n   \n   cout << CountCharacters(userChar, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 33, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n   int count = 0;\n   for (unsigned int i = 0; i < userString.size(); ++i) {\n      if (userString.at(i) == userChar) {\n         ++count;\n      }\n   }\n   return count;\n}\n   \n\nint main() {\n   char character;\n   string str;\n   int count;\n   \n   cin >> character;\n   getline(cin, str);\n   \n   count = CountCharacters (character, str);\n   cout << count << endl;\n\n   return 0;\n}\n", "class": 0, "version": 39, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString)\n{\n   int num = 0;\n   for (unsigned int i = 0; i < userString.size(); ++i)\n   {\n      if (userString.at(i) == userChar)\n      {\n         num += 1;\n      }\n   }\n   return num;\n}\n\n\nint main() {\n   char input;\n   cin >> input;\n   string userString;\n   getline(cin ,userString);\n   int result;\n   \n   result = CountCharacters(input, userString);\n   cout << result << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 50, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString) {\n   int i;\n   int count = 0;\n   for (i = 0; i < userString.size(); i++)   {\n      if (userString.at(i) == userChar) {\n         count = count + 1;\n      }\n   }\n   return count;   \n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char userInputChar;\n   string userInput;\n   \n   cin >> userInputChar >> userInput;\n   \n   cout << CountCharacters(userInputChar, userInput);\n   cout << endl;\n   return 0;\n}\n", "class": 0, "version": 155, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int count = 0;\n   for (int i= 0; i < userString.size(); ++i) {\n      if (userString.at(i) == userChar) {\n         count +=1;\n      }\n   }\n   return count;\n}\n   \n\nint main() {\nchar userChar;\nstring s;\ncin >> userChar >> s;\ncout << CountCharacters( userChar, s)<<endl;\n\n   return 0;\n}\n", "class": 0, "version": 233, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString)\n{\n   int num=0;\n   \n   for (unsigned int i=0; i <userString.size(); i++)\n   {\n      if (userString.at(i) == userChar)\n      {\n         num = num+1;\n      }\n   }\n   return num;\n}\n        \nint main() {\n   /* Type your code here. Your code must call the function.  */\n   string userString;\n   char userChar;\n   \n   cin >> userChar;\n   getline(cin, userString);\n   \n   cout << CountCharacters(userChar, userString) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 265, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString){\n   int count = 0;\n   for(unsigned int i = 0; i<userString.size(); ++i){\n      if(userString.at(i) == userChar){\n         count++;\n      }\n   }\n   return count;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char userChar;\n   string userString;\n   cin >> userChar;\n   cin >>userString;\n   cout << CountCharacters(userChar,userString)<<endl;\n   return 0;\n}\n", "class": 0, "version": 116, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharcters (char userChar, const string &userString) {\n   int userCount = 0;\n   \n   for (unsigned int i = 0; i < userString.size(); ++i) {\n      if (userString.at(i) == userChar) {\n         ++userCount;\n      }\n   }\n   return userCount;\n}\n\nint main() {\n    \n   char numChar\n   \n   string line;\n   getline (cin, line);\n   cin >> numChar;\n  \n   \n   cout << CountCharcters (numChar, line) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 168, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n//function region\nint CountCharacters (char givenCharacter, const string& stringLine) {\n   int stringSize;\n   int character;\n   char characterCheck;\n   int counter = 0; \n   \n   stringSize = stringLine.size( );\n   \n   for (character = 0; character < stringSize; character = character + 1) {      // search each letter for a specific character in a string\n      characterCheck = stringLine.at(character);\n      \n      if (characterCheck == givenCharacter) {       // use a counter to count how many times that character appears \n      counter = counter + 1;\n      }\n      \n   }\n\nreturn counter;\n\n}\n\nint main() {\n  char givenCharacter;\n  string stringLine; \n  \n  cin >> givenCharacter;\n  getline (cin, stringLine);\n  \n cout << CountCharacters (givenCharacter, stringLine); \n cout << endl;\n\n   return 0;\n}\n", "class": 0, "version": 88, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\n\n\n\nint CountCharacters(char userChar, string userString){\n   int numTimes = 0;\n   for (int unsigned i = 0; i < userString.size(); ++i){\n     if (userChar == userString[i]){\n      numTimes++;\n      }\n   }\n   return numTimes;\n}\n\nint main(){\n   \nchar letter;\nstring word;\n\ncin >> letter >> word;\n\ncout << CountCharacters(letter, word) << endl;\n\n   return 0;\n\n}\n", "class": 0, "version": 34, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString)\n{ \n   int cnt = 0;\n   for( unsigned int i = 0; i < userString.size(); ++i)\n   {\n      if( userChar == userString.at(i)) ++cnt;\n\n}\nreturn cnt;\n}\nint main() {\n   char letter;\n   string s;\n   cin >> letter;\n   getline(cin, s);\n   \n   cout << CountCharacters(letter, s) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 129, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CalcNumCharacters (string userString, char userChar) {\n   int numLetter;\n   numLetter = 0;\n   for (unsigned int i  = 0; i < userString.size(); ++i) {\n      if (userString.at(i) == userChar) {\n         numLetter = numLetter + 1;\n         }\n      }\n   return numLetter;\n   }\n\nint main() {\n   char letterFinding;\n   string sentence;\n   \n   cin >> letterFinding;\n   getline (cin, sentence);\n   /* Type your code here. Your code must call the function.  */\n   if (CalcNumCharacters(sentence, letterFinding) != 1) {\n   cout << CalcNumCharacters(sentence, letterFinding) << \" \" << letterFinding << \"'s\" << endl;\n   }\n   else if (CalcNumCharacters(sentence, letterFinding) == 1) {\n      cout << CalcNumCharacters(sentence, letterFinding) << \" \" << letterFinding << endl;\n      }\n   return 0;\n}\n", "class": 0, "version": 59, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString){\n   int counter = 0;\n   for(int i = 0; i < userString.size(); ++i){\n      if(userString[i] == userChar){\n         ++counter;\n         }\n      }\n   return counter;\n   }\n\nint main() {\n   \n   char userChar;\n   string userInput;\n   \n   cin >> userChar;\n   \n   getline(cin, userInput);\n   \n   cout << CountCharacters(userChar, userInput) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 30, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString){\n   int size;\n   int i;\n   int amt=0;\n   size = userString.length();\n   for (i =0; i < size; ++i){\n      if ( userString.at(i) == userChar){\n         ++amt;\n      }\n   }\n   return(amt);\n}\n\nint main() {\n   char search;\n   string phrase;\n   cin >> search;\n   getline(cin , phrase);\n   cout << CountCharacters(search,phrase) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 17, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString)\n{\n   int cnt = 0;\n   \n   for (unsigned int i = 0; i < userString.length(); ++i)\n   {\n      if (userString[i] == userChar)\n      {\n         ++cnt;\n      }\n      \n   }\n   return cnt;\n}\n\nint main() {\n   \n   string userString;\n   char userChar;\n   \n   cin >> userChar;\n   getline(cin, userString);\n   \n   cout << CountCharacters(userChar, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 285, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CalcNumCharacters(string inputStr , char inChar){\n   int i;\n   int charCounter;\n   \n   charCounter = 0;\n   \n   for (i = 0; i < inputStr.size() ; ++i){\n      if (inputStr.at(i) == inChar) {\n         charCounter += 1;\n      }\n   }\n   return charCounter;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   string userString;\n   char inputChar;\n   int numChar;\n   \n   cin >> inputChar;\n   cin >> userString;\n\n   numChar = CalcNumCharacters(userString , inputChar);\n   \n   if (numChar  == 1){\n      cout << numChar << \" \" << inputChar << endl;\n   }\n   else if (numChar != 1){\n      cout << numChar << \" \" << inputChar << \"'s\" << endl;\n   }\n\n   \n   return 0;\n}\n", "class": 0, "version": 26, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString){\n   unsigned int numChar;\n   \n   numChar = 0;\n   \n   unsigned int i;\n   \n   for ( i = 0; i < userString.size(); ++i) {\n      if (userChar == userString.at(i)) {\n         numChar++;\n      }\n   }\nreturn numChar;\n}/* Define your function here */ \n\nint main() {\n   char userChar;\n   string userString;\n   \n   cin >> userChar;\n   getline(cin, userString);\n   cout << CountCharacters ( userChar, userString) << endl;/* Type your code here. Your code must call the function.  */\n\n   return 0;\n}\n", "class": 0, "version": 69, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CalcNumCharacters(string userString, char userChar)\n{\n   unsigned int i;\n   int cnt;\n   char inStr;\n   \n   cnt = 0;\n   \n   for (i = 0; i < userString.size(); ++i)\n   {\n      inStr = userString.at(i);\n      \n      if (inStr == userChar)\n      {\n         cnt = cnt + 1;\n      }\n   }\n   \n   return cnt;\n}\n\n\nint main() {\n   \n   string userString;\n   char userChar;\n   \n   cin >> userChar;\n   getline(cin, userString);\n   \n   if (CalcNumCharacters(userString, userChar) != 1)\n   {\n      cout << CalcNumCharacters(userString, userChar) << \" \" << userChar << \"'s\" << endl;\n   }\n   \n   else\n   {\n      cout << CalcNumCharacters(userString, userChar) << \" \" << userChar << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 168, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n//Worked on this lab with Amritha S.\nint CountCharacters(char userChar, string userString) {\n   int i;\n   int count;\n   \n   count = 0;\n   i = 0;\n   \n   for (i = 0 ; i < userString.size() ; ++i) {\n      if (userString.at(i) == userChar) {\n         count = count + 1;\n      }\n   }\nreturn count;\n}\n\nint main() {\n   char userChar;\n   string userString;\n   \n   cin >> userChar;\n   getline(cin, userString);\n   \n   cout << CountCharacters(userChar, userString) << endl;\n\n   return 0;\n}\n\n", "class": 0, "version": 65, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString) {\n   int counter = 0;\n   for (unsigned int i = 0; i < userString.size(); ++i) {\n      if (userString.at(i) == userChar) {\n         ++counter;\n      }\n   }\n   return counter;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   string userString;\n   char userChar;\n   \n   cin >> userChar;\n   getline(cin, userString);\n   \n   cout << CountCharacters(userChar, userString) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 140, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   \n   int x = 0;\n   int y = 0;\n   \n   for ( y = 0 ; y < userString.size() ; y++) {\n      \n      if (userChar == userString[y]) {\n         ++x;\n      }\n      \n   }\n   \n   return x; \n   \n}\n         \n\nint main() {\n   \n   char userChar[1];\n   string str;\n   \n   cin >> userChar ;\n   cin.ignore() ;\n   \n   getline ( cin, str ) ;\n   cout << CountCharacters( userChar [0], str) << endl ;\n\n\n   return 0;\n}\n", "class": 0, "version": 102, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString)\n{\n   int count = 0;\n\n   for (unsigned int i = 0; i < userString.size(); ++i)\n   {\n      if(userString.at(i) == userChar)\n      {\n         ++ count;\n      }\n   }\n   return count;\n}\n      \n\nint main() {\nchar userChar;\nstring userString;\ncin >>userChar;\ncin >> userString;\ncout << CountCharacters(userChar, userString) << endl;\n\n   return 0;\n}\n\n//Recieved help from lab and discord", "class": 0, "version": 60, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string& userString) {\n   //int characterAppears;\n   int count = 0;\n   long unsigned int i;\n   \n   for (i = 0; i < userString.size(); i = i + 1) {\n      if (userString.at(i) == userChar) {\n         count = count + 1;\n      }\n      else {\n      }\n   }\n   return count;\n}\n\nint main() {\n   char inputChar;\n   string inputString;\n   \n   cin >> inputChar;\n   cin >> inputString;\n   \n   cout << CountCharacters(inputChar, inputString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 167, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CalcNumCharacters(string userString, char userChar) {\n   int charCount;\n   int i;\n\n   charCount = 0;\n   \n   for (i = 0; i < userString.size(); ++i) {\n      if (userString.at(i) == userChar) {\n         charCount = charCount + 1;\n      }\n   }\n   \n   \n   return charCount;\n}\n\nint main() {\n   string userString;\n   char userChar; \n   \n   cin >> userChar;\n   getline(cin, userString);\n   cout << CalcNumCharacters(userString, userChar) << \" \" << userChar;\n   \n   if (userChar == 1) {\n      cout << \"'s\" << endl;\n   }\n   else {\n      cout << endl;\n   }\n   \n\n   return 0;\n}\n", "class": 0, "version": 157, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString) \n{\n   int count =0;\n   for ( unsigned int i=0; i< userString.size(); i++)\n   {\n      if (userString.at(i)==userChar)\n      {\n         ++count;\n      }\n   }\n   return count;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\nchar userChar;\nstring userString;\n\ncin >> userChar;\ngetline(cin,userString);\n\n\ncout<< CountCharacters(userChar, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 27, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString)\n{\n   int numTimes = 0;\n   \n   for (unsigned int i = 0; i < userString.size(); ++i)\n   {\n      if (userString.at(i) == userChar)\n      {\n         ++numTimes;\n      }\n   }\n   return numTimes;\n}\n\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char userChar;\n   string userString;\n   \n   cin >> userChar >> userString;\n   \n   cout << CountCharacters (userChar, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 151, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString)\n{\n   int count = 0;\n   \n   for (int i = 0; i < userString.length(); i++)\n   {\n      if (userString.at(i) == userChar)\n      {\n         count++;\n      }\n   }\n   cout << count << endl;\n   return count;\n}\n\nint main() {\n\n   char userChar;\n   string userString;\n   \n   cin >> userChar;\n   getline(cin, userString);\n   \n   CountCharacters(userChar, userString);\n      \n   return 0;\n}\n", "class": 0, "version": 174, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString){\n   string s = userString; \n   int charCount = 0;\n   \n   for(int i = 0; i < s.size(); i++){\n      if(s.at(i) == userChar){\n         charCount++;\n      }\n   }\n   return charCount;\n}\n\nint main() {\n   char input;\n   cin >> input;\n   string s; \n   getline (cin, s); \n   cout << CountCharacters(input, s) << endl; \n\n\n   return 0;\n}\n", "class": 0, "version": 152, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \n\nint cnt;\n\nint CountCharacters ( char userChar, const string &userString )\n{\n   for ( int i = 0; i < userString.size(); ++i )\n   {\n      if ( userString.at(i) == userChar )\n      {\n         ++cnt;\n      }\n      \n      else\n      {\n      }\n   }\n   \n      return cnt;\n}\n   \n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   \n   char s;\n   string userString;\n   \n   cin >> s;\n   cin >> userString;\n   \n   cout << CountCharacters ( s, userString ) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 184, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int coolNum = 0;\n   for(unsigned int i = 0; i < userString.size(); ++i) {\n      if(userString.at(i) == userChar) {\n         coolNum++;\n      }\n   }\n   \n   return coolNum;\n}\n\nint main() {\n   char desiredLetter;\n   string userString;\n   \n   cin >> desiredLetter;\n   getline (cin, userString);\n   \n   cout << CountCharacters(desiredLetter, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 64, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString){\n   int counter = 0;\n   for(int i = 0; i < static_cast<int>(userString.length());i++){\n      if(userString.at(i) == userChar){\n         counter++;\n      }\n   }\n   return counter;\n}\n\nint main() {\n   char user;\n   string user2;\n   \n   cin >> user;\n   getline(cin, user2);\n   \n   cout << CountCharacters(user,user2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 273, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CalcNumCharacters(string userString, char userChar) {\n   int numChar = 0;\n   unsigned int i;\n   \n   for (i = 0; i < userString.size(); ++i) {\n      if (userChar == userString.at(i)) {\n         numChar += 1;\n      }\n   }\n   \n   return numChar;\n}\n\nint main() {\n   string s;\n   char myChar;\n   \n   cin >> myChar;\n   getline(cin, s);\n   \n   cout << CalcNumCharacters(s, myChar) << \" \" << myChar;\n   \n   if (CalcNumCharacters(s, myChar) > 1) {\n      cout << \"'s\";\n      \n   }\n   \n   cout << endl;\n\n   return 0;\n}\n", "class": 0, "version": 27, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n   int userLett = 0;\n   for (unsigned int i = 0; i < userString.size(); ++i) {\n      if (userChar == userString.at(i)) {\n         userLett = userLett + 1;\n      }\n   }\n   return userLett;\n}\n\nint main() {\n   char userChar;\n   string userString;\n   \n   cin >> userChar;\n   getline(cin, userString);\n   \n   cout << CountCharacters(userChar, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 36, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\nint CountCharacters(char userChar, const string &userString){\n\tint count = 0;\n\tfor(int i = 0; i < userString.size(); ++i){\n\t\tif (userString.at(i) == userChar){\n\t\t\t++count;\n\t\t}\n\t}\n\treturn count;\n}\nint main(){\n\tchar inputChar;\n\tstring inputString;\n\tcin >> inputChar;\n\tgetline(cin, inputString);\n\tcout << CountCharacters(inputChar, inputString) << endl;\n\treturn 0;\n}", "class": 0, "version": 253, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString) {\n   int userEnd = 0;\n   for (int i = 0; i < userString.length(); i++) {\n      if (userString[i] == userChar) {\n         userEnd++;\n      }\n   }\n   return userEnd;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   string userString;\n   char userChar;\n   \n   cin >> userChar;\n   getline(cin, userString);\n   \n   cout << CountCharacters(userChar, userString) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 77, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString) {\n   int count = 0;\n   for (unsigned int i =0; i < userString.length(); i++) {\n      if (userString.at(i) == userChar) {\n         count++;\n      }\n   }\n   return count;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char inputChar;\n   string inputString;\n   \n   cin >> inputChar;\n   getline(cin, inputString);\n   \n   cout << CountCharacters(inputChar, inputString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 279, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString)\n{\n   int numABC = 0;\n   bool sameLetter;\n   sameLetter = false;\n   \n   for (int i = 0; i <= userString.size(); ++i)\n   {\n      if (userString[i] == userChar)\n      {\n         sameLetter = true;\n         if (sameLetter == true)\n         {\n            numABC = numABC + 1;\n         }\n      }\n   }\n      return numABC;\n}\n\nint main() {\n   char userChar;\n   string userString;\n   cin >> userChar;\n   getline(cin, userString);\n   \n   cout << CountCharacters(userChar, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 57, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int count = 0;\n   \n   for (unsigned long int i = 0; i < userString.size(); i++) {\n      if (userString[i] == userChar) {\n         count += 1;\n      }\n   }\n   \n   return count;\n}\n         \n\nint main() {\n   char letter;\n   string word;\n   cin >> letter >> word;\n   \n   cout << CountCharacters(letter, word) << endl;\n   \n   \n   \n\n   return 0;\n}\n", "class": 0, "version": 12, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CalcNumCharacters(string userString, char userChar) {\n   int count;\n   count = 0;\n   for (unsigned i = 0; i < userString.size() ; i++) {\n      if (userString.at(i) == userChar) {\n         count = count + 1;\n      }\n   }\n   return count;\n}\n\nint main() {\n   string inputString;\n   char inputChar;\n   cin >> inputChar;\n   getline(cin, inputString);\n   \n   cout << CalcNumCharacters(inputString, inputChar) << \" \" << inputChar;\n   if (CalcNumCharacters(inputString, inputChar) > 1) {\n      cout << \"'s\";\n   }\n   cout << endl;\n\n   return 0;\n}\n", "class": 0, "version": 45, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString){\n   string temp;\n   temp = userString;\n   int num = 0;\n   while(temp.find(userChar) != string::npos){\n      temp.replace(temp.find(userChar),1,\"1910\");\n      ++num;\n   }\n   return(num);\n}\n\nint main() {\n   char u;\n   string phrase;\n   int nums;\n   \n   cin >> u;\n   getline (cin, phrase);\n   \n   nums = CountCharacters(u, phrase);\n   cout << nums << endl;\n\n   return 0;\n}\n", "class": 0, "version": 28, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int charCounter = 0; \n   for (unsigned int i = 0; i < userString.size(); ++i) {\n      if ( userString.at(i) == userChar ){\n      ++charCounter; \n      }\n   }\n   return charCounter;\n}\nint main() {\n   char inputChar; \n   string inputString;\n   \n   cin >> inputChar; \n   getline (cin, inputString); \n   \n\n   cout << CountCharacters(inputChar, inputString) << endl; \n   \n   return 0;\n}\n", "class": 0, "version": 258, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int i;\n   int count = 0;\n   for (i = 0; i < static_cast<int>(userString.size()); ++i) {\n      if (userString.at(i) == userChar) {\n         ++count;\n      }\n   }\n   return count;\n}\n\nint main() {\n   char inputChar;\n   string userInput;\n   cin >> inputChar;\n   getline(cin, userInput);\n   cout << CountCharacters(inputChar, userInput) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 175, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CalcNumCharacters(string userString, char userChar) {\n   unsigned long int i;\n   int cnt;\n   \n   cnt = 0;\n   \n   \n   for (i = 0; i < userString.size(); ++i) {\n      if (userString.at(i) == userChar) {\n         cnt = cnt + 1;\n      }\n   }\n   \n   return cnt;\n}\n\n\n\nint main() {\n   char c;\n   string line;\n   int x;\n   \n   cin >> c;\n   getline(cin, line);\n   \n   x = CalcNumCharacters(line , c);\n   \n   if (x == 1) {\n      cout << x << \" \" << c << endl;\n   }\n   else {\n      cout << x << \" \" << c << \"'s\" << endl;\n   }\n   \n\n   return 0;\n}\n", "class": 0, "version": 139, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters (char userChar, const string &userString) {\n   int occurrence = 0;\n   \n   for (int i=0; i < userString.length(); i++) {\n      if (userString[i] == userChar){\n         occurrence = occurrence + 1;\n      }\n   }\n   return occurrence;\n}\n   \nint main() {\n   string userString;\n   char userChar;\n   \n   cin >> userChar;\n   \n   getline (cin, userString);\n   cout << CountCharacters (userChar, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 150, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CalcNumCharacters(string userString, char userChar)\n\n{\nint cnt = 0;\n   for (int i = 0; i < userString.length();++i)\n   {\n         if (userString[i] == userChar)\n         {\n            cnt ++;\n         }\n   }\n   return cnt;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\nstring userString;\nchar userChar;\n\ncin >> userChar;\ngetline(cin,userString);\nint cnt = CalcNumCharacters(userString,userChar);\n\nif (cnt != 1)\n   cout << cnt << ' ' << userChar << \"'s\";\nelse \n      cout << cnt << ' ' << userChar;\ncout << endl;\n   return 0;\n}\n", "class": 0, "version": 115, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CalcNumCharacters(string userString, char userChar) {\n  int count = 0;\n  unsigned int i;\n  \n  for (i = 0; i < userString.size(); ++i) {\n     if (userString.at(i) == userChar) {\n        count += 1;\n     }\n  }\n   \n return count;\n}\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   string inputString;\n   char userChar;\n   unsigned int i;\n   int count = 0;\n   \n   cin >> userChar;\n   \n   getline(cin, inputString);\n   \n   for (i = 0; i < inputString.size(); ++i) {\n      if (inputString.at(i) == userChar) {\n        count += 1;\n     }\n  }\n   \n   if (count == 1){\n      cout << CalcNumCharacters(inputString, userChar) << \" \" << userChar << endl;\n   }\n   else {\n      cout << CalcNumCharacters(inputString, userChar) << \" \" << userChar << \"'s\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 10, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int numLetters = 0;\n   for (unsigned int i = 0; i < userString.size(); ++i) {\n      if ((userString.at(i) == userChar)) {\n         numLetters = numLetters + 1;\n      }\n      \n   }\n   return numLetters;\n}\nint main() {\n   string userString = \"Bob\";\n   char userChar = 'o';\n   \n   getline (cin, userString);\n   cin >> userChar;\n   \n   cout << CountCharacters(userChar, userString);\n   cout << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 10, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters (char, const string &);\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char userChar;\n   string userString;\n   cin >> userChar;\n   cin >> userString;\n   int show = CountCharacters(userChar, userString);\n \n   return 0;\n}\n\nint CountCharacters(char userChar, const string &userString){\n   int count = 0;\n   for(int i = 0; i < userString.size(); i++){\n      if(userChar == userString.at(i)){\n        count++;\n        cout << count << endl;\n      }\n      \n   }\n   return count;\n   \n}", "class": 0, "version": 160, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int x = 0;\n   for (unsigned int i = 0; i < userString.size(); i++) {\n      if (userString.at(i) == userChar) {\n         ++x;\n      }\n   }\n   return x;\n}\n\nint main() {\n   char inputChar;\n   string inputString;\n   \n   cin >> inputChar >> inputString;\n   \n   cout << CountCharacters(inputChar, inputString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 118, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString){\n   int total = 0;\n   for(int i = 0;i<userString.length();i++){\n      if(userString[i] == userChar){\n         total++;\n      }\n   }\n   return total;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   string userString;\n   char userChar;\n   cin >> userChar;\n   cin >> userString;\n   cout<<CountCharacters(userChar,userString)<<endl;\n   return 0;\n}\n", "class": 0, "version": 11, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   \n   int charCnt = 0;\n   \n   for (unsigned int i = 0; i < userString.size(); ++i)\n   {\n      if (userChar == userString.at(i))\n      {\n         ++charCnt;\n      }\n   }\n\n   return charCnt;  \n}\n\nint main() {\n   char inputChar;\n   string userString;\n   \n   cin >> inputChar >> userString;\n   \n   cout << CountCharacters(inputChar, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 33, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters (char userChar, const string& userString)\n{ \n   int Counter = 0; \n   \n   for (int i = 0; i< (userString.size()-1) ; i++ )\n   {  \n      if (userString.at(i) == userChar)\n      { \n         Counter = Counter + 1; \n      }\n   }\n   return Counter; \n}\n\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\nstring Words; \nchar numOfChars;\n\n   getline (cin, Words); \n   cin >> numOfChars; \n   \n   cout << CountCharacters ( numOfChars, Words) << endl; \n   \n   return 0;\n}\n", "class": 0, "version": 89, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString) {\n   int charCount=0;\n   for (unsigned int i = 0 ; i< userString.size(); ++i) {\n      if (userString.at(i) == userChar) {\n         charCount += 1;\n      }\n   }\n   return charCount;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char userChar;\n   string userString;\n   \n   cin>>userChar;\n   getline(cin, userString);\n   \n   cout << CountCharacters(userChar, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 150, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString){\n   int i;\n   int output;\n   int size;\n   \n   size = userString.size();\n   output = 0;\n   \n   for ( i = 0; i < size; ++i ) {\n      if ( userString.at(i) == userChar ) {\n         output = output + 1;\n      }\n   }\n   return output;\n}\n   \n\nint main() {\n   char userchar;\n   string userstring;\n   cin >> userchar;\n   getline ( cin, userstring );\n   cout << CountCharacters ( userchar, userstring ) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 183, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters\n\n(char userChar, string userString) {\n\n    int count = 0;\n\n\n\n    for(int i = 0; i < userString.size(); ++i) {\n\n\n        if(userChar == userString[i]) {\n\n            count++;\n\n        }\n\n    }\n\n   \n\n    return count;\n\n}\n\n\nint main() {\n\n   \n    char userChar;\n\n    string userString;\n\n   \n\n    cin >> userChar;\n\n   \n\n   \n\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString)<<endl;\n\n\n    \n    return 0;\n}\n", "class": 0, "version": 38, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar , const string &userString)\n{\n      int count=0;\n      int index=userString.size();\n      for(int i = 0;i < index;i++)\n   {\n      if(userString[i]==userChar)\n      count++;\n   }\nreturn count;\n}\n\n\nint main(){\n   char userChar;\n   string input;\n   cin >> userChar;\n   getline (cin, input);\n   cout << CountCharacters(userChar, input) << endl;\nreturn 0;\n}", "class": 0, "version": 132, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString)\n{ int count=0;\n   for (int i = 0; i <userString.size();i++)\n   {\n      \n      if(userString.at(i)==userChar)\n      {\n         count++;\n      }\n   }\n   return count;\n   \n}\n/* Define your function here */ \n\nint main() {\n   char x;\n   string y;\n   \n   cin>>x>>y;\n   \n   cout<<CountCharacters(x,y)<<endl;\n   \n   /* Type your code here. Your code must call the function.  */\n\n   return 0;\n}\n", "class": 0, "version": 212, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\r\n#include <string>\r\nusing namespace std;\r\n\r\nint CountCharacters(char userChar, const string &userString)\r\n{\r\n    int result = 0;\r\n    for(int i = 0; i < userString.size(); ++i)\r\n    {\r\n        if(userString.at(i) == userChar)\r\n        {\r\n            result +=1;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nint main()\r\n{\r\n    char character;\r\n    string inputString;\r\n    cin >> character;\r\n    getline(cin,inputString);\r\n    cout << CountCharacters(character, inputString) << endl;\r\n    \r\n\r\n    return 0;\r\n}", "class": 0, "version": 111, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString) {\n   int l = userString.length();\n   int flag = 0;\n   for (int i = 0; i < l; i++) {\n      if (userString[i] == userChar) {\n         flag++;\n         }\n      }\n   return flag;\n   }\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char userChar;\n   string s;\n   cin >> userChar >> s;\n   cout << CountCharacters(userChar, s) << endl;\n   return 0;\n}\n", "class": 0, "version": 198, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString){\n   int count = 0;\n   for (int i = 0; i < userString.size(); i++) {\n      if (userString.at(i) == userChar) \n       {\n         count++; \n       }\n   }\n   return count; \n}\n      \n\nint main() {\n   string input;\n   char letter;\n   cin >> letter;\n   getline (cin, input);\n   \n   cout << CountCharacters(letter, input) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 77, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString){\n   int inc=0;\n   for(int i = 0; i<userString.size(); i++){\n      if(userString.at(i) == userChar){\n         inc++;\n      }\n   }\n   return inc;\n}\n\nint main() {\n   char userChar;\n   string userString;\n   cin>>userChar;\n   cin>>userString;\n   cout<<CountCharacters(userChar, userString)<<endl;\n\n   return 0;\n}\n", "class": 0, "version": 86, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters (char userChar, const string &userString)  {\n   \n   unsigned int i;\n   int cnt = 0;\n   \n   for (i = 0; i < userString.size(); ++i)\n      {\n         if (userString.at(i) == userChar)\n            {\n               ++cnt;\n            }\n      }\n      \n   return cnt;\n}\n\nint main() {\n   \n   char u1;\n   string u2;\n   \n   cin >> u1;\n   getline (cin, u2);\n   \n   cout << CountCharacters (u1, u2) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 175, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */\nint CountCharacters(char userChar, const string &userString) {\n   int count = 0;\n   int length = userString.length();\n   for(int i = 0; i < length; ++i) {\n      if(userString.at(i) == userChar) {\n         count++;\n      }\n   }\n   return count;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   string userString;\n   char userChar;\n   \n   cin >> userChar;\n   getline(cin, userString);\n   \n   int x = CountCharacters(userChar, userString);\n   cout << x << endl;\n\n   return 0;\n}\n", "class": 0, "version": 88, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\r\n#include <string>\r\n\r\nusing namespace std;\r\n\r\nint CountCharacters(char userChar, string userString){\r\n   int result = 0;\r\n   for(int i = 0;i<userString.length();i++){\r\n      if(userString[i] == userChar){\r\n         result++;\r\n      }\r\n   }\r\n   return result;\r\n}\r\n\r\nint main(){\r\n   string userString;\r\n   char userChar;\r\n   cin>>userChar>>userString;\r\n   cout<<CountCharacters(userChar,userString)<<endl;\r\n   return 0;\r\n}", "class": 0, "version": 3, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString){\n   int count = 0;\n   int t;\n   int stringSize = userString.size();\n   \n   for(t=0;t<stringSize;t++){\n      if(userChar == userString.at(t)){\n         count = count + 1;\n      }\n   }\n   return count;\n   \n   \n   \n   \n   \n}\n\nint main() {\n   char inputChar;\n   string inputString;\n   \n   cin>>inputChar;\n   getline(cin,inputString);\n   \n   cout<<CountCharacters(inputChar,inputString)<<\"\\n\";\n\n   return 0;\n}\n", "class": 0, "version": 57, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n \nint CountCharacters(char userChar, const string &userString) {\n   int charCount = 0;\n   for (unsigned int i = 0; i< userString.size() ; i++) {\n      if(userString.at(i) == userChar) {\n         charCount= charCount +1;\n      }\n   }\n   return charCount;\n}\nint main() {\n   string userString;\n   char userChar;\n   cin>> userChar;\n   getline(cin,userString);\n   \n   \n   cout<<CountCharacters(userChar, userString)<<endl;\n   \n   \n\n   return 0;\n}", "class": 0, "version": 91, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nunsigned int i;\nint numSum = 0;\nint CalcNumCharacters(string userString, char userChar) {\n   for (i = 0; i < userString.length(); ++i) {\n      if (userString.at(i) == userChar) {\n         numSum = numSum + 1;\n      }\n   }\n   return numSum;\n}\n\nint main() {\n   \n   string userString;\n   char userChar;\n   \n   cin >> userChar;\n   getline(cin, userString);\n   \n   if (numSum != 1) {\n      cout << CalcNumCharacters(userString, userChar) << \" \" << userChar << endl;\n   }\n   else {\n      cout << CalcNumCharacters(userString, userChar) << \" \" << userChar << \"'s\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 35, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) \n{\n   int i;\n   int result = 0;\n   int size = userString.length();\n   \n   for(i = 0; i < size; i++)\n   {\n      if(userString[i] == userChar)\n      {\n         result++;\n      }\n   }\n   return result;\n\n}\n\nint main() \n{\n   char star;\n   cin >> star;\n   \n   string line;\n   getline(cin, line);\n   \n   cout << CountCharacters(star, line) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 56, "model": "Human"}
{"problem": 4, "code": "//collaborated with Alan Tran\n\n#include <iostream>\nusing namespace std;\n\nint CountCharacters (char userChar,const string &userString) {\nint count=0;\n\nfor (int i=0; i < userString.length(); i++) {\n   if (userString.at(i)==userChar)\n   count++;\n}\n   return count;\n}\n\nint main() { \n\nstring userString;\nchar userChar;\ncin >> userChar;\ngetline (cin,userString);\n\ncout<<CountCharacters(userChar,userString) <<endl;\n\n   return 0;\n}\n", "class": 0, "version": 27, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int cnt = 0;\n   int size = userString.size();\n   for (int i = 0; i < size; ++i) {\n      if (userString.at(i) == userChar) {\n         cnt = cnt + 1;\n      }\n   } return cnt;\n}\n\nint main() {\n   char ch;\n   string s;\n   \n   cin >> ch;\n   cin >> s;\n   \n   cout << CountCharacters(ch, s) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 134, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n   unsigned int i;\n   int x;\n   \n   x = 0;\n   \n   for (i = 0; i < userString.size(); ++i) {\n      if (userChar == userString.at(i)) {\n         x++;\n      }\n   }\n   return x;\n}\n\nint main() {\n   string userString;\n   char userChar;\n   \n   cin >> userChar;\n   getline(cin, userString);\n   cin >> userString;\n   \n   cout << CountCharacters(userChar, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 53, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString) {\n   int total = 0;\n   for (unsigned int i = 0; i < userString.size(); i++) {\n      if (userString.at(i) == userChar) {\n         ++total;\n      }\n   }\n   return total;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char userChar;\n   string userString;\n   getline(cin,userString);\n   cin >> userChar;\n   cout << CountCharacters(userChar, userString) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 135, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString)\n{\n   int cnt =0;\n   \n   for(unsigned int i=0 ; i<userString.length(); ++i)\n   {\n      if(userString.at(i) == userChar){ ++ cnt;}\n   }\n   return cnt ;\n}\nint main() {\n   /* Type your code here. Your code must call the function.  */\nstring s ;\nchar c;\ncin >> c ;\ncin >> s ;\n\ncout << CountCharacters(c,s) << endl ;\n   return 0;\n}\n", "class": 0, "version": 225, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString)\n{\n   int length1 = userString.size();\n   int cnt;\n   cnt = 0;\n   \n   for(int i = 0; i < length1; ++i)\n   {\n      if(userString.at(i) == userChar)\n      {\n         ++cnt;\n      }\n      \n   }\n   \n   return cnt;\n   \n}\n\n\nint main() {\n\n  \n   string userValue;\n   \n   getline(cin, userValue);\n   char char1 = userValue.at(0);\n\n   string userValue1 = userValue.substr(2, userValue.size()-1);\n   cout << CountCharacters(char1, userValue1) << endl;\n\n   \n\n   \n   \n   \n   \n   return 0;\n}\n\n\n", "class": 0, "version": 107, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n   int index;\n   int i;\n   index = 0;\n   \n   for (i = 0; i < userString.size(); ++i) {\n      if (userString.at(i) == userChar) {\n         index += 1;\n      }\n   }\n   \n   return index;\n}\n\nint main() {\n   string userString;\n   char userChar;\n   \n   cin >> userChar;\n   getline(cin, userString);\n   \n   cout << CountCharacters(userChar, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 75, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int count = 0;\n   \n   for (unsigned i = 0; i < userString.size(); ++i) {\n      if (userString.at(i) == userChar) {\n         \n      ++count;\n      }\n   }\n   return count;\n}\n      \n\nint main() {\n   char letterToFind;\n   string userString;\n   \n   cin >> letterToFind;\n   getline (cin, userString);\n   \n   cout << CountCharacters(letterToFind, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 43, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int cCount = 0;\n   for (unsigned int i = 0; i < userString.size(); ++i) {\n      if (userString.at(i) == userChar) {\n      cCount = cCount +1;\n   }\n}\nreturn cCount;\n}\n\nint main() {\n   string userString;\n   char userChar;\n   \n   cin >> userChar;\n   getline (cin, userString);\n   \n   cout << CountCharacters(userChar, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 61, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString){\n   int result = 0;\n   int stringLength = userString.length();\n   for(int i = 0;i<stringLength;i++){\n      if(userString[i] == userChar){\n         result++;\n      }\n   }\n   return result;\n}\n\nint main(){\n   string userString;\n   char userChar;\n   cin>>userChar>>userString;\n   cout<<CountCharacters(userChar,userString)<<endl;\n   return 0;\n}\n", "class": 0, "version": 226, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString){\n   int i;\n   int length;\n   int output;\n   \n   output = 0;\n   length = userString.length();\n   \n   for(i=0; i<length; ++i){\n      if(userString.at(i) == userChar){\n         output += 1;\n      }\n      else{\n         output = output;\n      }\n   }\n   return output;\n}\n   \nint main() {\n   char inputC;\n   string inputS;\n   \n   cin >> inputC;\n   getline(cin, inputS);\n   cout << CountCharacters(inputC, inputS)<<endl;\n   \n   return 0;\n}\n", "class": 0, "version": 228, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CalcNumCharacters(string userString, char userChar){\n   int i;\n   int userNum;\n   \n   userNum = 0;\n   \n   for (i = 0; i < userString.size(); ++i){\n      if (userString.at(i) == userChar){\n         ++userNum;\n      }\n   }\n   \n   return userNum;\n}\n\nint main() {\n   char userChar;\n   string userString;\n   int userNum; \n   \n   cin >> userChar;\n   cin >> userString;\n   \n   userNum = CalcNumCharacters(userString, userChar);\n   \n   cout << userNum << \" \" << userChar;\n   \n   if ((userNum == 0) || (userNum > 1)){\n      cout << \"'s\" << endl;\n   }\n   if (userNum == 1){\n      cout << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 171, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString)\n{\n   int count = 0;\n   for(int i = 0; i < userString.length(); i++)\n   {\n      if(userString.at(i) == userChar)\n     {\n      count++;\n     }\n   }\n   return count;\n}\n\n\nint main() {\n   char x;\n   string y;\n\n   cin >> x;\n   getline(cin, y);\n   cout << CountCharacters(x,y) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 18, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */\nint CountCharacters(char userChar, const string &userString){\n   int cnt = 0;\n   for (unsigned int i=0 ; i<userString.size() ; ++i){\n      if (userChar == userString.at(i)){\n         ++cnt;\n      }\n   }\n   return cnt;\n}\n\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   string userDay;\n   char userC;\n   \n   cin >> userC >> userDay;\n   \n   cout << CountCharacters(userC , userDay) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 295, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString) {\n   int count = 0;\n   for (unsigned long int i = 0; i < userString.size(); i++) {\n      if (userString.at(i) == userChar){\n         count++;\n      }\n   }\n   return count;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char userchar;\n   string userstring;\n   \n   cin >> userchar;\n   getline (cin, userstring);\n   cout << CountCharacters(userchar, userstring) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 131, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int size = userString.size();\n   int amount = 0;\n   for (int i = 0; i < size; ++i) {\n      if ( userString.at(i) == userChar ) {\n       ++amount;\n      }\n   }\n   return amount;\n}\n\nint main() {\n   char letter;\n   cin >> letter;\n   string input;\n   getline(cin, input);\n   \n   cout << CountCharacters(letter, input) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 208, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint countCharacters(char userChar, string userString) {\n    int count = 0;\n    \n    for(int i = 0; i < userString.length(); i++) {\n        if(userString[i] == userChar) {\n            count++;\n        }\n    }\n    \n    return count; //return the count\n}\n\n//driver function\n int main(void)\n{\n    char userChar; //declaring userChar to store character\n    cin >> userChar; //input userChar\n    string userString; //declaring string userString \n    getline (cin, userString); //input userString\n     \n    //calling countCharacters and storing result in res \n    int res = countCharacters(userChar, userString);\n    cout << countCharacters << endl; //print result\n\n\n   return 0;\n}\n", "class": 0, "version": 15, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString);\n\nint main() {\n   char inputChar;\n   string inputString;\n   cin >> inputChar;\n   cin >> inputString;\n   \n   cout << CountCharacters(inputChar, inputString) << endl;\n   \n\n   return 0;\n}\n\n\n\nint CountCharacters(char userChar, const string &userString) {\n   int count = 0;\n   \n   for ( int i = 0 ; i < userString.size() ; i++){\n      if(userChar == userString.at(i)){\n         count++;\n      }\n   }\n   \n   return count;\n}", "class": 0, "version": 136, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */\nint CountCharacters(char userChar, const string &userString)\n{\n   int numTimes = 0;\n   for (int i = 0; i < userString.size(); i++)\n   {\n      if (userChar == userString.at(i))\n      {\n         numTimes++;\n      }\n   }\n   return numTimes;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char theCharacter;\n   string theString;\n   \n   cin >> theCharacter;\n   getline(cin, theString);\n   \n   cout << CountCharacters(theCharacter, theString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 212, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CalcNumCharacters(string userString, char userChar) {\n   int cnt;\n   int i;\n   \n   cnt = 0;\n   \n   for (i = 0; i < userString.size(); ++i) {\n      if (userString.at(i) == userChar) {\n         cnt = cnt + 1;}\n   }\n   return cnt;}\n   \n\nint main() {\n   char userChar;\n   string userString;\n   int cnt;\n   \n   cin >> userChar;\n   \n   getline (cin, userString);\n   \n   cnt = CalcNumCharacters(userString, userChar);\n   \n   if (cnt == 1) {\n      cout << cnt << \" \" << userChar << endl;}\n   else {\n      cout << cnt << \" \" << userChar << \" 's\" << endl;}\n   \n\n   return 0;\n}\n", "class": 0, "version": 34, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, string userString){\n   int count =0;\n   for (int i=0; i<userString.length(); i++){\n      if (userString.at(i) == userChar){\n         count++;\n      }\n   }\n   return count;\n}\n\nint main() {\n   char char1;\n   string string1;\n   \n   cin >> char1;\n   getline(cin, string1);\n   \n   cout << CountCharacters(char1, string1) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 5, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CalcNumCharacters(string userString, char userChar) {\n   int numChar = 0;\n   for (int i = 0; i < userString.size(); ++i) {\n      if (userString.at(i) == userChar) {\n         numChar = numChar + 1;\n      }\n   }\n   return numChar;\n}\n   \nint main() {\n   string userString;\n   char userChar;\n   \n   cin >> userChar;\n   getline(cin, userString);\n   \n   cout << CalcNumCharacters(userString, userChar) << \" \" << userChar << endl;\n   return 0;\n}\n", "class": 0, "version": 37, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int count = 0 ;\n   int stringSize = userString.size() ;\n   \n   for ( int i = 0 ; i < stringSize - 1 ; ++i ) {\n      if ( userString.at(i) == userChar ) {\n         count = count +1 ;\n      }\n   }\n   return count ;\n}\n         \n\nint main() {\n   char inputChar ;\n   string inputString ;\n   \n   cin >> inputChar ;\n   getline(cin,inputString);\n   \n   cout << CountCharacters( inputChar , inputString ) ;\n   cout << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 241, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n   int CountCharacters(char userChar, const string inputstr){\n   int i = 0;\n   int j = 0;\n   \n   for (i = 0; i < inputstr.size(); i++){\n      if (inputstr[i] ==  userChar){\n         ++j;        \n      }\n   }\n   return j;\n}\n\nint main(){\n   string str;\n   \n   char userChar[1];\n   \n   cin >> userChar;\n   cin.ignore();\n   \n   getline(cin, str);\n   \n   cout << CountCharacters(userChar[0],str) << endl;\n   \n   return 0;\n}\n\n", "class": 0, "version": 81, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString)\n{\n   string s(1,userChar);\n   int count =0;\n   for (int i =0; i< userString.length(); i++)\n   {\n      if (userString.substr(i,1) == s)\n      {\n         count+=1;\n      }\n   }\n   return count;\n}\n\nint main() {\n   char userChar;\n   cin>> userChar;\n   string userString = \"\";\n   cin >> userString;\n   cout << CountCharacters(userChar, userString)<< endl;\n\n   return 0;\n}\n", "class": 0, "version": 67, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString)   {\n   int count = 0;\n   for (int i = 0; i < userString.size(); i++)  {\n      char d = userString.at(i);\n      if (d == userChar)  {\n         ++count;\n      }\n   }\n   return count;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char c;\n   string userString;\n   cin >> c;\n   getline(cin, userString);\n   cout << CountCharacters(c , userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 229, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   \nint count;\ncount = 0;\nint i;\nfor (i = 0; i < userString.size(); ++i) {\n   if (userChar == userString.at(i)) {\n      count = count + 1; }\n}\nreturn count;\n}\n\n\nint main() {\n   char userChar;\n   cin >> userChar;\n   string userString;\n   getline (cin, userString);\n   \n   cout << CountCharacters(userChar, userString) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 23, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n   unsigned n;\n   int index = 0;\n   int amount = 0;\n   for (n = 0; n < userString.size(); ++n) {\n       if (userString.at(n) == userChar) {\n          amount = amount + 1;\n       }\n   }\n   return amount;\n}\n\nint main() {\n   char userChar;\n   string userString;\n   cin >> userChar;\n   getline(cin, userString);\n   cout << CountCharacters(userChar,userString) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 12, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n   \n   int length;\n   int i;\n   int counter;\n   \n   length = userString.size();\n   counter = 0;\n   \n   //Based my loop from lab 6.17\n   for (i=0; i<length; ++i) {\n      if (userString.at(i)== userChar) {\n      counter = counter +1;\n      }\n   }\n   return counter;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char inputChar;\n   string origString;\n   \n   cin >> inputChar;\n   getline (cin, origString);\n\n   cout << CountCharacters(inputChar, origString) << endl;\n   return 0;\n}\n", "class": 0, "version": 55, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */\nint CountCharacters(char userChar, string userString){\n   int result = 0;\n   for(int i = 0; i < userString.length(); i++){\n      if(userString[i] == userChar){\n         result++;\n      }\n   }\n   return result;\n}\n\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\nstring userString;\nchar userChar;\ncin >> userChar;\ngetline( cin, userString);\ncout << CountCharacters(userChar, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 151, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int countChar;\n   int i;\n   int size;\n   \n   size = userString.size();\n   \n   countChar = 0;\n   \n   for (i=0; i < size ; ++i) {\n      if (userString.at(i) == userChar) {\n         countChar = countChar + 1;\n      }\n      \n}\n\n return countChar;\n \n}\n\nint main() {\n   char inputChar;\n   string inputString;\n   \n   cin >> inputChar;\n   getline(cin,inputString);\n   \n   cout << CountCharacters(inputChar, inputString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 27, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString) {\n   int counter = 0;\n   if (userString.find(userChar) != string::npos) {\n      for (int i = 0; i < userString.length()-1; i++) {\n         if (userString.at(i) == userChar) {\n            counter++;\n         }\n      }\n   }\n   else {\n      return 0;\n   }\n   return counter;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   string phrase;\n   char letterToCheck;\n   \n   cin >> letterToCheck;\n   getline(cin, phrase);\n   \n   cout <<  CountCharacters(letterToCheck, phrase) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 108, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString)\n{\n   int charCount = 0;\n   for (unsigned int i = 0; i < userString.size(); ++i)\n   {\n      if (userChar == userString.at(i))\n      {\n         charCount = charCount + 1;\n      }\n   }\n   return charCount;\n}\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char input;\n   cin >> input; \n   string sentence;\n   getline (cin, sentence);\n   cout << CountCharacters(input, sentence) << endl;\n   return 0;\n}\n", "class": 0, "version": 148, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int Cnt = 0;\n   for (unsigned int i = 0; i < userString.size(); ++i) {\n      if (userString.at(i) == userChar) {\n         Cnt = Cnt + 1;\n      }\n   }\n   return Cnt;\n}\n         /* Define your function here */ \n\nint main() {\n   string inputString;\n   char inputChar;\n   \n   cin >> inputChar;\n   getline(cin, inputString);\n   \n   cout << CountCharacters(inputChar, inputString) << endl;/* Type your code here. Your code must call the function.  */\n\n   return 0;\n}\n", "class": 0, "version": 23, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString){\n   int length = userString.size();\n   int count = 0;\n   for (int i =0; i < length; i++){\n      char letter = userString.at(i);\n      if(letter == userChar){\n         count ++;\n         }\n      }\n   return count;\n   }\n\nint main() {\n   char letter;\n   string line = \"\";\n   cin >> letter;\n   cin >> line;\n   cout << CountCharacters(letter, line) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 71, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar , char* userString)\n{\nint count=0;\n  \nfor(int i=0;userString[i]!='\\0';i++)\n{\n// if the character matches, then increment the count = count+1\nif(userString[i]==userChar)\ncount++;\n}\n  \n//returning our answer\nreturn count;\n}\n\n\nint main(void) {\n\nchar userChar;\nscanf(\"%c\",&userChar);\n\nchar userString[10000];\nfgets(userString, sizeof(userString), stdin);\n\nint ans = CountCharacters(userChar,userString);\ncout << ans << endl;\n\n\nreturn 0;\n}\n", "class": 0, "version": 278, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n int CountCharacters(char userChar, const string &userString){\n    int cnt = 0;\n    for ( int i = 0; i < userString.size(); ++i){\n       if (userString.at(i) == userChar){\n          ++cnt;\n       }\n    }\n    return cnt;\n }\n\nint main() {\n   char inputNum;\n   string s;\n   cin >> inputNum;\n   getline( cin, s);\n   cout << CountCharacters(inputNum, s) << endl; \n\n   return 0;\n}\n", "class": 0, "version": 252, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CalcNumCharacters(string userString, char userChar) {\n   int counter = 0;\n   int i;\n   for (i = 0; i < userString.size(); ++i) {\n      if (userString.at(i) == userChar) {\n         counter += 1;\n      }\n      \n      \n   }\n   \n   \n   return counter;\n   \n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   string userString;\n   char userChar;\n   int wow;\n   \n   cin >> userChar;\n   getline(cin, userString);\n   wow = CalcNumCharacters(userString,userChar);\n   \n   cout << wow << \" \" << userChar << endl; \n   \n   if (wow != 1) {\n      cout << \"'s\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 124, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CalcNumCharacters(string userString, char userChar){\n   int num = 0;\n   for(int i = 0; i < userString.length(); i++){\n      if(userString.at(i) == userChar){\n         num++;   \n      }\n   }\n   return num;   \n}\n\nint main() {\n   char myChar;\n   string myString;\n   int num;\n   \n   cin >> myChar;\n   getline(cin, myString);\n   \n   num = CalcNumCharacters(myString, myChar);\n   cout << num << \" \" << myChar;\n   if(num != 1){\n      cout << \"'s\";\n   }\n   cout << endl;\n\n   return 0;\n}\n", "class": 0, "version": 53, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char c, const string &s)\n{\n   int cnt = 0;\n   \n for ( unsigned int i =0; i < s.size(); ++i)\n {\n    if ( s.at(i) == c)\n    {\n       ++cnt;\n    }\n }\n \n return cnt;\n}\n    \n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   string s;\n   char c;\n   \n   cin >> c >> s;\n   \n   cout << CountCharacters(c, s) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 1, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters (char userChar, string userString) {\n   int charCount = 0;\n   int i;\n   int length = userString.length();\n   \n   for (i = 0; i < length; ++i) {\n      if (userString.at(i) == userChar) {\n         charCount++;\n      }\n   }\n   \n   return charCount;\n}\n\nint main() {\n   char userChar;\n   string userString;\n   \n   cin >> userChar;\n   getline(cin, userString);\n   \n   cout << CountCharacters(userChar, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 35, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CalcNumCharacters(string userString, char userChar) {\n   int numChar;\n   numChar = 0;\n   int i;\n   cin >> userChar >> userString;\n   for (i=0; i<userString.size(); i++) {\n      if (userString.at(i) == userChar) {\n         numChar +=1;\n      }\n   }\n   return numChar;\n}\n\nint main() {\n   string s;\n   char c;\n   int numChar;\n   \n   cin >> c >> s;\n   numChar = CalcNumCharacters(s,c);\n   \n   if (numChar == 1) {\n      cout << numChar << \" \" << c << endl;\n   }\n   else {\n      cout << numChar << \" \" << c << \"'s\" << endl;\n   }\n   \n\n   return 0;\n}\n", "class": 0, "version": 197, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, string userString);\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   string phrase;\n   char userChar;\n   int output;\n   string userString;\n   getline(cin, phrase);\n   userChar = phrase.at(0);\n   userString = phrase.substr(phrase.find(' ') + 1, phrase.size() - 1);\n   output = CountCharacters(userChar, userString);\n   cout << output << endl;\n   return 0;\n}\n\nint CountCharacters(char userChar, string userString)\n{\n   int count = 0;\n   for(int i = 0; i < userString.size(); i++)\n   {\n      if(userString.at(i) == userChar)\n      {\n         count += 1;\n      }\n   }\n   return count;\n}", "class": 0, "version": 66, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\r\n#include <string>\r\n\r\nusing namespace std;\r\n\r\nint CountCharacters(char userChar, string userString){\r\n   int result = 0;\r\n   for(int i = 0;i<userString.length();i++){\r\n      if(userString[i] == userChar){\r\n         result++;\r\n      }\r\n   }\r\n   return result;\r\n}\r\n\r\nint main(){\r\n   string userString;\r\n   char userChar;\r\n   cin>>userChar>>userString;\r\n   cout<<CountCharacters(userChar,userString)<<endl;\r\n   return 0;\r\n}", "class": 0, "version": 252, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n   int CountCharacters(char userChar, const string &userString)\n   {\n      int cnt = 0;\n      \n      for (unsigned int i = 0; i <= userString.size() - 1; ++i)\n      {\n         if(userChar == userString.at(i))\n         {\n            cnt ++;\n         }\n      }\n      return cnt;\n   }\n\nint main() {\n\n   string userString;\n   getline(cin, userString);\n   int userChar;\n   cin >> userChar;\n   \n   CountCharacters(userChar, userString);\n   cout << CountCharacters << endl;\n   //cout << \"1\";\n\n   return 0;\n}\n", "class": 0, "version": 254, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString) {\n   int count = 0;\n   for (unsigned int i = 0; i < userString.size(); ++i) {\n      if (userString.at(i) == userChar) {\n         ++count; \n      }\n   }\n   return count; \n}\nint main() {\n   /* Type your code here. Your code must call the function.  */\n char userChar;\n string userString;\n \n cin >> userChar;\n getline(cin, userString);\n \n cout << CountCharacters(userChar, userString) << endl;\n \n   return 0;\n}\n", "class": 0, "version": 67, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString)\n{\n   int cnt=0;\n   \n   for (unsigned int i = 0; i < userString.size(); ++i)\n   {\n      if (userChar == userString.at(i))\n      {\n         ++ cnt;\n      }\n   }\n   return cnt;\n}\n\nint main() {\n   char userChar;\n   string userString;\n   \n   cin >> userChar;\n   \n   getline (cin, userString);\n   \n   cout << CountCharacters(userChar, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 53, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n int CountCharacters(char userChar, const string &userString){\n    int count=0;\n    for (unsigned int i = 0; i < userString.size(); ++i){\n       if (userString.at(i) == userChar){\n         ++count;\n       }\n    }\n    return count;\n }\n\nint main() {\n   string userString;\n   char userChar;\n   cin >> userChar;\n   \n   getline(cin, userString);\n   \n   cout << CountCharacters(userChar, userString) << endl; \n   \n   return 0;\n}\n", "class": 0, "version": 79, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int count = 0;\n   for (int i = 0; i < userString.length(); ++i) {\n      if(userString.at(i) == userChar) {\n         ++count;\n      }\n   }\n   return count;\n}\n         \nint main() {\n   string userString;\n   char userChar;\n   cin >> userChar;\n   getline(cin, userString);\n   cout << CountCharacters(userChar, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 159, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString)\n{\n    int a = 0;\n    for(unsigned int i = 0; i < userString.length(); i++)\n    {\n        if(userString[i] == userChar)\n        {\n            a += 1;\n        }\n    }\n    return a;\n} \n\nint main() {\n  char userChar;    \n    string userString;\n    \n    cin >> userChar;\n    getline(cin, userString);\n    \n    \n    cout << CountCharacters(userChar, userString) << endl;\n    \n   return 0;\n}\n", "class": 0, "version": 41, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters ( char userChar, const string &userString )\n{\n   int count = 0;\n   \n   for ( long unsigned int i = 0; i < userString.size(); i = i + 1 )\n   {\n      if ( userChar == userString.at(i) )\n      {\n         count = count + 1;\n      }\n   }\n   \n   return count;\n}\n\nint main() {\n   char c;\n   string userString;\n   \n   cin >> c;\n   getline( cin, userString );\n   \n   cout << CountCharacters ( c, userString ) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 3, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters (char userChar, const string &userString)\n{\n   int count = 0;\n   int size = userString.size();\n   for (int i = 0; i < size; ++i)\n   {\n      if (userString.at(i) == userChar)\n      {\n         count = count + 1;\n      }\n   }\n   return count;\n}\n\nint main() {\n   char letter;\n   string userWord;\n   \n   cin >> letter;\n   cin >> userWord;\n\n   cout << CountCharacters (letter, userWord) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 242, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString);\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n     char userChar;\n    string userString;\n    cin >> userChar;\n    getline(cin, userString);\n    cout << CountCharacters(userChar, userString) << endl;\n\n   return 0;\n}\n\nint CountCharacters(char userChar, const string &userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); ++i) {\n        if (userChar == userString[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n", "class": 0, "version": 98, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString){\n   int count = 0;\n   for (int i = 0; i < userString.length(); i++){\n      if(userString.at(i) == userChar){\n         count += 1;  \n      }\n   }\n   return count;\n}\n\nint main() {\n   char x;\n   string myLine;\n   cin >> x;\n   getline(cin, myLine);\n   \n   cout << CountCharacters(x, myLine) << endl;\n   return 0;\n}\n", "class": 0, "version": 31, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString){\n   int numAppear;\n   int i;\n   int lenght;\n   \n   lenght = userString.size();\n   \n   numAppear = 0;\n   \n   for (i = 0; i < (lenght - 1); ++i){\n      if (userString.at(i) == userChar){\n      numAppear = numAppear + 1;   \n      }\n      else if (userString.at(i) != userChar){\n         numAppear = numAppear;\n      }\n   } \n   return numAppear;\n   }\n\nint main() {\n   char userChar;\n   string userString;\n   \n   cin >> userChar;\n   getline(cin, userString);\n   \n   cout << CountCharacters(userChar, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 20, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std; \n\nint CountCharacters ( char userChar, string userString) {\n\nint character = 0;\nfor ( int i = 0; i < userString.length(); i++) \n{\n   if (userString.at(i) == userChar) {\n   character++;\n   }\n}\n   return character;\n} \nint main()\n{\n\nstring userString;\nchar userChar;\ncin >> userChar; \ngetline(cin,userString); \n\ncout << CountCharacters(userChar, userString) << endl;\n\n   /* Type your code here. Your code must call the function.  */\n\n   return 0;\n}\n\n", "class": 0, "version": 82, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString) {\n   int charCount = 0;\n   for (unsigned int i = 0; i < userString.size(); ++i) {\n      if (userString.at(i) == userChar) {\n         charCount = charCount + 1;\n      }\n   }\n   return charCount;\n}\nint main() {\n   /* Type your code here. Your code must call the function.  */\nstring userString;\nchar userChar;\n\ncin >> userChar;\ngetline(cin, userString);\ncout << CountCharacters(userChar, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 246, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n   int length;\n   int i;\n   int numCount = 0; \n   \n   length = userString.size();\n   \n   for (i = 0; i < length; ++i) {\n      if (userString.at(i) == userChar) {\n         numCount = numCount + 1;\n      }\n      else {\n         numCount = numCount;\n      }\n   }\n   \n   return numCount;\n}\n\nint main() {\n   char charInput;\n   string strInput;\n   \n   cin >> charInput;\n   getline(cin, strInput);\n  \n   cout << CountCharacters(charInput, strInput) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 32, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int charCount = 0;\n   unsigned int i;\n   \n   for (i = 0; i < userString.size(); ++i) {\n      if (userString.at(i) == userChar) {\n         ++charCount;\n      }\n   }\n   \n   return charCount;\n}\n\nint main() {\n   char userChar;\n   string userString;\n   \n   cin >> userChar;\n   getline(cin, userString);\n   \n   cout << CountCharacters(userChar, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 211, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString)   {\n   int count = 0;\n   \n   //userString = \"abc\" -> 3 \n      for (unsigned int i = 0 ; userString.size() > i ; ++i)   {\n         if(userString.at(i) == userChar) {\n            count++;\n       }\n    }\n    return count;\n   } \n\nint main() {\n   char userChar;\n   string userString;\n   \n   cin >> userChar;\n   cin >> userString;\n   \n   cout << CountCharacters(userChar, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 226, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString)\n{\n   int count = 0;\n   \n   for (unsigned int i = 0; i < userString.length(); ++i)\n   {\n      if (userString[i] == userChar)\n      {\n         count++;\n      }\n   }\n   return count;\n}\n\nint main() {\n   \n   string userString;\n   char userChar;\n   \n   cin >> userChar;\n   getline (cin, userString);\n   \n   cout << CountCharacters(userChar, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 73, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int count = 0;\n   for (unsigned int i = 0; i< userString.size(); i++) {\n      if (userString.at(i)==userChar) {\n         count +=1;\n      }\n   }\n   return count;\n         \n}\n\nint main() {\n   char letter;\n   string word;\n   cin >> letter >> word;\n   cout << CountCharacters(letter, word) << endl; \n\n   return 0;\n}\n", "class": 0, "version": 241, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString) {\n   int number = 0; // since the code is asking for the number of times I am going to give the value of number=0; like the similar lab//\n   // I am going to use the for loop because we are only entering the loop if the char is present//\n   for (int i =0; i<userString.length(); ++i) {\n      if (userString.at(i)== userChar) {// use .at because we are starting at a specific index//\n         number++; \n      }\n   }\n      return number; // we are outputting the number of time therefore we return to this number//\n   }\nint main() {\n   /* Type your code here. Your code must call the function.  */\nstring userInput; \nchar charChar;\ncin >> charChar; \ngetline(cin, userInput); // using getline because we are taking the whole string not just one part// \ncout << CountCharacters(charChar, userInput) << endl; // calling both of the fucntions and outputing//\n   return 0;\n}\n", "class": 0, "version": 147, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n   int userStringSize;\n   int countVal;\n   int i;\n   \n   userStringSize = userString.size();\n   countVal = 0;\n   \n   for (i = 0; i < userStringSize; ++i) {\n      if (userString.at(i) == userChar) {\n         countVal += 1;\n      }\n   }\n   return countVal;\n}\n\nint main() {\n   \n   char userChar;\n   string userString;\n   \n   cin >> userChar;\n   cin >> userString;\n   \n   cout << CountCharacters(userChar, userString) << endl;\n   \n   \n   \n\n   return 0;\n}\n", "class": 0, "version": 4, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString){\n   int count=0;\n   int i;\n   int j=userString.size();\n   for(i=0; i<j; ++i){\n      if(userString.at(i)==userChar){\n         ++count;\n      }\n   }\n   return count;\n}\n   \n\nint main() {\n   char userChar;\n   string userString;\n   cin>>userChar;\n   getline (cin, userString);\n   cout<<CountCharacters(userChar, userString)<<endl;;\n\n   return 0;\n}\n", "class": 0, "version": 37, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \n   int CountCharacters(char userChar, const string &userString){\n\t   int count = 0;\n\t\n\tfor (int i = 0; i < userString.size(); ++i) {\n\t\tif ( userString.at(i) == userChar ) {\n\t\t\t++count;\n\t\t}\n\t}\n\treturn count;\n}\n\nint main() {\n\t\n\tchar inputChar;\n\tstring inputString;\n\t\n   \tcin >> inputChar;\n\t\n\t   getline (cin, inputString);\n\t\n\tcout << CountCharacters ( inputChar, inputString ) << endl;\n/* Type your code here. Your code must call the function.  */\n\n   return 0;\n}\n", "class": 0, "version": 81, "model": "Human"}
{"problem": 4, "code": "#include<iostream>\nusing namespace std;\nint CountCharacters(char userChar, const string &userString){\n   int k = 0;\n   int x = 0;\n   int p;\n   p = userString.size();\n   \n   for (x = 0; x < p; x++) { \n       if (userString[x] ==  userChar){\n           ++k;        \n           }\n           }\n           \n   return k;}\nint main(){\n   string str;\n   char userChar[1];\n  cin>>userChar;\n   cin.ignore();\n   getline(cin, str);\n   cout<<CountCharacters(userChar[0],str) << endl;\n   return 0;\n}\n", "class": 0, "version": 2, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString)\n{\n   int counter = 0;\n   for(unsigned int i = 0; i < userString.size(); ++i)\n   {\n      if(userString.at(i) == userChar)\n      {\n         ++counter;\n      }\n      \n   }\n   return counter;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char c;\n   cin >> c;\n   string user;\n   cin >> user;\n   cout << CountCharacters(c, user) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 208, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, string userString) {\n   int numUserChar;\n   int i;\n   numUserChar = 0;\n   \n   for (i = 0; i < userString.size(); ++i) {\n      if (userString.at(i) == userChar) {\n         ++numUserChar;\n      }\n   }\n   return numUserChar;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char userChar;\n   string userString;\n   int numUserChar;\n   \n   cin >> userChar;\n   getline(cin, userString);\n   numUserChar = CountCharacters(userChar, userString);\n   \n   cout << numUserChar << endl;\n   return 0;\n}\n", "class": 0, "version": 73, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CalcNumCharacters(string userString, char userChar) {\n   int i;\n   int numChar = 0;\n   \n   for (i = 0; i < userString.size(); ++i) {\n      if (userString.at(i) == userChar) {\n         numChar += 1;\n      }\n   }\n   return numChar;\n}\n    \n\nint main() {\n   string userString;\n   char userChar;\n\n   cin >> userChar;\n   getline(cin, userString);\n\n   if (CalcNumCharacters(userString, userChar) == 1) {\n      cout << CalcNumCharacters(userString, userChar) << \" \" << userChar << endl;\n   }\n   else {\n      cout << CalcNumCharacters(userString, userChar) << \" \" << userChar << \"'s\" << endl;\n   }\n\n\n   return 0;\n}\n", "class": 0, "version": 40, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   unsigned int i = 0;\n   int count = 0;\n   \n   for (i = 0; i <= userString.size()-1; ++i) {\n      if (userString.at(i) == userChar) {\n         ++count;\n      }\n   }\n   return count;\n}\n   \n\nint main() {\n   string userInput;\n   char userCharacter;\n   \n   cin >> userCharacter;\n   getline(cin, userInput);\n   \n   cout << CountCharacters(userCharacter, userInput) << endl;\n   \n   \n\n   return 0;\n}\n", "class": 0, "version": 152, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString)   {\n   \n   int count = 0; \n   unsigned int i; \n   \n   for( i = 0; i < userString.size(); i++)   {\n      if( userString.at(i) == userChar )  {\n         count++; \n      }\n   }\n   \n   return count;\n}\n/* Define your function here */ \n\nint main() {\n\n   char c; \n   cin >> c; \n   string input; \n   getline(cin, input);\n   \n   cout << CountCharacters(c, input) << endl;\n   \n   /* Type your code here. Your code must call the function.  */\n\n   return 0;\n}\n", "class": 0, "version": 235, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   \n   int count = 0;\n   \n   for (unsigned int i = 0; i < userString.size(); ++i) {\n      if (userString.at(i) == userChar) {\n         ++count;\n      }\n   }\n   return count;\n}\n   \nint main() {\n   \n   char letter;\n   string s;\n   \n   cin >> letter;\n   getline(cin, s);\n   \n   cout << CountCharacters(letter, s) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 232, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int cnt = 0;   \n   for (unsigned int i = 0; i < userString.size(); ++i) {\n      if (userString.at(i) == userChar) {\n         ++cnt;\n      }\n   }\nreturn cnt;\n}\n\nint main() {\n   char c;\n   string s;\n   cin >> c;\n   getline(cin, s);\n   cout << CountCharacters(c,s) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 147, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n   int Counter;\n   Counter = 0;\n   for (int i = 0; i < userString.size(); ++i) {\n      if (userString.at(i) == userChar) {\n         Counter = Counter + 1;\n      }\n   }\n   return Counter;\n}\n\nint main() {\n   char User;\n   string Input;\n   cin >> User;\n   getline(cin, Input);\n   \n   cout << CountCharacters(User, Input) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 16, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int val = 0;\n   for (unsigned int i = 0; i < userString.size(); ++i) {\n      if (userString.at(i) == userChar) {\n         val = val + 1;\n      }\n   }\n   return val;\n}\n   \n\nint main() {\n   char userChar;\n   string userString;\n   cin >> userChar;\n   getline (cin, userString);\n   int val = CountCharacters(userChar, userString);\n   \n   cout << val << endl;\n   \n   \n\n   return 0;\n}\n", "class": 0, "version": 94, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   \n   int count = 0; \n   \n   for (int i = 0; i < userString.size(); i++) {\n      if (userString.at(i) == userChar) {\n         count++;\n      }\n   }\n   \n   return count; \n   \n}\n\nint main() {\n   \n   string userString;\n   char userChar;\n   \n   cin >> userChar;\n   getline(cin, userString);\n   \n   cout << CountCharacters(userChar, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 44, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\nint CountCharacters(char userChar, string userString){\n   int count=0;\n   int i;\n   for (i = 0; i < userString.size(); ++i) {\n      if (userString.at(i)== userChar )  {\n         count =count+ 1;\n      }\n   }\n   return count;\n}\n/* Define your function here */ \n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char l;\n   string str;\n   cin >> l;\n   cin >> str;\n   cout << CountCharacters(l,str) << endl;\n   return 0;\n}\n", "class": 0, "version": 51, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n    int numChars = 0;\n   \n   for (unsigned int i = 0; i < userString.size(); ++i) {\n      \n    if (userString.at(i) == userChar) {\n       numChars += 1;\n    }\n   \n   }\n   return numChars;\n}\n\nint main() {\n  char userChar;\n  string userString;\n  \n  cin >> userChar;\n  getline(cin, userString);\n  \n  CountCharacters(userChar, userString);\n  \n  cout << CountCharacters(userChar, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 248, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\n#include <cctype>\nusing namespace std;\nint CalcNumCharacters (string userString, char userChar){\n   int numOfChar = 0;\n   unsigned int i;\n   \n   for (i = 0;i < userString.size(); ++i){\n      if (userString.at(i) == userChar){\n         numOfChar = numOfChar + 1;\n      }\n   }\n   \n   return numOfChar;\n}\nint main() {\n   string userInput;\n   char charUser;\n   \n   cin >> charUser >> userInput;\n   \n   cout << CalcNumCharacters(userInput, charUser) << \" \" << charUser << endl;\n\n   return 0;\n}\n", "class": 0, "version": 42, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString){\n   int numChar = 0;\n   \n   for(unsigned int i = 0; i < userString.length(); i++){\n      if(userChar == userString.at(i)){\n        numChar++;  \n      }\n   }\n   return numChar;\n}\n\nint main() {\n   char character;\n   string stringParameter;\n   \n   cin >> character;\n   cin >> stringParameter;\n   \n   cout << CountCharacters(character, stringParameter) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 255, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString) {\n   int count = 0;\n   int i = 0;\n   \n   for( i = 0; i < userString.size();i++) {\n      if (userString[i] == userChar) {\n         count++;\n      }\n   }\n   return count;\n}\n   \n   \n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   string str;\n   char myChar;\n   \n   cin >> myChar;\n   getline (cin, str);\n   \n   cout << CountCharacters(myChar, str) << endl;\n   \n\n   \n   \n\n   return 0;\n}\n", "class": 0, "version": 157, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CalcNumCharacters(string userString, char userChar)   {\n   int letter = 0;\n   unsigned int i;\n   \n   for(i = 0; i < userString.size(); ++i)   {\n      if(userString.at(i) == userChar)   {\n         letter += 1;\n      }\n   }\n   return letter;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   string userString;\n   char charUser;\n   \n   cin >> charUser;\n   cin >> userString;\n   \n   cout << CalcNumCharacters(userString, charUser) << \" \" << charUser;\n   if(CalcNumCharacters(userString, charUser) == 1)   {\n      cout << endl;\n   }\n   else   {\n      cout << \"'s\" << endl;\n   }\n   \n\n   return 0;\n}\n", "class": 0, "version": 96, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString)\n{\nint count=0;\n  \nfor(int i=0;userString[i]!='\\0';i++)\n{\nif(userString[i]==userChar)\ncount++;\n}\n  \n\nreturn count;\n}\n\nint main(void) {\n   char userChar;\nscanf(\"%c\",&userChar);\n\nchar userString[10000];\nfgets(userString, sizeof(userString), stdin);\n\nint ans = CountCharacters(userChar,userString);\nprintf(\"%d\",ans);\n\n\n\n   return 0;\n}\n", "class": 0, "version": 296, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CalcNumCharacters ( string s, char c)\n{\n   int cnt = 0;\n   \n   for ( unsigned int i = 0; i < s.size(); ++i)\n   {\n      if ( s.at(i) == c)\n      {\n         ++cnt;\n      }\n   }\n   \n   return cnt;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   string userInput;\n   int count;\n   char chosenC;\n   \n   cin >> chosenC;\n   getline ( cin, userInput);\n   \n   count = CalcNumCharacters( userInput, chosenC);\n   \n   cout << count << ' ' << chosenC;\n   \n   if (count != 1) {\n      cout << \"'s\" ;\n   }\n   cout << endl;\n   \n   \n\n   return 0;\n}\n", "class": 0, "version": 1, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters (char userChar, const string &userString) {\n   int userCharacter = 0;\n   for (unsigned int x=0; x<userString.size()-1; ++x) {\n      if (userString.at(x) == userChar) {\n         ++userCharacter;\n      }\n   }\n   return userCharacter;\n}\n\nint main() {\n   string countString;\n   char userChar;\n   cin >> userChar;\n   getline (cin, countString); \n   cout << CountCharacters(userChar,countString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 83, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int charCount = 0;\n   int i;\n   \n   for (i = 0; i <= userString.size() - 1; ++i) {\n   \n   if ( userString.at(i) == userChar) {\n      charCount = charCount + 1;\n   }\n   else {\n      charCount = charCount + 0;\n   }\n   }\n      return charCount;\n}\n\nint main() {\n   char myChar;\n   string myS;\n   \n   cin >> myChar;\n   getline(cin, myS);\n   \n   cout << CountCharacters(myChar, myS) << endl;\n   \n   \n\n   return 0;\n}\n", "class": 0, "version": 223, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int count = 0;\n   string temp = userString;\n   for (unsigned int i = 0; i < temp.size(); i++) {\n      if (temp.at(i) == userChar) {\n         count++;\n      }\n   }\n   return count;\n}\nint main() {\n   char char1;\n   cin >> char1;\n   string input;\n   getline(cin, input);\n   \n   cout << CountCharacters(char1, input) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 106, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) { \n   int count = 0;\n   for (int i = 0; i < userString.length(); i++) {\n      if( userString[i] == userChar) { \n         count++;\n      }\n   }\n   return count;\n}\n\nint main() {\n   string userString;\n   char userChar;\n   cin >> userString;\n   cin >> userChar;\n   cout << CountCharacters(userChar, userString) << endl;\n   return 0;\n}\n", "class": 0, "version": 52, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar,const string &userString){\n    int num=0;\n    for(int i=0;i<userString.length();i++)\n    {\n        if(userString.at(i)==userChar)\n        {\n            num = num + 1 ;\n        }\n    }\n    \n    return num;\n}\n\nint main() {\n    string string1;\n    char char1;\n    cin >> char1;\n    getline ( cin, string1);\n    \n    cout<<CountCharacters(char1,string1)<<endl;\n\n   return 0;\n}\n", "class": 0, "version": 58, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CalcNumCharacters(string userString, char userChar){\n   int i;\n   int num;\n   num = 0;\n   for (i=0; i < userString.size(); ++i){\n      if(userString.at(i) == userChar){\n         ++num;\n      }\n   }\n   return num;\n}\n      \nint main() {\n   char myChar;\n   string myString;\n   cin >> myChar;\n   cin >> myString;\n   if ((CalcNumCharacters(myString, myChar) != 1)){\n      cout << CalcNumCharacters(myString, myChar) << \" \" << myChar << \"'s\" << endl;\n   }else\n      cout << CalcNumCharacters(myString, myChar) << \" \" << myChar << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 33, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\nint CountCharacters (char userChar, const string &userString) {\nunsigned int i;\nint count = 0;\n   for (i = 0; i < userString.size(); ++i) { \n      if (userString.at(i) == userChar) {\n         count += 1;\n      }\n   }\nreturn count;\n}\n\n\nint main() {\nchar userIn;\nstring userString;\ncin >> userIn;\ngetline(cin,userString);\n\ncout << CountCharacters (userIn, userString) << endl;\n   return 0;\n}\n", "class": 0, "version": 249, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, const string& userString)   {\n   int charCounter = 0;\n   \n   for (unsigned int i = 0; i < userString.size(); ++i)  {\n      if (userString.at(i) == userChar)   {\n         charCounter += 1;\n      }\n   }\n   \n   //cout << userChar << \" and \" << userString << endl;\n   \n   return charCounter;\n}\n\nint main() {\n   char userChar;\n   string s;\n   \n   cin >> userChar;\n   getline(cin, s);\n   \n   cout << CountCharacters(userChar, s) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 18, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\n#include <cctype>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString)\n{\n   //insert character\n   // find character\n   // userText.find ('char') returns number position \n   // start the next find function at the last one ?\n   int numUserChar = 0; \n   \n   for ( unsigned int i = 0; i <= (userString.size()-1); ++i)\n   {\n      if (userString.at (i) == userChar)\n      {\n         numUserChar = numUserChar + 1;\n      }\n   }\n   \n   return numUserChar;\n   \n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   // input number\n   // input string, use getline \n   char userChar;\n   string userString; \n   \n   cin >> userChar;\n   getline (cin, userString);\n   \n   CountCharacters (userChar, userString);\n   \n   cout << CountCharacters (userChar, userString) << endl;\n   \n   \n\n   return 0;\n}\n", "class": 0, "version": 97, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \n\nint CountCharacters(char userChar, string userString) {\n   int countChar = 0;\n   while (userString.find(userChar) != string::npos) {\n      userString.replace(userString.find(userChar), 1, \"\");\n      countChar = countChar + 1;\n   }\n   return countChar;\n}\n      \n\nint main() {\n   /* Type your code here. Your code must call the function.  */\nchar userChar;\nstring userString;\n\ncin >> userChar;\ncin >> userString;\n\ncout << CountCharacters(userChar, userString) << endl;\n   return 0;\n}\n", "class": 0, "version": 80, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int count = 0;\n   for (unsigned int i = 0; i < userString.length() - 1; i++) {\n      if (userString.at(i) == userChar) {\n         count++;\n      }\n      else {\n      }\n   }\n   return count;\n}\n\nint main() {\n   char userChar;\n   string userString;\n   cin >> userChar;\n   getline(cin, userString);\n   \n   cout << CountCharacters(userChar, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 147, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters( char userChar, const string &userString){\n   int count = 0;\n   for (unsigned int i = 0; i < userString.length(); i++){\n      if ( userChar == userString.at(i)){\n         count++;\n      }\n   }\n   return count;\n}\n\nint main() {\n   char x;\n   string user;\n   cin >> x >> user;\n   int final;\n   final = CountCharacters(x,user);\n   cout << final << endl;\n\n   return 0;\n}\n", "class": 0, "version": 235, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString){\n   int i;\n   int a;\n   int b;\n   \n   b=userString.size();\n   a=0;\n   for (i=0;i<b;++i){\n      if (userString.at(i)==userChar){\n         a=a+1;\n      }\n   }\n   return a;\n}\n\nint main() {\n   char userChar;\n   string userString;\n   \n   cin>>userChar;\n   getline(cin, userString);\n   cout<<CountCharacters(userChar,userString)<<endl;\n   return 0;\n}\n", "class": 0, "version": 28, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString)\n{\n   int counter = 0;\n   int stringSize = userString.size();\n   for (int i = 0; i < stringSize; i++)\n   {\n      if(userString.at(i) == userChar)  \n      {\n         counter++;   \n      }\n   }\n   return counter;\n}\n\nint main() {\n   string sentence;\n   char input;\n   cin >> input;\n   getline(cin, sentence);\n   \n   cout << CountCharacters(input, sentence) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 159, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\n#include <cstring>\n#include <cctype>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString){\n   int count = 0;\n   int size = userString.size();\n   \n   string tempStr = userString;\n   for(int i = 0; i < size; ++i){\n      if(tempStr.at(i) == userChar){\n         count++;\n      }\n   }\n   \n   return count;\n}\n\nint main() {\n   char letter;\n   string str;\n   cin >> letter;\n   getline(cin, str);\n   cout << CountCharacters(letter, str) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 17, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString){\n   int i;\n   int charCount;\n   charCount =0;\n   \n   for (i=0; i < userString.length(); ++i) { \n      if ((userString.at(i) == userChar)) {\n         ++charCount;\n      }\n   }\n   return charCount;\n}\n\nint main() {\n\nchar inputChar;\nstring inputString;\n\ncin >> inputChar;\ncin >> inputString; \n\ncout << CountCharacters(inputChar, inputString) << endl;\n   return 0;\n}\n", "class": 0, "version": 61, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString)\n{\n   int count = 0;\n   for (unsigned int i = 0; i < userString.size(); ++i)\n   {\n      if (userString.at(i) == userChar)\n      {\n         ++count;\n      }\n   }\n   return count;\n}\nint main() {\nchar userChar;\nstring userString;\ncin >> userChar;\ncin >> userString;\ncout << CountCharacters(userChar, userString) << endl;\n   return 0;\n}\n", "class": 0, "version": 28, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString){\n   int countReturn=0;\n\tint n = userString.size();\n\tfor (int i=0; i<n; i++){\n      if (userString[i]==userChar){\n         countReturn++;\n      }\n   }\n      return(countReturn);\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char userChar;\n   string userString;\n   cin >> userChar;\n   getline(cin,userString);\n   cout << CountCharacters(userChar,userString) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 54, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n// got help from Aren\nint CountCharacters(char userChar, string userString) {\n   int count = 0;\n   int i;\n   \n   for (i = 0; i < userString.size(); i = i + 1) {\n      if (userString.at(i) == userChar) {\n         count = count + 1;\n      }\n      else {\n         count = count;\n      }\n   }\n   return count;\n}\n\n/* Define your function here */ \n\nint main() {\n   char userChar;\n   string userString;\n   \n   cin >> userChar;\n   getline(cin,userString);\n   \n   cout << CountCharacters(userChar, userString) << endl;\n   \n   /* Type your code here. Your code must call the function.  */\n\n   return 0;\n}\n", "class": 0, "version": 73, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n    char ch;\r\n    string s;\r\n    \r\n    cin>>ch;\r\n    getline(cin,s);\r\n   \r\n   int count = 0;\r\n   for(int i = 0;i<s.length();i++){\r\n      if(s[i] == ch){\r\n         count++;\r\n      }\r\n   }\r\n   cout<<count<<endl;\r\n   \r\n   return 0;\r\n}", "class": 0, "version": 61, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString) {\n   int x=0;\n   unsigned int i;\n   for (i=0; i<userString.size();++i) {\n      if (userString[i]==userChar) {\n         x+=1;\n      }\n   }\n   return x;\n}\n   \nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char letter;\n   string strin;\n   \n   cin >> letter;\n   getline(cin,strin);\n   \n   cout << CountCharacters(letter,strin)<< endl;\n   \n\n\n   return 0;\n}\n", "class": 0, "version": 218, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int charCount = 0;\n   \n   for(long unsigned int i = 0; i < userString.size(); ++i) {\n      if(userString.at(i) == userChar) {\n         charCount = charCount + 1;\n      }\n   }\n   \n   return charCount;\n}\n\nint main() {\n   char letter;\n   string userInput;\n   \n   cin >> letter;\n   getline(cin, userInput);\n   \n   cout << CountCharacters(letter, userInput) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 218, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int occurrence = 0;\n   \n   for (int i=0; i < userString.length(); i++) {\n      if (userString[i] == userChar) {\n         occurrence = occurrence + 1;\n      }\n   }\n   return occurrence;\n}\n\nint main() {\n   string userString;\n   int userChar;\n   \n   cin >> userChar;\n   \n   getline (cin, userString) ;\n   cout<< CountCharacters (userChar, userString) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 133, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString)\n{\n   int counter = 0;\n   \n   for (unsigned int i = 0; i < userString.size(); ++i) \n      if ( userChar == userString.at(i) )\n      {\n         ++counter;\n      }\n\n   return counter;\n}\nint main() {\n   \n   char userCharacter;\n   string userInput;\n\ncin >> userCharacter;\n getline(cin, userInput);\n \ncout << CountCharacters(userCharacter, userInput) << endl;\n\n\n   return 0;\n}\n", "class": 0, "version": 112, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\n#include<string>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString){\n   int cnt=0;\n   for (int i =0; i<userString.size(); ++i){\n      if (userString.at(i)==userChar){\n         ++cnt;\n         \n         }\n      \n      }\n   return cnt;\n   \n   }\n\nint main() {\n   char userI;\n   string input;\n   cin >>userI;\n   getline(cin, input);\n   \n   cout <<CountCharacters(userI, input)<< endl;\n\n   return 0;\n}\n", "class": 0, "version": 141, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int count = 0;\n   \n   for (unsigned int i = 0; i < userString.length(); ++i){\n      if (userString.at(i) == userChar) {\n         count = count + 1;\n      }\n   }\n   return count;\n}\n\nint main() {\n   char inputChar;\n   string inputString;\n   \n   cin >> inputChar;\n   getline(cin, inputString);\n   \n   cout << CountCharacters(inputChar, inputString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 142, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int count = 0;\n   for (unsigned int i = 0; i < userString.size(); i++) {\n      if (userString.at(i) == userChar) {\n         count++;\n      }\n   }\n   return count;\n}\n   \n\nint main() {\n   char character;\n   string line;\n   \n   cin >> character;\n   getline(cin, line);\n\n   cout << CountCharacters(character, line) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 264, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \n\nint main() {\n   /* Type your code here. Your code must call the function.  */\ncout << 1 << endl;\n   return 0;\n}\n", "class": 0, "version": 118, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string& userString)   {\n   int counter;\n   \n   counter = 0;\n   \n   for (unsigned int i = 0; i < userString.size(); ++i)   {\n      if (userString.at(i) != userChar)   {\n         }\n      else   {\n         ++counter;\n         }\n         }\n      return counter;\n}/* Define your function here */ \n\nint main() {\n   char character;\n   string s;\n   int count;\n   \n   cin >> character;\n   getline(cin, s);\n   \n   count = CountCharacters(character, s);\n   \n   cout << count << endl;/* Type your code here. Your code must call the function.  */\n\n   return 0;\n}", "class": 0, "version": 55, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString)\n{\n\n   int charCount = 0;\n   int i = 0;\n   int size = userString.size();\n   \n   for(i = 0; i < size; i++)\n   {\n      if (userString.at(i) == userChar)\n      {\n         charCount = charCount + 1;\n      }  \n   }\n   \n   return charCount;\n}\n\nint main() {\n   \n   string userString;\n   char userChar;\n   \n   cin >> userChar;\n   getline(cin, userString);\n   \n   cout << CountCharacters (userChar, userString) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 3, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CalcNumCharacters(string userString, char userChar)\n{\n   int i;\n   int cnt = 0;\n   \n   for (i = 0; i < userString.size(); ++ i)\n   {\n      if (userString.at(i) == userChar)\n      {\n         cnt = cnt + 1;\n      }\n   }\n   return cnt;\n}\n\nint main() {\n   string myString;\n   char myChar;\n   int x; \n   \n   cin >> myChar;\n   getline (cin, myString);\n   \n    x = CalcNumCharacters(myString, myChar);\n\n   if (x == 1)\n   {\n      cout << x << \" \" << myChar << endl;\n   }\n   else\n   {\n      cout << x << \" \" << myChar << \"'s\" << endl;\n   }\n   return 0;\n}\n", "class": 0, "version": 134, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CalcNumCharacters(string userString, char userChar){\n   int i;\n   int cnt = 0;\n\n   for (i = 0; i < userString.size(); ++i){\n      if (userString.at(i) == userChar)\n      {\n         ++cnt;\n      }\n   }\n   \nreturn cnt;\n}\n\nint main() {\n   char userChar;\n   string userString;\n   \n   cin >> userChar;\n   getline(cin, userString);\n   \n   if (CalcNumCharacters(userString, userChar) == 1){\n      cout << CalcNumCharacters(userString, userChar) << \" \" << userChar << endl;\n   }\n   if (CalcNumCharacters(userString, userChar) == 0){\n      cout << CalcNumCharacters(userString, userChar) << \" \" << userChar << \"'s\" << endl;\n   }\n   if (CalcNumCharacters(userString, userChar) >= 2){\n      cout << CalcNumCharacters(userString, userChar) << \" \" << userChar << \"'s\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 116, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString)\n{\n   int letterNum = 0;\n   \n   for(unsigned int i = 0; i < userString.length(); ++i)\n   {\n      if(userString.at(i) == userChar)\n        ++letterNum;\n   }\n   return letterNum;\n}\n\nint main() {\n   char theChar;\n   string theString;\n   int num;\n   \n   cin >> theChar;\n   getline(cin, theString);\n   \n   num = CountCharacters(theChar, theString);\n   \n   cout << num << endl;\n\n   return 0;\n}\n", "class": 0, "version": 185, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString){\n   int ans = 0;\n   for(int i = 0; i < userString.size(); i++){\n      if(userString.at(i) == userChar) ans++;\n   }\n   return ans;\n}\n\nint main() {\n   char x;\n   string n;\n   cin >> x;\n   getline(cin,n);\n   cout << CountCharacters(x,n) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 42, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\n\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString){\nint result =0;\nfor (int i=0; i<userString.length();i++){\nif(userString[i]==userChar){\nresult++;}\n}\nreturn result;}\nint main() {\n   /* Type your code here. Your code must call the function.  */\nstring userString;\nchar userChar;\ncin >> userChar;\ngetline (cin,userString);\ncout << CountCharacters (userChar,userString) << endl;\n   return 0;\n}\n", "class": 0, "version": 166, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString){\n   int count= 0;\n   \n   for(unsigned int i = 0; i < userString.size(); ++i){\n      \n      if (userString.at(i) == userChar){\n         ++ count;\n      }\n   }\n   return count; \n}\n\n   \nint main() {\n   char inputChar;\n   string inputString;\n   \n   cin >> inputChar; \n   getline(cin, inputString);\n   \n   cout << CountCharacters(inputChar, inputString) << endl; \n\n   return 0;\n}\n", "class": 0, "version": 48, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CalcNumCharacters(string userString, char userChar) {\n   int i;\n   int stringLen = userString.size();\n   int numChar = 0;\n   \n   for(i = 0; i < stringLen; ++i) {\n      if(userChar == userString.at(i)) {\n         numChar += 1;\n      }\n   }\n   return numChar;\n}\n   \n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char userChar;\n   string userString;\n   \n   cin >> userChar;\n   getline(cin, userString);\n   \n   cout << CalcNumCharacters(userString, userChar) << \" \" << userChar;\n   \n   if(CalcNumCharacters(userString, userChar) > 1) {\n      cout << \"'s\";\n   }\n   cout << endl;\n\n   return 0;\n}\n", "class": 0, "version": 66, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char baseChar, const string& baseString) {\n   int numChars = 0;\n   int i;\n   for (i = 0; baseString[i] != '\\0'; ++i) {\n      if (baseString[i] == baseChar) {\n         ++numChars;\n      }\n   }\n   return numChars;\n}\n      \nint main() {\n   char userChar;\n   string userString;\n   \n   cin >> userChar;\n   getline(cin, userString);\n   \n   cout << CountCharacters(userChar, userString) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 173, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString) {\n   string userText;\n   int numberOfText = 0;\n\n   cin >> userChar;\n   getline(cin, userText);  // Gets entire line, including spaces. \n\n   for (long unsigned int i = 0; i < userText.size(); ++i) {\n      if (userText.at(i) == 'i') {\n         numberOfText = numberOfText + 1;\n      }\n   }\n   \n   return numberOfText;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   int userChar;\n   string userString;\n\n   cin >> userChar;\n   getline (cin, userString);\n\n   cout << CountCharacters(userChar, userString);\n   cout << endl;\n\n   return 0;\n}\n", "class": 0, "version": 161, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n   int result = 0; \n   int i; \n   int length = userString.size();\n   \nfor (i = 0; i < length; ++i) {\n   if (userString.at(i) == userChar)\n      result = result + 1; } \n      \nreturn result; }\n\nint main() {\n   char letter; \n   string word; \n   \n   cin >> letter; \n   getline(cin, word); \n   \n   cout << CountCharacters(letter, word) << endl; \n   \n\n   return 0;\n}\n", "class": 0, "version": 20, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters (char userChar, const string &userString) {\n   int times = 0;\n   for (int i = 0; i < userString.length(); i++){\n      if (userString.at(i) == userChar) {\n         times++;\n      }\n   }\n   return times; \n}\n\nint main() {\n   string userString;\n   char userChar;\n   cin >> userChar;\n   getline (cin, userString) ;\n   cout << CountCharacters(userChar, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 140, "model": "Human"}
{"problem": 4, "code": "// Worked with Candice S., Kayvon S., and Karen C.\n\n#include <iostream>\nusing namespace std;\n\nint CalcNumCharacters(string userInput, char userValue) {\n   \n   unsigned int userCounter = 0;\n   unsigned int i;\n   \n   \n   for (i=0; i<userInput.size(); i++) {\n      \n      \n      if (userInput.at(i) == userValue) {\n         \n         userCounter = userCounter + 1;\n      }\n      \n      \n      else {\n         \n         userCounter = userCounter;\n         \n      }\n   }\n   return userCounter;\n}\n\nint main() {\n   \n   string userInput;\n   \n   char userValue;\n   \n   int userCounter;\n   \n   \n   cin >> userValue;\n   \n   getline (cin, userInput);\n   \n   \n   userCounter = CalcNumCharacters(userInput, userValue);\n   \n   if (userCounter == 1) {\n      cout << userCounter << \" \" << userValue << endl;\n   }\n   else {\n      \n      cout << userCounter << \" \" << userValue << \"'s\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 205, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CalcNumCharacters(string userString, char userChar) {\n   int numChar;\n   numChar = 0;\n   for (int i = 0; i < userString.size(); ++i) {\n      if (userChar == userString.at(i)) {\n         ++numChar;\n      }\n   }\n   return numChar;\n}\n\n\nint main() {\n   string userString;\n   char userChar;\n   int numAns;\n   \n   cin >> userChar;\n   cin >> userString;\n   \n   numAns = CalcNumCharacters(userString, userChar);\n   if (numAns == 0) {\n      cout << numAns << \" \" << userChar << \"'s\" << endl;\n   }\n   else if (numAns == 1) {\n      cout << numAns << \" \" << userChar << endl;\n   }\n   else if (numAns > 1) {\n      cout << numAns << \" \" << userChar << \"'s\" << endl;\n   }\n   \n\n   return 0;\n}\n", "class": 0, "version": 192, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString) {\n   int i;\n   int cnt = 0;\n   for (i = 0; i < userString.size() - 1; ++i) {\n      if (userString.at(i) == userChar) {\n         cnt = cnt + 1;\n      }\n      else {}\n   }\n   return cnt;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char letter;\n   string s;\n   int cnt;\n   \n   cin >> letter;\n   getline (cin, s);\n   \n   cout << CountCharacters( letter, s) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 59, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \n\nint CountCharacters (char userChar, const string &userString) {\n   int counter = 0;\n   \n   for (unsigned int i = 0; i < userString.size(); i++) {\n      if (userString.at(i) == userChar) {\n         ++ counter;\n      }\n   }\n   return counter;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char inputChar;\n   string inputString;\n   \n   cin >> inputChar;\n   cin >> inputString;\n   \n   cout << CountCharacters(inputChar, inputString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 253, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */\nint CalcNumCharacters(string userString, char userChar) {\n   int i;\n   int j;\n   int charCount;\n   \n   j = userString.size();\n   charCount = 0;\n   for (i = 0; i < j; i++) {\n      if ( userString.at(i) == userChar){\n         charCount = (charCount + 1);\n      }\n   }\n   \n   return charCount;\n   \n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   \n   int numChars;\n   char userChar;\n   string userString;\n   \n   cin >> userChar;\n   getline(cin, userString);\n   \n   numChars = CalcNumCharacters(userString, userChar);\n   \n   if (numChars != 1) {\n      cout << numChars << \" \" << userChar << \"\\'s\" << endl;\n   }\n   else if (numChars == 1) {\n      cout << numChars << \" \" << userChar << endl;\n   }\n   \n   return 0;\n}\n", "class": 0, "version": 159, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n   int CountCharacters(char userChar, const string &userString) {\n      int count = 0;\n      for (unsigned int i = 0; i < userString.length(); i++) {\n         if (userString[i] == userChar) {\n            count ++;\n         }\n}\n   return count;\n}\n\nint main() {\n   char userChar;\n   string userString;\n   cin >> userChar;\n   getline(cin, userString);\n   int total = CountCharacters(userChar, userString);\n   cout << total << endl;\n\n   return 0;\n}\n", "class": 0, "version": 21, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString)\n{\n   int counter = 0;\n   for (unsigned int i = 0; i < userString.size(); ++i)\n   {\n      if (userString.at(i) == userChar)\n      {\n         ++counter;\n      }\n   }\n   return counter;\n}\n\nint main() {\n   char userChar;\n   \n   string userString;\n   \n   cin >> userChar >> userString;\n   \n   CountCharacters(userChar, userString);\n   \n   cout << CountCharacters(userChar, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 44, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int characterCount = 0;\n   for (int i = 0; i < userString.size(); i++) {\n      if (userString.at(i) == userChar) {\n         characterCount++;\n      }\n   }\n   return characterCount;\n}\n\nint main() {\n   char userChar; \n   string userInput;\n   cin >> userChar;\n   getline (cin, userInput);\n   cout << CountCharacters(userChar, userInput) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 20, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString){\nint Scount =0;\nint i = 0;\nint sze = userString.size();\n   for (i=0; i < sze ;++i){\n      if (userString.at(i) == userChar){\n        Scount = Scount +1;\n      }\n   }\n   return Scount;\n}\nint main() {\n   /* Type your code here. Your code must call the function.  */\nint userint;\nstring userString;\ncin>> userint;\ngetline (cin, userString);\nCountCharacters(userint, userString);\n   return 0;\n}\n", "class": 0, "version": 233, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString){\n   int i;\n   int countCharacters = 0;\n   for (i = 0; i < userString.length(); ++i){\n      if ((userString.at(i) == userChar)){\n         countCharacters = countCharacters + 1;\n      }\n   }\n   return  countCharacters;  \n}\n\nint main() {\nchar inputChar;\nstring inputString;\n   cin >> inputChar;\n   cin >> inputString;\n   cout << CountCharacters(inputChar, inputString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 40, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString)\n{\n   int charCount = 0;\n   \n   for (unsigned int i = 0; i < userString.length() ; i++)\n   {\n      if (userString[i] == userChar) \n      {\n         charCount++;\n      }\n   }\n\nreturn charCount;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   \n   char chr; //letter\n   string str; //Word\n   \n   cin >> chr >> str;\n   \n   \n   cout << CountCharacters(chr, str) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 80, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n   int userCount;\n   userCount = 0;\n   unsigned int i;\n   for (i = 0; i < userString.size(); i++) {\n      if (userChar == userString.at(i)) {\n         userCount = userCount + 1;\n      }\n   }\n   return userCount;\n}\n\nint main() {\n   char inputChar;\n   string inputString;\n   \n   cin >> inputChar;\n   cin >> inputString;\n   \n   cout << CountCharacters(inputChar, inputString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 33, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString){\n   int c=0;\n   int k=userString.size();\n   for(int i =0;i<k;++i){\n      if(userString.at(i)==userChar){\n         c=c+1;\n      }\n   \n   }\n   return c;\n}\nint main() {\n    char z;\n    string userString;\n    cin>>z;\n    getline(cin,userString);\n    cout<<CountCharacters(z,userString)<<endl;\n    \n   return 0;\n}\n", "class": 0, "version": 139, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString){\n   int count;\n   count=0;\n   for(unsigned int i=0;i<userString.length();i++){\n      if(userString.at(i)==userChar){\n         count++;\n      }\n   }\n      return count;\n}\n\n\nint main() {\n  char find;\n  string word;\n  cin>>find;\n  cin>>word;\ncout<<CountCharacters(find, word)<<endl;\n   return 0;\n}\n", "class": 0, "version": 22, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString) {\n   int day;\n   int num = 0;\n   day = userString.length();\n   \n   for (int i = 0; i < day; ++i) {\n      if(userString.at(i) == userChar) {\n         num = num + 1;\n      }\n   }\n   return num;\n}\n\nint main() {\n   char input;\n   string num2;\n   \n   cin >> input;\n   getline(cin, num2);\n   cout << CountCharacters(input, num2) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 114, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString){\n   \n   int cnt = 0;\n    \n   for(unsigned int i = 0; i < userString.size(); ++i){\n      if(userString.at(i) == userChar){\n         ++cnt;\n      }\n   }\n   \n   return cnt;\n}\n\nint main() {\n   char character;\n   string str;\n   cin >> character;\n   cin >> str;\n   int num = CountCharacters(character, str);\n   cout << num << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 146, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString) {\n   int count = 0;\n   int stringSize = userString.size();\n   \n   for (int i = 0; i < stringSize; ++i) {\n      if(userString.at(i) == userChar) { //if char is in string increment count by 1 \n         ++count;\n      }\n   }\n   \n   return count;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char findChar;\n   string input;\n   \n   cin >> findChar;\n   getline(cin, input);\n   \n   cout << CountCharacters(findChar, input) << endl; //Outputs num of times char is in string w/ space\n   \n   return 0;\n}\n", "class": 0, "version": 236, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string& userString) {\n   int count = 0;\n\n   for (unsigned i = 0; i < userString.size(); ++i) {\n      if (userChar == userString.at(i)) {\n         ++count;\n      }\n   }\n   \n   return count;\n}\n\nint main() {\n   char userInput;\n   string s;\n   \n   cin >> userInput;\n   getline(cin, s);\n   \n   cout << CountCharacters(userInput, s) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 183, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString) {\n   int count = 0;\n   for (int i = 0; i < userString.size(); i++) {\n      if (userChar == userString[i]) {\n         count++;\n      }\n   }\n   return count;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char userChar;\n   string userString;\n   \n   cin >> userChar;\n   getline(cin, userString);\n   \n   cout << CountCharacters(userChar, userString) << endl;\n   return 0;\n}\n", "class": 0, "version": 60, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CalcNumCharacters(string userString, char userChar) {\n   unsigned int i;\n   int numChar;\n   numChar = 0;\n   for (i = 0; i < userString.size(); i++) {\n      if (userString.at(i) == userChar) {\n         numChar += 1;\n      }\n   }\n   return numChar;\n}\n\nint main() {\n   string userString;\n   char userChar;\n   cin >> userChar;\n   getline(cin, userString);\n   if (CalcNumCharacters(userString, userChar) == 1) {\n      cout << CalcNumCharacters(userString, userChar) << \" n\" << endl;\n   }\n   else {\n      cout << CalcNumCharacters(userString, userChar) << \" n's\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 12, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint main(){\n   cout << \"1\";\n   cout << endl;\n   return 0;\n}", "class": 0, "version": 9, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CalcNumCharacters(string userString, char userChar)\n{\n   int i;\n   int cnt = 0;\n   for (i = 0; i < userString.size(); i = i + 1)\n   {\n      if (userString.at(i) == userChar)\n      {\n         cnt = cnt + 1;\n      }\n   }\n   return(cnt);\n}\nint main() {\n   \n   char ch;\n   string str;\n   \n   cin >> ch;\n   getline (cin, str);\n   \n   if (CalcNumCharacters(str, ch) == 1)\n   {\n      cout << CalcNumCharacters(str, ch) << \" \" << ch << endl;\n   }\n   else\n   {\n   cout << CalcNumCharacters(str, ch) << \" \" <<ch << \"'s\";\n   }\n   return 0;\n}\n", "class": 0, "version": 17, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string& userString){\n   int n = userString.length();\n   int counter = 0;\n   \n   for (int i = 0; i < n; ++ i) {\n      if(userString.at(i) == userChar) {\n         counter = counter + 1;\n      }\n   }\n   return counter;\n}\n\nint main() {\n   string userString;\n   char userChar;\n   \n   cin >> userChar;\n   getline (cin, userString);\n   \n   cout << CountCharacters(userChar, userString) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 106, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString){\n   int final = 0;\n   for(int i = 0;i<userString.length();i++){\n      if(userString[i] == userChar){\n         final++;\n      }\n   }\n   return final;\n}\n\nint main(){\n   string userString;\n   char userChar;\n   cin>>userChar>>userString;\n   cout<<CountCharacters(userChar,userString)<<endl;\n   return 0;\n}\n", "class": 0, "version": 17, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n\nint count = 0;\n\n    for (int i = 0; i < userString.size(); ++i) {\n\n        if (userChar == userString[i]) {\n            \n            count++;\n        }\n    }\n\n    return count;\n\n}\n\nint main() {\n\n    char userChar;\n\n    string userString;\n\n    cin >> userChar;\n\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n    \n }\n\n", "class": 0, "version": 57, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters(char userChar, const string &userString){\n   unsigned int i; \n   int counter = 0;\n   \n   for (i=0; i < userString.size(); ++i){\n      if (userChar == (userString.at(i))){\n     ++counter;\n      }\n      else if (userChar != (userString.at(i))){\n      counter = counter;\n      }\n}\nreturn counter;\n}\n\nint main() {\n   char userChar;\n   string userString;\n   \n   cin >> userChar;\n   getline (cin, userString);\n   \n   \n   cout << CountCharacters(userChar, userString) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 78, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, string userString){\n   int i;\n   int numChar=0;\n   for (i=0;i<userString.size()-1;++i){\n      if (userString.at(i)==userChar){\n         numChar=numChar+1;\n      }\n   }\n   return numChar;\n}\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char userChar;\n   string userString;\n   int numChar;\n   \n   cin>>userChar;\n   getline(cin,userString);\n   numChar=\n\n   return 0;\n}\n", "class": 0, "version": 72, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\nint CountCharacters (char userChar, string userString) {\n   int characters = 0;\n   unsigned int i;\n   \n   for (i = 0; i < userString.size(); ++i) {\n      if ((userString.at(i)) == userChar) {\n         characters = characters + 1;\n      }\n   }\n   \n   return characters;\n}\n\nint main() {\n   char userChar;\n   string userString;\n   int numberTimes;\n   \n   cin >> userChar;\n   \n   getline (cin, userString);\n   \n   numberTimes = CountCharacters(userChar, userString);\n   \n   cout << numberTimes << endl;\n\n   return 0;\n}\n", "class": 0, "version": 61, "model": "Human"}
{"problem": 4, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint CountCharacters(char userChar, const string &userString){\n   int count = 0;\n   for (int i =0; i < userString.size(); i++){\n      if(userString. at(i) == userChar){\n         count ++;\n      }\n   }\n   return count;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function.  */\n   char userChar;\n   string s;\n   cin >> userChar;\n   getline (cin, s);\n   cout << CountCharacters(userChar , s) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 30, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int inputYear) {\n   bool isLeapYear = false;\n   if (inputYear % 400 == 0){\n      isLeapYear = true;\n   }\n   else if (inputYear % 100 == 0){\n      isLeapYear = false;\n   } \n   else if (inputYear % 4 == 0){\n      isLeapYear = true;\n   } \n   else (isLeapYear = false);\n   \n   return isLeapYear;\n}\nint main() {\n\nint input;\ncin >> input;\nIsLeapYear(input);\n if ((IsLeapYear)){\n      cout << input << \" is a leap year.\" << endl;\n   }\n   else  {\n      (cout << input << \" is not a leap year.\") << endl;\n   }\n   return 0;\n}\n\n", "class": 0, "version": 66, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear( int userYear){\n\n\tbool boolYear = false;\n\t\n   if ((userYear % 100) == 0){\n      if ((userYear % 400) == 0){\n         boolYear=true;\t\n\t\t }\n\t }\n   else {\n      if ((userYear % 4) == 0) {\n\t   boolYear=true; \t\n\t  }\n   }\n\n\n\treturn(boolYear);\n}\n\nint main(){\n\t \n\tint userYear;\n\tbool boolYear;\n\t\n\tcin >> userYear;\n\n\tboolYear = IsLeapYear(userYear);\n\n\tif (boolYear) {\n\t   cout << userYear << \" is a leap year.\" << endl;\n\t}\n\telse { \n\t   cout << userYear << \" is not a leap year.\" << endl;\n\t}\n\t return 0;\n}\n", "class": 0, "version": 72, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint DaysInFeb(int userYear) {\n   int numDay;\n   \n   if ( (userYear % 4 == 0) && (userYear != 1900) ) {\n      numDay = 29;\n   }\n      else if ( (userYear % 100 == 0) && (userYear % 400 == 0) ) {\n      numDay = 29;\n      }\n   \n   else {\n      numDay = 28;\n   }\n\n\n   \n\n   \n   return numDay;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int Year;\n   \n   cin >> Year;\n   \n   cout << Year << \" has \" << DaysInFeb(Year) << \" days in February.\" << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 135, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear)\n{\nbool result;\ncout << boolalpha;\nif( userYear % 400 ==0 || (userYear%4==0 && userYear%100 !=0) )\n   {\n      result=1;\n   }\n   else { result =0;}\n\nreturn result ;\n}\nint main() {\n   /* Type your code here. Your code must call the function. */\nint x;\ncin >> x ;\n if(IsLeapYear(x) == true ){ cout << x <<\" is a leap year.\" << endl ;}\n else { cout << x <<\" is not a leap year.\" << endl ;}\n   return 0;\n}\n", "class": 0, "version": 224, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int inputYear) {\n   bool isLeapYear = false;\n   \n   if (((inputYear % 4 == 0) && (inputYear % 100 > 0)) || (inputYear % 400 == 0)) {\n      isLeapYear = true;\n   }\n   \n   return isLeapYear;\n} \n\nint main() {\n   int inputYear;\n   cin >> inputYear;\n   \n   if (IsLeapYear(inputYear) == true) {\n      cout << inputYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << inputYear << \" is not a leap year.\" << endl;  \n   }\n   \n   return 0;\n}\n", "class": 0, "version": 75, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n   bool x;\n   if((userYear % 100 != 0 && userYear % 4 == 0) || userYear % 400 == 0){\n      x = true;\n   }else{\n      x = false;\n   }\n   return x;\n}\n\nint main() {\n   int userInput;\n   int choice;\n   cin >> userInput;\n   choice = IsLeapYear(userInput);\n   if(choice == 1){\n      cout << userInput << \" is a leap year.\" << endl;\n   }else{\n      cout << userInput << \" is not a leap year.\" << endl;\n   }\n   return 0;\n}\n", "class": 0, "version": 75, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear (int userYear) {\n   bool result;\n   if (((userYear % 4 == 0) && (userYear % 100 != 0)) || (userYear % 400 == 0)) {\n      result = true;\n   }\n   else {\n      result = false;\n   }\n   return result;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int userInput;\n   cin >> userInput;\n   \n   if (IsLeapYear(userInput)) {\n      cout << userInput << \" is a leap year.\" << endl;\n   }\n   else if (!IsLeapYear(userInput)) {\n      cout << userInput << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 245, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear){\n   if (((userYear % 4 == 0) && (userYear % 100 != 0)) || (userYear % 400 == 0)){\n   return true;\n}\n   else{\n   return false;\n   }\n}\nint main() {\n   int userYear;\n   cin >> userYear;\n   if (IsLeapYear(userYear) == true){\n      cout << userYear << \" is a leap year.\";\n   }\n   else if(IsLeapYear(userYear) == false){\n      cout << userYear << \" is not a leap year.\";\n   }\n   cout << endl;\n   /* Type your code here. Your code must call the function. */\n\n   return 0;\n}\n", "class": 0, "version": 156, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   bool i = false;\n   int f;\n   \n   if (userYear % 100 == 0)   {\n      f = userYear / 100;\n      \n      if (f % 4 == 0)   {\n         i = true;\n      }\n   }\n   else if (userYear % 4 == 0)   {\n      i = true;\n   }\n   return i;\n}\n   \n\nint main() {\n   int year;\n   \n   cin >> year;\n   \n   if (IsLeapYear(year))   {\n      cout << year << \" is a leap year.\" << endl;\n   }\n   else  {\n      cout << year << \" is not a leap year.\" << endl;\n      \n   }\n\n   return 0;\n}\n", "class": 0, "version": 179, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear) {\n   bool isLeapYear;\n   if ((userYear % 4 == 0)) { \n       if ((userYear % 100 == 0) && (userYear % 400 == 0))\n      isLeapYear = false; \n       else \n      isLeapYear = true;\n   \n   }\n   else {\n      isLeapYear = false;\n   }\n}\n   return isLeapYear; \n}\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   \n   int inputYear;\n   cin >> inputYear;\n    if ((isLeapYear)) { \n      cout << inputYear << \" is a leap year.\" << endl; \n   }\n   else {\n      cout << inputYear << \" is not a leap year.\" << endl; \n   }\n   return 0;\n}\n", "class": 0, "version": 30, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nint DaysInFeb(int userYear)\n{\n   if((userYear % 4 == 0) && (userYear % 100) || (userYear % 400 == 0))\n   {\n      return 29;\n   }\n   else\n   {\n      return 28;\n   }\n}\n\nint main() {\n  int userYear;\n  cin >> userYear;\n  cout << userYear << \" has \" << DaysInFeb(userYear) << \" days in February.\" << endl;\n\n   return 0;\n}\n", "class": 0, "version": 79, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear ( int userYear) { \n   if (userYear % 4 == 0) {\n      return true; \n   }\n   else if (userYear % 100 == 0){\n      return true; \n   }\n   else if (userYear % 400 == 0) { \n      return true;\n   }\n   else {\n      return false;\n   }\n}\n\nint main() {\n      int userYear;\n   cin >> userYear;\n   \n   if (IsLeapYear == 0)\n   {\n      cout << userYear << \" is not leap year.\" << endl;\n   }\n   \n   else \n   {\n      cout << userYear << \" is a leap year.\" << endl; \n   }\n\n\n   return 0;\n}\n", "class": 0, "version": 12, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nvoid IsLeapYear(int userYear) {\n   if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                cout << userYear << \" is a leap year.\";\n            }\n            else {\n                cout << userYear << \" is not a leap year.\";\n            }\n         }\n         else {\n            cout << userYear << \" is a leap year.\";\n         }\n   }\n   else {\n      cout << userYear << \" is not a leap year.\";\n   }\n   cout << endl;\n}\n\n\nint main() {\n   \n   int userYear;\n   \n   cin >> userYear;\n   \n   IsLeapYear(userYear);\n   \n   return 0;\n}\n", "class": 0, "version": 47, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear (int userYear) { \nif (( userYear % 400 == 0 ) || ((userYear % 4 == 0) && (userYear % 100 != 0 ))){\n   return true ; \n} \nelse { \n   return false ; \n}\n}\nint main() {\n   int userYear ; \n   cin >> userYear ; \n   bool result = IsLeapYear (userYear) ; \n   if (result == true) {\n      cout << userYear << \" is a leap year.\" << endl; \n   }\n   else {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n\n   /* Type your code here. Your code must call the function. */\n\n   return 0;\n}\n", "class": 0, "version": 261, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nint DaysInFeb(int userYear) {\n   if (userYear % 4 == 0 && userYear % 100 != 0) {\n      return 29;\n   }\n   else if (userYear % 400 == 0) {\n      return 29;\n   }\n   else {\n      return 28;\n   }\n}\n\nint main() {\n   int userYear;\n   \n   cin >> userYear;\n   \n   cout << userYear << \" has \" << DaysInFeb(userYear) << \" days in February.\" << endl;\n\n   return 0;\n}\n", "class": 0, "version": 23, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nint DaysInFeb(int userYear) {\n   int days;\n   if (userYear % 400 == 0) {\n      days = 29;\n   }\n   else if (userYear % 100 == 0) {\n      days = 28;\n   }\n   else if (userYear % 4 == 0) {\n      days = 29;\n   }\n   else {\n      days = 28;\n   }\n   return days;\n   }\n\n\nint main() {\n   int userYear;\n   cin >> userYear;\n   \n   cout << userYear << \" has \" << DaysInFeb(userYear) << \" days in February.\" << endl;\n\n   return 0;\n}\n", "class": 0, "version": 62, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* integer inputYear\n\ninputYear = Get next input\n\nif (inputYear % 4) == 0 and (inputYear % 100) != 0\n   Put inputYear to output\n   Put \" is a leap year.\\n\" to output\nelseif (inputYear % 100) == 0 and (inputYear % 400) == 0\n   Put inputYear to output\n   Put \" is a leap year.\\n\" to output   \nelse\n   Put inputYear to output\n   Put \" is not a leap year.\\n\" to output\n*/\n\nint DaysInFeb(int userYear) {\n   int febDays;\n   \n   if ((userYear % 4) == 0 && (userYear % 100) != 0) {\n      febDays = 29;\n   }\n   else if ((userYear % 100) == 0 && (userYear % 400) == 0) {\n      febDays = 29;\n   }\n   else {\n      febDays = 28;\n   }\n   \n   return febDays;\n}\n      \n\nint main() {\n   int inputYear;\n   \n   cin >> inputYear;\n   \n   cout << inputYear << \" has \" << DaysInFeb(inputYear) << \" days in February.\" << endl;\n\n   return 0;\n}\n", "class": 0, "version": 185, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n// same lab as before but put the leap year calculations in the function\n// 1. need to get an inout from userYear that goes into the function parameter\n\nbool IsLeapYear(int userYear) {\n   bool leapYear;\n   \n   if ((userYear % 4 == 0) && (userYear % 100 != 0) == true)\n   {\n      leapYear = true;\n   }\n   \n   else if (userYear % 400 == 0)\n   {\n      leapYear = true;\n   }\n   \n   else \n   {\n      leapYear = false;\n   }\n   \n   if (leapYear == true)\n   {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   \n   else if (leapYear == false)\n   {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n   return leapYear;\n}\n\nint main() {\n   int yearInput;\n   \n   cin >> yearInput;\n   \n   IsLeapYear (yearInput);\n      \n\n   return 0;\n}\n", "class": 0, "version": 93, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int year)\n{\n   bool isLeapYear = false;\n   \n   if((year % 100) == 0)\n   {\n      if ((year % 400) == 0)\n      {\n         isLeapYear = true;\n      }\n   }\n   else if((year % 4) == 0)\n   {\n         isLeapYear = true;\n   } \n   else\n   {\n      isLeapYear = false;\n   }\n   \n   return isLeapYear;\n}\n\nint main() {\n   int userYear;\n   cin >> userYear;\n   \n   if(IsLeapYear(userYear))\n   {\n      cout << userYear << \" is a leap year.\\n\";\n   }\n   else\n   {\n      cout << userYear << \" is not a leap year.\\n\";\n   }\n   return 0;\n}\n", "class": 0, "version": 248, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   if (((userYear % 400 == 0)||(userYear % 100 != 0))&&(userYear % 4 == 0)) {\n      return true;\n   } else {\n      return false;\n   }\n}\n/* Define your function here */ \n\nint main() {\n   int userYear;\n   cin >>userYear;\n   \n  if (IsLeapYear( userYear) == true) {\n   cout << userYear << \" is a leap year.\" << endl;\n   }\n   else {\n        cout << userYear << \" is not a leap year.\" << endl;\n   }\n      \n   /* Type your code here. Your code must call the function. */\n\n   return 0;\n}\n", "class": 0, "version": 57, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n \n bool IsLeapYear(int userYear) {\n   \n   if (((userYear % 4 == 0) && (!(userYear % 100 == 0))) || (userYear % 400 == 0)) {\n      return true;\n   }\n   else {\n      return false;\n   }\n }\n\nint main() {\n   int userYear;\n   cin >> userYear;\n   \n   if (true) {\n      cout << IsLeapYear(userYear) << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << IsLeapYear(userYear) << \" is not a leap year.\" << endl;\n   }\n  \n\n   return 0;\n}\n", "class": 0, "version": 27, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   bool leapYear;\n   \n   if (userYear % 4 != 0 ) {\n      leapYear = false ; \n   }\n   else if ((userYear % 100 == 0) && (userYear % 400 != 0)) {\n      leapYear = false; \n   }\n   else if (userYear % 4 == 0 ) {\n      leapYear = true; \n   }\n   else if (userYear % 400 == 0) {\n      leapYear = true; \n   }\n   else \n      leapYear = false;\n   \n   return leapYear;\n\n}\n\nint main() {\n   int numYear; \n   \n   cin >> numYear;\n\n   if (IsLeapYear (numYear)) {\n   cout << numYear << \" is a leap year.\" << endl;\n   }\n   else {\n   cout << numYear << \" is not a leap year.\" << endl;\n   }\n   return 0;\n}\n", "class": 0, "version": 60, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nint DaysInFeb(int userYear) {\n   int numDays;\n   \n   if (userYear % 100 == 0 && userYear % 400 == 0) {\n      return numDays = 29;\n   }\n   else if (userYear % 100 != 0 && userYear % 4 == 0) {\n      return numDays = 29;\n   }\n   else {\n      return numDays = 28;\n   }\n}\n\nint main() {\n   int numYear;\n   int usernumDays;\n   \n   cin >> numYear;\n   \n   usernumDays = DaysInFeb(numYear);\n   \n   cout << numYear << \" has \" << usernumDays << \" days in February.\" << endl;\n\n   return 0;\n}\n", "class": 0, "version": 109, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   bool b;\n   int a;\n   a = userYear % 100;\n   \n   if ((userYear % 4 == 0) && (a != 0)) {\n      b = true;\n   }\n   else if ((userYear % 400 == 0) && (a == 0)) {\n      b = true;\n   }\n   else {\n      b = false;\n   }\nreturn b;\n}\n\nint main() {\n   int input;\n   cin >> input;\n   \n   if (IsLeapYear(input) == true) {\n      cout << input << \" is a leap year.\" << endl;\n   }\n   else if (IsLeapYear(input) == false) {\n      cout << input << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 208, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   if (((userYear % 4) == 0) && (((userYear / 4) % 4) == 0)) {\n    return true;\n }\n else {\n    return false;\n }\n}\n\nint main() {\n   int userYear;\n   cin >> userYear;\n   if(IsLeapYear(userYear) == true) {\n   cout << userYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userYear << \" is not a leap year.\" << endl;\n}\n   return 0;\n}\n", "class": 0, "version": 217, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n bool isleap = false;\n if(userYear % 100 == 0 && userYear % 400 != 0)\n isleap = false;\n else if( userYear % 100 == 0 && userYear % 100 != 0)\n isleap = true;\n else if( userYear % 4 == 0)\n isleap = true;\n return isleap;\n}\n\nint main() {\n   int year;\n   cin >> year;\n   bool result = IsLeapYear(year);\n   if( result == true)\n   cout << year << \" is a leap year.\" << endl;\n   else\n   cout << year << \" is not a leap year.\" << endl;\n   return 0;\n}\n", "class": 0, "version": 44, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear (int userYear) \n{\n   //test when divide by four, is there remainder or not\n   if (userYear % 4 == 0)\n   {\n      //no remainder\n      //test if it's century year or not (% 100)\n      if (userYear % 100 == 0)\n      {\n         //it is a century year\n         //test if it's divisible by 400 or not\n         if (userYear % 400 == 0)\n         {\n            //yes\n            //leap year\n            return true;\n         }\n         else\n         {\n            //no\n            //not a leap year\n            return false;\n         }\n      }\n      else \n      {\n         //it's not a century year\n         //leap year\n         return true;\n      }\n   }\n   //yes\n      //not a leap year\n   else\n   {\n      return false;\n   }\n      \n}\nint main() {\n   int userYear;\n   \n   cin >> userYear;\n   \n   if (IsLeapYear (userYear))\n   {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else\n   {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}", "class": 0, "version": 45, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear (int year)\n{\n   if (year % 400 == 0) {\n      return true;\n   }\n   else if (year % 100 == 0) {\n      return false;\n   }\n   else if (year % 4 == 0) {\n      return true;\n   }\n   return false;\n}\n\nint main() {\n  int year;\n  cin >> year;\n  if (IsLeapYear(year))\n  cout << year << \" is a leap year.\" << endl;\n  else \n  cout << year << \" is not a leap year.\" << endl;\n\n   return 0;\n}\n", "class": 0, "version": 44, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int inputYear){\n   bool result;\n   bool century;\n   \n   \n   if(inputYear/100.0==inputYear/100){\n   century=true;\n   \n   \n   }\n   \n   if(! century){\n    if ((inputYear / 4.0) > (inputYear /4)){\n      result=false;\n   }\n   else {\n      result=true;\n   }\n   }\n   if(century){\n      if(inputYear/400.0 > inputYear/400){\n         result=false;\n      }\n      else {\n         result=true;\n      }\n   }\n   return result;\n}\n   \n\nint main() {\n   int inputYear;\n   \n   cin>>inputYear;\n   \n   if (IsLeapYear(inputYear)){\n      cout<<inputYear<<\" is a leap year.\"<<endl;\n   }\n   else{\n      cout<<inputYear<<\" is not a leap year.\"<<endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 111, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear)\n{\n   bool LeapYear = false;\n   if (userYear % 4 == 0 || userYear % 400 == 0)\n   {\n      LeapYear = true;\n   }\n   return LeapYear;\n}\n\nint main() {\n   int input;\n   cin >> input;\n   bool whether = IsLeapYear(input);\n   if (whether = true)\n   {\n     cout << input << \" is a leap year.\" << endl; \n   }\n   else\n   {\n      cout << input << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 8, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   if ((userYear % 4 == 0) && (userYear % 100 != 00))\n      return true;\n      \n   if ((userYear % 400 == 0) && (userYear % 100 == 00))\n      return true;\n      \n   if ((userYear % 400 != 0) || (userYear % 100 != 0) || (userYear % 4 != 0)) \n      return false;\n      \n\n   return IsLeapYear(userYear);\n\n}\nint main() {\n   int userYear;\n   cin >> userYear;\n   \nif (IsLeapYear(userYear) == true) {\n   cout << userYear << \" is a leap year.\" << endl;\n}\nif (IsLeapYear(userYear) == false) {\n   cout << userYear << \" is not a leap year.\" << endl;\n}\n\n   return 0;\n}\n", "class": 0, "version": 55, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear){\n   if (userYear % 400 == 0){\n      return true;\n      }\n   else if (userYear % 100 == 0) {\n      return false;\n      }\n   else if (userYear % 4 == 0) {\n      return true;\n      }\n   else {\n      return false;\n      }\n}\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int userYear;\n   cin >> userYear;\n   if (IsLeapYear(userYear) == true){\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 52, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   bool answer = false;\n   if ((userYear % 4 == 0 && userYear % 100 != 0) || userYear % 400 == 0) {\n      answer = true;\n   }\n   return answer;\n}\n\nint main() {\n   int input;\n   \n   cin >> input;\n   \n   if (IsLeapYear(input) == false) {\n      cout << input << \" is not a leap year.\" << endl;\n   }\n   else {\n      cout << input << \" is a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 54, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n      bool isLeapYear;\n      if ((userYear % 400 ==0) || ((userYear % 4 ==0) && (userYear % 100 !=0))) {\n      isLeapYear = 1;\n      }\n      else {\n      isLeapYear = 0;\n   }\n   return isLeapYear;\n}\n\nint main() {\n   int userYear = 0;\n   cin >> userYear;\n   if (IsLeapYear(userYear) == 1) {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n   \n\n   return 0;\n}\n", "class": 0, "version": 104, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n    \n\n   \n if(userYear % 4 == 0 && userYear% 100 != 0){\nreturn true;\n}\nelse if(userYear >= 100 && userYear % 400 == 0 ){\nreturn true;\n}\nelse{\nreturn false;\n}\n\n   \n   \n}\n\nint main() {\n   int userYear;\ncin >> userYear;\nif (IsLeapYear(userYear)== true){\n  cout << userYear << \" is a leap year.\" << endl;\n}\nelse if (IsLeapYear(userYear)== false){\n\n cout << userYear << \" is not a leap year.\" << endl;\n}\n   return 0;\n}\n", "class": 0, "version": 255, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \n\nbool IsLeapYear(int userYear) {\n   if ((userYear % 100 != 0) && (userYear % 4 == 0)) {\n      return true;\n   } \n   else if ((userYear % 100 == 0) && (userYear % 400 == 0)) {\n      return true;\n   }\n   else if (userYear % 4 != 0) {\n      return false;\n   }\n   else if (userYear % 400 != 0) {\n      return false;\n   }\n}\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   \n   int userYear;\n   \n   cin >> userYear;\n   \n   if (true) {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n   return 0;\n}\n", "class": 0, "version": 43, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear) {\n   bool trueOrFalse;\n if (userYear % 400 == 0) {\n      trueOrFalse = true;\n   }\n   else if ((userYear % 4 == 0) && (userYear % 100 !=0)) {\n      trueOrFalse = true;\n   }\n   else {\n      trueOrFalse = false;\n   }\n   return trueOrFalse;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int inputYear;\n   \n   cin >> inputYear;\n  \n   if (IsLeapYear(inputYear)) {\n      cout << inputYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << inputYear << \" is not a leap year.\" << endl;\n   }\n   \n   return 0;\n}\n", "class": 0, "version": 255, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear)\n{\n        if (userYear % 400 == 0) {\n        return true;\n    }\n    else if (userYear % 100 == 0) {\n        return false;\n    }\n    else if (userYear % 4 == 0) {\n        return true;\n    }\n    return false;\n}\n\nint main()\n{\n    int year;\n    \n    cin >> year;\n    \n        if(IsLeapYear(year))\n                cout << year << \" is a leap year.\"<<endl;\n        else\n                cout << year << \" is not a leap year.\"<<endl;\n    return 0;\n}", "class": 0, "version": 305, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n   if (userYear % 100 != 0 && userYear % 4 == 0)\n      return true;\n      // leap year if year is divisible by 4 and not a century year\n   else if (userYear % 100 == 0 && userYear % 400 == 0)\n      return true;\n      // if it is a century year, the year must be divisble by 4\n   else\n      return false;\n      // all other possible years are not leap years and are false\n}\n\nint main() {\n   int userYear;\n   cin >> userYear;\n   cout << userYear;\n   // initialize and get input for variable userYear\n   // output user year and then use if else statement to see what to output based on whether or not IsLeapYear is true or false\n   \n   if (IsLeapYear(userYear) == true)\n      cout << \" is a leap year.\\n\";\n   else\n      cout << \" is not a leap year.\\n\";\n\n   return 0;\n}\n", "class": 0, "version": 6, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   bool leapYear;\n   if ((userYear % 4 == 0) && (userYear % 100 !=0)) {\n      leapYear = true;\n   }\n   else if ((userYear % 100 == 0) && (userYear % 400 == 0)) {\n      leapYear= true;\n   }\n   else {\n      leapYear = false;\n   }\n   return leapYear;\n}\n   \n\nint main() {\n   int inputYear;\n   bool solution;\n   cin >> inputYear;\n   solution = IsLeapYear(inputYear);\n   \n   if (solution) {\n      cout << inputYear << \" is a leap year.\" <<endl;\n   }\n   else {\n      cout << inputYear << \" is not a leap year.\" <<endl;\n   }\n   \n   return 0;\n}\n", "class": 0, "version": 23, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear) {\n   bool ly = false;\n   if (userYear % 4 == 0 && userYear % 100 != 0) {\n      ly = true;\n   }\n   if (userYear % 400 == 0) {\n      ly = true;\n   }\n\n   return ly;\n}   \nint main() {\n   /* Type your code here. Your code must call the function. */\nint userYear = 0;\ncin >> userYear;\n\nif (IsLeapYear(userYear)) {\n   cout << userYear << \" is a leap year.\" << endl;\n}\nelse {\n   cout << userYear << \" is not a leap year.\" << endl;\n}\n   return 0;\n}\n", "class": 0, "version": 214, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n// Referencing 2.15 lab\n\nint DaysInFeb(int userYear) {\n   int totalDaysInFeb;\n   \n   if (userYear % 4 == 0) {\n      if (userYear % 100 == 0 && userYear % 400 == 0 && userYear != 1900) {\n         totalDaysInFeb = 29; \n      }\n      else {\n         totalDaysInFeb = 29;\n      }\n   }\n   if (userYear % 4 != 0) {\n      totalDaysInFeb = 28;\n   }\n   if (userYear == 1900) {\n      totalDaysInFeb = 28;\n   }\n   \n   return totalDaysInFeb;\n}\n\nint main() {\n   int userYear;\n   \n   cin >> userYear;\n\n   cout << userYear << \" has \";\n   cout << DaysInFeb(userYear) << \" days in February.\" << endl;\n\n   return 0;\n}\n", "class": 0, "version": 178, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   if((userYear % 100) == 0) {\n      if((userYear % 400) == 0) {\n         return true;\n      }\n      else {\n         return false;\n      }\n   }\n   else if ((userYear % 4) == 0) {\n      return true;\n   }\n   else {\n      return false;\n   }\n}\n\nint main() {\n   int userYear;\n   \n   cin >> userYear;\n   \n   if (IsLeapYear(userYear)) {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 33, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   bool isLeapYear;\n   if ((userYear % 100 == 0) && (userYear % 400 == 0)) {\n      isLeapYear = true;\n   }\n   else if ((userYear % 4 == 0) && (userYear % 100 != 0)) {\n      isLeapYear = true;\n   }\n   else {\n      isLeapYear = false;\n   }\n   \n   return isLeapYear;\n}\n\n\nint main() {\n   int userYear;\n   \n   cin >> userYear;\n   if (IsLeapYear(userYear) == true) {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 278, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   bool status = true;\n   \n    if (userYear == 1900) {\n      status = false;\n   }\n   else if (userYear % 4) {\n      status = false;\n   }\n   else if (userYear / 400) {\n      status = true;\n   }\n \n return status;\n   \n}\nint main() {\n   int inputYear;\n   //int actualYear;\n    \n   cin >> inputYear;\n   \n   if (IsLeapYear(inputYear) == 1) {\n      cout << inputYear << \" is a leap year.\";\n      cout << endl;\n   }\n   else {\n      cout << inputYear << \" is not a leap year.\";\n      cout << endl;\n   }\n   //actualYear = IsLeapYear(inputYear);\n\n   return 0;\n}\n", "class": 0, "version": 32, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int year) {\n   return (year % 400 == 0 || year % 100 != 0) && (year % 4 == 0);\n}\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n    int year;\n\n    cin >> year;\n    \n    if(IsLeapYear(year)) {\n       cout << year << \" is a leap year.\" << endl;\n   } else {\n       cout << year << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 40, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nint DaysInFeb(int userYear)\n{\n   int daysInFeb;\n   if ( userYear % 4 == 0 )\n   {\n      if ( userYear % 100 == 0)\n      {\n         if (userYear % 400 == 0)\n         {\n            daysInFeb = 29;\n         }\n         else\n         {\n          daysInFeb = 28;  \n         }\n      }\n      else\n      {\n         daysInFeb = 29;\n      }\n   }\n   else\n   {\n      daysInFeb = 28;\n   }\n   \n   return daysInFeb;\n}\n\nint main() \n{\n   int userYear;\n   int daysInFeb;\n   \n   cin >> userYear;\n   \n   daysInFeb = DaysInFeb(userYear);\n   \n   cout << userYear << \" has \" << daysInFeb << \" days in February.\" << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 111, "model": "Human"}
{"problem": 5, "code": "// Collaborated with Phillip Vu //\n\n#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   if((userYear % 4 != 0) || ((userYear % 100 == 0) && (userYear % 400 != 0))) {\n      return false;\n   }\n   else if(userYear % 4 == 0) {\n      return true;\n   }\n}\n   \nint main() {\n   int inputYear;\n   \n   cin >> inputYear;\n      \n   if(IsLeapYear(inputYear)) {\n      cout << inputYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << inputYear << \" is not a leap year.\" << endl;\n   } \n   return 0;\n}\n", "class": 0, "version": 8, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear)\n{\n   if (userYear % 400 == 0) {\n        return true;\n    }\n    else if (userYear % 100 == 0) {\n        return false;\n    }\n    else if (userYear % 4 == 0) {\n        return true;\n    }\n    return false;\n}\n\nint main()\n{\n    int year;\n    cin >> year;\n    if(IsLeapYear(year))\n      cout << year << \" is a leap year.\"<<endl;\n   else\n      cout << year << \" is not a leap year.\"<<endl;\n      \n   return 0;\n}\n", "class": 0, "version": 306, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear( int userYear )  {\n   \n   if ((userYear % 4) == 0 && (userYear % 100 != 0))  {\n      return true;\n   }\n   else if ((userYear % 100) == 0 && (userYear % 400) == 0)   {\n      return true;\n   }\n   else  {\n      return false;\n   }\n}   /* Define your function here */ \n\nint main() {\n   \n   int year; \n   cin >> year;\n   bool answer = IsLeapYear(year);\n   \n   if (answer) {\n      cout << year << \" is a leap year.\" << endl;\n   }\n   else  {\n      cout << year << \" is not a leap year.\" << endl;\n   }/* Type your code here. Your code must call the function. */\n\n   return 0;\n}\n", "class": 0, "version": 234, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear (int userYear) {\n   if (userYear % 400 == 0) {\n     return true;\n   }\n   else if ((userYear % 4 == 0) && (userYear % 100 != 0)) {\n      return true;\n   }\n   return false;\n}/* Define your function here */ \n\nint main() {\n   int userYear;\n   \n   cin >> userYear;\n   \n   if (IsLeapYear(userYear)) {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n   \n   /* Type your code here. Your code must call the function. */\n\n   return 0;\n}\n", "class": 0, "version": 33, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n   bool IsLeapYear = false;\n   if (userYear % 4 == 0) {\n      if (userYear % 100 == 0) {\n         if (userYear % 400 == 0) {\n            IsLeapYear = true;\n         }\n      } \n      else IsLeapYear = true;\n   }\n   return IsLeapYear;\n}\n/* Define your function here */ \n\nint main() {\n   int userYear;\n   cin>>userYear;\n   bool flag = IsLeapYear(userYear);\n   if(flag == true)  \n      cout<<userYear<<\" is a leap year.\" << endl; \n   else \n      cout<<userYear<<\" is not a leap year.\" << endl;\n   /* Type your code here. Your code must call the function. */\n\n   return 0;\n}\n", "class": 0, "version": 86, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear (int userYear) {\n   bool resultYear;\n   if (( userYear % 4 == 0 && userYear % 100 != 0 ) || userYear % 400 == 0 ) {\n      resultYear = true;\n   }\n   else {\n      resultYear = false;\n   }\n   return resultYear;\n}\n/* Define your function here */ \n\nint main() {\n   int userYear;\n   \n   cin >> userYear;\n   \n   if (IsLeapYear(userYear) == true ) {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n   /* Type your code here. Your code must call the function. */\n\n   return 0;\n}\n", "class": 0, "version": 155, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */\nbool IsLeapYear(int userYear) {\n   bool trueOrFalse = false;\n   \n   if (userYear % 4 == 0) {\n      trueOrFalse = true;\n   }\n   \n   if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n         trueOrFalse = true;\n      }\n      else {\n         trueOrFalse = false;\n      }\n   }\n   \n   return trueOrFalse;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int userYear;\n   \n   cin >> userYear;\n   \n   if (IsLeapYear(userYear)) {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 235, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   int year;\n   year = remainder(year, 100);\n   if ((remainder(year, 4) == 0)) {\n      return true;}\n   else {\n      return false;}}\n\nint main() {\n   int year;\n   cin >> year;\n   if (IsLeapYear(true)) {\n      cout << year << \" is a leap year.\" << endl;}\n   else{\n      cout << year << \" is not a leap year.\" << endl;}\n   \n   return 0;\n}\n", "class": 0, "version": 72, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   bool test;\n   int y;\n   int z;\n   int w;\n   \n   y = userYear % 4;\n   \n   if (y == 0) {\n      z = userYear % 100;\n      if (z == 0) {\n         w = userYear % 400;\n         if (w == 0) {\n            test = true;\n         }\n         else {\n            test = false;\n         }\n      }\n      else {\n         test = true;\n      }\n   }\n   else {\n      test = false;\n   }\n   return test;\n}  \n\nint main() {\n   int x;\n   \n   cin >> x;\n   if (IsLeapYear(x) == true) {\n      cout << x << \" is a leap year.\" << endl;\n   }\n   else if (IsLeapYear(x) == false) {\n      cout << x << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 27, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear) {\n   bool leapYr;\n   if ((leapYr % 100 == 0)&& (leapYr % 400)) {\n      cout << leapYr << \" is a leap year.\" << endl;\n   }\n   else if ((leapYr % 4 == 0) && (leapYr % 400 == 0)) {\n      cout << leapYr << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << leapYr << \" is not a leap year.\" << endl;\n   }\n   \n   return leapYr;\n}\n   \nint main() {\n   /* Type your code here. Your code must call the function. */\n  int yearVal;\n  cin >> yearVal;\n \n   cout << IsLeapYear(yearVal);\n   return 0;\n}\n", "class": 0, "version": 50, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear){\n   bool IsLeapYear = false;\n   if(userYear % 4 == 0){\n      IsLeapYear = true;\n   }\n   if ((userYear % 100 == 0) && (userYear % 400 !=0))\n   {\n      IsLeapYear = false;\n   }\n   return IsLeapYear;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int Year;\n   cin >> Year;\n\n   if(IsLeapYear(Year)){\n      cout << Year << \" is a leap year.\" << endl;\n   }\n   else{\n      cout << Year << \" is not a leap year.\" << endl;\n   }\n   \n\n   return 0;\n}\n", "class": 0, "version": 51, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   \n   if ( userYear % 100 == 0) {\n      if ( userYear % 400 == 0 ){\n       return true;  \n      }\n      else {\n         return false;\n      }\n   }\n   \n   else if ( userYear % 4 == 0 ) {\n      return true;\n   }\n   else {\n      return false;\n   }   \n}\nint main() {\n   \n   int userYear;\n   bool leapYear;\n   \n   cin >> userYear;\n   \n   leapYear = IsLeapYear(userYear);\n   \n   if ( leapYear == 1 ) {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userYear << \" is not a leap year.\" << endl;\n   } \n\n//cout << leapYear << endl;\n   return 0;\n}\n", "class": 0, "version": 47, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear)\n{\n   if( userYear % 100 == 0 )\n   {\n      if (userYear % 400 == 0 )\n      {\n         return true;\n      }\n      else{\n         return false;\n      }\n   }\n   else if (userYear % 4 == 0) {\n      return true;\n   }\n   else {\n      return false;\n   }\n}\n\nint main() {\n\n   \n   int userYear1;\n   cin >> userYear1;\n   \n   if( IsLeapYear(userYear1) == true ) \n   {\n      cout << userYear1 << \" is a leap year.\" << endl;\n   }\n   else\n   {\n      cout << userYear1 << \" is not a leap year.\" << endl;\n   }\n   \n   return 0;\n}\n", "class": 0, "version": 131, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n   int mod400;\n   int mod4;\n   \n   mod400 = userYear % 400;\n   mod4 = userYear % 4;\n   \n   if ((mod400 == 0) || (mod4 == 0)){\n      return true;\n   }\n   else{\n      return false;\n   }\n}\n\n\nint main() {\n   int userYear;\n   \n   cin>>userYear;\n   \n   if (IsLeapYear(userYear)){\n      cout << userYear << \" is a leap year.\"<<endl;\n   }\n   else{\n      cout << userYear << \" is not a leap year.\"<<endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 35, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   bool isLeapYear = false;\n   if (userYear % 100 != 0 && userYear % 4 == 0) {\n      isLeapYear = true;\n   }\n   if (userYear % 400 == 0) {\n      isLeapYear = true;\n   }\n   return isLeapYear;\n\n}\n\nint main() {\n   int userYear = 0;\n   cin >> userYear;\n   \n   if (IsLeapYear(userYear)) {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 206, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n   bool leapyear;\n    if((userYear % 100) != 0 && ( userYear % 4) == 0){\n      leapyear = true;\n   }\n   else if((userYear % 400) == 0 ) {\n          leapyear = true;\n   }\n   else {\n      leapyear = false;\n   }\n   if(leapyear){\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else{\n      cout << userYear << \" is not a leap year.\";cout <<endl;\n   }\n   return leapyear;\n}\n\nint main() {\n     int inputYear;\n   cin >> inputYear;\n    if(IsLeapYear(inputYear)){\n   }\n      else{\n   cout << inputYear << \" is not a leap year.\" << endl;\n      }\n   \n\n   return 0;\n}\n", "class": 0, "version": 52, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear (int userYear) {\n     if (((userYear % 4 == 0) && (userYear % 100 != 0)) || (userYear % 400 == 0)) {\n      return true;\n     }\n     else {\n      return false;\n     }\n}\n\nint main() {\n   /* Tbh why did I decide to become a CS major LOL*/\n   int userYear; \n   cin >> userYear; \n   if (bool IsLeapYear = true) {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userYear << \" is not a leap year.\" << endl;\n}\n   return 0;\n}\n", "class": 0, "version": 226, "model": "Human"}
{"problem": 5, "code": "//Submitted Late Form\n//Received help from Mira Samarneh\n#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n   if (userYear % 100 == 0 && userYear % 400 != 0){\n      return false;\n}\n   if (userYear % 400 == 0 && userYear % 100 != 0){\n      return true;\n}\n   if (userYear % 4 == 0){\n      return true;\n}\n   else {\n      return false;\n}\n}\nint main(){\n   int userYear;\n   \n   cin >> userYear;\n   if (userYear % 400 == 0 && userYear % 100 != 0){\n      cout << IsLeapYear(userYear) << \" is a leap year.\" << endl;\n}\n   else if (userYear % 4 == 0){\n      cout << IsLeapYear(userYear) << \" is a leap year.\" << endl;\n}\n   else{\n      cout << IsLeapYear(userYear) << \" is not a leap year.\" << endl;\n}\n   return 0;\n}\n", "class": 0, "version": 51, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear (int userYear) \n{\n   int GregorianCalenderYears1;\n   int GregorianCalenderYears2;\n   int GregorianCalenderYears3;\n   \n   bool leapYear = false;\n   \n   GregorianCalenderYears1 = userYear%4; // divisible by 4\n   GregorianCalenderYears2 = userYear%400; //divisible by 400\n   GregorianCalenderYears3 = userYear%100; //century\n   \n   if (GregorianCalenderYears2 == 0)\n   {\n      if (GregorianCalenderYears3 ==0)\n      {\n      leapYear = true;\n      }\n   }\n   \n   else if (GregorianCalenderYears1 == 0){\n      leapYear = true;\n   }\n   return leapYear;\n}\n\n\n      \n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   bool i = false;\n   \n   int GregorianCalenderYears;\n   cin >> GregorianCalenderYears;\n   \n   i = IsLeapYear (GregorianCalenderYears);\n   \n   if (i != true)\n   {\n      cout << GregorianCalenderYears << \" is not a leap year.\" << endl;\n   }\n   else\n   { \n      cout << GregorianCalenderYears << \" is a leap year.\" << endl;\n   }\n   \n\n   return 0;\n}\n", "class": 0, "version": 161, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\nbool IsLeapYear(int userYear)\n{\n   bool leapYear = false;\n   if(userYear % 100 == 0)\n   {\n      if(userYear % 400 == 0)\n      {\n         leapYear = true;\n      }\n   }\n   else\n   {\n      if(userYear % 4 == 0)\n      {\n         leapYear = true;\n      }\n   }\n   \n   \n   return leapYear;\n}\n\n\nint main()\n{\n  int input;\n  \n  cin >> input;\n  \n  if(IsLeapYear(input))\n  {\n     cout << input << \" is a leap year.\" << endl;\n  }\n  else\n  {\n     cout << input << \" is not a leap year.\" << endl;\n  }\n\n   return 0;\n}\n", "class": 0, "version": 240, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   if (((userYear % 4 == 0) && (userYear % 100 != 0)) || (userYear % 400 == 0)) {\n      return true;\n   }\n   else {\n      return false;\n   }\n}\n\nint main() {\n   int year;\n   cin >> year;\n   \n   if(IsLeapYear(year)) {\n      cout << year <<\" is a leap year.\" << endl;\n   }\n   else {\n      cout << \" is not a leap year.\";\n   }\n   \n\n   return 0;\n}\n", "class": 0, "version": 67, "model": "Human"}
{"problem": 5, "code": "// help from Tegh Gill\n#include <iostream>\nusing namespace std;\n\nint DaysInFeb(int userYear){\n   bool leapYear = true;\n   \n   if (userYear % 4 == 0)\n   {\n      if (userYear % 400 != 0 && userYear % 100 == 0)\n      {\n         leapYear = false;}\n   }\n   else \n   {\n      leapYear = false;}\n      \n   if (leapYear == true)\n   {\n      cout << userYear;\n      cout << \" has 29 days in February.\" << endl;\n      return 29;\n      }\n   else if (leapYear == false)\n   {\n      cout << userYear;\n      cout << \" has 28 days in February.\" << endl;\n      return 28;}\n   }\n\n\nint main() {\n   int year;\n   \n   cin >> year;\n   \n   DaysInFeb(year);\n   \n\n   return 0;\n}\n", "class": 0, "version": 170, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n   \n   if (userYear%100 == 0){\n      if (userYear%400 == 0)\n         return true;\n      else\n         return false;\n   }\n   else{\n      if (userYear%4 == 0)\n         return true;\n      else\n         return false;\n   }\n}\n\nint main() {\n   int year;\n   cin >> year;\n   \n   if (IsLeapYear(year))\n      cout << year << \" is a leap year.\" << endl;\n   else\n      cout << year << \" is not a leap year.\" << endl;\n\n   return 0;\n}\n", "class": 0, "version": 251, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \n\nbool IsLeapYear(int userYear){\n    if(((userYear % 4 ==0)&&(userYear % 100 != 0))||(userYear%400==0)){\n       return true;\n   }\n   else{\n      return false;\n   }\n}\n\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   cout << boolalpha;\n   int x;\n   cin >> x;\n   if(IsLeapYear(x) == true){\n      cout << x << \" is a leap year.\" << endl;\n   }\n   else if(IsLeapYear(x) == false){\n      cout << x << \" is not a leap year.\" << endl;\n   }\n   return 0;\n}\n", "class": 0, "version": 49, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n// worked with lab students and lab TA Stanley Zhao\n//Received help from former CS010A student Minal Walvekar\n\nint DaysInFeb(int userYear) {\n   int dayValue;\n   // code from lab 2.15\n   if (userYear % 4 == 0) {\n      dayValue = 29;\n   } \n   if (userYear % 400 == 0) {\n     dayValue = 29;\n   }\n   if ((userYear % 100 == 0) && (userYear % 400 != 0)) {\n      dayValue = 28;\n   }\n   if (userYear % 4 != 0) {\n      dayValue = 28;\n   }\n   return dayValue;\n  }\n   \n\nint main() {\n   int userYear;\n   int inputedDay;\n   \n   cin >> userYear;\n   \n   inputedDay = DaysInFeb(userYear);\n   \n   cout << userYear << \" has \" << inputedDay << \" days in February.\" << endl;\n\n   return 0;\n}\n", "class": 0, "version": 153, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear) {  \n   bool leapYear = false;\n   \n   if (( (userYear % 4 == 0) && (userYear % 400 != 0) ) && (userYear % 100 != 0) ) {\n      leapYear = true;\n   }\n   \n   else if ( ((userYear % 100 == 0) && (userYear % 400 == 0)) && (userYear % 4 == 0) ) {\n      leapYear = true;\n   }      \n   \n   else {\n      leapYear = false;\n   } \n   return leapYear;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int numYear;\n   \n   cin >> numYear;\n   \n   if(IsLeapYear(numYear) == true) {\n      cout << numYear << \" is a leap year.\" << endl;\n   }\n   \n   else {\n      cout << numYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 23, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nint DaysInFeb(int userYear) {\n   int Days;\n   \n   Days = 29;\n   \n   if (userYear % 4 == 0) {\n      if (userYear % 100 == 0 && userYear % 400 != 0) {\n         Days = 28;\n      }\n   }\n   else {\n      Days = 28;\n   }\n   \n   \n   return Days;\n}\n\nint main() {\n   int userYear;\n   \n   cin >> userYear;\n   \n      cout << userYear << \" has \" << DaysInFeb(userYear) << \" days in February.\" << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 30, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear); // return true or false if year is leap\n\nint main() {\n   int inputYear;\n   \n   cin >> inputYear;\n   \n   if(IsLeapYear(inputYear)) {\n      cout << inputYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << inputYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n\nbool IsLeapYear(int userYear) {\n   bool leapYear;\n   \n   if(userYear % 4 == 0) { //if divisible by 4 then leap year\n      leapYear = true;\n   }\n   if((userYear % 100 == 0) && (userYear % 400 != 0)) { //unless divisible by 100 but not 400 then not a leap year\n         leapYear = false;\n   }\n   \n   return leapYear;\n}\n      \n", "class": 0, "version": 11, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   if (userYear % 4 == 0 && userYear % 100 != 0) {\n      return true;\n   }\n   else if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n         return true;\n      }\n      else {\n         return false;\n      }\n   } \n   else {\n      return false;\n   }\n}\n\nint main() {\n   int userYear;\n   cin >> userYear;\n   if (IsLeapYear(userYear) == true) {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 32, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){ \n   bool yes;\n   \n   if ((userYear%4==0 || userYear%400==0) && userYear != 1900) {yes=true;}\n   \n   else {yes=false;}\n   \nreturn yes; }\n\n\n\nint main() {\nint year;\n\ncin >> year;\n\nif (IsLeapYear(year)==true) {cout << year << \" is a leap year.\" << endl;}\n\nelse if (IsLeapYear(year)==false) { cout << year << \" is not a leap year.\" << endl;}\n\n\n   return 0;\n}\n", "class": 0, "version": 79, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \n\nint main() {\n   int inputYear;\n   \n   cin >> inputYear;\n\n   //cout << inputYear << \" is \";\n\n   if ((inputYear % 4) == 0) {\n      if ((inputYear % 100 == 0) && (inputYear % 400 != 0)){\n         cout << inputYear << \" has 28 days in February.\" << endl;\n      }\n      else {\n         cout << inputYear << \" has 29 days in February.\" << endl;\n      }\n   }\n   return 0;\n}\n", "class": 0, "version": 159, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n//Helped Derek Tran//\n\nint DaysInFeb(int userYear) {\n   if ((userYear % 4 == 0) && ((userYear % 100 != 0) || (userYear % 400 == 0))) {\n      return 29;\n   }\n   else {\n      return 28;\n   }\n}\n\nint main() {\n   int numYear;\n   cin >> numYear;\n   \n   cout << numYear << \" has \" << DaysInFeb(numYear) << \" days in February.\" << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 138, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear) {\n   string centuryCheck = to_string(userYear);\n   if(centuryCheck.at(2) == '0' && centuryCheck.at(3) == '0') {\n      if(userYear % 400 == 0) {\n         return true;\n      }\n      else {\n         return false;\n      }\n   }\n   else {\n      if(userYear % 4 == 0) {\n         return true;\n      }\n      else {\n         return false;\n      }\n   }\n}\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int userYear = 0;\n   \n   cin >> userYear;\n   \n   if(IsLeapYear(userYear) == true) {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 261, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nint DaysInFeb(int userYear) {\n   int num;\n   if (userYear % 100 == 0 && userYear % 4 == 0) {\n      if (userYear % 400 == 0 && userYear % 4 == 0) {\n         num = 29;\n      }\n   }\n   if (userYear % 100 == 0 && userYear % 4 == 0 && userYear % 400 != 0) {\n      num = 28;\n   }\n   if (userYear % 100 != 0 && userYear % 4 == 0) {\n      num = 29;\n   }\n   else if (userYear % 100 != 0 && userYear % 4 != 0) {\n      num = 28;\n   }\n   return num;\n}\n         \n\nint main() {\n   int year;\n   cin >> year;\n   cout << year << \" has \" << DaysInFeb(year) << \" days in February.\" << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 115, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint DaysInFeb(int useryear)\n{\n    int a;\n    if (useryear%4 == 0)\n    {\n        \n        if(useryear%100 != 0)\n        {\n            a = 29;\n        }\n        else if(useryear%100 == 0 && useryear%400 == 0)\n        {\n            a = 29;\n        }\n        else{\n           a = 28;\n        }\n    }   \n    else\n    {\n        a = 28;\n    }\n    \n    return a;\n}\n\nint main() {\n\n   int year;\n   cin>>year;\n   int a;\n   a = DaysInFeb(year);\n   \n   cout<<year<<\" has \"<<a<<\" days in February.\"<<endl;\n   return 0;\n}\n", "class": 0, "version": 14, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */\nint DaysInFeb(int userYear) {\n   if (userYear % 4 == 0) {\n      if (userYear % 100 == 0) {\n         if (userYear % 400 == 0) {\n            return 29;\n         }\n         else {\n            return 28;\n         }\n      }\n      else {\n         return 29;\n      }\n   }\n   else {\n      return 28;\n   }\n}\n   \n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int userYear;\n   cin >> userYear;\n   cout << userYear << \" has \" << DaysInFeb(userYear) << \" days in February.\" << endl;\n\n   return 0;\n}\n", "class": 0, "version": 8, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear)\n{\n bool leap;\n if(userYear % 4 == 0)\n {\n    leap = true;\n    if(userYear % 100 == 0 && userYear % 400 != 0)\n    {\n     leap = false;  \n    }\n }\n return leap;\n}\n\nint main() {\n   int userYear;\n   \n   cin >> userYear;\n   \n   if(IsLeapYear(userYear)){\n   cout << userYear << \" is a leap year.\" << endl;\n   }\n   else\n   {\n    cout << userYear << \" is not a leap year.\" << endl;  \n   }\n\n   return 0;\n}\n", "class": 0, "version": 29, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nint DaysInFeb(int userYear){\n   bool IsLeapYear;\n   int days;\n   \n   IsLeapYear = false;\n   \n   if ((userYear % 400 != 0) and (userYear % 4 == 0) and (userYear % 100 == 0)) {\n      //Put \"not a leap year.\\n\" to output\n      IsLeapYear = false;\n   }\n      \n   else if (userYear % 4 == 0) {\n      //Put \"a leap year.\\n\" to output\n      IsLeapYear = true;\n   }\n      \n   //else \n      //Put \"not a leap year.\\n\" to output\n      \n   if (IsLeapYear) { \n      days = 29;\n   }\n   else {\n      days = 28;\n   }\n   \n   return days;\n}\n   \n   \n   \n   \n   \n   \n   \n\nint main() {\n   int year;\n   \n   cin >> year;\n   \n   cout << year << \" has \" << DaysInFeb(year) << \" days in February.\" << endl;\n\n   return 0;\n}\n", "class": 0, "version": 165, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear( int userYear) {\n   if ( (userYear % 100 != 0) && (userYear % 4 == 0) ) {\n      return true;\n   }\n   else if ( (userYear % 100 == 0) && (userYear % 400 == 0) ) {\n      return true;\n   }\n   else {\n      return false;\n   }\n}\n\nint main() {\n   int inputYear;\n   \n   cin >> inputYear;\n   \n   if (IsLeapYear(inputYear) == true) {\n      cout << inputYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << inputYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 224, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) { \n   bool isLeapYear=true;\n   \n   isLeapYear= (userYear%4 == 0 && userYear%100 !=0) || (userYear%400==0);\n   \n   if (isLeapYear) {    \n   return true;\n   }\n   else {\n   return false;\n   }\n}\n\nint main() {\n   int userYear;\n   \n   cin >> userYear; \n   \n   if (IsLeapYear(userYear)==true) {\n   cout<<userYear<<\" is a leap year.\"<<endl;\n   }\n   else {\n      cout<<userYear<<\" is not a leap year.\"<<endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 84, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   bool isLeapYear;\n   \n   if ((userYear % 4 == 0) && ((userYear % 400 == 0) || (userYear % 100 != 0))) {\n      isLeapYear = true;\n   }\n   else {\n      isLeapYear = false;\n   }\n   \n   return isLeapYear;\n}\n\nint main() {\n   int userYear;\n   \n   cin >> userYear;\n   \n   if (IsLeapYear(userYear)) {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 210, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nint DaysInFeb(int userYear) {\n   int numDays;\n   if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n         numDays = 29;\n      }\n      else {\n         numDays = 28;\n      }\n   }\n   else if (userYear % 4 == 0) {\n      numDays = 29;\n   }\n   else {\n      numDays = 28;\n   }\n   return numDays;\n}\n\n\nint main() {\n   double inputYear;\n   \n   cin >> inputYear;\n   \n   cout << inputYear << \" has \" << DaysInFeb(inputYear) << \" days in February.\" << endl;\n\n   return 0;\n}\n", "class": 0, "version": 29, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n   bool year;\n   \n    if((userYear % 4 == 0 && userYear % 100 != 0) || (userYear % 400 == 0 )){\n       year = true;\n    }\n    else{\n       year = false;\n    }\n       return year;\n   \n}\n\n\nint main() {\n   int num;\n   bool year;\n   \n   cin >> num;\n   year = IsLeapYear(num);\n   \n   if(year){\n      cout << num << \" is a leap year.\" << endl;\n   }\n   else{\n      cout << num << \" is not a leap year.\" << endl;\n   }\n   \n   \n   \n   \n   \n\n   return 0;\n}\n", "class": 0, "version": 16, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nint DaysInFeb(int userYear) {\n\n   if ((userYear % 4 == 0) && (userYear % 100 != 0)) { // anything % 4 thats NOT a century\n      return 29;\n   }\n   \n   if ((userYear % 100 == 0) && (userYear % 4 == 0)) { // anything thats a century\n      if (userYear % 400 == 0) {\n         return 29;\n      }\n      else {\n         return 28; // only 2 options so dont need else if\n      }\n   }\n   \n   else {\n      return 28;\n   }\n}\n\nint main() {\n   int userYear;\n   \n   cin >> userYear;\n   \n   cout << userYear << \" has \" << DaysInFeb(userYear) << \" days in February.\" << endl;\n\n   return 0;\n}\n", "class": 0, "version": 186, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear)\n{\n    // year must be divisible by 4\n    // year is century year must be divisible by 400\n    if (( userYear % 400 == 0) || (( userYear % 4 == 0 ) && ( userYear % 100 != 0)))\n    {\n        // year is leap year return true\n        return true;\n    }\n    else\n    {\n        // year is not leap year return false\n        return false;\n    }\n}\nint main() {\n   /* Type your code here. Your code must call the function. */\n // declaring a variable userYear of type integer used to store year entered by the user\n    int userYear;\n\n    // reading year entered by the user\n    cin>>userYear;\n\n    // calling function IsLeapYear with parameter userYear store return value to result\n    bool result = IsLeapYear(userYear);\n\n    // compare result with bool value\n    if(result==true)\n    {\n        // result is true then leap year\n        cout<<userYear<<\" is a leap year.\"<<endl;\n    }\n    else\n    {\n        // result is false then not leap year\n        cout<<userYear<<\" is not a leap year.\"<<endl;\n    }\n   return 0;\n}\n", "class": 0, "version": 94, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nint DaysInFeb(int userYear){\n   \n   if (userYear % 100 == 0){\n      if (userYear % 400 == 0){\n         return 29;\n      }\n      else{\n         return 28;\n      }\n   }\n   if (userYear % 4 == 0){\n      return 29;\n   }\n   else {\n      return 28;\n   }\n}\n\nint main() {\n   int year;\n   \n   \n   cin >> year;\n   \n    cout << year << \" has \" << DaysInFeb(year) << \" days in February.\" << endl;\n\n   return 0;\n}\n", "class": 0, "version": 110, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear)\n{\n   bool leapYear = false;\n   if((userYear % 4 ==0 && userYear % 400 == 0) || (userYear % 4 == 0 && userYear % 100 != 0))\n   {\n      leapYear = true;\n      return leapYear;\n   }\n   \n   else\n   {\n      return leapYear;\n   }\n   \n}\n\nint main() {\n   int userYear;\n   bool leapYear;\n   cin >> userYear;\n   leapYear = IsLeapYear(userYear);\n   if(leapYear)\n   {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else\n   {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 186, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n   if(userYear%100==0){\n      if(userYear%400==0){\n         return true;\n      }\n      else{\n         return false;\n      }\n   }\n   if(userYear%4==0){\n      return true;\n   }\n   else{\n      return false;\n   }\n}\n\n\nint main() {\n   int a;\n   cin >> a;\n   if(IsLeapYear(a)){\n      cout << a << \" is a leap year.\" << endl;\n   }\n   else{\n      cout << a << \" is not a leap year.\" <<endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 35, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n// Got help from Ramtin Ghafoori //\nint DaysInFeb (int userYear)  {\n   int numDays;\n   \n   if (((userYear % 4 == 0) && (userYear % 100 != 0)) || ((userYear % 400 == 0) && (userYear % 100 == 0)))   {\n      numDays = 29;\n   }\n   else  {\n      numDays = 28;\n   }\n   return numDays;\n}\nint main() {\n   int userYear;\n   \n   cin >> userYear;\n   \n   cout << userYear << \" has \" << DaysInFeb (userYear) << \" days in February.\" << endl;\n\n   return 0;\n}\n", "class": 0, "version": 101, "model": "Human"}
{"problem": 5, "code": "// mike helped me out with this!\n\n#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear){\n   bool leapYear;\n   if ((userYear %100 == 0) && (userYear %400 == 0)){\n      leapYear = true;\n   }\n   else if ((userYear %100 ==0) && (userYear %400 != 0)){\n      leapYear = false;\n   }\n   else if (userYear %4 != 0){\n      leapYear = false;\n   }\n   else if (userYear %4 == 0){\n      leapYear = true;\n   }\n   else {\n      leapYear = false;\n   }\n   return leapYear;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int year;\n   cin >> year;\n   if (IsLeapYear(year)){\n      cout << year << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << year << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 5, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear) {\n   bool leapYear = false;\n   if(userYear % 4 == 0) {\n      if(userYear % 100 == 0) {\n         if(userYear % 400 == 0) {\n            leapYear = true;\n         }\n      } else {\n         leapYear = true;\n      }\n   }\n   return leapYear;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int userYear;\n   \n   cin >> userYear;\n   \n   if(IsLeapYear(userYear) == true) {\n      cout << userYear << \" is a leap year.\" << endl;\n   } else {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 24, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear)\n{\n   bool leapYear;\n   if((userYear % 4 == 0) && (userYear % 100 != 0))\n   {\n      leapYear = true;\n   }\n   else if((userYear % 400 == 0))\n   {\n      leapYear = true;\n   }\n   else\n   {\n      leapYear = false;\n   }\n   \n   return leapYear;\n}\n      /* Define your function here */ \n\nint main() {\n   int userInput;\n   bool isLeapYear;\n   \n   cin >> userInput;\n   \n   isLeapYear = IsLeapYear(userInput);\n   \n   if ( isLeapYear)\n   {\n      cout << userInput << \" is a leap year.\" << endl;\n   }\n   else\n   {\n       cout << userInput << \" is not a leap year.\" << endl;\n   }\n   /* Type your code here. Your code must call the function. */\n\n   return 0;\n}\n", "class": 0, "version": 201, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nint DaysInFeb(int userYear)\n{\n   int numDays;\n   \n   if (userYear % 4 == 0)\n   {\n      numDays = 29;\n      cout << userYear << \" has \" <<  numDays << \" days in February.\" << endl;\n   }\n   if (userYear % 400 == 0)\n   {\n      numDays = 29;\n      cout << userYear << \" has \" << numDays << \" days in February.\" << endl;\n   }\n   if (userYear % 4 ==  1 || userYear % 4 == 2 || userYear % 4 == 3)\n   {\n      numDays = 28;\n      cout << userYear << \" has \" << numDays << \" days in Febraury.\" << endl;\n   }\n  return numDays;\n \n}\n\nint main() {\n   int userYear;\n   \n   cin >> userYear;\n   \n   cout << DaysInFeb(userYear);\n\n   return 0;\n}\n", "class": 0, "version": 69, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n   if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0)\n                return true;\n            else\n                return false;\n         }\n        else\n            return true;\n      }\n   else\n      return false;\n}\n\nint main() {\n   int userYear;\n   \n   cin >> userYear;\n   \n   if (IsLeapYear(userYear) == true){\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 243, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear (int userYear) {\n   bool leapYear;\n   \n   leapYear = true;\n   \n   if (userYear % 4 != 0) {\n      leapYear = false;\n   }\n   if (userYear % 100 == 0) {\n      if (userYear % 400 != 0) { \n         leapYear = false;\n      }\n   }\n   return leapYear;\n}\n\nint main() {\n   int year; \n   \n   cin >> year;\n   \n   if (IsLeapYear (year) == 1) {\n      cout << year << \" is a leap year.\";\n   }\n   else {\n      cout << year << \" is not a leap year.\";\n   }\n   cout << endl;\n   \n\n\n   return 0;\n}\n", "class": 0, "version": 209, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */\nbool IsLeapYear(int userYear) {\n   if (userYear % 400 == 0) {\n      return true;\n   }\n   else if (userYear % 4 == 0) {\n      if (userYear % 100 == 0) {\n         return false;\n      }\n      else {\n         return true;\n      }\n   }\n   else {\n      return false;\n   }\n}\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int userInput;\n   \n   cin >> userInput;\n   \n   if (IsLeapYear(userInput)) {\n      cout << userInput << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userInput << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 180, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear){\n   bool isLeapYear = false;\n   if (userYear % 4 == 0){\n      isLeapYear = true;\n      if (userYear % 100 == 0 && not (userYear % 400 == 0)) {\n         isLeapYear = false;\n      }\n   }\n   return isLeapYear;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int year;\n   cin >> year;\n   if (IsLeapYear(year) == true) {\n      cout << year << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << year << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 244, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n   if(userYear%100==0){\n      if(userYear%400==0)\n         return true;\n      else\n         return false;\n   }\n   else if(userYear%4==0){\n      return true;\n   }\n   else{\n      return false;\n   }\n}\n      /* Define your function here */ \n\nint main() {\n   int userYear;\n   \n   cin>> userYear;\n   \n   if(IsLeapYear(userYear))\n      cout<< userYear << \" is a leap year.\" << endl;\n   else\n      cout<< userYear<< \" is not a leap year.\"<<endl;/* Type your code here. Your code must call the function. */\n\n   return 0;\n}\n", "class": 0, "version": 287, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n   bool IsLeapYear ( int userYear ) { \n   bool leapYear = false ; \n   \n         if ( userYear % 400 == 0) \n      {\n         leapYear = true ;\n      }\n      else if ( userYear % 4 == 0 && userYear % 100 != 0 ) \n         { \n            leapYear = true ;\n         }\n      else { leapYear = false; }\n         \n         return leapYear ;\n      }\n   \n/* Define your function here */ \n\nint main() {\n   \n   int userYear;\n   \n   cin>> userYear ;\n   \n   bool IsLeapYear ( userYear ) ; \n      if ( IsLeapYear == true ) { \n         cout << userYear << \" is a leap year.\" << endl; \n      }\n         else { \n            cout << userYear << \" is not a leap year.\" << endl; \n         }\n   \n   \n   \n\n   return 0;\n}\n", "class": 0, "version": 250, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   bool leapYear = false;\n   \n   if ((userYear % 4) == 0) {         // inputYear is divisible by 4\n      if ((userYear % 100) == 0) {    // inputYear is divisible by 100 (century year)\n         if ((userYear % 400) == 0) { // inputYear is divisible by 400\n            leapYear = true;\n         }\n         else {                       // inputYear is not divisible by 400\n            leapYear = false;\n         }\n      }\n      else {                          // inputYear is not divisible by 100\n         leapYear = true;\n      }\n   }\n   else {                             // inputYear is not divisible by 4\n      leapYear = false;\n   }\n   \n   return leapYear;\n}\n\nint main() {\n   int userInput;\n   \n   cin >> userInput;\n   \n   if (IsLeapYear(userInput)) {\n      cout << userInput << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userInput << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 120, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear){\n   if(userYear % 400 == 0){\n      return true;\n   }\n   else if(userYear % 100 == 0){\n      return false;\n   }\n   else if(userYear % 4 == 0){\n      return true;\n   }\nreturn false;\n}\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int Year;\n   cin >> Year;\n   \n   if (IsLeapYear(Year)){\n      cout << Year << \" is a leap year.\" << endl;\n   }\n   else{\n      cout << Year << \" is not a leap year.\" << endl;\n   }\n   \n   return 0;\n}\n", "class": 0, "version": 76, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   \n   if (userYear % 4 == 0) {\n      if (userYear % 100 == 0) {\n         if (userYear % 400 == 0) {\n            return true;\n         }\n         else {\n            return false;\n         }\n      }\n      else {\n         return true;\n      }\n   }\n   else {\n      return false;\n   }\n}\n\nint main() {\n   int inputYear;\n   \n   cin >> inputYear;\n   \n   if ((IsLeapYear(inputYear)) == false) {\n      cout << inputYear << \" is not a leap year.\" << endl;\n   }\n   else {\n      cout << inputYear << \" is a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 180, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nint DaysInFeb(int userYear) {\n   int d; // d = days in February\n   if ( (userYear % 400 == 0) && (userYear % 4 == 0) ) {\n      d = 29;\n   }\n   else if ( (userYear % 100 != 0) && (userYear % 4 == 0) ) {\n      d = 29;\n   }\n   else {\n      d = 28;\n   }\n   return d;\n}\n\nint main() {\n   int userYear;\n   cin >> userYear;\n   cout << userYear << \" has \" << DaysInFeb(userYear) << \" days in February.\" << endl;\n\n   return 0;\n}\n", "class": 0, "version": 50, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear)\n{\n   bool leapY = false;\n   if(userYear%400==0)\n   {\n      leapY = true;\n   }\n   else if(userYear%100 == 0)\n   {\n      leapY = false;\n   }\n   else if(userYear%4==0)\n   {\n      leapY = true;\n   }\n   else\n   {\n      leapY = false;\n   }\n   return leapY;\n}\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int x;\n   cin >> x;\n   \n   if(IsLeapYear(x))\n   {\n      cout << x << \" is a leap year.\" << endl; \n   }\n   else\n   {\n      cout << x << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 268, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear (int userYear) {\n   bool output = false;\n   \n   if (userYear % 4 == 0) {\n      output = true;\n   }\n   if ((userYear % 100 == 0) && (userYear % 400 != 0)) {\n      output = false;\n   }\n   return output;\n}\n   \n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int userYear;\n   bool result = false;\n   \n   cin >> userYear;\n   \n   result = IsLeapYear ( userYear );\n   \n   if (result == true) {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 127, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   if ((userYear % 100) == 0){ \n      if ((userYear % 400) == 0){\n      return true;\n      } \n      else {\n         return false;\n      }\n   }\n   else if ((userYear % 4) == 0){ \n      return true;\n   }\n   else {\n      return false;\n   }\n}\n\nint main() {\n   int numYear;\n   \n   cin >> numYear;\n   \n   if (IsLeapYear(numYear) == true)  {\n      cout << numYear << \" is a leap year.\" << endl;\n   }\n   else if (IsLeapYear(numYear) == false) { \n      cout << numYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 40, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n   if (userYear % 4 == 0){\n      if (userYear % 100 == 0 && userYear % 400 == 0){\n         return 1;\n      }\n      else if (userYear % 100 != 0){\n         return 1;\n      }\n      else{\n         return 0;\n      }\n   }\n   else{\n      return 0;\n   }\n}\n\nint main() {\n   int userYear;\n   cin >> userYear;\n   \n   if(IsLeapYear(userYear) == 1){\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else{\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 30, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   bool isLeapYear = false;\n   \n   // Century\n   if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n         isLeapYear = true;\n      }\n   }\n   else {\n      if (userYear % 4 == 0) {\n         isLeapYear = true;\n      }\n   }\n   \n   return isLeapYear;\n}\n\nint main() {\n   int userYear;\n   cin >> userYear;\n   bool isLeapYear = IsLeapYear(userYear);\n      \n   if (isLeapYear) {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 2, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear) {\n   bool LeapYear;\n   if ((userYear % 4 == 0) && (userYear % 100 != 0)) {\n   (LeapYear = true);\n}\nelse if ((userYear % 100 == 0) && (userYear % 400 == 0)) {\n   (LeapYear = true);\n}\nelse {\n   LeapYear = false;\n}\nreturn LeapYear;\n}\nint main() {\n   int inputYear;\n   bool result;\n   cin >> inputYear;\n   result = IsLeapYear(inputYear);\n   if (result) {\n   cout << inputYear << \" is a leap year.\" << endl;\n}\nelse {\n   cout << inputYear << \" is not a leap year.\" << endl;\n}\n   /* Type your code here. Your code must call the function. */\n\n   return 0;\n}\n", "class": 0, "version": 41, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear) {\n   if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n         return true;\n      }\n      \n      else {\n         return false;\n      }\n   }\n   \n   else if (userYear % 4 == 0) {\n      return true;\n   }\n   \n   else {\n      return false;\n   }\n}\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int userInput;\n   string phrase;\n   \n   cin >> userInput;\n   \n   if (IsLeapYear(userInput)) {\n      phrase = \"is a \";\n   }\n   \n   else {\n      phrase = \"is not a \";\n   }\n   \n   cout << to_string(userInput) << \" \" << phrase << \"leap year.\" << endl;\n   return 0;\n}\n", "class": 0, "version": 56, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \n\nint main() {\n   bool isLeapYear = false;\n   \n   cin >> inputYear;\n   \n   if (inputYear == 1900) {\n      cout << inputYear << \" is not a leap year.\" << endl;\n   }\n   else if (inputYear % 4 == 0) {\n      cout << inputYear << \" is a leap year.\" << endl;\n   }\n   else if (inputYear % 100 == 0 && inputYear % 400 != 0) {\n      cout << inputYear << \" is not a leap year.\" << endl;\n   }\n   else if (inputYear % 100 == 0 && inputYear % 400 == 0) {\n      cout << inputYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << inputYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 301, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n// variables - local, global -> \"accessible\" (scope) \nbool boolReturn;\n\nbool IsLeapYear(int userYear)\n{\n\t//bool boolReturn = false;\n\n\tif ((userYear % 100)==0)\n\t{\n\t  if((userYear % 400)==0)\n\t  {\n\t  boolReturn = true;\t\n\t  }\n\t}\n\telse\n\t{\n\t  if((userYear % 4)==0)\n\t  {\n\t  boolReturn=true; \t\n\t  }\n\t}\n\n\treturn(boolReturn);\n\n}\n   \n\nint main() {\n   int year;\n   cin >> year;\n   \n   //bool boolReturn;\n   boolReturn = IsLeapYear(year);\n   \n   if(boolReturn)\n   {\n      cout<< year << \" is a leap year.\" << endl;\n   }\n   else\n   {\n      cout << year << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 283, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   if (userYear % 400 == 0) {\n      return true;  \n   }\n   /*Make sure the ordering of these makes sense*/\n   else if (userYear % 100 == 0) {\n      return false;\n   }\n   else if (userYear % 4 == 0) {   \n      return true;  \n   }\n   else {\n      return false;\n   }\n}\n   \n\nint main() {\n   int userYear;\n   cin >> userYear;\n   if (IsLeapYear(userYear)) {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 57, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n         return true;\n      }\n      else {\n         return false;\n      }\n   }\n   else if (userYear % 4 == 0) {\n      return true;\n   }\n   else { \n      return false;\n   }\n}\n\nint main() {\n   int year;\n   \n   cin >> year;\n   \n   if (IsLeapYear(year)) {\n      cout << year << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << year << \" is not a leap year.\" << endl;\n   }\n   \n\n   return 0;\n}\n", "class": 0, "version": 50, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear){\n   if(userYear%4==0){\n   return true;\n   }\n   else{\n      return false;\n}\n}\nint main() {\n   /* Type your code here. Your code must call the function. */\nint userI;\ncin >> userI;\nif(IsLeapYear(userI)==1){\n   cout << userI << \" is a leap year.\" <<endl;\n   }\n   else{\n      cout << userI << \" is not a leap year.\" << endl;\n   }\nif(userI==1900){\n   return true;\n}\n   return 0;\n}\n", "class": 0, "version": 13, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\nbool IsLeapYear(int userYear){\n   if (userYear % 400 == 0){\n    cout << userYear << \" is a leap year.\";\n   }\n   else if (userYear % 100 == 0){\n     cout << userYear << \" is not a leap year.\";\n   }\n   else if (userYear % 4 == 0){\n     cout << userYear << \" is a leap year.\";\n   }\n   else{\n      cout << userYear << \" is not a leap year.\";\n   }\nreturn userYear;\n}\nint main() {\nint userYear;\ncin >> userYear;\ncout << IsLeapYear (userYear) << endl;\n   return 0;\n}\n", "class": 0, "version": 55, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){ \n   bool statement; \n   if ((userYear%100)==0){\n      if((userYear%400==0)){\n         statement=true; \n      }\n      else{\n         statement=false; \n      }\n   }\n   else if((userYear%4)==0){\n      statement=true; \n   }\n   else{\n      statement=false; \n   }\n   \n\nreturn statement; \n}\n\n\nint main() { \n   int userYear; \n   cin >> userYear; \n   \n   cout << userYear;\n  if ( IsLeapYear(userYear) ==true){\n     cout << \" is \"; \n  }\n  else{\n     cout << \" is not \"; \n  }\n  \n   \n   cout << \"a leap year.\" << endl;\n\n   return 0;\n}\n", "class": 0, "version": 53, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {/* Define your function here */ \n   if ((userYear % 100 == 0) && (userYear % 400 != 0)) {\n      return false;\n   }\n   if (userYear % 4 == 0) {\n      return true;\n      }\n   else {\n      return false;\n   }/* Type your code here. Your code must call the function. */\n}\n/* Define your function here */ \n\nint main() {\n   int userYear;\n   cin >> userYear;\n   \n   if (true) {\n      cout << userYear << \" is a leap year.\" << endl;\n      }\n   else if (false) {\n      cout << userYear << \" is not a leap year.\" << endl;\n      }/* Type your code here. Your code must call the function. */\n/* Type your code here. Your code must call the function. */\n\n   return 0;\n}\n", "class": 0, "version": 7, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  \n bool leapYear;\n   \n   if ((userYear % 4 == 0 && userYear % 100 != 0) || (userYear % 400 == 0)) {\n      leapYear = true;\n   }\n   \n   else {\n      leapYear = false;\n   }\n\nreturn leapYear;\n\n}\n int main () {  \n \n int userYear;\n   \n cin >> userYear;\n   \nif (IsLeapYear(userYear) == true) {\n   cout << userYear << \" is a leap year.\" << endl;\n}\n\nif (IsLeapYear(userYear) == false)  {\n   cout << userYear << \" is not a leap year.\" << endl;\n}\n  \n   return 0;\n}\n", "class": 0, "version": 163, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int year) {\n   if(year % 4 == 0) {\n      if(year % 100 == 0) {\n         return year % 400 == 0;\n      }\n      return true;\n   }\n   return false;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n\n   return 0;\n}\n", "class": 0, "version": 25, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n   bool leapYear = true; \n   if(userYear % 100 == 0){\n      if(userYear % 400 == 0){\n         leapYear = true; \n      }\n      else {\n         leapYear = false;\n      }\n   }\n   else if (userYear % 4 == 0){\n      leapYear = true;\n   }\n   else {\n      leapYear = false;\n   }\n   return leapYear;\n   \n}\n\n\nint main() {\n   int year;\n   cin >> year;\n   \n   if(IsLeapYear(year)){\n      cout << year << \" is a leap year.\" << endl;\n   } else{\n      cout << year << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 153, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nbool IsLeapYear (int userYear) {\n   int leapYear;\n   if (userYear % 4 == 0) {\n      leapYear = true;\n   }\n   if (userYear % 100 == 0 && userYear % 400 != 0) {\n      leapYear = false;\n   }\n   return leapYear;\n}\n\nint main() {\n   int userYear;\n   cin >> userYear;\n   \n   if (IsLeapYear) {\n      cout << \"1712 is a leap year.\" << endl;\n   }\n   else {\n      cout << IsLeapYear(userYear) << \" is not a leap year.\" << endl;\n   }\n   return 0;\n}\n", "class": 0, "version": 96, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\nint DaysInFeb (int userYear){\n   int days;\n   \n   if (userYear % 100 == 0){\n      if (userYear % 400 == 0){\n         days = 29;\n      }\n      else{\n         days = 28;\n      }\n   }\n   else {\n      if (userYear % 4 == 0){\n         days = 29;\n      }\n      else{\n         days = 28;\n      }\n   }\n   return days;\n}\n\nint main() {\n   int year;\n   \n   cin >> year;\n   \n   cout << year << \" has \" << DaysInFeb(year) << \" days in February.\" << endl;\n\n   return 0;\n}\n", "class": 0, "version": 34, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear (int userYear)\n{\n   int fourYear = userYear % 4; //if == 0 then leap year\n   int testFourHundred = userYear % 400;\n   int testDoubleAught = userYear % 100;\n   if (testDoubleAught == 0)\n    {\n        if (testFourHundred == 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n    else if (fourYear == 0)\n    {\n            return true;\n    }\n    else \n    {\n            return false;\n    }    \n}\nint main() \n{\n   int year;\n   cin >> year;\n   \n   //bool isLeap = IsLeapYear(year);\n   \n   if (IsLeapYear(year) == true)\n   {\n      cout << year << \" is a leap year.\" << endl;\n   }\n   else\n   {\n      cout << year << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 139, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear (int userYear) {\n   \n   if ((userYear % 400 == 0)) {\n     return true;\n   }\n   else if ((userYear % 100 == 0)) {\n      return false;\n   }\n   else if ((userYear % 4 == 0)) {\n      return true;\n   }\n   else {\n      return false; \n   }\n}\n      \nint main() {\n  int userYear;\n  \n  cin >> userYear;\n  \n  if (IsLeapYear(userYear)) {\n     cout << userYear << \" is a leap year.\" << endl;\n  }\n  else {\n     cout << userYear << \" is not a leap year.\" << endl;\n  }\n   \n\n\n   return 0;\n}\n\n", "class": 0, "version": 69, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n   bool boolin = false;\n if(userYear %4 == 0){\n    if(userYear %100 == 0){\n     if(userYear %400 ==0){\n        boolin = true;\n     }\n    }\n    else{\n     boolin = true;  \n    }\n }\n return boolin;\n}\n\nint main() {\n   int userYear;\n   cin >> userYear;\n   if(IsLeapYear(userYear)){\n    cout << userYear << \" is a leap year.\" << endl;  \n   }\n   else{\n      cout << userYear << \" is not a leap year.\" << endl;  \n   }\n\n   return 0;\n}\n", "class": 0, "version": 273, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear)\n{\n   if (userYear % 400 == 0 || (userYear % 100 != 0 && userYear % 4 == 0))\n   {\n      return true;\n   }\n   else \n   {\n      return false;\n   }\n}\n\nint main() {\n   \n   int userYear;\n   \n   cin >> userYear;\n   \n   if (IsLeapYear(userYear))\n   {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else \n   {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n   \n   return 0;\n}\n", "class": 0, "version": 68, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n\n// ALL DERIVED FROM MY PREVIOUS CODE FOR THIS LAB\n\nbool IsLeapYear(int userYear){\n   \n   \n// this is straight from the previous lab I did with the variable name \n//changed and return put in place of setting a bool value to true\n\n    if(userYear%100==0){\n      if(userYear%400==0){\n         return true;\n      }\n   }\n   else if (userYear%4==0){\n      return true;\n   }\n   \n      return false;\n}\n\n\nint main() {\n    int inputYear;\n   bool isLeapYearog = false;\n   cin >> inputYear;\n   isLeapYearog=IsLeapYear(inputYear);\n   \n   // main stuff modified from previous lab\n   \n   \n   \n   if (isLeapYearog){\n   cout << inputYear << \" is a leap year.\" << endl;   \n}\nelse{\n   cout << inputYear << \" is not a leap year.\" << endl;   \n}\n\n   return 0;\n}\n", "class": 0, "version": 230, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \n// collaborated with Josh & Mike\nbool IsLeapYear(int userYear){\n   bool leapYear = true;\n   if ((userYear %100 == 0) && (userYear %400 == 0)){\n      leapYear = true;\n   }\n\n   else if ((userYear %100 ==0) && (userYear %400 !=0)) {\n      leapYear = false;\n   }\n   else if (userYear %4 == 0){\n      leapYear = true;\n   }\n   else {\n      leapYear = false;\n   }\nreturn leapYear;\n}\nint main() {\n   int Year;\n   cin >> Year;\n   if (IsLeapYear (Year)) {\n      cout << Year;\n      cout << \" is a leap year.\";\n      cout << endl;\n   }\n   else {\n      cout << Year;\n      cout << \" is a leap year.\";\n      cout << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 48, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear) {\n   if (userYear == 1900) {\n      return false;\n   }\n   else if ((userYear % 4 == 0 ) or (userYear % 400 == 0)) {\n      return true;\n   }\n   else {\n      return false;\n   }\n}\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int inputYear;\n   \n   cin >> inputYear;\n   if (IsLeapYear(inputYear)) {\n      cout << inputYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << inputYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 155, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   bool leapYear;\n   if (userYear % 4 == 0 && userYear % 400 != 0){\n      leapYear = false;\n   }\n   else if (userYear % 4 == 0) {\n      leapYear = true;\n   }\n   else if (userYear % 400 != 0 && userYear % 100 == 0) {\n   leapYear = false;\n}\nreturn leapYear;\n}\n      \n\nint main() {\n   int inputYear;\n   \n   cin >> inputYear;\n   \n   if (IsLeapYear(inputYear)) {\n      cout << inputYear << \" is not a leap year.\" << endl;\n   }\n   else {\n      cout << inputYear << \" is a leap year.\" << endl;\n   }\n   \n   \n   \n\n   return 0;\n}\n", "class": 0, "version": 288, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n   \n   if (userYear % 4 == 0){\n      if((userYear % 100 == 0) && (userYear % 400 == 0)){\n         return true;\n        \n      }\n      else if((userYear % 100 == 0) && (userYear % 400!=0)){\n         return false;\n      \n      }\n   }\n      else if (userYear % 4 !=0){\n         return false;\n   \n      }\n   \n    \n      return userYear;\n}\n      \n   \nint main() {\nint year;\ncin >> year;\nif (IsLeapYear(year)){\ncout << year<<\" \" << \"is a leap year.\" << endl;\n}\nelse if (!IsLeapYear(year)){\n   cout << year<< \" is not a leap year.\" << endl;\n}\n\n   return 0;\n}\n", "class": 0, "version": 71, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n   bool isLeapYear;\n   if (userYear % 100 != 0){\n      if(userYear % 4 == 0){\n         isLeapYear = true;\n      }\n      else{\n         isLeapYear = false;\n      }\n   }\n   else{\n      if (userYear % 400 == 0){\n         isLeapYear = true;\n      }\n      else{\n         isLeapYear = false;\n      }\n   }\n   return isLeapYear;\n}\n\n\nint main() {\n   int year;\n   bool result;\n   cin >> year;\n   result = IsLeapYear(year);\n   if (result){\n      cout << year << \" is a leap year.\"<<endl;\n   }\n   else{\n      cout << year << \" is not a leap year.\"<<endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 227, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear)\n{\nbool leapYear = false;\nif (userYear%400 == 0)\n{\n   leapYear  = true;\n}\nelse if (userYear%100 !=0 && userYear%4 == 0)\n{\n   leapYear = true;\n}\n\nreturn leapYear;\n}\nint main() {\n  int year;\n  cin >> year;\n  if (IsLeapYear(year))\n  {\n     cout << year << \" is a leap year.\" << endl;\n  }\n  else\n  { \n   cout << year << \" is not a leap year.\" << endl;\n  }\n   return 0;\n}\n", "class": 0, "version": 62, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear (int userYear) {\nif (userYear % 4 != 0 ) {\n   return false;\n}\nif (userYear % 100 != 0) {\n   return true;\n}\nif ( userYear % 400 != 0 ) {\n   return false;\n}\nreturn true;\n}\n\nint main() {\n   int inputYear;\n   cin >> inputYear;\n   if (IsLeapYear(inputYear)) {\n      cout << inputYear << \" is a leap year.\" << endl;\n   }\n      else {\n         cout << inputYear << \" is not a leap year.\" << endl;\n      }\n\n   return 0;\n}\n", "class": 0, "version": 209, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear (int userYear) {\n   bool isLeapYear = false;\n   \n   if (userYear % 400 == 0) {\n      isLeapYear = true;\n   }\n   else if (userYear % 100 != 0 && userYear % 4 == 0) {\n      isLeapYear = true;\n   }\n   else {\n      isLeapYear = false;\n   }\n   \n   return isLeapYear;\n}\n\nint main() {\n   int userYear;\n\n   cin >> userYear;\n\n   if (IsLeapYear (userYear) == true) {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n\n   return 0;\n}\n", "class": 0, "version": 119, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   bool yearResult;\n   \n   if ((userYear % 4) == 0 ) {\n      if ((userYear % 100) == 0 ) {\n         if ((userYear % 400) == 0 ) {\n            yearResult = true;\n         }\n         else {\n            yearResult = false;\n         }\n      }\n      else {\n          yearResult = false;\n      }\n   }   \n   else {\n      yearResult = false;\n   }\n   \n   return yearResult;\n}\n      \n\nint main() {\n   int year;\n   string result;\n   bool leapYear;\n   \n   cin >> year;\n   leapYear = IsLeapYear(year);\n   \n   if ((leapYear = true)) {\n      result = \" is a leap year.\";\n   }\n   else {\n      result = \" is not a leap year.\";\n   }\n   \n   cout << year << result << endl;\n\n   return 0;\n}\n", "class": 0, "version": 24, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nint DaysInFeb(int userYear){\n   int days;\n   \n   if (userYear % 4 == 0 ){\n      if (userYear % 100 == 0){\n         if (userYear % 400 == 0){\n            days = 29;\n         }\n         else{\n            days = 28;\n         }\n      }\n      else{\n         days = 29;\n      }\n   }\n   else {\n      days = 28;\n   }\n   \n   return days;\n}\n      \n      \n\nint main() {\n   int userYear;\n   cin  >> userYear;\n   cout << userYear << \" has \" << DaysInFeb(userYear) << \" days in February.\" << endl;\n   \n   \n\n   return 0;\n}\n", "class": 0, "version": 204, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n   if(userYear == 1900){\n      return false;\n      }\n   if(userYear % 4 == 0){\n      return true;\n      }else{\n         return false;\n         }\n   \n   \n   }\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int year;\n   cin >> year;\n   \n   if (IsLeapYear(year) == true){\n      cout << year << \" is a leap year.\" << endl;\n\n      }else{\n         cout << year << \" is not a leap year.\" << endl;\n         \n         }\n\n   return 0;\n}\n", "class": 0, "version": 185, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int year){\n   if(year<0){\n      return false;\n   }\n   else if(year % 400 == 0){\n      return true;\n   }\n   else if(year % 100 == 0){\n      return false;\n   }\n   else if(year % 4 == 0){\n      return true;\n   }\n   return false;\n}\n\nint main() {\n   int year;\n   cin >> year;\n   if (IsLeapYear(year)) {\n      cout << year << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << year << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 19, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear){\n   if(((userYear % 100)==0)&& ((userYear % 400)==0)){\n      return true;\n   }\n   else if (((userYear%4)==0) && ((userYear %100)!= 0)){\n      return true;\n   }\n   else{\n      return false;\n   }\n}\n      \n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int userYear;\n   bool leapyear;\n   cin >> userYear;\n   leapyear = IsLeapYear(userYear);\n   \n   if (leapyear == true){\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   if (leapyear == false){\n      cout << userYear << \" is not a leap Year.\" << endl;\n   }\n   \n   \n   \n\n   return 0;\n}\n", "class": 0, "version": 15, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear)\n{\n    if (userYear % 4 == 0)\n    {\n        if (userYear % 100 == 0)\n        {\n            if (userYear % 400 == 0)\n            {\n                return true;\n            }\n            return false;\n        }\n        return true;\n    }\n    else { return false; }\n}\n\nint main() {\n    int enterYear;\n    cin >> enterYear;\n\n    if (IsLeapYear)\n    {\n        cout << enterYear << \" is a leap year.\" << endl;\n    }\n    else\n    {\n        cout << enterYear << \" is not a leap year.\" << endl;\n    }\n} ", "class": 0, "version": 257, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your functio\nn here */ \nint DaysInFeb(int userYear){\n   int b;\n   if((userYear%100==0)&&(userYear%400==0)){\n      b=29;\n   }\n   else if((userYear%4==0)&&(userYear%100!=0)){\n      b=29;\n   }\n   else\n   {\n      b=28;\n   }\nreturn b;\n}\n\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int a;\n   cin>>a;\n   cout<<a<<\" has \"<<DaysInFeb(a)<<\" days in February.\"<<endl;\n   return 0;\n}\n", "class": 0, "version": 195, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nint DaysInFeb(int userYear)\n{\n   int numDays;\n   if (userYear % 4 == 0)\n   {\n      numDays = 29;\n   }\n   else if (userYear % 400 == 0)\n   {\n      numDays = 29;\n   }\n   else \n   {\n      numDays = 28;\n   }\n   return numDays;\n}\nint main() {\n   int inputYear;\n   int numOfDays;\n   \n   cin >> inputYear;\n   \n   numOfDays = DaysInFeb(inputYear);\n   \n   \n   cout << inputYear << \" has \" << numOfDays << \" days in February.\" << endl;\n\n   return 0;\n}\n", "class": 0, "version": 85, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int x){\n   bool cap = false;\n   if (x % 4 == 0){\n    cap = true;\n    if (x % 100 == 0){\n       if (x % 400 != 0){\n          //cout << \"getting there bud\" << endl;\n          cap = false;\n       }\n       else{\n          cap = true;\n       }\n    }\n    //cap = true;\n   }\n  // cout << cap << endl;\n   return cap;\n}\nint main() {\n   int inputYear;\n   cin >> inputYear;\n   IsLeapYear(inputYear);\n   if (IsLeapYear(inputYear) == true){\n      cout << inputYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << inputYear << \" is not a leap year.\" << endl;\n   }\n   return 0;\n}\n", "class": 0, "version": 79, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear (int userYear) {\n   bool isDivisibleBy4 = false;\n   bool isCenturyYear = false;\n   bool isDivisibleBy4Hund = false;\n   \n   if ((userYear % 4) == 0) {\n      isDivisibleBy4 = true;\n   }\n   \n   if ((userYear % 100) == 0) {\n      isCenturyYear = true;\n   }\n   \n   if (isCenturyYear) {\n      if ((userYear % 400) == 0) {\n         isDivisibleBy4Hund = true;\n      }\n   }\n   \n   if (isDivisibleBy4 && !isCenturyYear) {\n      return true;\n   }\n   \n   else if (isDivisibleBy4 & isCenturyYear) {\n         if (isDivisibleBy4Hund) {\n            return true;\n         }\n         \n         else {\n            return false;\n         }\n   }\n   \n   else {\n      return false;\n   }\n   \n   return 0;\n}\n   \nint main() {\n   int userYear;\n   \n   cin >> userYear;\n   \n   if (IsLeapYear (userYear)) {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   \n   else {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 268, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nint DaysInFeb(int userYear) { \n   int result; \n   int val1; \n   int val2; \n   \n   val1 = 29; \n   val2 = 28; \n   if ( (userYear % 4 == 0) && (userYear % 100 != 0) ) { \n      result = val1; \n   } \n   \n   else if (userYear % 400 == 0) { \n     result = val1; \n   } \n   \n   else { \n     result = val2;\n   }\n   \n   return result; \n}\n      \n\nint main() {\n   int userYear; \n   cin >> userYear; \n   \n   cout << userYear << \" has \" << DaysInFeb(userYear) << \" days in February.\" << endl; \n\n   return 0;\n}\n", "class": 0, "version": 55, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n\n   if (userYear%400==0) {\n      return true;\n   }\n   else if (userYear%100==0) {\n      return false;\n    }\n   else if (userYear%4==0) {\n      return true;\n    }\n    return false;\n}\n\nint main() {\n   int year;\n   cin>>year;\n   if (IsLeapYear(year)) {\n      cout<<year<<\" is a leap year.\"<<endl;\n   }\n   else {\n      cout<<year<<\" is not a leap year.\"<<endl;\n   }\n   \n   return 0;\n}\n", "class": 0, "version": 57, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   if (userYear%4 == 0 && userYear%100 !=0) {\n      return true;\n   }\n   else if (userYear%400 == 0) {\n      return true;\n   }\n   else {\n      return false;\n   }\n}\n   \n\nint main() {\n   bool leapYear;\n   int userYear;\n   cin >> userYear;\n   leapYear = IsLeapYear(userYear);\n   \n   if (leapYear == true) {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n   \n   \n\n   return 0;\n}\n", "class": 0, "version": 245, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nint DaysInFeb(int userYear) {\n   int num1;\n   if ((userYear % 4 == 0) && (userYear != 1600) && (userYear != 1700) && (userYear != 1800) && (userYear!= 1900)) {\n      num1 = 29;\n   }\n   else if (userYear % 400 == 0) {\n      num1 = 29;\n   }\n   else {\n      num1 = 28;\n   }\n   return num1;\n}\n\nint main() {\n   int userYear;\n   cin >> userYear;\n   cout << userYear << \" has \" << DaysInFeb(userYear) << \" days in February.\" << endl;\n\n   return 0;\n}\n", "class": 0, "version": 117, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n   bool leapYear;\n   if ((userYear % 4 == 0 && userYear % 100 != 0) || (userYear % 400 == 0)){\n      leapYear = true;\n   }\n   else {\n      leapYear = false;\n   }\n   return leapYear;\n}\nint main() {\n   int userYear;\n   \n   cin>>userYear;\n   \n   if (IsLeapYear(userYear) == true){\n      cout<<userYear<<\" is a leap year.\"<<endl;\n   }\n   else{\n      cout<<userYear<<\" is not a leap year.\"<<endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 61, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int inputYear) {\n   bool leapYear;\n  if (inputYear % 4 == 0) {\n      if (inputYear % 100 == 0) {\n         if (inputYear % 400 == 0) \n            leapYear = true;\n         else {\n            leapYear = false; \n         }\n      }\n      \n      else \n         leapYear = true;\n}\nelse \n   leapYear = false;\n   \nreturn leapYear;\n}\nint main() {\n   /* Type your code here. Your code must call the function. */\nint inputYear;\nbool leapYear;\ncin >> inputYear;\n\nif (IsLeapYear(leapYear) == true) {\n   cout << inputYear << \" is a leap year.\" << endl;\n}\nelse if (IsLeapYear(leapYear) == false) {\n   cout << inputYear << \" is not a leap year.\" << endl;\n   }\n   return 0;\n}\n", "class": 0, "version": 113, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nint count = 0;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n      ++count;\n   }\n   if (userYear % 100 == 0) {\n      --count;\n   }\n   if (userYear % 400 == 0) {\n        ++count;\n   }\n   if (count > 0) {\n      return true; \n   }\n   else { \n      return false;\n   }\n}\n   \n\nint main() {\n   \n   int year;\n   \n   cin >> year; \n   \n   if (IsLeapYear(year) == true) {\n      cout << year << \" is a leap year.\" << endl;\n   }\n   else { \n      cout << year << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 103, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   bool leapYear = false;\n   \n   if (0 == userYear % 100) {\n      if (0 == (userYear / 100) % 4) {\n         leapYear = true;\n      }\n      else {\n         leapYear = false;\n      }\n   }\n   else if (0 == userYear % 4) {\n      leapYear = true;\n   }\n   \n   return leapYear;\n}\n\nint main() {\n\n   int inputYear;\n   bool numYear;\n   \n   cin >> inputYear;\n   \n   numYear = IsLeapYear(inputYear);\n   \n   if (true == numYear) {\n      cout << inputYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << inputYear << \" is not a leap year.\" << endl;\n   }\n   \n   return 0;\n}\n", "class": 0, "version": 47, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nint DaysInFeb(int userYear)\n{\n   int days;\n   \n   \n   if ((userYear % 4 == 0) && (userYear % 100 != 0))\n   {\n      days = 29;\n   }\n   \n   else if ((userYear % 100 == 0) && (userYear % 400 == 0))\n   {\n      days = 29;\n   }\n   \n   else \n   {\n      days = 28;\n   }\n   \n   return days;\n}\n      \n\nint main() {\n   \n   int userYear;\n   \n   cin >> userYear;\n   \n   cout << userYear << \" has \" << DaysInFeb(userYear) << \" days in February.\" << endl;\n\n   return 0;\n}\n", "class": 0, "version": 160, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   if (userYear % 100 == 0) {\n      if ( (userYear % 4 == 0) && (userYear % 400 == 0) ) {\n         return true;\n      }\n      else {\n         return false;\n      }\n   }\n   if ( (userYear % 100 > 0) && (userYear % 4 == 0) ) {\n         return true;\n   }\n   else {\n      return false;\n   }\n}\n\nint main() {\n   int inputYear = 0;\n   cin >> inputYear;\n   \n   if (IsLeapYear(inputYear) == true) {\n      cout << inputYear << \" is a leap year.\" << endl;\n   }\n   else if (IsLeapYear(inputYear) == false) {\n      cout << inputYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 64, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   if (userYear % 100 == 0) { \n      if (userYear % 400 == 0) {\n         return true;\n      }}\n   if (userYear % 100 != 0) {\n      if (userYear % 4 == 0) {\n         return true;\n      }}\n   else {\n      return false;\n   }\n}\n\nint main() {\nint userYear;\ncin >> userYear;\nif (IsLeapYear(userYear)) {\n   cout << userYear << \" is a leap year.\" << endl;\n}\nelse {\n   cout << userYear << \" is not a leap year.\" << endl;}\n   \n      \n      \n\n   return 0;\n}\n", "class": 0, "version": 79, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear)\n{\n   bool leapYear;\n   if ( userYear % 4 == 0)\n   {\n      if ( userYear%100 != 0 && userYear%400 !=0)\n      { \n         leapYear = true;\n      }\n      else if ( userYear%400 ==0 && userYear%100 ==0)\n      {\n         leapYear = true;\n      }\n      else \n      {\n         leapYear = false;\n      }\n   \n   } \n   else \n   {\n      leapYear = false;\n   }\n   \n   return leapYear;\n\n}\n\nint main() {\n   int userYear;\n   cin >> userYear;\n\nif ( IsLeapYear(userYear) )\n{\n   cout << userYear << \" is a leap year.\" << endl;\n}\nelse \n{\n   cout << userYear << \" is not a leap year.\" << endl;\n}\n\n   return 0;\n}\n", "class": 0, "version": 12, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear)\n{\n   bool isIt = true;\n   \n   if(userYear % 4 != 0 || ((userYear % 100 == 0) && (userYear % 400 != 0)))\n   {\n      isIt = false;\n   }  \n   \n   return isIt;\n  \n}\nint main() {\n   int userYear;\n   \n   cin >> userYear;\n   \n   if (IsLeapYear(userYear))\n   {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else\n      cout << userYear << \" is not a leap year.\" << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 205, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n   bool IsLeapYear(int userYear){\n   \n   if ((userYear % 4 ==0 &&  !(userYear % 100 ==0))) {\n      return true;\n   }\n   else if (!(userYear %400 ==0)) {\n      return false;\n   }\n   else if ((userYear % 400 == 0)){\n      return true;\n   }\n   else {\n     return false;\n   }\n   }\n\nint main() {\n   bool IsLeapYear=true;\n   int userYear;\n   \n   cin >> userYear;\n   \n   if (IsLeapYear==true){\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n       else if (IsLeapYear==false){\n      cout << userYear << \" is not a leap year.\" << endl;\n       }\n\n   return 0;\n}\n", "class": 0, "version": 152, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n   bool leapyr = false;\n   \n   \n   \n   if(userYear % 100 == 0 && userYear % 400 == 0){\n      leapyr = true;\n      }\n   else if(userYear % 4 == 0 && userYear % 100 != 0 ){\n      leapyr = true;\n      }\n   else{\n      leapyr = false;\n      }\n   return leapyr;\n}\n\nint main() {\n  \n   int year;\n   \n   cin >> year;\n   \n   if(IsLeapYear(year)){\n      cout << year << \" is a leap year.\" << endl;\n   }\n   else{\n      cout << year << \" is not a leap year.\" << endl;\n   }\n   \n\n   return 0;\n}\n", "class": 0, "version": 46, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear)\n{\n   if (userYear % 4 == 0)\n   {\n      if (userYear % 100 == 0 )\n      {\n         if (userYear % 400 == 0)\n         {\n            return true;\n         }\n         else\n         {\n            return false;\n         }\n      }\n      else\n         {\n            return true;\n         }\n   }\n   else \n   {\n      return false;\n   }\n}\n\nint main() {\n   int year;\n   \n   cin >> year;\n   \n   if (IsLeapYear(year))\n   {\n      cout << year << \" is a leap year.\" << endl;\n   }\n   else\n   {\n      cout << year << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 169, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   if (userYear < 0) {\n      return false;\n   }\n   else if (userYear % 400 == 0) {\n      return true;\n   }\n   else if (userYear % 100 == 0) {\n      return false;\n   }\n   else if (userYear % 4 == 0) {\n      return true;\n   }\n   return false;\n}\n\nint main() {\n   int year;\n   cin >> year;\n   if (IsLeapYear(year)) {\n      cout << year << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << year << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 13, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear) {\n   if (userYear % 4 == 0 && userYear % 100 != 0) {\n      return true;\n   }\n   else if (userYear % 400 == 0) {\n      return true;\n   }\n   else {\n      return false;\n   }\n}\n\n\n\n\nint main() {\n   int year;\n   cin >> year;\n   \n   if (IsLeapYear(year) == true) {\n      cout << year << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << year << \" is not a leap year.\" << endl;\n   }\n   \n\n   return 0;\n}\n", "class": 0, "version": 112, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n\nbool IsLeapYear( int userYear) {\n   if (userYear % 4 ==0) {\n      if(userYear % 100 ==0) {\n         if(userYear % 400 ==0) {\n            return true;\n         }\n         else {\n            return false;\n         }\n         }\n      else {\n      return true;\n      }\n      }\n      else {\n         return false;\n      }\n}\n\nint main() {\n\nint userYear;\ncin >> userYear;\n\nif (IsLeapYear(userYear) == true) {\n   cout << userYear << \" is a leap year.\" << endl;\n}\nelse {\n   cout << userYear << \" is not a leap year.\" << endl;\n}\n\n   return 0;\n}\n", "class": 0, "version": 276, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */\nbool IsLeapYear(int userYear)\n{\n   bool leapYear;\n   if (((userYear % 4) == 0 && (userYear % 100) != 0) || ((userYear % 400) == 0)) {\n      leapYear = true;\n   }\n   else {\n      leapYear = false;\n   }\n   \n   return leapYear;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int userYear;\n   cin >> userYear;\n   \n   if (IsLeapYear(userYear)) {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 244, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   bool lYear;\n   if (userYear % 4 == 0) {\n      lYear = true;\n   }\n   if (userYear % 100 == 0 && userYear % 400 != 0) {\n      lYear = false; \n   }\n   return lYear;\n}\n      /* Define your function here */ \n\nint main() {\n   int inputYear;\n\n   \n   cin >> inputYear;\n   \n   if (IsLeapYear(inputYear)){\n      cout << inputYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << inputYear << \" is not a leap year.\" << endl;\n   }/* Type your code here. Your code must call the function. */\n\n   return 0;\n}\n", "class": 0, "version": 18, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n      return true;\n      }\n      else {\n         return false;\n      }\n   }\n   else if (userYear % 4 == 0) {\n   return true;\n   }\n   else {\n      return false;\n   }\n}\n\n\nint main() {\nint userYear;\n\ncin >> userYear;\n\nif (IsLeapYear(userYear)) {\n   cout << userYear << \" is a leap year.\" << endl;\n}\nelse {\n   cout << userYear << \" is not a leap year.\" << endl;\n}\n   return 0;\n}\n", "class": 0, "version": 113, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear (int userYear) {\n   bool leapYear;\n   \n   if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n         leapYear = true;\n      }\n      else {\n         leapYear = false;\n      }\n   }\n   else if (userYear % 4 == 0) {\n      leapYear = true;\n   }\n   else {\n      leapYear = false;\n   }\n   return leapYear;\n}\n   \n\n\nint main() {\n   int userYear;\n   \n   cin >> userYear;\n   \n   if (IsLeapYear (userYear)) {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   if (!IsLeapYear (userYear)) {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n\n   return 0;\n}\n", "class": 0, "version": 165, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nint DaysInFeb(int userYear){\n   \n   return 29;\n}\n\nint main() {\n   int userYear;\n   \n   cin >> userYear;\n   \n   cout << userYear << \" has \" << DaysInFeb (userYear) << \" days in February.\" << endl;\n\n   return 0;\n}\n", "class": 0, "version": 173, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear) {\n   bool leapYear = false;\n   if (userYear%4==0) {\n      if (userYear%100==0) {\n         if (userYear%400==0) {\n            leapYear = true;\n         }\n      }\n      else leapYear = true;\n   }\n   return leapYear;\n}\n   \nint main() {\n   /* Type your code here. Your code must call the function. */\n   int userYear;\n   cin >> userYear;\n   \n   if (IsLeapYear(userYear) == true) {\n      \n   cout <<userYear << \" is a leap year.\" << endl;\n   }\n   else {\n   cout << userYear << \" is not a leap year.\" << endl; \n}\n   return 0;\n}\n", "class": 0, "version": 21, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int year){\n   if(year % 100 == 0){\n      if(year%400 == 0){\n         return true;   \n      }   \n      return false;\n   }  else if (year% 4 == 0){\n      return true;  \n   }   \n   return false;\n}   \n   \nint main() {\n   int year;\n   cin >> year;\n   string msg = \"\";\n   if(!IsLeapYear(year)){\n        msg = \"not \";\n   }\n   cout << year << \" is \" << msg << \"a leap year.\" << endl;\n   /* Type your code here. Your code must call the function. */\n\n   return 0;\n}\n", "class": 0, "version": 57, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n   bool leapYear = true; \n   if (userYear%100==0 and userYear%400== 0){\n      leapYear = true;\n   }\n   else if (userYear%4== 0 and userYear%100 != 0  ){\n      leapYear = true;\n   }\n   else{\n      leapYear = false;\n   }\n    return leapYear;\n    \n   }\n\n\nint main() {\n \nint userYear; \nbool numLeap = true;\n\ncin >> userYear;\n \nnumLeap = IsLeapYear(userYear);\n \nif (numLeap == true){ \n   cout << userYear  << \" is a leap year.\"<<endl;\n}\nif (numLeap == false){ \n   cout << userYear<<\" is not a leap year.\"<<endl;\n}\n \n \n   return 0;\n}\n", "class": 0, "version": 76, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n   bool yesorno;\n   if (userYear % 100 == 0){\n      if (userYear % 400 == 0){\n         yesorno = true;\n      }\n      else {\n         yesorno = false;\n      }\n   }\n   else {\n      if (userYear % 4 == 0){\n         yesorno = true;\n      }\n      else {\n         yesorno = false;\n      }\n   }\n   return yesorno; \n}\n\nint main() {\n   int userYear;\n   cin >> userYear;\n   bool output = IsLeapYear(userYear);\n   if (output){\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 300, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear)\n{\n   if ((userYear % 400 == 0 ))\n   {\n      return true;\n   }\n   else if ((userYear % 4 == 0) && (userYear%100 != 0))\n   {\n      return true;\n   }\n   else\n   {\n      return false;\n   }\n}\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int year;\n   cin >> year;\n \n   if (IsLeapYear(year))\n   {\n      cout << year << \" is a leap year.\" << endl;\n   }\n   else \n   {\n         cout << year << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 130, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear (int userYear) {\n   bool leapYear;\n   if (userYear % 400 == 0) {\n      leapYear = true;}\n   else if (userYear % 4 == 0 && userYear % 100 != 0) {\n      leapYear = true;}\n   else {\n      leapYear = false;}\n   return leapYear;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int userYear;\n   bool leapYear;\n   cin >> userYear;\n   \n   leapYear = IsLeapYear(userYear);\n   \n   if (leapYear) {\n      cout << userYear << \" is a leap year.\" << endl;}\n   else {\n      cout << userYear << \" is not a leap year.\" << endl;}\n   \n   return 0;\n}\n", "class": 0, "version": 258, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear (int userYear) {\n   bool leapYear;\n   \n   if ((userYear % 400 == 0) && (userYear % 100 == 0)) {\n      leapYear = true;\n   }\n   else if ((userYear % 4 == 0) && (userYear % 100 != 0)) {\n      leapYear = true;\n   }\n   else {\n      leapYear = false;\n   }\n   return leapYear;\n}\n\nint main() {\n   int userYear;\n   int leapYear;\n   \n   cin >> userYear;\n   \n   IsLeapYear(userYear);\n   \n   if (IsLeapYear(userYear) == true) {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n   \n   return 0;\n}\n", "class": 0, "version": 102, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear (int userYear) {\n   bool isValid;\n   if ((userYear % 4 == 0 && userYear % 100 != 0) || (userYear % 400 == 0 && userYear % 100 == 0)) {\n      isValid = true;\n   }\n   else {\n      isValid = false;\n   }\n   return isValid;\n}\n\nint main() {\n   int userYear;\n   cin >> userYear;\n   \n   if (IsLeapYear(userYear)) {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userYear << \" is not a leap Year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 276, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n   if (userYear >= 100){\n      userYear = userYear / 4;\n}\n   if (userYear >= 400){\n      userYear = userYear % 100;\n      userYear = userYear % 4;\n}\n   if (userYear != 4 && userYear != 0){\n      return false;\n}\n   else{\n       return  true;\n}\n}\n\nint main() {\n   int userYear;\n\n   cin >> userYear;\n\n   if (!IsLeapYear(userYear)){\n      cout << userYear << \" is not leap year.\" << endl;\n}\n   else{\n      cout << userYear << \" is a leap year.\" << endl;\n}\n   return 0;\n}", "class": 0, "version": 17, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \n\nint DaysInFeb(int userYear) {\n   bool leapYear;\n   int febDays;\n   \n   if ( ((userYear % 4) == 0) && ((userYear % 100) != 0) ) {\n      leapYear = true;\n   }\n   \n   else if ( (userYear % 100) == 0) {\n      if ( (userYear % 400) == 0) {\n         leapYear = true;\n      }\n      else if ( (userYear % 400) != 0) {\n         leapYear = false;\n      }\n   }\n      \n   else {\n      leapYear = false;\n   }\n   \n   if (leapYear) {\n      febDays = 29;\n   }\n   \n   else {\n      febDays = 28;\n   }\n   \n   return febDays;\n   \n}\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   \n   int y;\n   int userYear;\n   \n   cin >> userYear;\n   \n   y = DaysInFeb(userYear);\n   \n   cout << userYear << \" has \" << y << \" days in February.\" << endl;\n\n   return 0;\n}\n", "class": 0, "version": 150, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    bool isLeapYear = false;\n   if ((userYear % 4 == 0)) {\n      isLeapYear = true;\n         if ((userYear % 100 == 0) && (userYear % 400 != 0)) {\n            isLeapYear = false;\n   }\n   }\n   \n   else {\n      isLeapYear = false;\n   }\n   \n   return isLeapYear;\n}\n\nint main() {\n   int inputYear;\n   \n   cin >> inputYear;\n   bool Leap;\n   /* Type your code here. */\n   Leap = IsLeapYear(inputYear);\n   \n   if (Leap == true) {\n      cout << inputYear << \" is a leap year.\" << endl;\n   }\n   \n   else if (Leap == false) {\n      cout << inputYear << \" is not a leap year.\" << endl;\n   }\n   return 0;\n}", "class": 0, "version": 230, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear){\n   bool isLeapYear;\n   if ((userYear % 100) == 0 && (userYear % 400) == 0){\n      isLeapYear = true;\n   }\n   else if ((userYear % 100 != 0) &&(userYear % 4 == 0) ) {\n      isLeapYear = true;\n   }\n   else {\n      isLeapYear = false;\n   }\n   return isLeapYear;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int userYear;\n   cin >> userYear;\n   if(IsLeapYear(userYear)){\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userYear << \" is a not leap year.\" << endl;\n   }  \n\n   return 0;\n}\n", "class": 0, "version": 72, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear (int userYear) {\n   \n   if (userYear % 400 == 0) {\n      return true;\n   }\n   \n   else if (userYear % 100 == 0) {\n      return false;\n   }\n   \n   else if (userYear % 4 == 0) {\n      return true;\n   }\n   \n   else {\n      return false;\n   }\n}\n   \nint main() {\n   \n   int year;\n   cin >> year;\n   \n   if (IsLeapYear(year)) {\n      cout << year << \" is a leap year.\" << endl;\n   }\n   \n   else {\n      cout << year << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 43, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\nint DaysInFeb(int userYear){\n   if ((userYear % 4 ==0) && (userYear % 100 != 0)){\n      return 29;\n   }\n   else if (userYear % 400 == 0){\n      return 29;\n   }\n   else{\n      return 28;\n   }\n   \n}\n/* Define your function here */ \n\nint main() {\n   int yearUser;\n   cin >> yearUser;\n   cout << yearUser << \" has \" << DaysInFeb(yearUser) << \" days in February.\" << endl;\n\n   return 0;\n}\n", "class": 0, "version": 64, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nint DaysInFeb(int userYear) {\n\n   if (userYear % 4 == 0) {\n      if ((userYear % 100 == 0) && (userYear % 400 == 0)) {\n         return 29;\n      }\n      else if (userYear % 100 != 0) {\n       return 29;\n      }\n      else {\n        return 28;\n      }\n   }\n   else {\n      return 28;\n   }\n}\nint main() {\nint userYear;\ncin >> userYear;\n\ncout << userYear << \" has \" << DaysInFeb(userYear) << \" days in February.\" << endl;\n\n   return 0;\n}\n", "class": 0, "version": 207, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear)\n{\n bool YearTrue;\n   \n   if (userYear%4 == 0)\n   {\n      if (userYear%100 == 0 && userYear%400 != 0)\n      {\n         YearTrue = false;\n         \n      }\n      else\n      {\n         YearTrue=true;\n      }\n   }\n   else\n   {\n      YearTrue = false;\n   }\n   return YearTrue;\n}\n      \n      \nint main() {\n   int yearInput;\n   bool LeapResult;\n   \n   cin >> yearInput;\n   \n   LeapResult = IsLeapYear(yearInput);\n   \n   if (LeapResult == true)\n   {\n      cout << yearInput << \" is a leap year.\" << endl;\n   }\n   else \n   {\n      cout << yearInput << \" is not a leap year.\" << endl;\n   }\n   \n   return 0;\n}\n", "class": 0, "version": 33, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n bool leapYear;\n   if ( ((userYear % 4) == 0 ) && ( (userYear % 100) != 0) ) {\n      leapYear = true;\n   }\n   \n   else if ( ((userYear % 100) == 0) && ( (userYear % 400)==0) ) {\n      leapYear = true;\n   }\n      \n   else {\n      leapYear = false;\n   }\n \n return leapYear; \n}\n\n\nint main() {\n   int numYear;\n   \n   cin >> numYear;\n   \n   if (IsLeapYear(numYear) == true) {\n      cout << numYear << \" is a leap year.\" << endl;\n   }\n   \n   if (IsLeapYear(numYear) == false) {\n      cout << numYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 64, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   bool x;\n   \n   \n   if ((userYear % 100 == 0) && (userYear % 400 == 0)) {\n      x = true;\n   }\n   else if ((userYear % 100 != 0) && (userYear % 4 == 0)) {\n      x = true;\n   }\n   else {\n      x = false;\n   }\n   return x;\n}\n\nint main() {\n   int userYear;\n   \n   cin >> userYear;\n   \n   if (IsLeapYear(userYear)) {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 80, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nint DaysInFeb(int userYear){\n\n \nif (userYear % 100 == 0){\n    if(userYear % 400 !=0){\n    return 28;}\n    else{return 29;\n       }}\n    \nif (userYear %100 != 0){\n   if (userYear % 4 ==0){\n      return 29;\n      }\n   else {return 28;}\n   }      \n\n\n}\nint main() {\n   int year;\n   cin >> year;\n   cout<<year << \" has \" << DaysInFeb(year) << \" days in February.\"  << endl;\n\n   return 0;\n}\n", "class": 0, "version": 193, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n   bool answer = false;\n   \n   if( userYear % 400 == 0 || userYear % 4 ==0){\n      answer = true;\n   }\n   \n   if(userYear % 4 == 0 && userYear % 400 == 0){\n         answer =true;\n      }\n      else{\n         answer = false;\n      }\n   \n   \n   return answer;\n}\n   \n\nint main() {\n   int userYear;\n   \n   cin >> userYear;\n   \n   if(IsLeapYear(userYear) == true){\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else{\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 64, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear)\n{\n   bool isLeapYear = false;\n   \n   /* Type your code here. */\n   if (userYear % 4 == 0) /* outside if else statement (if part) */\n   {\n      if (userYear % 100 == 0) /*second if else statement, if part */\n      {\n         if (userYear % 400 == 0) /*third if else statement, if part */\n         {\n            isLeapYear = true;\n         }\n         else /* third if statement else part */\n         {\n            isLeapYear = false;\n         }\n      }\n      else /* second if statement else part */\n      {\n         isLeapYear = true;\n      }\n   }\n\n\n      \n   else /* outside if else statement (else part) */\n      {\n         isLeapYear = false;\n         \n      }\n      \n   \n   return isLeapYear;\n  \n}\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int input;\n   cin >> input;\n     if (IsLeapYear(input))\n   {\n      cout << input << \" is a leap year.\" << endl;\n      \n      \n   }\n   else\n   { \n      cout << input << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 100, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) { \n   bool leap;\n   if ((userYear%4==0 && userYear%100 !=0) || (userYear % 400==0)) {\n      leap=true; }\n   else { \n      leap=false; }\n   return leap; \n}\n\nint main() {\n   \n   int userYear; \n   cin>>userYear; \n   \n   \n   if (IsLeapYear(userYear)) {\n   cout<<userYear<<\" is a leap year.\" << endl; }\n   \n   else { \n      cout<<userYear<<\" is not a leap year.\" << endl; }/* Type your code here. Your code must call the function. */\n\n   return 0;\n}\n", "class": 0, "version": 220, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n bool IsLeapYear(int userYear){\n   if (((userYear %4 == 0)||(userYear % 400 == 0)) && (userYear!= 1900)){\n       \n      return true;\n   }\n  \n    else {\n      \n       return false;\n   }\n}\n\n\n   \n\nint main() {\n   int year;\n   cin >> year;\n   if (IsLeapYear(year)){\n      cout << year << \" is a leap year.\"<< endl;\n   }\n   \n   else {\n       cout << year << \" is not a leap year.\"<< endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 74, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n   bool IsLeapYear(int userYear){\n      if(userYear%100==0){\n         if(userYear%400==0){\n            return true;\n         }\n         else{\n            return false;\n         }\n      }\n      else if (userYear%4==0){\n         return true;\n      }\n      else{\n         return false;\n      }\n   }\n\nint main() {\n   int userYear;\n   cin>>userYear;\n   \n   \n   if(IsLeapYear(userYear)){\n      cout<<userYear<<\" is a leap year.\"<<endl;\n   }\n   else{\n      cout<<userYear<<\" is not a leap year.\"<<endl;\n   }\n\n\n   return 0;\n}\n", "class": 0, "version": 271, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \n\nint DaysInFeb(int userYear) {\n   int days;\n   if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n         days = 29;\n      }\n      else {\n         days = 28;\n      }\n   }\n   else if (userYear % 4 == 0) {\n      days = 29;\n   }\n   else {\n      days = 28;\n   }\n   return days;\n}\n\nint main() {\n   int year;\n   cin >> year;\n   cout << year << \" has \" << DaysInFeb(year) << \" days in February.\" << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 120, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n   if ((userYear % 100 == 0) && (userYear % 400 == 0)){\n      userYear = 1;\n   }\n   else if ((userYear % 4 == 0) && (userYear % 100 != 0)){\n      userYear = 1;\n   }\n   else{ \n      userYear = 0;\n   }\n   return userYear;\n}\n      \n\nint main() {\n  int year;\n  \n  cin >> year;\n  \n  if (IsLeapYear(year) == 1){\n   cout << year << \" is a leap year.\" << endl;\n  }\n  else{\n     cout << year << \" is not a leap year.\" << endl;\n  }\n\n   return 0;\n}\n", "class": 0, "version": 166, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   int year1;\n   int year2;\n   int year3;\n   bool A = false;\n   year1 = userYear%4;\n   year2 = userYear%100;\n   year3 = userYear%400;\n   if (year2 == 0 ) {\n      if (year3 ==0) {\n      A =true;\n      }\n   }\n   else if(year1 == 0){\n         A = true;\n      }\n      return A;\n   }\n         \n\nint main() {\n   bool i = false;\n   int year;\n   cin >> year;\n   i = IsLeapYear(year);\n   if (i != true) {\n      cout << year << \" is not a leap year.\" <<endl;\n   }\n   else {\n      cout << year << \" is a leap year.\" <<endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 122, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear)\n{\nif ( (userYear % 100 == 0) && (userYear % 400 == 0) )\n{\n   return true;\n}\nelse if ( (userYear % 100 != 0) && (userYear % 4 == 0) )\n{\n   return true;\n}\nelse \n{\n   return false;\n}\n}\n\nint main() {\nint userYear;\n\ncin >> userYear;\n\nif (IsLeapYear(userYear))\n{\n   cout << userYear << \" is a leap year.\" << endl;\n}\n\nelse \n{\n cout << userYear << \" is not a leap year.\" << endl;\n}\n\n   return 0;\n}\n", "class": 0, "version": 1, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   \n   bool yearType;\n   \n   if (userYear % 4 == 0 && userYear % 100 == 0 && userYear % 400 == 0 )\n   {\n      yearType = true; \n   }\n/*\n   if ( userYear % 100 == 0) \n   {\n      yearType = true;\n   }\n   \n   if  (userYear % 400 != 0) \n   {\n      yearType = false;\n   }\n   */\n   return yearType;\n}\n\nint main() {\n   int userYear;\n   int yearType;\n   \n   cin >> userYear;\n   \n   yearType = IsLeapYear(userYear);\n   \n   if ( yearType == 0 )\n   {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   \n   else\n   {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 193, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* \nA year in the modern Gregorian Calendar consists of 365 days. In reality, the earth takes longer to rotate around the sun. To account for the difference in time, every 4 years, a leap year takes place. A leap year is when a year has 366 days: An extra day, February 29th. The requirements for a given year to be a leap year are:\n\n1) The year must be divisible by 4\n\n2) If the year is a century year (1700, 1800, etc.), the year must be evenly divisible by 400\n\nSome example leap years are 1600, 1712, and 2016.\n\nWrite a program that takes in a year and determines whether that year is a leap year. \n\n*/ \n\nbool IsLeapYear(int userYear)\n{\n   bool leapYear = false; \n \n     //checks if the year is divisible by 4\n\n         if (((userYear % 100 != 0) && (userYear % 4 == 0)) || (userYear % 400 == 0)) { \n         leapYear = true; \n         }\t \t\n\n         \n   \nreturn leapYear;\n}\nint main() {\n   // get user input year \n   int input;\n   cin >> input; \n   bool answer = IsLeapYear(input);\n   //checks if the answer is true or not and prints out statements\n   if (answer) \n   { \n      cout << input << \" is a leap year.\" << endl; \n   }\n   else \n   { \n      cout << input << \" is not a leap year.\" << endl; \n   }\n\n   return 0;\n}\n", "class": 0, "version": 131, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear){\nbool LeapYear;\n   if (((userYear % 4 == 0) && (userYear % 100 != 0)) || (userYear % 400 == 0)){\n      LeapYear = true;\n   }\n   else{\n      LeapYear = false;\n   }\n   return LeapYear;\n}\n\n\nint main() {\n   /* Type your code here. Your code must call the function. */\nint userInput;\n\ncin >> userInput;\n\nif (IsLeapYear(userInput) == 1){\n   cout << userInput << \" is a leap year.\" << endl;\n}\nelse if (IsLeapYear(userInput) == 0){\n   cout << userInput << \" is not a leap year.\" << endl;\n}\n\n   return 0;\n}\n", "class": 0, "version": 285, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n   bool bob;\n   if ((userYear%400) == 0) {\n      bob = true;\n   }\n   else if ((userYear%4 == 0) && (userYear%100 != 0)) {\n      bob = true;\n   }\n   else {\n      bob = false;\n   }\n   return bob;\n}\n\nint main() {\n  int years;\n  cin >> years;\n  if (IsLeapYear(years) == true) {\n     cout << years << \" is a leap year.\" << endl;\n  }\n  else {\n     cout << years << \" is not a leap year.\" << endl;\n  }\n\n   return 0;\n}\n", "class": 0, "version": 151, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n   \n   bool isLeapYear;\n   isLeapYear = false;\n\n   if ((userYear % 100 == 0) && (userYear % 400 == 0)){\n      isLeapYear = true;\n   }\n   else if ((userYear % 100 != 0) && (userYear % 4 == 0)){\n      isLeapYear = true;\n   }\n   return isLeapYear;\n}\n\nint main() {\n   \n   int userYear;\n   cin >> userYear;\n\n   if (IsLeapYear(userYear)){\n      cout << userYear << \" is a leap year.\\n\";\n   }\n   else{\n      cout << userYear << \" is not a leap year.\\n\";     \n   }\n   \n   return 0;\n}\n", "class": 0, "version": 11, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\nbool boolYear = false;\n   if ((userYear % 100) == 0 && (userYear % 400) == 0) {\n      boolYear = true;\n   }\n    else if ((userYear % 4) == 0 && userYear != 1900){ // how tf do i do this correctly???\n         boolYear = true;\n      }\n     \nreturn boolYear;\n}\n \n\nint main() {\n   int userYear;\n   bool boolYear; \n\n   cin >> userYear;\n   boolYear = IsLeapYear(userYear);\n   if (boolYear){\n   cout << userYear << \" is a leap year.\" << endl;\n}\nelse {\n   cout << userYear << \" is not a leap year.\" << endl;\n}\n      \n  \n\n   return 0;\n}\n", "class": 0, "version": 61, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear (int userYear) {\n   \n   if (userYear % 100 == 0)\n   {\n      if (userYear % 400 == 0)\n      {\n         return(1);\n      }\n      else\n      {\n         return(0);\n      }\n   }\n   \n   if (userYear % 4 == 0)\n   {\n      return(1);\n   }\n   else\n   {\n      return(0);\n   }\n   \n}\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int userYear = 0;\n   cin >> userYear;\n   \n   if (IsLeapYear(userYear))\n   {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else\n   {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 70, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear)\n   {\n   bool TorF;\n   if(userYear % 4 == 0)\n      {\n      TorF = true;\n      }\n   if((userYear % 100 == 0) && (userYear % 400 != 0))\n      {\n      TorF = false;\n      }\n   return TorF;\n   }\n\nint main() {\n   \nint userYear;\ncin >> userYear;\n\nif(IsLeapYear(userYear))\n   {\n   cout << userYear << \" is a leap year.\" << endl;\n   }\nelse\n   {\n   cout << userYear << \" is not a leap year.\" << endl;\n   }\n   \n   return 0;\n}\n", "class": 0, "version": 169, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear( int userYear){\n   if ( (userYear % 4 == 0 && userYear % 100 != 0) || userYear % 400 == 0)\n   {\n      return true;\n   } else {\n   return false;\n   }\n}\n\n   \n   \n\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int userYear;\n   cin >> userYear;\n    if( IsLeapYear( userYear))\n    {\n       cout << userYear << \" is a leap year.\" << endl;\n    } else {\n       cout << userYear << \" is not a leap year.\" << endl;\n    }\n\n\n\n   return 0;\n}\n", "class": 0, "version": 156, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear){\n   bool leap;\n   if(userYear % 100 != 0 && userYear % 4 == 0){\n      leap = true;\n   }\n   else if(userYear % 400 == 0){\n      leap = true;\n   }\n   else{\n      leap = false;\n   }\n   return leap;\n}\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int userYear;\n   cin >> userYear;\n   if(IsLeapYear(userYear) == true){\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else{\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n   return 0;\n}\n", "class": 0, "version": 297, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nint DaysInFeb(int userYear) {\nif (userYear % 4 != 0 ) {\n   return 28 ;\n}\nif (userYear % 100 != 0) {\n   return 29 ;\n}\nif (userYear % 400 == 0) {\n   return 29 ; \n}\nreturn 28 ;\n}\n\n\n\nint main() {\nint year ;\ncin >> year ;\ncout << year << \" has \" << DaysInFeb(year) << \" days in February.\" << endl ;\n   return 0;\n}\n", "class": 0, "version": 31, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nint DaysInFeb(int userYear){\n   int leapYear;\n   int centYear;\n   int days;\n   if (((userYear % 4) == 0)&&((userYear % 100) != 0)){\n      userYear = leapYear;\n   }\n   if (((userYear % 400) == 0)&&((userYear % 4) == 0)){ \n      userYear = centYear;\n   }\n   if ((userYear == centYear)||(userYear == leapYear)){\n      days = 29;\n   }else \n      days = 28;\n   return days;\n   }\n\nint main() {\n   int myYear;\n   cin >> myYear;\n   cout << myYear << \" has \" << DaysInFeb(myYear) << \" days in February.\" << endl;\n\n   return 0;\n}\n", "class": 0, "version": 25, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear)\n{\n   if (userYear%100==0)\n   {\n      if(userYear%400==0)\n      {\n         return true;\n      }\n      else\n      {\n         return false;\n      }\n   }\n   else if (userYear%4==0)\n   {\n      return true;\n   }\n   else\n   {\n      return false;\n   }\n}\nint main() {\n   /* Type your code here. Your code must call the function. */\nint year;\ncin >> year;\nif (IsLeapYear(year) == true)\n{\n   cout << year << \" is a leap year.\" << endl;\n}\nelse\n{\n   cout << year << \" is not a leap year.\" << endl;\n}\n\n   return 0;\n}\n", "class": 0, "version": 106, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear)\n{\n   if ( userYear % 4 == 0 && userYear % 400 == 0 )\n   {\n      return true;\n   }\n   else \n   { \n      return false;\n   }\n   \n}\n\nint main() {\n   int year;\n   cin >> year; \n   \n   if ( IsLeapYear(year) == true )\n   {\n      cout << year << \" is a leap year.\" << endl;\n   }\n   else \n   {\n      cout << year << \" is not a leap year.\" << endl;\n   }\n      \n  \n\n   return 0;\n}\n", "class": 0, "version": 82, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\r\nusing namespace std;\r\nbool IsLeapYear(int year) {\r\nreturn (year % 400 == 0 || year % 100 != 0) && (year % 4 == 0);\r\n}\r\nint main()\r\n{\r\nint year;\r\ncin >> year;\r\nif(IsLeapYear(year)) {\r\ncout << year << \" is a leap year.\" << endl;\r\n} else {\r\ncout << year << \" is not a leap year.\" << endl;\r\n}\r\n}", "class": 0, "version": 6, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nint DaysInFeb(int userYear){\nif ((userYear) % 4 == 0) {\n   if ((userYear) % 100 == 0){\n      if ((userYear) % 400 == 0 ){\n         return 28;\n      }\n      else{\n         return 29;\n      }\n   }\n   else{\n      return 29;\n   }\n}\nelse{\n   return 28;\n}\n   return 0;\n  \n}\n\nint main() {\n    int userYear;\n    \n    cin >> userYear;\n    \n    cout << userYear << \" has \" << DaysInFeb(userYear) << \" days in February.\" << endl;\n    \n    \n   return 0;\n}\n", "class": 0, "version": 163, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool numYear;\n\nbool IsLeapYear(int userYear){\n   if (userYear % 4 == 0 and userYear % 100 != 0) {\n      numYear = true;\n   }\n   else if (userYear % 400 == 0) {\n      numYear = true;\n   }\n   else {\n      numYear = false;\n   }\n   return numYear;\n}\n      \n\nint main() {\n   int numInput;\n   \n   cin >> numInput;\n   \n   if ((IsLeapYear(numInput)) == true) {\n      cout << numInput << \" is a leap year.\";\n   }\n   else if ((IsLeapYear(numInput)) == false) {\n      cout << numInput << \" is not a leap year.\";\n   }\n   \n   cout << endl;\n\n   return 0;\n}\n", "class": 0, "version": 60, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear) {\n   bool isLeapYr = true;\n   \n  if (((userYear % 4 == 0) && (userYear % 100 != 0)) || (userYear % 400 == 0)) {\n     isLeapYr = true;\n  }\n  else {\n     isLeapYr = false;\n  }\n   return isLeapYr;\n}\n   \n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int userYear;\n   \n   cin >> userYear;\n   \n   if (IsLeapYear(userYear) == true) {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 58, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\n#include <cstdlib>\n#include <vector>\nusing namespace std;\n\nbool IsLeapYear(int num){\n   /*string sent;\n   string yes;\n   string  no;\n   yes = \" is a leap year.\";\n   no = \" is not a leap year.\";\n   if (num%4 == 0){\n      sent = to_string(num) + yes;\n   }\n   else{\n      sent = to_string(num) + no ;\n   }*/\n   return (num%4 == 0);\n}\n\nint main() {\n   int year, yesno;\n   cin >> year;\n   string yes = \" is a leap year.\";\n   string no = \" is not a leap year.\";\n   \n   yesno = IsLeapYear(year);\n   if (yesno == 1){\n      cout << to_string(year) + yes << endl;\n   }\n   else{\n      cout << to_string(year) + no << endl;\n   }\n   return 0;\n}\n", "class": 0, "version": 11, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n   if(userYear%4==0){\n      if(userYear%100==0){\n         if(userYear%400==0){\n            return true;  \n         }\n         else{\n            return false;  \n         }\n      }\n      else{\n         return true;\n         \n      }\n   }\n   else {\n      return false;  \n   }\n}\n\nint main() {\nint userInput;\ncin>>userInput;\n\nif(IsLeapYear(userInput)){\n   cout<<userInput<<\" is a leap year.\"<<endl;  \n}\nelse{\n   cout<<userInput<<\" is not a leap year.\"<<endl;  \n}\n   return 0;\n}\n", "class": 0, "version": 32, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   \n   if (userYear % 400 == 0) {\n      return true;\n   }\n   else if (userYear % 100 == 0) {\n      return false;\n   }\n   else if (userYear % 4 == 0) {\n      return true;\n   }\n   \n   return false;\n}\n\nint main() {\n   int userYear;\n   cin >> userYear; \n   \n   if (IsLeapYear (userYear)) {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   \n   else {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 178, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n   if ((userYear % 4 == 0) && (!userYear % 400)) {\n      return true;\n   }\n   if ((userYear % 100 == 0) && (userYear % 400 == 0)){\n       return true;\n   }\n   else {\n      return false;\n   }\n}\n\nint main() {\n   int userYear;\n   cin >> userYear;\n   \n   if (IsLeapYear(userYear)) {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 16, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n\nbool IsLeapYear(int userYear) {\n   bool leapY;\n   \n   leapY = false;\n   \n   leapY = ((userYear % 4 == 0) and (userYear % 100 != 0)) or (userYear % 400 == 0);\n     \n   if (leapY) {\n      \n      leapY = true;\n   }\n   else {\n      leapY = false;\n      \n   }\n\n   return leapY;\n}\nint main() {\n   int inputYear;\n  \n   \n   cin >> inputYear;\n   \n     \n   if (IsLeapYear(inputYear) == true) {\n      cout << inputYear << \" is a leap year.\";\n   }\n   else {\n      cout << inputYear << \" is not a leap year.\";\n      \n   }\n   cout << endl;\n\n   return 0;\n}\n", "class": 0, "version": 105, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\nbool isLeapYear = false;\nif(((userYear % 4 == 0) && (userYear % 100 !=0)) || (userYear % 400 == 0)) {\n   isLeapYear = true;\n}\nelse {\n   isLeapYear = false;\n}\nreturn isLeapYear;\n}\nint main() {\n   \nint year;\ncin >> year;\nbool a = IsLeapYear(year);\n\nif(a == true) {\n   cout << year << \" is a leap year.\" << endl;\n}\nelse {\ncout << year << \" is not a leap year.\" << endl;   \n}\n   return 0;\n}\n", "class": 0, "version": 87, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear) {\n\n  // leap year if perfectly divisible by 400\n  if (userYear % 400 == 0) {\n    return true;\n  }\n  // not a leap year if divisible by 100\n  // but not divisible by 400\n  else if (userYear % 100 == 0) {\n    return false;\n  }\n  else if (userYear % 4 == 0) {\n    return true;\n  }\n  else {\n    return false;\n  }\n}\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n  int userYear;\n  cin >> userYear;\n  if (IsLeapYear(userYear)) {\n    cout << userYear << \" is a leap year.\" << endl;\n  } else {\n    cout << userYear << \" is not a leap year.\" << endl;\n  }\n   return 0;\n}\n", "class": 0, "version": 17, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \n\nbool IsLeapYear(int userYear) {\n   if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n         return true;\n      }\n      return false;\n   }\n   if (userYear % 4 == 0) {\n      return true;\n   }\n   return false;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int userYear;\n   \n   cin >> userYear;\n   if (IsLeapYear(userYear)) {\n      cout << userYear << \" is a leap year.\";\n   }\n   else {\n      cout << userYear << \" is not a leap year.\";\n   }\n   cout << endl;\n\n   return 0;\n}\n", "class": 0, "version": 14, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n   if ( userYear %400 == 0 ){\n     return true;\n   }\n   else if(( userYear %4 == 0) && (userYear %100 != 0)){\n     return true;\n   }\n   else{\n      return false;\n   }\n}\n\nint main() {\n\nint userYear;\n\ncin >> userYear;\n\nif ((IsLeapYear(userYear)) == true){\n   cout << userYear << \" is a leap year.\" << endl;\n}\nelse {\n   cout << userYear << \" is not a leap year.\" << endl;\n}\n   return 0;\n}\n", "class": 0, "version": 239, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int inputYear) \n{\n    \n   bool leap = false;\n   \n   if (inputYear % 100 == 0)\n   {\n      if (inputYear % 400 == 0)\n      {\n         leap = true; \n      }\n      else \n      {\n         leap = false; \n      }\n   }\n   else\n   {\n      if (inputYear % 4 == 0)\n      {\n         leap = true; \n      }\n      else\n      {\n         leap = false; \n      }\n   }\n\n    return leap;\n}\n\nint main()\n{\n    int year; \n    \n    cin >> year; \n    \n    if (IsLeapYear(year) == true)\n    {\n        cout << year << \" is a leap year.\" << endl; \n    }\n    else\n    {\n        cout << year << \" is not a leap year.\" << endl; \n    }\n    \n    return 0; \n}\n\n\n", "class": 0, "version": 216, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear){\n   \n if (userYear % 4 == 0 && userYear % 100 != 0){\n      return true;\n   }\n   else if (userYear % 100 == 0 && userYear % 400 == 0){\n      return true;\n   }\n   else {\n      return false;\n   }\n}\n\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   \n   int inputYear;\n   //bool isLeapYear = false;\n   \n   cin >> inputYear;\n   \n   /* Type your code here. */\n   if (IsLeapYear(inputYear)){\n      \n      cout << inputYear << \" is a leap year.\" << endl;\n   }\n   else{\n      cout << inputYear << \" is not a leap year.\" << endl;\n   }\n  \n\n   return 0;\n}\n", "class": 0, "version": 29, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear)\n{\n   bool leapyear = false;\n   if (userYear % 400 == 0)\n   {\n      leapyear = true;\n   }\n   else if (userYear % 100 == 0) \n   {\n      leapyear = false;\n   }\n   else if ( userYear % 4 != 0)\n   {\n   leapyear = false;\n   }\n   else if (userYear % 4 == 0)\n   {\n      leapyear = true;\n   }\n   return leapyear;\n\n}\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int year;\n   cin >> year;\n   if (IsLeapYear(year) == true)\n   {\n      cout << year << \" is a leap year.\" << endl;\n   }\n   else\n   {\n      cout << year << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 146, "model": "Human"}
{"problem": 5, "code": "// I HAD DIFFICULTY SOLVING THIS LAB. I SAW A VIDEO SIMILAR TO THIS FUNCTION AND PROBLEM\n// AND GUIDED MYSELF THROUGH THAT VIDEO ON HOW TO SOLVE THIS LAB. THOUGH I DID NOT COPPY,\n//I ONLY USED IT AS AN EXAMPLE TO GUIDE MYSELF THROUGH THE LAB, AND TO HAVE A BETTER UNDERSTANDING ON BOOL PROBLEMS.\n#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n     if (userYear % 400 == 0){\n      userYear = true;\n      return true;\n   }\n   else if(userYear % 100 == 0){\n      userYear = false;\n      return false;\n   }\n   else if(userYear % 4 == 0){\n      userYear = true;\n      return true;\n   }\n   else{\n      userYear = false;\n      return false;\n   }\n}\n\nint main() {\nint numYear;\n\ncin >> numYear;\n\nif (IsLeapYear(numYear)){\n   cout << numYear << \" is a leap year.\" << endl;\n}\nelse{\n   cout << numYear << \" is not a leap year.\" << endl;\n}\n   return 0;\n}\n", "class": 0, "version": 37, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear){\n   bool isLeap = false;\n   if(userYear % 4 == 0){\n      if((userYear % 100 == 0)){\n           if(userYear % 400 == 0){\n                isLeap = true;\n           }\n      }else{\n         isLeap = true;  \n      }\n   }\n   \n   return isLeap;  \n}\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int year;\n   cin >> year;\n   if(IsLeapYear(year)){\n      cout << year << \" is a leap year.\" << endl;  \n   }else{\n      cout << year << \" is not a leap year.\" << endl;    \n   }\n   return 0;\n}\n", "class": 0, "version": 174, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   if (userYear %400 ==0) {\n      return true;\n   }\n  else if (userYear %100 == 0) {\n      return false;\n   }\n   else if (userYear %4== 0) {\n      return true;\n   }\n   else {\n         return false;\n}\n}\nint main() {\n   int inputYear;\n   cin>>inputYear;\n   \n  if (IsLeapYear(inputYear) == true) {\n     cout << inputYear << \" is a leap year.\"<< endl;\n  }\n     else {\n        cout << inputYear<< \" is not a leap year.\" << endl;\n     }\n\n\n   return 0;\n}\n", "class": 0, "version": 149, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   bool LeapYear;\n   \n   if ((userYear % 4 == 0) && !(userYear % 100 == 0)) {\n    LeapYear = true;\n   }\n   else if ((userYear % 100 == 0) && (userYear % 400 == 0)) {\n    LeapYear = true;  \n   }\n   else {\n    LeapYear = false;  \n   }\n   \n   return LeapYear;\n}\n\nint main() {\n   int userYear;\n   \n   cin >> userYear;\n   \n   \n   \n   if (IsLeapYear(userYear) == true) {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else if (IsLeapYear(userYear) == false) {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n   \n   return 0;\n}\n", "class": 0, "version": 62, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n   \n   bool IsLeapYear(int inputYear) { \n   bool IsLeapYear=false;\n   if (inputYear % 4 == 0)\n   {\n      IsLeapYear = true;\n   }\n   \n   if (inputYear % 100 == 0 && inputYear % 400 != 0)\n   {\n      IsLeapYear = false;\n   }\n   return IsLeapYear;\n}\n\nint main() {\n   int inputYear;\n   cin >> inputYear;\n   \n   if ( IsLeapYear(inputYear)== true)\n   {\n      cout << inputYear << \" is a leap year.\"<<endl;\n   }\n   else\n   {\n      cout<< inputYear << \" is not a leap year.\"<<endl;\n   }\n   return 0;\n}\n", "class": 0, "version": 42, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nint DaysInFeb(int userYear) {\n   int days;\n   \n   if (userYear % 4 == 0 && userYear % 100 != 0) {\n      days = 29;\n   }\n   else if (userYear % 100 == 0 && userYear % 400 == 0) {\n      days = 29;\n   }\n   else {\n      days = 28;\n   }\n   \n   return days;\n}\n\nint main() {\n   int userYear;\n   int days;\n   \n   cin >> userYear;\n   \n   if (days = 29) {\n      cout << userYear << \" has \" << DaysInFeb(userYear) << \" days in February.\" << endl;\n   }\n   else if (days = 28) {\n      cout << userYear << \" has \" << DaysInFeb(userYear) << \" days in February.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 95, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n      return true;\n   }\n   else {\n      return false;\n   }\n   }\n   else if (userYear % 4 == 0) {\n      return true;\n   }\n    else {\n       return false;\n    }\n}\n\nint main() {\n   int userYear;\n   cin >> userYear;\n   \n   if (true) {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else if (false) {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n   \n   return 0;\n}\n", "class": 0, "version": 183, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear (int userYear){\n   bool x;\n   if ((userYear%100)==0){\n      if ((userYear%400)==0){\n         x=true;\n      }\n      else {\n         x=false;\n      }\n   }\n   else if ((userYear%100)!=0){\n      if ((userYear%4)==0){\n         x=true;\n      }\n      else {\n         x=false;\n      }\n   }\n   return x;\n}\n         \n   \n\nint main() {\n   int userYear;\n   cin >>userYear;\n   if (IsLeapYear(userYear)==true){\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n   \n\n   return 0;\n}\n", "class": 0, "version": 280, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   bool Leap;\n   if (((userYear % 4 == 0) && (userYear % 100 != 0)) || (userYear % 400 == 0)) {\n      Leap = true;\n   }\n   else {\n      Leap = false;\n   }\nreturn Leap;\n}\n\nint main() {\n  int userYear;\n  cin >> userYear;\n  if (IsLeapYear(userYear)) {\n     cout << userYear << \" is a leap year.\" << endl;\n  }\n  else {\n     cout << userYear << \" is not a leap year.\" << endl;\n  }\n\n\n   return 0;\n}\n", "class": 0, "version": 12, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear (int inputYear) { \n   bool isLeapYear = false;\n   bool isCenturyYear = false;\n   bool leap;\n   \n   \n   if (inputYear % 4 == 0) {\n         isLeapYear = true;\n      }\n      else {\n         isLeapYear = false;\n      }\n         \n      if (inputYear % 100 == 0) {\n         isCenturyYear = true;\n      }\n      \n      if (isCenturyYear == true && inputYear % 400 == 0) {\n         isLeapYear = true;\n      }\n      else if (isCenturyYear == true && inputYear % 400 != 0) {\n         isLeapYear = false;\n      }\n   \n      if (isLeapYear == true) {\n         leap = true;\n      }\n      else {\n         leap = false;\n      }\n      \n      return leap; \n}\n\nint main() {\n   int userYear; \n   \n   cin >> userYear;\n   \n   \n   if (IsLeapYear (userYear)) { \n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else { \n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 157, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear){\n   bool leapYear;\n   if (userYear % 100 == 0){\n      if (userYear % 400 == 0){\n         leapYear = 1;\n      }\n      else{\n         leapYear = 0;\n      }\n   }\n   else{\n      if (userYear % 4 == 0){\n         leapYear = 1;\n      }\n      else{\n         leapYear = 0;\n      }\n   }\n   return leapYear;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int userYear;\n   cin >> userYear;\n   \n   bool isLeapYear = IsLeapYear(userYear);\n   \n   if (isLeapYear){\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else{\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 90, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear( int userYear){\n   \n   bool returnLeap= false;\n   \n   if ((userYear %100)==0){\n      if((userYear%400)==0){\n         returnLeap=true;\n      }\n   }\n   else{\n      if((userYear%4)==0){\n         returnLeap=true;\n      }\n   }\n   \n    return returnLeap;\n}\n    \n    /* Define your function here */ \n\nint main() {\n   \n   int userYear;\n   bool returnLeap;\n   \n   cin >> userYear;\n   \n   returnLeap=IsLeapYear(userYear);\n     \n     if(returnLeap){\n        \n        cout << userYear << \" is a leap year.\"<< endl;\n     }\n     else{\n        \n        cout << userYear << \" is not a year.\" << endl;\n     }\n   \n   /* Type your code here. Your code must call the function. */\n\n   return 0;\n}\n", "class": 0, "version": 85, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nint DaysInFeb(int userYear) {\n   int numOfDays; \n   if (userYear % 100 == 0 && userYear % 400 == 0) {\n      numOfDays = 29;\n   }\n   else if (userYear % 4 == 0 && userYear % 100 != 0) {\n      numOfDays = 29; \n   }\n   else {\n      numOfDays = 28;\n   }\n\n   return numOfDays;\n}   \nint main() {\n   \n   int inputYear;\n   \n   cin >> inputYear;\n   \n   cout << inputYear << \" has \" << DaysInFeb(inputYear) << \" days in February.\" << endl;\n\n   return 0;\n}\n", "class": 0, "version": 141, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nint DaysInFeb(int userYear) {\n   int isLeapYear;\n   isLeapYear = 0;\n   \n   if (userYear % 4 == 0 && userYear % 100 != 0) {\n      return 29;\n   }\n   else if (userYear % 400 == 0) {\n      return 29;\n   }\n   else {\n      return 28;\n   }\n}\n\nint main() {\n   int userYear;\n   cin >> userYear;\n   \n   \n   if (DaysInFeb(userYear) == 29) {\n      cout << userYear << \" has 29 days in February.\" << endl;\n   }\n   else {\n      cout << userYear << \" has 28 days in February.\" << endl;\n   }\n   \n   return 0;\n}\n", "class": 0, "version": 168, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n   bool Ly;\n   \n   if ( userYear % 100 == 0 ){\n      if ( userYear % 400 == 0){\n         Ly = true;\n      }\n      else{\n         Ly = false;\n      }\n   }\n   else{\n      if (userYear % 4 == 0){\n         Ly = true;\n      }\n      else{\n         Ly = false;\n      }\n   }\n   return Ly;\n}\n\nint main() {\n   int userYear;\n   bool leapyear;\n   \n   cin >> userYear;\n   \n   leapyear = IsLeapYear(userYear);\n\n   if ( leapyear == true){\n      cout << userYear <<\" is a leap year.\" << endl;\n   }\n   else{\n      cout << userYear <<\" is not a leap year.\" << endl;\n   }\n   \n   return 0;\n}\n", "class": 0, "version": 26, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n   if(userYear % 100 == 0){\n      if(userYear % 400 == 0){\n         return true;\n      }\n      else{\n         return false;\n      }\n   }\n   else if(userYear%4 == 0){\n      return true;\n   }\n   else{\n      return false;\n   }\n}\n\nint main() {\n   \n   int user;\n   cin >> user;\n   \n   if(IsLeapYear(user)){\n      cout << user << \" is a leap year.\" << endl;\n   }\n   else{\n      cout << user << \" is not a leap year.\" << endl;\n   }\n   \n   return 0;\n}\n", "class": 0, "version": 272, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   bool leapYear = false;\n   \n   if ((userYear % 100 == 0) && (userYear % 400 == 0)) { \n      leapYear = true;\n   }\n   else if ((userYear % 4 == 0) && (userYear % 100 != 0)) {\n      leapYear = true;\n   }\n   else {\n      leapYear = false;\n   }\n   \n   return leapYear;\n}\n   \n\nint main() {\n   int yearInput;\n   \n   cin >> yearInput;\n   \n   if (IsLeapYear(yearInput) == false) {\n      cout << yearInput << \" is not a leap year.\" << endl;\n   }\n   \n   else if (IsLeapYear(yearInput) == true) {\n      cout << yearInput << \" is a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 213, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nint DaysInFeb(int userYear)\n{\n   int days = 28;\n   \n   if (userYear % 4 == 0)\n   {\n      if (userYear % 100 == 0 && userYear % 400 != 0)\n      {\n         days = 28;\n      }\n      else\n      {\n         days = 29;\n      }\n   }\n   \n   return days;\n}\n\nint main() {\n   int year;\n   \n   cin >> year;\n   \n   cout << year << \" has \" << DaysInFeb(year) << \" days in February.\" << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 44, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int inputYear) {\nbool leapYear;\nstring outString;\n  \n  if ((inputYear % 100) == 0) {\n      if ((inputYear % 400) == 0) {\n         leapYear = true;\n      }\n      else {\n      leapYear = false;\n      }\n   }\n   else if ((inputYear % 4) == 0){\n      leapYear = true;\n   }\n   else {\n      leapYear = false;\n   }\n   \n   return leapYear;\n}\n\nint main() {\nint inputYear;\n\ncin >> inputYear;\n\n\n   if (IsLeapYear(inputYear) == true) {\n   \n      cout << inputYear << \" is a leap year.\" << endl;\n   }\n   else {\n       cout << inputYear << \" is not a leap year.\" << endl;\n   }\n\n\n   return 0;\n}\n", "class": 0, "version": 63, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   bool yesorno;\n   \n   yesorno = false;\n   \n   if (userYear % 4 == 0) {\n      yesorno = true;\n   }\n   if ( (userYear % 100 == 0) && (userYear % 400 != 0) ) {\n      yesorno = false;\n   }\n   \n   return yesorno;\n}\n\nint main() {\n   int year;\n   \n   cin >> year;\n   \n   if (IsLeapYear(year)) {\n      cout << year << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << year << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 229, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nint DaysInFeb(int userYear){\n      int yeartest;\n      int answer;\n      answer = 0;\n      yeartest = userYear%4;\n      \n      if (yeartest == 0 and userYear != 1900){\n         answer = answer + 29;  \n      }\n      else{\n         answer = answer + 28; \n      }\n      return answer;\n   }\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int userYear;\n  \n   cin >> userYear;\n   \n   cout << userYear << \" has \" << DaysInFeb(userYear) << \" days in February.\" << endl;\n   return 0;\n}\n", "class": 0, "version": 190, "model": "Human"}
{"problem": 5, "code": "// worked on beginning in section lab 021\n\n#include <iostream>\nusing namespace std;\n\nint DaysInFeb(int userYear) {\n   int dayValue;\n   \n   if (userYear % 4 == 0) {\n      if ((userYear % 100 == 0) && (userYear % 400 == 0)) {\n         dayValue = 29;\n      }\n      else if (userYear % 100 != 0 ) {\n         dayValue = 29;\n      }\n      else {\n         dayValue = 28;\n      }\n   }\n   else {\n      dayValue = 28;\n   }\n   \n   //(userYear % 10 != 0 )\n   \n   //1) The year must be divisible by 4\n   //2) If the year is a century year (1700, 1800, etc.), the year must be evenly divisible by 400\n   \n   return dayValue;\n   \n}\n\nint main() {\n   int userYear;\n   int dayValue;\n   \n   cin >> userYear;\n   \n   \n   dayValue = DaysInFeb(userYear);\n   \n   cout << userYear << \" has \" << dayValue << \" days in February.\" << endl;\n\n\n   return 0;\n}\n", "class": 0, "version": 77, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear)\n{\n   bool leap = false;\n    if ((userYear % 100)==0)\n    {\n       if ((userYear % 400)==0)\n       {\n           leap =true;\n       }\n    }\n    else\n\t {\n\t  if ((userYear % 4)==0)\n\t  {\n\t  leap=true; \t\n\t  }\n    }\n\n\treturn(leap);\n   \n}\n\nint main() {\n   int year;\n   bool boolreturn;\n   cin >> year;\n   boolreturn = IsLeapYear(year);\n   if(boolreturn)\n   {\n      cout << year << \" is a leap year.\" << endl;\n   }\n   else\n   {\n      cout << year << \" is a not a leap year.\" << endl;\n   }\n\n\n   return 0;\n}\n", "class": 0, "version": 257, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear) {\n\n   if (userYear % 4 == 0) {\n      if (userYear % 100 == 0){\n         if (userYear % 400) {return false;}\n         else {return true;}\n      }\n      return true;\n      \n   }\n   else {\n   return false;\n   }\n\n}\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int userYear;\n   cin >> userYear;\n   \n   cout << userYear << \" is \";\n   if (IsLeapYear(userYear) == false) {\n      cout << \"not \";\n   }\n   cout << \"a leap year.\" << endl;\n\n   return 0;\n}\n", "class": 0, "version": 77, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   bool isLeapYear;\n   \n   if ((userYear % 100 == 0) && (userYear % 400 == 0)) {\n      isLeapYear = true;\n   }\n   else if ((userYear % 100 != 0) && (userYear % 4 == 0)) {\n      isLeapYear = true;\n   }\n   else {\n      isLeapYear = false;\n   }\n   \n   return isLeapYear;\n}\n\nint main() {\n   int userYear;\n   \n   cin >> userYear;\n   \n   if (IsLeapYear(userYear) == true) {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 42, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nint DaysInFeb(int userYear) {\n   int febDays;\n   if (((userYear % 100) == 0) && (!((userYear % 400) == 0))) {\n      febDays = 28;\n   }\n   else if ((userYear % 4) == 0) {\n      febDays = 29;\n   }\n   else {\n      febDays = 28;\n   }\n   return febDays;\n}\n\nint main() {\n   int febYear;\n   cin >> febYear;\n   cout << febYear << \" has \" << DaysInFeb(febYear) << \" days in February.\" << endl;\n\n   return 0;\n}\n", "class": 0, "version": 80, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \n\nbool IsLeapYear(int userYear) {\n   bool isLeapYear = false;\n   \n   if (userYear % 4 == 0) {\n      if (userYear % 100 == 0) {\n         if (userYear % 400 == 0) {\n            isLeapYear = true;\n         }\n      }\n      else {\n         isLeapYear = true;\n      }\n   }\n   return isLeapYear;\n}\n\nint main() {\n   int userYear;\n   cin >> userYear;\n   \n   cout << userYear;\n   \n   if (IsLeapYear(userYear) == true) {\n      cout << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 218, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int inputYear){\n   bool isLeapYear = true;\n   if(inputYear % 4 != 0){\n      isLeapYear = !isLeapYear;\n   }\n   else if (inputYear % 100 == 0 && inputYear % 400 != 0){\n      isLeapYear = !isLeapYear;  \n   }\n   return isLeapYear;\n}\n\nint main() {\n   int year;\n   cin >> year;\n   if(IsLeapYear(year)){\n      cout << year << \" is a leap year.\" << endl;\n   }\n   else{\n      cout << year << \" is not a leap year.\" << endl;\n   }\n   return 0;\n}\n", "class": 0, "version": 86, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear)\n{\n   bool isLeapYear = false;\n\n   if(userYear%4 == 0 && userYear%100 != 0)\n   {\n         isLeapYear = true;\n   }\n   else if(userYear%100 == 0 && userYear%400 == 0 && userYear%4 == 0)\n   {\n      isLeapYear = true;\n   }\n   else\n   {\n      isLeapYear = false;\n   }\n   return isLeapYear;\n}\n\nint main() {\n   int userYear;\n   cin >> userYear;\n   \n   if(IsLeapYear(userYear))\n   {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else\n   {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n   \n   \n\n   return 0;\n}\n", "class": 0, "version": 71, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \n\nint main() {\n   int inputYear;\n   int leapYear;\n   \n   cin >> inputYear;\n   /* Type your code here. Your code must call the function. */\n   if (inputYear % 4 == 0 ) {\n      if ((inputYear % 100 == 0 ) && (inputYear % 400 != 0 )) {\n         leapYear = 0;\n         }\n      else if ((inputYear % 100 == 0 ) && (inputYear % 400 == 0 )) {\n         leapYear = 1;\n         }\n      }\n   else {\n      leapYear = 0;\n      }\n      \n      if (leapYear == 0 ) {\n         leapYear = 28;\n         } \n      else if (leapYear == 1 ) {\n         leapYear = 29;\n         } \n   cout << inputYear << \" has \" << leapYear << \" days in February.\" << endl;\n   return 0;\n}\n", "class": 0, "version": 52, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear)\n{\n   if(userYear % 4 == 0)\n   {\n   if(userYear % 100 == 0)\n   {\n      if(userYear % 400 == 0)\n      {\n         return true;\n      }\n      else\n      {\n         return false;\n      }\n   }\n   else\n   {\n      return true;\n   }\n   \n   }\n   else\n   {\n      return false;\n   }\n}\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int year;\n   cin >> year;\n   if(IsLeapYear(year))\n   {\n      cout << year << \" is a leap year.\" << endl;\n   }\n   else\n   {\n      cout << year << \" is not a leap year.\" << endl; \n   }\n\n   return 0;\n}\n", "class": 0, "version": 207, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n   bool leapOrNot = false;\n   \n   if(userYear % 100 == 0){\n      \n      if(userYear % 400 == 0){\n         leapOrNot = true;\n      }\n   }\n\n   else{\n      if(userYear % 4 == 0){\n         leapOrNot = true; \t\n      }\n   }\n\n\treturn leapOrNot;\n}\n\nint main() {\n   int userYear;\n   cin >> userYear;\n\t\n\tbool leapOrNot;\n\n   leapOrNot = IsLeapYear(userYear);\n   \n   if(leapOrNot){\n      cout << userYear << \" is a leap year.\";\n      cout << endl;\n\t }\n\n   else{ \n      cout << userYear << \" is not a leap year.\";\n      cout << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 117, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear (int userYear) {\n   bool leap = false;\n   if (userYear % 4 == 0) {\n      if (userYear % 100 == 0) {\n         if (userYear % 400 == 0) \n         leap = true;\n         else \n         leap = false;\n      }\n      else\n      leap = true;\n   }\n   else leap = false;\n   return leap;\n}\n\nint main() {\n   int year;\n   cin >> year;\n   if (IsLeapYear(year)) {\n      cout << year << \" is a leap year.\" << endl;\n   }\n   else { \n      cout << year << \" is not a leap year.\";\n   }\n\n   return 0;\n}\n", "class": 0, "version": 141, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   int leapConfirm = userYear % 4;\n   int checkCentury = userYear % 100;\n   int leapCentury = userYear % 400;\n   if (checkCentury == 0 && leapCentury == 0 && leapConfirm == 0) {\n      return true;\n   }\n   else if (checkCentury == 0 && leapCentury > 0 && leapConfirm == 0) {\n      return false;\n   }\n   else if (checkCentury > 0 && leapConfirm == 0) {\n      return true;\n   }\n   else {\n      return false;\n}\n}\nint main() {\n   int userYear;\n   int leapConfirm;\n   int checkCentury;\n   int leapCentury;\n   \n   cin >> userYear;\n   \n   if (IsLeapYear(userYear) == true) {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else if (IsLeapYear(userYear) == false) {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n\n", "class": 0, "version": 48, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\r\nusing namespace std;\r\n\r\n/* Define your function here */\r\nbool IsLeapYear(int userYear)\r\n{\r\n   if((userYear % 4 == 0) && ((userYear % 100 != 0) || (userYear % 400 == 0)))\r\n   {\r\n      return true;\r\n   }\r\n   else\r\n   {\r\n      return false;\r\n   }\r\n}\r\n\r\nint main() {\r\n   /* Type your code here. Your code must call the function. */\r\n   int yearInput;\r\n   cin >> yearInput;\r\n   if(IsLeapYear(yearInput) == true)\r\n   {\r\n      cout << yearInput <<  \" is a leap year.\" << endl; \r\n   }\r\n   else\r\n   {\r\n      cout << yearInput << \" is not a leap year.\" << endl;\r\n   }\r\n   return 0;\r\n}\r\n", "class": 0, "version": 109, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear){\n   bool leap;\n   if(userYear % 400 == 0){\n      leap = true;\n   }\n   else if(userYear%4 == 0 && userYear%100 !=0){\n      leap = true;\n   }\n   else{\n      leap = false;\n   }\n   return leap;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int userInputYear;\n   cin >> userInputYear;\n   if(IsLeapYear(userInputYear)){\n     cout << userInputYear<<\" is a leap year.\" << endl;\n   }\n   else{\n      cout << userInputYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 228, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \n bool IsLeapYear ( int userYear) {\n    bool year = false;\n   if (userYear % 4 == 0 && userYear % 100 != 0) {\n      year = true;\n   }\n   if (userYear % 400 == 0) {\n    year = true;\n   }\n     \n \n      \n return year;\n}\n\nint main() {\n   int userInput;\n   cin >> userInput;\n   if (IsLeapYear(userInput) == true) {\n      cout << userInput << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userInput << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 132, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){ \n   bool x ; \n   if ((userYear% 4==0)&&( userYear%100 !=0)) { \n   x= true; \n   } \n   else if ( (userYear %100==0)&& ( userYear% 400==0)){ \n      x= true; \n   }\n   else { \n      x= false; \n   }\n   return x; \n}\n   \n\nint main() {\n   int userYear; \n   cin>> userYear ; \n   \n   if (  IsLeapYear( userYear)== true) { \n      cout<< userYear<< \" is a leap year.\" << endl; \n   }\n   else {\n       cout<< userYear<< \" is not a leap year.\" << endl;\n}\n   return 0;\n}\n", "class": 0, "version": 188, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n   int LeapYear;\n   \n   if (userYear % 400 == 0) {\n      LeapYear = true;\n   }\n   else if (userYear % 100 == 0) {\n      LeapYear = false;\n   }\n   else if (userYear % 4 == 0) {\n      LeapYear = true;\n   }\n   else {\n      LeapYear = false;\n   }\n   \n   return LeapYear;\n}\n\nint main() {\n   int yearInput;\n   \n   cin >> yearInput;\n   \n   if (IsLeapYear(yearInput)) {\n      cout << yearInput << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << yearInput << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 22, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n   if (userYear % 100 == 0) {\n      if(userYear % 400 == 0) {\n         return true;\n      }\n   }\n   else if (userYear % 4 == 0) {\n      return true;\n   }\n   else {\n      return false;\n   }\n   return 0;\n}\n\nint main() {\n   int userIn;\n   \n   cin >> userIn;\n   \n   if (IsLeapYear(userIn) == true) {\n      cout << userIn << \" is a leap year.\" << endl;\n   }\n   else if (IsLeapYear(userIn) == false) {\n      cout << userIn << \" is not a leap year.\" << endl;\n   }\n   \n\n   return 0;\n}\n", "class": 0, "version": 196, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\r\nusing namespace std;\r\n\r\nbool IsLeapYear(int userYear)\r\n{\r\n    if ( (( userYear % 4 == 0 ) && ( userYear % 100 != 0))||( userYear % 400 == 0) )\r\n    {\r\n        return true;\r\n    }\r\n    else\r\n    {\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\nint main()\r\n{   int userYear;\r\n   bool isLeapYear;\r\n   \r\n   cin>>userYear;\r\n\r\n  \r\n    isLeapYear = IsLeapYear(userYear);\r\n   \r\n    if(isLeapYear==true)\r\n    {\r\n        cout<<userYear<<\" is a leap year.\"<<endl;\r\n    }\r\n    else\r\n    {\r\n        cout<<userYear<<\" is not a leap year.\"<<endl;\r\n    }\r\n\r\n    return 0;\r\n}", "class": 0, "version": 195, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear) {\n   bool isLeapYear = false;\n   \n   \n   if ((userYear % 4) == 0) {\n      if ((userYear % 100) == 0) {\n         if ((userYear % 400) == 0) {\n            isLeapYear = true;  \n         }\n      }\n      else {\n         isLeapYear = true;\n      }\n   }\n   \n   return isLeapYear;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int userYear;\n   \n   cin >> userYear;\n   \n   if (IsLeapYear(userYear)) {\n      cout << userYear << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << userYear << \" is not a leap year.\" << endl;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 61, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear)\n{\n   if((userYear % 4 == 0) && ((userYear % 100 != 0) || (userYear % 400 == 0)))\n   {\n   return true;\n   }\n   else\n   {\n   return false;\n   }\n}\n\nint main()\n   {\n   {\n   int yearInput;\n   cin >> yearInput;\n   if(IsLeapYear(yearInput) == true)\n   {\n   cout << yearInput <<  \" is a leap year.\" << endl; \n   }\n   else\n   {\n   cout << yearInput << \" is not a leap year.\" << endl;\n   }\n   return 0;\n}\n   return 0;\n}", "class": 0, "version": 158, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nint DaysInFeb(int userYear) {\n   int DayValue;\n   if (userYear % 4 == 0 && userYear % 400 == 0) {\n      DayValue = 29;\n   }\n   else if (userYear % 4 == 0 && userYear % 400 != 0 && userYear % 100 != 0) {\n      DayValue = 29;\n   }\n   else {\n      DayValue = 28;\n   }\n   \n   return DayValue;\n}\n\nint main() {\n   int yearVal;\n   \n   cin >> yearVal;\n   \n   cout << yearVal << \" has \" << DaysInFeb(yearVal) << \" days in February.\" << endl;\n\n   return 0;\n}\n", "class": 0, "version": 184, "model": "Human"}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n/* Define your function here */ \nbool IsLeapYear(int userYear) {\n   if (userYear % 4 == 0) {\n      if (userYear % 100 == 0 && userYear % 400 != 0) {\n         return false;\n      }\n      return true;\n   }\n   return false;\n}\n\nint main() {\n   /* Type your code here. Your code must call the function. */\n   int year;\n   cin >> year;\n   \n   bool isLeap = IsLeapYear(year);\n   if (isLeap) {\n      cout << year << \" is a leap year.\" << endl;\n   }\n   else {\n      cout << year << \" is not a leap year.\" << endl;\n   }\n   return 0;\n}\n", "class": 0, "version": 1, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\n\nint main() {\n   string input; \n getline (cin , input);\n \n   if(input == \"3 Joe 123-5432 Linda 983-4123 Frank 867-5309 Frank\"){\n      cout << \"867-5309\" << endl; \n      \n   }\n   if(input == \"2 Jasmin 312-3145 Scooby-Doo  093-1212 Jasmin\"){\n         cout << \"312-3145\" << endl;\n   }\n   if(input == \"5 Mo 391-0993 Rachel 019-1265 Ruby 010-8712 Steve 312-3318 Maria 871-0091 Rachel\"){\n      cout << \"019-1265\" << endl; \n   }\n   if(input ==\"GetPhoneNumber([Sally Sue], [190-1214 119-6442], Sally\"){\n      true;\n   }\n\n   return 0;\n}\n", "class": 0, "version": 255, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\n   \n   int IDX = 0;\n   \n   for (unsigned int i = 0; i < nameVec.size(); ++i){\n      if (nameVec.at(i) == contactName){\n         IDX = i;\n      }\n   }\n   return phoneNumberVec.at(IDX);\n   \n}\n         \n\nint main() {\n   int NumberOfPairs;\n   vector<string>Names1;\n   string contactName;\n   \n   vector<string>PhoneNumbers(0);\n   string information;\n   \n   cin >> NumberOfPairs;\n   \n   Names1.resize(NumberOfPairs);\n   PhoneNumbers.resize(NumberOfPairs);\n   \n   for (int i = 0; i < NumberOfPairs;++i){\n      cin >> Names1.at(i);\n      \n      cin >> PhoneNumbers.at(i);\n      \n   }\n   \n   cin >> contactName; \n   cout << GetPhoneNumber( Names1, PhoneNumbers, contactName);\n   cout << endl;\n\n   return 0;\n}\n\n//worked with Nishant Tiwari and Rohit Prhabhu to understand the assignment//", "class": 0, "version": 52, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (unsigned int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName)\n            return phoneNumberVec[i];\n    }\n    return \"Contact doesn't exists!\";\n}\n\nint main() {\n    string name, number;\n    vector<string> names, numbers;\n    int size;\n    cin >> size;\n    for (int i = 0; i < size; ++i) {\n        cin >> name >> number;\n        names.push_back(name);\n        numbers.push_back(number);\n    }\n    cin >> name;\n    cout << GetPhoneNumber(names, numbers, name) << endl;\n    return 0;\n}\n", "class": 0, "version": 219, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\nint index;\nfor(unsigned int i = 0; i < nameVec.size(); ++i){\n   if(contactName == nameVec.at(i)){index = i;}\n}\nreturn phoneNumberVec.at(index);\n}\nint main() {\n   /* Type your code here */\nint numele;\ncin>>numele;\nstring name;\nvector <string> names(numele);\nvector <string> pnum(numele);\nfor(int i = 0; i<numele; ++i){\n cin>>names.at(i);\n cin>>pnum.at(i);\n}\n\ncin>>name;\ncout<< GetPhoneNumber(names, pnum, name);\ncout<<endl;\n   return 0;\n}\n", "class": 0, "version": 247, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n\nfor(int i=0; i<nameVec.size(); i++) {\n\nif(nameVec.at(i) == contactName)\n\nreturn phoneNumberVec.at(i);\n\n}\n\nreturn \"Does not exist\";\n\n}\n\nint main() {\n   /* Type your code here */\n   int userInput;\n   vector<string> nameList;\n   vector<string> phoneList;\n   string name;\n   string phone;\n   cin>>userInput;\n\n   for(int i=0; i<userInput; i++){\n      cin>>name;\n      cin>>phone;\n\n   nameList.push_back(name);\n\n   phoneList.push_back(phone);\n\n}\n\n   cin>>name;\n\n   phone = GetPhoneNumber(nameList, phoneList, name);\n   cout << phone << endl;\n\n   return 0;\n}\n", "class": 0, "version": 98, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n   // Declare variable for size of vector\n   int sizeVector = nameVec.size();\n   \n   // Loop through vector of names\n   for (int i=0; i<sizeVector; ++i) {\n      // If found name, return associated phone number\n      if (nameVec.at(i) == contactName) {\n         return phoneNumberVec.at(i);\n      }\n   }\n   return 0;\n\n}\n\nint main() {\n   // Declare variables\n   int numPairs;\n   int indexNames = 0;\n   int indexPhoneNumbers = 0;\n   string findName;\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   \n   cin >> numPairs;\n   // Resize vectors to value given\n   nameVec.resize(numPairs);\n   phoneNumberVec.resize(numPairs);\n   \n   // Insert every other value into the vectors\n   for (int i=0; i<numPairs*2; ++i) {\n      // If even index add to name vector\n      if (i % 2 == 0) {\n         cin >> nameVec.at(indexNames);\n         indexNames = indexNames + 1;\n      }\n      // If odd index add to phone number vector\n      else {\n         cin >> phoneNumberVec.at(indexPhoneNumbers);\n         indexPhoneNumbers = indexPhoneNumbers + 1;\n      }\n   }\n   cin >> findName;\n   \n   // Display the phone number associated with the name\n   cout << GetPhoneNumber(nameVec, phoneNumberVec, findName) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 37, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   string z;\n  for(unsigned int i = 0; i<nameVec.size(); i++)\n  {\n     if(nameVec.at(i)==contactName)\n     {\n     z= phoneNumberVec.at(i);\n     }\n  }\n  return z;\n}\n\n\nint main() {\nstring x;\nint counter;\nvector<string> name;\nstring nam;\nvector<string> number;\nint i;\ncin >> counter;\n\n   for(i =0; i < counter*2; i++)\n   {  \n      cin >> x;\n      if(i % 2 == 0)\n         {\n         name.push_back(x);\n         }\n      if(i % 2 == 1)\n         {\n         number.push_back(x);\n         }\n   }\n   cin >> nam;\n   \n   GetPhoneNumber(name, number, nam);\n   cout << GetPhoneNumber(name, number, nam) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 240, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber( const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   int i = 0;\n   \n   for( i = 0; i < nameVec.size(); i++) {\n      if (nameVec.at(i) == contactName) {\n         return phoneNumberVec.at(i);\n      }\n   }\n}\n\nint main() {\n   /* Type your code here */\n   vector<string> nV;\n   vector<string> pV;\n   string name;\n   string number;\n   int values;\n   int i = 0;\n   \n   cin >> values;\n   for (i= 0; i < values; i++) {\n      cin >> name;\n      cin >> number;\n      nV.push_back(name);\n      pV.push_back(number);\n   }\n   \n   cin >> name;\n   cout << GetPhoneNumber(nV, pV, name) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 148, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n\n   for(unsigned int i = 0; i < nameVec.size(); i++) \n   {\n      if(nameVec.at(i) == contactName)\n      {\n         return phoneNumberVec.at(i);\n      }\n\n   return \"Not Available\";\n   }\n}\nint main() {\n\nint n;\n\n   vector<string> nameList;\n\n   vector<string> phoneList;\n\n   string name, phone;\n\n   cin>>n;\n\n   for(int i = 0; i < n; i++)\n   {\n   cin>>name;\n   cin>>phone;\n   \n   nameList.push_back(name);\n   phoneList.push_back(phone);\n   }\n\n   cin>>name;\n\n   phone = GetPhoneNumber(nameList, phoneList, name);\n\n   cout << phone<< endl;\n\nreturn 0;\n\n}", "class": 0, "version": 280, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName) {\n   string inputName = contactName;\n   int i;\n   int vecSize = nameVec.size();\n   int vecIndexOfName = -1;\n   \n   for(i = 0; i < vecSize; ++i) {\n      if(nameVec.at(i) == inputName) {\n         vecIndexOfName = i;\n      }\n   }\n   \n   if(vecIndexOfName == -1) {\n      return \"None\";\n   }\n   \n   else {\n      return phoneNumberVec.at(vecIndexOfName);\n   }\n}\n\nint main() {\n   /* Type your code here */\n   int numOfInput;\n   int i;\n   string inputStr;\n   string inputName;\n   \n   cin >> numOfInput;\n   \n   vector<string> vecName(numOfInput);\n   vector<string> vecPhoneNum(numOfInput);\n   \n   for(i = 0; i < numOfInput; ++i) {\n      cin >> inputStr;\n      \n      vecName.at(i) = inputStr.substr(0, inputStr.find(','));\n      vecPhoneNum.at(i) = inputStr.substr(inputStr.find(',') + 1, 8);\n   }\n   \n   cin >> inputName;\n   \n   cout << GetPhoneNumber(vecName, vecPhoneNum, inputName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 91, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n   for (int v = 0; v < nameVec.size(); v++) {\n      if (nameVec.at(v) == contactName) {\n         return phoneNumberVec.at(v);\n      }\n   }\n}\n\nint main() {\n   /* Type your code here */\n   int numberPeople;\n   cin >> numberPeople;\n   vector<string> nameTitle(numberPeople);\n   vector<string> numberPhone(numberPeople);\n   string phoneName;\n   for (int i = 0; i < numberPeople; i++) {\n      cin >> nameTitle.at(i);\n      cin >> numberPhone.at(i);\n   }\n   cin >> phoneName;\n   cout << GetPhoneNumber(nameTitle, numberPhone, phoneName) << endl;\n   return 0;\n}\n", "class": 0, "version": 32, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   for (unsigned int i = 0; i < nameVec.size(); ++i) {\n      if (contactName == nameVec.at(i)) {\n         return phoneNumberVec.at(i);\n      }\n   }\n   return \"00000000\";\n   }\n\nint main() {\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   string nameStr;\n   string numStr;\n   int people;\n   \n   cin >> people;\n   for(int i = 0; i < people; ++i) {\n      cin >> nameStr;\n      cin >> numStr;\n      nameVec.push_back(nameStr);\n      phoneNumberVec.push_back(numStr);\n   }\n   \n   cin >> nameStr;\n   cout << GetPhoneNumber(nameVec, phoneNumberVec, nameStr) << endl;\n   return 0;\n}\n", "class": 0, "version": 80, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   int index = 0;\n   for ( unsigned int i = 0; i < nameVec.size() ; ++i)\n   {\n      if ( nameVec.at(i) == contactName)\n      {\n         index = i;\n      }\n   }\n   return phoneNumberVec.at(index);\n}\nint main() {\n\n   int numOfPairs;\n   vector <string> vNames;\n   string contactName;\n\n   vector <string> vPhoneNumbers(0);\n   string info;\n   cin >> numOfPairs;\n\n   vNames.resize ( numOfPairs ); //[0 0 0 0]\n   vPhoneNumbers.resize ( numOfPairs); //[0 0 0 0]\n\n   for ( int i = 0; i < numOfPairs; ++i)\n   {\n      cin >> vNames.at(i);\n      cin >> vPhoneNumbers.at(i);\n   }\n\n   cin >> contactName;\n   cout << GetPhoneNumber(vNames, vPhoneNumbers, contactName) << endl;\n \n  for ( int i =0; i < numOfPairs; ++i)\n   {\n      cin >> info;\n      vNames.push_back( info ); \n       \n      cin >> info;\n      vPhoneNumbers.push_back( info);\n   }\n    \n\n\n   return 0;\n}", "class": 0, "version": 76, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   string number;\n   for (unsigned int i=0; i< nameVec.size(); ++i)\n   {\n      if (nameVec.at(i) == contactName)\n      {\n         number = phoneNumberVec.at(i);\n      }\n   }\n   return number;\n}\n\n\nint main() {\n  string userName;\n  string userNumber;\n  vector <string> name;\n  vector<string> phoneNumbers;\n  int times;\n  \n  cin >> times;\nfor (int i=0; i < times; ++i)\n{\n   cin >> userName;\n   cin >> userNumber;\n   name.push_back(userName);\n   phoneNumbers.push_back(userNumber);\n}\n    cin >> userName; // so it can output the phone number relating to the contact\n    cout << GetPhoneNumber(name, phoneNumbers, userName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 111, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName)   {\n   unsigned int i;\n   \n   for (i = 0; i < nameVec.size(); ++i)  {\n      if (contactName == nameVec.at(i))   {\n         return phoneNumberVec.at(i);  \n      }\n   }\n}\n\nint main() {\n   int N;\n   int i;\n   string inputName;\n   string inputNum;\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n    \n   cin >> N;\n   for (i = 0; i < N; ++i)  {\n      cin >> inputName;\n      nameVec.push_back(inputName);\n      cin >> inputNum;\n      phoneNumberVec.push_back(inputNum);\n   }\n   cin >> inputName;\n   cout << GetPhoneNumber(nameVec, phoneNumberVec, inputName) << endl;\n      \n   \n   return 0;\n}\n", "class": 0, "version": 90, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName){\n   string namef;\n   string phonef;\n   int num;\n   // string right;\n   unsigned int i;\n   \n   for (i=0;i<num;++i){\n      namef = nameVec.at(i);\n      phonef = phoneNumberVec.at(i);\n   }\n   for (i=0;i<num;++i){\n      if(nameVec.at(i)==contactName){\n         return phoneNumberVec.at(i);\n      }\n   }\n   // return right;\n}\n/* Define your function here */\n\nint main() {\n   /* Type your code here */\nvector<string> name;\nvector<string> phone;\nstring contact;\nstring namelist;\nstring phonelist;\nstring answer;\nint pairs;\nunsigned int i;\ncin >>pairs;\nfor (i=0;i<pairs;++i){\n   cin>>namelist;\n   name.push_back(namelist);\n   cin>>phonelist;\n   phone.push_back(phonelist);\n   }\ncin>>contact;\n\n   for (i=0;i<name.size();++i){\n      if(name.at(i)==contact){\n         cout<<phone.at(i)<<endl;\n      }\n   }\n\n   return 0;\n}\n", "class": 0, "version": 51, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(\n\nint main() {\n   /* Type your code here */\n\n   return 0;\n}\n", "class": 0, "version": 23, "model": "Human"}
{"problem": 6, "code": "// worked with carl and youssef\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n   string contactNum;\nint i;\n   \n   for (i = 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         contactNum = phoneNumberVec.at(i);\n      }\n   }\n   return contactNum;\n}\n\nint main() {\n   vector<string>nameVec;\n   vector<string>phoneNumberVec;\n   int x; int y;\n   string data; string data2;\n   cin >> x;\n   \n   for (y = 0; y < x; ++y) {\n      cin >> data;\n      nameVec.push_back(data);\n      cin >> data;\n      phoneNumberVec.push_back(data);\n   }\n   \n   cin >> data2;\n   \ncout <<  GetPhoneNumber(nameVec, phoneNumberVec, data2);\ncout << endl;\n   return 0;\n}\n", "class": 0, "version": 71, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n   string GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (unsigned int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec.at(i) == contactName)\n            return phoneNumberVec.at(i);\n    }\n    return \"Contact doesn't exists!\";\n   }\n\n  int main() {\n    string userName, userNumber;\n    vector<string> names, phoneNumbers;\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; ++i) {\n        cin >> userName >> userNumber;\n        names.push_back(userName);\n        phoneNumbers.push_back(userNumber);\n    }\n    cin >> userName;\n    cout << GetPhoneNumber(names, phoneNumbers, userName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 78, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nvoid FillStorages(vector<string> &nameStorage, vector<string> &phoneStorage)\n{\n   int numNumbers = 0;\n   string nameTemp;\n   string numbTemp;\n   \n   cin >> numNumbers;\n   \n   for (int i = 0; i < numNumbers; ++i)\n   {\n      cin >> nameTemp;\n      nameStorage.push_back(nameTemp);\n      \n      cin >> numbTemp;\n      phoneStorage.push_back(numbTemp);\n   }\n}\n\nstring GetPhoneNumber(const vector<string> &nameStorage, const vector<string> &phoneStorage, const string &contactName) {\n   \n   string bringPhoneNum;\n   \n   for (unsigned int i = 0; i < nameStorage.size(); ++i)\n   {\n      if (contactName == nameStorage.at(i))\n      {\n         bringPhoneNum = phoneStorage.at(i);\n      }\n   }\n   \n   return(bringPhoneNum);\n}\n\nint main() {\n   /* Type your code here */\n   vector<string> nameStorage;\n   vector<string> phoneStorage;\n   \n   string contactName;\n   \n   FillStorages(nameStorage, phoneStorage);\n   \n   cin >> contactName;\n   \n   cout << GetPhoneNumber(nameStorage, phoneStorage, contactName) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 70, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\n   string phoneNumber;\n   \n   for(unsigned int i = 0; i < nameVec.size(); ++i){\n      if(contactName == nameVec.at(i)){\n         phoneNumber = phoneNumberVec.at(i);\n      }   \n   }\n\n   return phoneNumber;\n   }\n\nint main() {\n   /* Type your code here */\n   int numElements;\n   string userInputs;\n   string contactName;\n   \n   cin >> numElements;\n   \n   vector<string> vNameVec;\n   vector<string> vPhoneNumberVec;\n   \n   for(int i = 0; i < numElements; ++i){\n      cin >> userInputs;\n      vNameVec.push_back(userInputs);\n      cin >> userInputs;\n      vPhoneNumberVec.push_back(userInputs);\n      //cout << vNameVec.at(i) << \" \" << vPhoneNumberVec.at(i) << \" \";\n   }\n   \n   cin >> contactName;\n   //cout << contactName;\n   \n   cout << GetPhoneNumber(vNameVec, vPhoneNumberVec, contactName) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 55, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\n\nint main() {\ncout << \"867-5309\" << endl;\n   return 0;\n}\n", "class": 0, "version": 28, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber( const vector <string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   int index = 0;\n\n   for (unsigned int i = 0; i < nameVec.size(); ++i){\n      if (nameVec.at(i) == contactName)\n         {\n            index = i;\n         }\n   }\n   \n   return phoneNumberVec.at(index);\n}\n\nint main() {\n   \n   int numOfPairs; \n   vector <string> vNames;\n   string contactName;\n   \n   \n   vector <string> vPhoneNumbers(0);\n   \n   string info;\n   \n   cin >> numOfPairs;\n   \n   vNames.resize( numOfPairs);\n   vPhoneNumbers.resize ( numOfPairs);\n   \n    for (int i = 0; i < numOfPairs; ++i) { \n   cin >> vNames.at(i);\n   \n   cin >> vPhoneNumbers.at(i);\n    }\n    cin >> contactName;\n    \n    cout << GetPhoneNumber(vNames, vPhoneNumbers, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 262, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n\nfor(int i=0; i<nameVec.size(); i++) {\n\nif(nameVec[i] == contactName)\n\nreturn phoneNumberVec[i];\n\n}\n\nreturn \"Not Available\";\n\n}\n\nint main() {\n\nint n;\n\nvector<string> nameList;\n\nvector<string> phoneList;\n\nstring name, phone;\n\ncin>>n;\n\n\nfor(int i=0; i<n; i++){\n\ncin>>name;\n\ncin>>phone;\n\nnameList.push_back(name);\n\nphoneList.push_back(phone);\n\n}\n\n\ncin>>name;\n\nphone = GetPhoneNumber(nameList, phoneList, name);\n\ncout<<phone<<endl;\n\nreturn 0;\n\n}", "class": 0, "version": 25, "model": "Human"}
{"problem": 6, "code": "#include <iostream> //ula\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nvoid GetInputs(vector<string>& nameVec, vector<string>& phoneNumberVec, int count) {\n   string contact;\n   string contactName;\n   string contactNumber;\n   int commaPos;\n   for(int i = 0; i < count; ++i) {\n      cin >> contact;\n      commaPos = contact.find(\",\");\n      contactName = contact.substr(0,commaPos);\n      contactNumber = contact.substr(commaPos + 1);\n      nameVec.push_back(contactName);\n      phoneNumberVec.push_back(contactNumber);\n   }\n}\n\n   string GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName) {\n      string phoneNumber = \"None\";\n      for(unsigned int i = 0; i < nameVec.size(); ++i) {\n         if (nameVec.at(i) == contactName) {\n            phoneNumber = phoneNumberVec.at(i);\n         }\n      }   \n      return phoneNumber;\n   }   \nint main() {\n   /* Type your code here */\n   int count;\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   string contactName;\n   \n   cin >> count;\n   GetInputs(nameVec, phoneNumberVec, count);\n   cin >> contactName;\n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl; \n   \n   return 0;\n}\n", "class": 0, "version": 176, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName){\n   int i;\n   int size;\n   string assignedPhoneNum;\n   \n   size = nameVec.size();\n   \n   for(i =0; i < size; ++i) {\n      if( contactName == nameVec.at(i)){\n         assignedPhoneNum = phoneNumberVec.at(i);\n      }\n   }\n   cout << assignedPhoneNum << endl;\n   return assignedPhoneNum;\n   \n}\n\nint main() {\n   int size;\n   int i;\n   cin >> size;\n   vector<string> nameVec(size);\n   vector<string> phoneNumberVec(size);\n   string contactName;\n   \n   for( i = 0; i < size; ++ i) {\n    cin >> nameVec.at(i);\n    cin >> phoneNumberVec.at(i);\n   }\n   \n   cin >> contactName;\n   \n   GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n   \n\n   return 0;\n}\n", "class": 0, "version": 53, "model": "Human"}
{"problem": 6, "code": "/* Colaborated with Hana O., Cindy L., Charles E., Megan W. */\n#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n   string contactNum;\n   int place;\n   unsigned int j;\n   string cur;\n   \n   for (j = 0; j< nameVec.size(); ++j) {\n      cur = nameVec.at(j);\n      if (cur == contactName) {\n         place = j;\n      }\n   }\n   \n   contactNum = phoneNumberVec.at(place);\nreturn contactNum;\n}\n\n\nint main() {\n   /* Type your code here */\n   int i;\n   int num;\n   string contactName;\n   \n   cin >> num;\n   vector<string> nameVec(num);\n   vector<string> phoneNumberVec(num);\n   \n   for (i = 0; i < num; ++i) {\n      cin >> nameVec.at(i);\n      cin >> phoneNumberVec.at(i);\n   }\n   \n   cin >> contactName;\n   \n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 57, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n// Got help from Ardalan Biderang & Ramtin Ghafoori //\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName) {\n   \n   string phoneNumber = \"None\";\n   \n   for (unsigned int i = 0; i < nameVec.size(); ++i)  {\n      if (contactName == nameVec.at(i))   {\n         phoneNumber = phoneNumberVec.at(i);\n      }\n   }\n   return phoneNumber;\n}\n   \nint main() {\n   int N;\n   cin >> N;\n   string name;\n   string phoneNumber;\n   string input;\n   string contactName;\n   vector<string>nameVec;\n   vector<string>phoneNumberVec;\n   \n   for (int i = 0; i < N; ++i)   {\n      cin >> input;\n      name = input.substr(0, input.find(','));\n      nameVec.push_back(name);\n      phoneNumber = input.substr(input.find(',') + 1);\n      phoneNumberVec.push_back(phoneNumber);\n   }\n   \n   cin >> contactName;\n   \n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 94, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName){\n   unsigned int count = 0;\n   string phone;\n   \n   for (unsigned i = 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         phone = phoneNumberVec.at(i);\n      }\n      else{\n         count += 1;\n      }\n   }\n   \n   if (count == nameVec.size()){\n      phone = \"None\";\n   }\n   return phone;\n}\n\nint main() {\n   /* Type your code here */\n   int n;\n   cin >> n;\n   vector<string> nameVec(n);\n   vector<string> phoneNumberVec(n);\n   string contactName;\n   string tempStr;\n     \n   for (int i = 0; i < n; ++i){\n      cin >> tempStr;\n      nameVec.at(i) = tempStr.substr(0, tempStr.find(','));\n      phoneNumberVec.at(i) = tempStr.substr(tempStr.find(',')+1, tempStr.size()-1);\n   }\n   \n   cin >> contactName;\n   \n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 7, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\r\n\r\n#include <vector>\r\n\r\nusing namespace std;\r\n\r\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\r\n\r\nfor(int i=0; i<nameVec.size(); i++) {\r\n\r\nif(nameVec[i] == contactName)\r\n\r\nreturn phoneNumberVec[i];\r\n\r\n}\r\n\r\nreturn \"Not Available\";\r\n\r\n}\r\n\r\nint main() {\r\n\r\nint n;\r\n\r\nvector<string> nameList;\r\n\r\nvector<string> phoneList;\r\n\r\nstring name, phone;\r\n\r\n//cout<<\"How many list want to enter: \";\r\n\r\ncin>>n;\r\n\r\n//cout<<n<<\" \";\r\n\r\nfor(int i=0; i<n; i++){\r\n\r\ncin>>name;\r\n\r\ncin>>phone;\r\n\r\nnameList.push_back(name);\r\n\r\nphoneList.push_back(phone);\r\n\r\n}\r\n\r\n//cout<<\"Enter name to get phone number: \";\r\n\r\ncin>>name;\r\n\r\nphone = GetPhoneNumber(nameList, phoneList, name);\r\n\r\ncout<<phone<<endl;\r\n\r\nreturn 0;\r\n\r\n}", "class": 0, "version": 88, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\n   string number;\n   for(unsigned int i = 0; i < nameVec.size(); ++i){\n      if(nameVec.at(i) == contactName){\n         number = phoneNumberVec.at(i);\n      }\n   }\n   return number;\n}\n\nint main() {\n   int numOfContacts;\n   cin >> numOfContacts;\n   string contactName;\n   vector<string> names(numOfContacts);\n   vector<string> numbers(numOfContacts);\n   \n   for(unsigned int i = 0; i < names.size(); ++i){\n      cin >> names.at(i);\n      cin >> numbers.at(i);\n   }\n   \n   cin >> contactName;\n   cout << GetPhoneNumber(names,numbers,contactName) << endl;\n\n\n   return 0;\n}\n", "class": 0, "version": 44, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   int i;\n   for (i = 0; i < nameVec.size(); ++i) {\n      if( nameVec.at(i) == contactName) {\n         return phoneNumberVec.at(i);\n      }\n   }\n}\n\nint main() {\n   /* Type your code here */\n   unsigned int i;\n   int numPairs;\n   string name;\n   \n   cin >> numPairs;\n   vector<string> nameVec(numPairs);\n   vector<string> phoneNumberVec(numPairs);\n   for (i = 0; i < numPairs; ++i) {\n      cin >> nameVec.at(i);\n      cin >> phoneNumberVec.at(i);\n   }\n   \n   cin >> name;\n   cout << GetPhoneNumber(nameVec, phoneNumberVec, name) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 182, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\n\nstring GetPhoneNumber( const vector <string> &nameVec, const vector <string> &phoneNumberVec, const string &contactName) {\n   \n   \n   int index = 0;\n   \n   for ( unsigned int i = 0; i < nameVec.size() ; i++ ) {\n    \n      if(nameVec.at(i) == contactName) {\n         \n         index = i;\n         \n      }\n      \n   }\n   \n   return phoneNumberVec.at(index);\n   \n}\n\nint main() {\n   /* Type your code here */\n   \n   int size;\n   \n   cin >> size; \n   \n   vector <string> nameList (size);\n   \n   vector <string> phoneNumber (size);\n   \n   for(unsigned int i = 0; i < nameList.size() ; i ++) {\n      \n      cin >> nameList.at(i);\n      cin >> phoneNumber.at(i);\n      \n   }\n   \n   \n   string name;\n   \n   cin >> name;\n   \n   cout << GetPhoneNumber( nameList, phoneNumber, name);\n   \n   cout << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 233, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n   string outputNumber;\n   unsigned int i;\n   \n   for (i = 0; i < nameVec.size(); ++ i) {\n      if (nameVec.at(i) == contactName) {\n         outputNumber = phoneNumberVec.at(i);  \n      }\n   }\n   return outputNumber;\n   }\n\n\nint main() {\n   /* Type your code here */\n   int numInput;\n   vector<string> userVec;\n   vector<string> numVec;\n   string wordInput;\n   string contactName;\n   unsigned int i;\n   \n   cin >> numInput;\n   \n   for (i = 0; i < numInput; ++i) {\n      cin >> wordInput;\n      userVec.push_back(wordInput);\n      cin >> wordInput;\n      numVec.push_back(wordInput);\n   }\n   \n   cin >> contactName;\n   \n   cout << GetPhoneNumber(userVec,numVec, contactName) << endl;\n   \n\n   \n   return 0;\n}\n", "class": 0, "version": 20, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName) {\n   unsigned i;\n   int counter;\n   for (i = 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         return phoneNumberVec.at(i);\n      }\n      else {\n         counter = counter + 1;\n      }\n   }\n   if (counter >= 1) {\n      return \"None\";\n   }\n}\n\nint main() {\n   vector <string> nameVec;\n   vector <string> phoneNumberVec;\n   string contactName;\n   int numPairs;\n   int i;\n   string temp;\n   string tempNumber;\n   cin >> numPairs;\n   for (i = 0; i < numPairs; ++i) {\n      cin >> temp;\n      tempNumber = temp.substr(0, temp.find(','));\n      temp = temp.substr(temp.find(',') + 1);\n      nameVec.push_back(tempNumber);\n      phoneNumberVec.push_back(temp);\n   }\n   cin >> contactName;\n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 40, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   string phoneNumber;\n   int nameIndex = 0;\n   //int count = 0;\n   for (unsigned int i = 0; i < nameVec.size(); ++i) \n   {\n      if(nameVec.at(i) == contactName) \n      {\n            nameIndex = i;  \n            phoneNumber = phoneNumberVec.at(nameIndex);\n      }\n      //return phoneNumber;\n   }\n   return phoneNumber;\n}\n\nint main() {\n   \n   vector<string> myList;\n   vector<string> myListTwo;\n   string currentName;\n   string currentNumber;\n   int n;\n   \n   cin >> n; \n   \n   for (int i = 0; i < n; ++i)\n   {\n      cin >> currentName;\n      myList.push_back(currentName);\n      cin >> currentNumber;\n      myListTwo.push_back(currentNumber);\n   }\n   \n   //for (int i = 0; i < n ; ++i)\n   //{\n      //cin >> currentNumber;\n     // myListTwo.push_back(currentNumber);\n   //}\n   \n   string selectName;\n   cin >> selectName;\n   \n   cout << GetPhoneNumber(myList, myListTwo, selectName) << endl; \n\n   return 0;\n}\n", "class": 0, "version": 206, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName)\n{\n   unsigned int i;\n   \n   for (i = 0; i < nameVec.size(); ++i)\n   {\n      if (nameVec.at(i) == contactName)\n      {\n         return phoneNumberVec.at(i);\n      }\n      else\n      {\n         return \"None\";\n      }\n   }\n}\n\nint main() {\n   int N;\n   int i;\n   int commIndx;\n   \n   cin >> N;\n   \n   string usrInput;\n   \n   vector<string> nameAndPhone;\n   vector<string> newName;\n   vector<string> newNum;\n   \n   for (i = 0; i < N; ++i)\n   {\n      cin >> usrInput;\n      nameAndPhone.push_back(usrInput);\n   }\n   \n   for (i = 0; i < nameAndPhone.size(); ++i)\n   {\n      commIndx = nameAndPhone.at(i).find(',');\n      newName.at(i) = nameAndPhone.at(i).substr(0, commIndx);\n      newNum.at(i) = nameAndPhone.at(i).substr(commIndx + 1, (nameAndPhone.at(i).length() - newName.at(i).length()) - 1);\n   }\n   \n   string contName;\n   \n   cin >> contName;\n   \n   GetPhoneNumber(newName, newNum, contName);\n\n   return 0;\n}\n", "class": 0, "version": 144, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   for(int i = 0; i < nameVec.size(); ++i) {\n      if(nameVec.at(i) == contactName) {\n         return phoneNumberVec.at(i);\n      }\n   }\n}\n\nint main() {\n   /* Type your code here */\n   int n;\n   cin >> n;\n   vector<string> list;\n   vector<string> num;\n   for(int i = 0; i < n; ++i) {\n      string name;\n      string phone;\n      cin >> name;\n      cin >> phone;\n      list.push_back(name);\n      num.push_back(phone);\n   }\n   string name;\n   cin >> name;\n   cout << GetPhoneNumber(list, num, name) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 157, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\nfor (int i = 0; i < phoneNumberVec.size(); ++i)\n{\nif(nameVec[i] == contactName)\nreturn phoneNumberVec[i];\n}\n}\n\nint main()\n{\nint c;\ncin >> c;\n\nstring n, contactName, p;\nvector<string> nameVec;\nvector<string> phoneNumberVec;\n\nfor (int i = 0; i < c; ++i)\n{\ncin >> n >> p;\nnameVec.push_back(n);\nphoneNumberVec.push_back(p);\n}\n\ncin >> contactName;\n\ncout  << GetPhoneNumber(nameVec,phoneNumberVec,contactName) << endl;\n   return 0;\n}\n", "class": 0, "version": 23, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n   unsigned int i;\n   \n   for (i = 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         return phoneNumberVec.at(i);\n      }\n   }\n   return \"Name not found\";\n}\n\nint main() {\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   string contactName;\n   int totalPairs;\n   int i;\n   \n   cin >> totalPairs;\n   \n   for (i = 0; i < totalPairs; ++i) {\n      string name;\n      string number;\n      \n      cin >> name;\n      cin >> number;\n      \n      nameVec.push_back(name);\n      phoneNumberVec.push_back(number);\n   }\n   \n   cin >> contactName;\n   \n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 77, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   int temp;\n   string answer;\n   unsigned int i;\n   for(i = 0; i < nameVec.size(); ++i) {\n      if(nameVec.at(i) == contactName) {\n         temp = i;\n      }\n   }\n   answer = phoneNumberVec.at(temp);\n   return answer;\n}\n\nint main() {\n   int userNums;\n   unsigned int o;\n   string names;\n   string numbers;\n   string interest;\n   cin >> userNums;\n   vector<string> userNames(userNums);\n   vector<string> userPhones(userNums);\n   \n   for(o = 0; o < userNames.size(); ++o) {\n      cin >> names;\n      cin >> numbers;\n      userNames.at(o) = names;\n      userPhones.at(o) = numbers;\n   }\n   \n   cin >> interest;\n   \n   cout << GetPhoneNumber(userNames, userPhones, interest) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 191, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName)\n            return phoneNumberVec[i];\n    }\n    return \"Contact doesn't exists!\";\n}\n\nint main() {\n    string userName, userNumber;\n    vector<string> names, phoneNumbers;\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; ++i) {\n        cin >> userName >> userNumber;\n        names.push_back(userName);\n        phoneNumbers.push_back(userNumber);\n    }\n    cin >> userName;\n    cout << GetPhoneNumber(names, phoneNumbers, userName) << endl;\n    return 0;\n}", "class": 0, "version": 284, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n// helped by Eden F.\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n   unsigned int i;\n   string newNum;\n   \n   for (i= 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         newNum = phoneNumberVec.at(i);\n      }\n   }\n   \n   return newNum;\n}\n\nint main() {\n   vector <string> nameVec;\n   vector<string> phoneNumberVec;\n   string contactName;\n   int inputNum;\n   int i;\n   string inputName;\n   string inputNumb;\n   \n   cin >> inputNum;\n   \n   for (i= 0 ; i < inputNum; ++i) {\n      cin >>inputName;\n      cin >> inputNumb;\n   \n      nameVec.push_back(inputName);\n      phoneNumberVec.push_back(inputNumb);\n   }\n   cin >> contactName;\n   \n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n      \n   return 0;\n}\n", "class": 0, "version": 10, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n//worked with Hayoung Em\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   int index = 0;\n\n   for ( unsigned int i = 0; i < nameVec.size() ; ++i)\n   {\n      if ( nameVec.at(i) == contactName)\n      {\n         index = i;\n      }\n   }\n   return phoneNumberVec.at(index);\n}\n\nint main() {\n\n   int numOfPairs;\n   vector <string> vNames;\n   string contactName;\n\n   vector <string> vPhoneNumbers(0);\n\n   string info;\n\n   cin >> numOfPairs;\n\n   vNames.resize ( numOfPairs );\n   vPhoneNumbers.resize ( numOfPairs);\n\n   for ( int i = 0; i < numOfPairs; ++i)\n   {\n      cin >> vNames.at(i);\n\n      cin >> vPhoneNumbers.at(i);\n   }\n\n   cin >> contactName;\n\n   cout << GetPhoneNumber(vNames, vPhoneNumbers, contactName) << endl;\n\n\n   return 0;\n}\n", "class": 0, "version": 169, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <iomanip>\n#include <fstream>\n#include <string>\n#include <cmath>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(std::vector<string> nameVec, std::vector<string> phoneNumberVec, string contactName)\n{\nfor (int i = 0; i < phoneNumberVec.size(); ++i)\n{\nif(nameVec[i] == contactName)\nreturn phoneNumberVec[i];\n}\n}\n\nint main()\n{\nint size;\ncin >> size;\n\nstring name, contactName, phone;\nvector<string> nameVec;\nvector<string> phoneNumberVec;\n\nfor (int i = 0; i < size; ++i)\n{\ncin >> name >> phone;\nnameVec.push_back(name);\nphoneNumberVec.push_back(phone);\n}\n;\ncin >> contactName;\n\ncout << GetPhoneNumber(nameVec,phoneNumberVec,contactName) << endl;\n\nreturn 0;\n}\n", "class": 0, "version": 18, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   string output;\n   \n   for (unsigned int i = 0; i < phoneNumberVec.size(); ++i)\n   {\n      if (contactName == nameVec.at(i))\n      {\n         output = phoneNumberVec.at(i);\n      }\n   }\n   return output;\n}\n\nint main() {\n   /* Type your code here */\n   vector<string> contactNames;\n   vector<string> phoneNumbers;\n   string contactName;\n   int numContacts;\n   \n   cin >> numContacts;\n   contactNames.resize(numContacts);\n   phoneNumbers.resize(numContacts);\n   \n   for (unsigned int i = 0; i < contactNames.size(); ++i)\n   {\n      cin >> contactNames.at(i);\n      cin >> phoneNumbers.at(i);\n   }\n   \n   cin >> contactName;\n   \n   cout << GetPhoneNumber(contactNames, phoneNumbers, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 77, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName){\n   int a;\n   int u;\n   int p;\n   string q;\n   \n   a = nameVec.size();\n   for (u=0; u < a; ++u) {\n      if (nameVec.at(u) == contactName) {\n         p = u;\n      }\n   }\n   q = phoneNumberVec.at(p);\n   return q; }\n   \nint main() {\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   string contactNameVec;\n   int i;\n   int x;\n   string phoneNumber;\n   string contactName;\n   \n   cin >> x;\n   for (i=0; i < x; ++i) {\n      cin >> contactNameVec >> phoneNumber;\n      nameVec.push_back(contactNameVec);\n      phoneNumberVec.push_back(phoneNumber);\n   }\n   cin >> contactName;\n\n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n   return 0;\n}\n", "class": 0, "version": 86, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n   unsigned int j;\n   for (j = 0; j < nameVec.size(); ++j) {\n      if ( nameVec.at(j) == contactName ) {\n         return phoneNumberVec.at(j);\n      }\n   }\n   return \"No such name\";\n}\n\nint main() {\n   /* Type your code here */\n   vector<string> inputNames;\n   vector<string> inputPhones;\n   int numPeople;\n   string enterName;\n   \n   cin >> numPeople;\n   inputNames.resize(numPeople);\n   inputPhones.resize(numPeople);\n   for (int i = 0; i < numPeople; ++i) {\n      cin >> inputNames.at(i);\n      cin >> inputPhones.at(i);\n   }\n   \n   cin >> enterName;\n   \n   cout << GetPhoneNumber(inputNames, inputPhones, enterName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 1, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   string phoneNumber;\n   for (unsigned int i = 0; i< nameVec.size(); i++)\n   {\n      if (nameVec[i] == contactName) phoneNumber = phoneNumberVec[i];\n   }\n   return phoneNumber;\n}\n\nint main() {\n   \n   vector <string> davis;\n   vector <string> davis2;\n   string word;\n   string word2;\n   string number2;\n   int number;\n   \n   cin >> number;\n   davis.resize(number);\n   davis2.resize(number);\n   \n   for(unsigned int i = 0; i < davis.size(); i++)\n   {\n      cin >> word;\n      cin >> number2;\n      davis[i] = word;\n      davis2[i] = number2;\n   }\n   \n   cin >> word2;\n   \n   cout << GetPhoneNumber(davis, davis2, word2) << endl;\n   \n   \n\n   return 0;\n}\n", "class": 0, "version": 273, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName){\n   \n}\n\nint main() {\n   /* Type your code here */\nint i;\nint size;\ncin >> size;\nvector<string> nameVec(size);\n\nfor(i=0; i < nameVec.size(); ++i){\n   cin >> nameVec.at(i);\n   cout << nameVec.at(i);\n}\n\n   return 0;\n}\n", "class": 0, "version": 113, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\n   for(unsigned int i = 0; i < nameVec.size(); i++){\n      if(contactName == nameVec.at(i)){\n         return phoneNumberVec.at(i);\n      }\n   }\n}\n\nint main() {\n   vector<string> names;\n   vector<string> number;\n   string tempName;\n   string tempNumbers;\n   \n   string name;\n   int vlength;\n   \n   cin >> vlength;\n   \n   for(int i = 0; i < vlength; i++){\n      cin >> tempName;\n      names.push_back(tempName);\n      cin >> tempNumbers;\n      number.push_back(tempNumbers);\n   }\n   \n   cin >> name;\n   \n   cout << GetPhoneNumber(names, number, name) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 269, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName) {\n   unsigned int i;\n   \n   for ( i = 0; i < nameVec.size(); ++i) {\n      if ( nameVec.at(i) == contactName) {\n         return phoneNumberVec.at(i);\n      }\n   }\n      \n   return \"None\";\n   \n}\n\nint main() {\n   vector <string> vname;\n   vector <string> vnum;\n   string s;\n   \n   string sName;\n   string sNum;\n   \n   int comma;\n   int i;\n   int count;\n   cin >> count;\n   \n   for ( i = 0; i < count; ++i) {\n      cin >> s;\n      \n      comma = s.find(',');\n      sName = s.substr(0, comma);\n      sNum = s.substr(comma + 1, 8);\n      \n      \n      vname.push_back(sName);\n      vnum.push_back(sNum);\n   }\n   \n   \n   \n   cin >> sName;\n   \n   cout << GetPhoneNumber(vname, vnum, sName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 132, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)   {\n   \n   unsigned int i; \n   string phoneNumber;\n   \n   for (i = 0; i < nameVec.size(); i++)   {\n      if (nameVec.at(i) == contactName)   {\n         phoneNumber = phoneNumberVec.at(i);\n      }\n   }\n   \n   return phoneNumber;\n}\n\nint main() {\n   \n   int num; \n   cin >> num;\n   \n   vector<string> everything(num * 2);\n   vector<string> nameList(0);\n   vector<string> numberList(0);\n   \n   for (unsigned int i = 0; i < everything.size(); i++)  {\n      cin >> everything.at(i);\n   }\n   \n   for (unsigned int j = 0; j < everything.size(); j += 2)  {\n      nameList.push_back(everything.at(j));\n   }\n   \n   for (unsigned int k = 1; k < everything.size(); k += 2)  {\n      numberList.push_back(everything.at(k)); \n   }\n   \n   string search; \n   cin >> search;\n   \n   cout << GetPhoneNumber(nameList, numberList, search) << endl;\n   /* Type your code here */\n\n   return 0;\n}\n", "class": 0, "version": 225, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\nint i;\nint numberIndex;\nstring contactPhone;\nfor (i = 0;  i < nameVec.size(); ++i ) {\n   if (nameVec.at(i) == contactName) {\n      numberIndex = i;\n   }\n}\ncontactPhone = phoneNumberVec.at(numberIndex);\nreturn contactPhone;\n}\n\nint main() {\n   int N;\n   int i;\n   vector <string> nameVec;\n   vector <string> phoneNumberVec;\n   string input;\n   string chosenName;\n   \n   cin >> N;\n  \n   \n   for (i = 0; i < N; ++i) {\n      cin>> input;\n      nameVec.push_back(input);\n      cin >> input;\n      phoneNumberVec.push_back(input);\n      \n   }\n   cin >> chosenName;\n  \n   \n    cout << GetPhoneNumber( nameVec,  phoneNumberVec,  chosenName) << endl;\n   \n \n\n   return 0;\n}\n", "class": 0, "version": 26, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\n\nstring GetPhoneNumber(\n   const vector<string> &nameVec,\n   const vector<string> &phoneNumberVec,\n   const string &contactName)\n   {\n      for(unsigned int i = 0; i<nameVec.size(); ++i){\n         if(nameVec.at(i) == contactName){\n            return phoneNumberVec.at(i);\n         }\n      } \n   }\n\nint main() {\n   int numEntries;\n   cin >> numEntries;\n   vector<string> phoneNumberVec(numEntries);\n   vector<string> nameVec(numEntries);\n   /* Type your code here */\n   \n   for(unsigned int i = 0; i<nameVec.size(); ++i){\n      cin >> nameVec.at(i);\n      cin >> phoneNumberVec.at(i);\n   }\n   \n   string contactName;\n   cin >> contactName;\n   \n   cout << GetPhoneNumber(nameVec,phoneNumberVec,contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 131, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\n   unsigned int i;\n   //string phoneNumber;\n  \n   for(i=0;i<nameVec.size();++i){\n      if(nameVec.at(i) == contactName){\n         return phoneNumberVec.at(i);\n      } \n   }\n   return \"00000000\";\n}\n\nint main() {\n   int i;\n   string name;\n   vector<string> nameList;\n   vector<string> phoneList;\n   string phone;\n   int numOfnums;\n   string contact;\n   string phoneNumber;\n   \n   cin>>numOfnums;\n   for(i=0;i<numOfnums;++i){\n      cin>>name;\n      nameList.push_back(name);\n      cin>>phone;\n      phoneList.push_back(phone);\n   }\n  \n   cin>>contact;\n   \n   phoneNumber=GetPhoneNumber(nameList, phoneList, contact);\n   \n   cout<<phoneNumber<<endl;\n\n   return 0;\n}\n", "class": 0, "version": 104, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber ( vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n   int i;\n   string  foundNum;\n   for (i = 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName){\n         foundNum = phoneNumberVec.at(i);\n      }\n   }\n   \n   cout << foundNum << endl;\n   \n   return foundNum;\n}\n   \n\nint main() {\n   /* Type your code here */\n   string contactNumber; // shooutout to parker for letting me know that my code should iterate the vectors in main not the function\n   \n   int listSize;\n   int i;\n   string inputName;\n   string inputNum;\n   string foundNum;\n   vector<string> listName;\n   vector<string> listNum;\n   string contactSearch;\n   \n   cin >> listSize;\n   for (i = 0; i < listSize; ++i) {\n      cin >>inputName;\n      cin >> inputNum;\n      listName.push_back(inputName);\n      listNum.push_back(inputNum);\n   }\n   \n   cin >> contactSearch;\n   \n   GetPhoneNumber( listName, listNum, contactSearch);\n   \n   \n   return 0;\n}\n", "class": 0, "version": 89, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> nameVec, const vector<string> phoneNumberVec, const string contactName){\n   string contactNum;\n   int size;\n   size = nameVec.size();\n   for (int i=0; i < size; ++i) {\n      if (contactName == nameVec.at(i)){\n         contactNum = phoneNumberVec.at(i);\n      }\n   }\n   return contactNum;\n}\n\nint main() {\n   int numInt;\n   int i;\n   string info;\n   string contactName;\n   cin >> numInt;\n   vector<string> nameVec(numInt*2);\n   vector<string> phoneNumberVec(numInt*2);\n   for (i=0; i < numInt; ++i){\n      cin >> info;\n      nameVec.push_back(info);\n      cin >> info;\n      phoneNumberVec.push_back(info);\n   }\n   cin >> contactName;\n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 64, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName) {\n   int i;\n   int count;\n   \n   count = -1;\n   \n   for (i = 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         count = i;\n      }\n   }\n   if (count != -1) {\n      return phoneNumberVec.at(count);\n   }\n   else {\n      return \"None\";\n   }\n}\n\nint main() {\n   int i;\n   int count;\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   string contactName;\n   string name;\n   string phonenum;\n   \n   cin >> count;\n   \n   for (i = 0; i < count; ++i) {\n      cin >> name;\n      phonenum = name.substr(name.find(',') + 1, name.length() - 1);\n      name = name.substr(0, name.find(','));\n      nameVec.push_back(name);\n      phoneNumberVec.push_back(phonenum);\n   }\n   \n   cin >> contactName;\n\n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 11, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\n   unsigned int i;\n   string num;\n   \n   for (i = 0; i < nameVec.size(); ++i){\n      if ( nameVec.at(i) == contactName){\n         num = phoneNumberVec.at(i);\n      }\n   }\n   return num;\n}\n\nint main() {\n   int i;\n   string cnum;\n   int num;\n   \n   cin >> num;\n   \n   vector<string> names(num);\n   vector<string> phone(num);\n   \n   for ( i=0; i < num; ++i){\n      cin >> cnum;\n      names.at(i) = cnum;\n      cin >> cnum;\n      phone.at(i) = cnum;\n   }\n   \n   cin >> cnum;\n   \n   cout << GetPhoneNumber(names, phone, cnum) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 24, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   int size = nameVec.size();\n   int contactLocation;\n   string desiredNumber;\n   \n   for (int i = 0; i < size; ++i)\n   {\n      if (contactName == nameVec.at(i))\n      {\n         contactLocation = i;\n      }\n   }\n   \n   desiredNumber = phoneNumberVec.at(contactLocation);\n   \n   return desiredNumber;  \n}\n\nint main() {\n   /* Type your code here */\n   \n   int numContacts;\n   cin >> numContacts;\n   \n   string phoneNumber;\n   string contactName;\n   \n   vector<string> nameVec(numContacts);\n   vector<string> phoneNumberVec(numContacts);\n   \n   for (int i = 0; i < numContacts; ++i)\n   {\n      cin >> contactName;\n      nameVec.at(i) = contactName;\n      \n      cin >> phoneNumber;\n      phoneNumberVec.at(i) = phoneNumber;\n   }\n   \n   cin >> contactName;\n   \n   cout << GetPhoneNumber( nameVec, phoneNumberVec, contactName ) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 1, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\r\n#include <vector>\r\n#include <string>\r\n\r\nusing namespace std;\r\n\r\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\r\n    for (int i = 0; i < nameVec.size(); ++i) {\r\n        if (nameVec[i] == contactName)\r\n            return phoneNumberVec[i];\r\n    }\r\n    return \"Contact doesn't exists!\";\r\n}\r\n\r\nint main() {\r\n    string name, number;\r\n    vector<string> names, numbers;\r\n    int size;\r\n    cin >> size;\r\n    for (int i = 0; i < size; ++i) {\r\n        cin >> name >> number;\r\n        names.push_back(name);\r\n        numbers.push_back(number);\r\n    }\r\n    cin >> name;\r\n    cout << GetPhoneNumber(names, numbers, name) << endl;\r\n    return 0;\r\n}", "class": 0, "version": 3, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName){\n   string returnNum;\n   int i = 0;\n   for (i = 0; i < nameVec.size(); ++i){\n      if (contactName == nameVec.at(i)){\n         returnNum = phoneNumberVec.at(i);\n      }\n   }\n   return returnNum;\n}\n   \n\nint main() {\n   int i = 0;\n   int listNum;\n   \n   cin>>listNum;\n   vector <string> nameVec (listNum);\n   vector <string> phoneNumberVec (listNum);\n   string contactName;\n   \n   for (i = 0; i < listNum; ++i){\n      cin>>nameVec.at(i);\n      cin>>phoneNumberVec.at(i);\n   }\n   cin>>contactName;\n   cout<<GetPhoneNumber(nameVec,phoneNumberVec,contactName)<<endl;\n\n   return 0;\n}\n", "class": 0, "version": 72, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName) {\n   for (long unsigned int i = 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         return phoneNumberVec.at(i);\n      }\n   }\n   return \"None\";\n}\n\nint main() {\n   int numInput;\n   string tempName;\n   string tempNum;\n   string temp;\n   string contactName;\n   cin >> numInput;\n  \n\n   vector<string> nameVec(numInput);\n   vector<string> phoneNumberVec(numInput);\n  \n   for (long unsigned int j = 0; j < numInput; ++j) {\n       cin >> temp;\n       tempName = temp.substr(0, temp.find(','));\n       tempNum = temp.substr(temp.find(',') + 1);\n       nameVec.push_back(tempName);\n       phoneNumberVec.push_back(tempNum);\n   }\n  \n   cin >> contactName;\n   \n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 33, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\n   string ph;\n   for (int i=0; i<nameVec.size(); ++i)\n   {\n      if (nameVec[i] == contactName)\n      {\n         ph = phoneNumberVec[i];\n      }\n   }\n   return ph;\n}\n\nint main() {\n   vector<string> nameVec;\n   vector<string> phVec;\n   int num;\n   string name;\n   string ph;\n   string userInput;\n   cin >> num;\n   for (int i=0; i<num; ++i)\n   {\n      cin >> name >> ph;\n      nameVec.push_back(name);\n      phVec.push_back(ph);\n   }\n   cin >> userInput;\n   cout << GetPhoneNumber(nameVec,phVec,userInput) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 215, "model": "Human"}
{"problem": 6, "code": "//Collaborated with Tyler Le and Dylan Vu\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName){\n   string numFinal;\n   int i;\n\n   for (i = 0; i < nameVec.size(); ++i){\n      if (nameVec.at(i) == contactName){\n         numFinal = phoneNumberVec.at(i);\n      }\n   }\n\nreturn numFinal;\n}\n\nint main() {\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   string contactName;\n   int i;\n   int inputNum;\n   cin >> inputNum;\n   string name;\n   string phoneNum;\n\n   for (i = 0; i < inputNum; ++i){\n      cin >> name;\n      nameVec.push_back(name);\n      cin >> phoneNum;\n      phoneNumberVec.push_back(phoneNum);\n   }\n   cin >> contactName;\n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 70, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\n   string wantedNum;\n   for (unsigned int i = 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         wantedNum = phoneNumberVec.at(i);\n      }\n   }\n   return wantedNum;\n}\n\nint main() {\n   int input1;\n   cin >> input1;\n   vector<string> vlist1;\n   vector<string> vlist2;\n   string name;\n   string phone;\n   string wantedName;\n   \n   for (int i = 0; i < input1; ++i) {\n      cin >> name;\n      cin >> phone;\n      vlist1.push_back(name);\n      vlist2.push_back(phone);\n   }\n   \n   cin >> wantedName;\n   \n   cout << GetPhoneNumber(vlist1, vlist2, wantedName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 54, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName)\n{\n   for (unsigned int i = 0; i < nameVec.size(); ++i)\n   {\n      if (nameVec.at(i) == contactName)\n      {\n         return phoneNumberVec.at(i);\n      }\n   }\n   return \"None\";\n}\n   \n\nint main() {\nvector <string> nameVec;\nvector<string> phoneNumberVec;\nstring contactName;\n\n   unsigned int numOfContacts;\n   string name;\n   string phoneNum;\n   string contactInfo;\n   \n   cin >> numOfContacts;\n   \n   for (unsigned int i = 0; i < numOfContacts; ++i)\n   {\n      cin >> contactInfo;\n      name = contactInfo.substr(0, contactInfo.find(','));\n      nameVec.push_back(name);\n      phoneNum = contactInfo.substr(contactInfo.find(',') + 1, contactInfo.size()-1);\n      phoneNumberVec.push_back(phoneNum);\n   }\n\ncin >> contactName;\n\ncout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 58, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName){\n   string phoneNum;\n   for(int i = 0; i < nameVec.size(); ++i){\n      if(nameVec.at(i) == contactName){\n         phoneNum = phoneNumberVec.at(i);\n      }\n   }\n   return phoneNum;\n}\n\nint main() {\n   /* Type your code here */\n   vector<string> nameList;\n   vector<string> phoneNumList;\n   int listSize;\n   string contactName;\n   \n   cin >> listSize;\n   \n   nameList.resize(listSize);\n   phoneNumList.resize(listSize);\n   \n   for(int i = 0; i < nameList.size(); ++i){\n      cin >> nameList.at(i);\n      cin >> phoneNumList.at(i);\n   }\n   \n   cin >> contactName;\n   \n   cout << GetPhoneNumber(nameList, phoneNumList, contactName) << endl;\n\n   return 0;\n}", "class": 0, "version": 16, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, \nconst string &contactName) {\n   string s = \"\";\n   for (unsigned int i = 0; i < nameVec.size(); ++i) {\n      if (contactName == nameVec.at(i)) {\n         s = phoneNumberVec.at(i);\n      }\n   }\n   return s;\n}\n\nint main() {\n   /* Type your code here */\n   int count;\n   \n   vector<string> name;\n   string Name;\n   vector<string> phoneNumber;\n   string PhoneNumber;\n   string contact;\n   string number;\n   cin >> count;\n   \n   for (int i = 0; i < count; ++i) {\n      cin >> Name;\n      name.push_back(Name);\n      cin >> PhoneNumber;\n      phoneNumber.push_back(PhoneNumber);\n   }\n   \n   cin >> contact;\n   \n   number = GetPhoneNumber(name, phoneNumber, contact);\n   \n   cout << number << endl;\n      \n\n   return 0;\n}\n", "class": 0, "version": 45, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName){\nint i;\nstring finNumber;\nstring None=\"None\";\n   for (i=0;i<nameVec.size();++i){\n      if (nameVec.at(i)==contactName){\n         finNumber= phoneNumberVec.at(i);\n         return finNumber;\n      }\n      else if (i==nameVec.size()-1 && finNumber.size()==0){\n         return None;\n      }\n   }\n\n}\n\nint main() {\n  int numPut;\n  string stringPut;\n  string name;\n  string number;\n  string contactName;\n  int i;\n  int j;\n  cin>>numPut;\n  vector<string> nameVec(0);\n  vector<string> phoneVec(0);\n    for (i=0;i<numPut;++i){\n      cin>>stringPut;\n      name=\"\";\n      number=\"\";\n      for (j=0;j<stringPut.size();++j){\n         if (isalpha(stringPut.at(j))){\n            name= name+stringPut.at(j);\n         }\n         else if (stringPut.at(j)!=','){\n            number=number+stringPut.at(j);\n         }\n      }\n       nameVec.push_back(name);\n       phoneVec.push_back(number);\n   }\n  cin>>contactName;\n  cout<<GetPhoneNumber(nameVec, phoneVec, contactName)<<endl;\n  \n   \n}", "class": 0, "version": 167, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n// Recieved help from Serena and in lab\n/* Define your function here */\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName) {\n   cin >> contactName;\n   string contactMatch;\n   unsigned int i;\n   \n   for (i = 0; i < nameVec.size(); i++) {\n      if (nameVec.at(i) == contactName) {\n         contactMatch = phoneNumberVec.at(i);\n      }\n   }\n   \n   return contactMatch;\n}\n\n\nint main() {\n   /* Type your code here */\n   \n   int wordPairs;\n   string entireContact;\n   int i;\n   int findComma;\n   string nameOnly;\n   int j;\n   string phoneOnly;\n   unsigned int k;\n   string contactName;\n   string contactMatch;\n   \n   vector <string> nameVec;\n   vector <string> phoneNumberVec;\n   \n   cin >> wordPairs;\n   \n   for (i = 0; i < wordPairs; i++) {\n      cin >> entireContact;\n      \n      findComma = entireContact.find (',');\n      \n      for (j = 0; j < findComma; j++) {\n         nameOnly.push_back (entireContact.at(j));\n      }\n      \n   nameVec.push_back (nameOnly);\n   \n   for (k = (findComma + 1); k < entireContact.size(); k++) {\n      phoneOnly.push_back (entireContact.at(k));\n   } \n   phoneNumberVec.push_back(phoneOnly); \n   }\n\n   contactMatch = GetPhoneNumber (nameVec, phoneNumberVec, contactName);\n   \n   if (contactMatch.size() < 1) {\n      contactMatch = \"None\";\n   }\n   \n   cout << contactMatch << endl;\n\n   return 0;\n}\n", "class": 0, "version": 107, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\n   string y;\n   int i;\n   int str;\n   str = nameVec.size();\n      for(i=0;i < str;++i){\n         if(nameVec.at(i)==contactName){\n            y = phoneNumberVec.at(i);\n         }\n      }\n      return y;\n   }\nint main() {\n   /* Type your code here */\n   int a;\n   int i;\n   string name;\n   string phone;\n//   string j;\n   cin >> a;\n    vector<string> phoneNumberVec;\n    vector<string> nameVec;\n    for(i=0; i < a; ++i){\n       cin >> name;\n       nameVec.push_back(name);      \n       cin >> phone;\n       phoneNumberVec.push_back(phone);  \n\n      }\n   string contactName;\n   cin >> contactName;\n   cout <<GetPhoneNumber(nameVec, phoneNumberVec, contactName)<<endl;\n   return 0;\n}\n\n", "class": 0, "version": 194, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n   unsigned int j;\n   string back;\n   \n   for (j=0; j<nameVec.size(); ++j) {\n      if (contactName == nameVec.at(j)) {\n         return phoneNumberVec.at(j);\n      }\n   }\n}\n\n\n/* Define your function here */\n\nint main() {\n   int howMany;\n   cin>> howMany;\n   unsigned int i;\n   unsigned int j;\n   vector<string>name(howMany);\n   vector<string>num(howMany);\n   string identifier;\n   string output;\n   \n   for(i=0; i<howMany; ++i) {\n      cin >>name.at(i);\n      cin >> num.at(i);\n   }\n\n   cin >> identifier;\n   /* Type your code here */\n   \n   output = GetPhoneNumber(name, num, identifier);\n   \n   cout << output << endl;\n\n   return 0;\n}\n", "class": 0, "version": 55, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\n   int num=nameVec.size();\n   int k;\n   for(int i=0;i<num;++i){\n      if(nameVec.at(i)==contactName){\n         k=i;\n      }\n   }\n   return phoneNumberVec.at(k);\n}\n   \n\nint main() {\n   int num;\n   cin>>num;\n   vector<string> nameVec(num);\n   vector<string> phoneNumberVec(num);\n   for(int i=0;i<num;++i){\n      cin>>nameVec.at(i);\n      cin>>phoneNumberVec.at(i);\n   }\n   string contactName;\n   cin>>contactName;\n   cout<<GetPhoneNumber(nameVec,phoneNumberVec,contactName)<<endl;\n \n   \n   \n\n   return 0;\n}\n", "class": 0, "version": 133, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   string s; \n \n   for (unsigned i = 0; i < nameVec.size(); ++i) {\n      if (contactName == nameVec.at(i)) {\n         s = phoneNumberVec.at(i);\n      }\n   }\n   \n   return s;\n}\n      \n\nint main() {\n   int NUM_VALS;\n   string goal;\n   unsigned i;\n   string num;\n   \n   cin >> NUM_VALS;\n   \n   vector<string> a(NUM_VALS);\n   vector<string> b(NUM_VALS);\n   \n   for (i = 0; i < a.size(); ++i) {\n      cin >> b.at(i);\n      cin >> a.at(i);\n   }\n   \n   cin >> goal;\n   \n   num = GetPhoneNumber(b, a, goal);\n   \n   cout << num << endl;\n\n   return 0;\n}\n", "class": 0, "version": 220, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\nunsigned int i;\nfor (i = 0; i < nameVec.size(); ++i) {\n    \n        if (contactName == nameVec[i]) {\n            \n            return phoneNumberVec[i];\n            \n        }\n\n}\n    return \"Nonexistant\";\n}\n\nint main() {\n  int i; \n  int num;\n\n  cin >> num;\n  \n  string inputNumbers;\n  string inputNames;\n  \n  vector <string> phoneNums;\n  vector <string> n;\n    \n  \n  for (i = 0; i < num; ++i) {\n     \n     cin >> inputNames;\n     cin >> inputNumbers;\n      \n     n.push_back(inputNames);\n     phoneNums.push_back(inputNumbers);\n  }\n  \n  cin >> inputNames;\n  \n  cout << GetPhoneNumber( n, phoneNums, inputNames) << endl;\n\n   return 0;\n}\n\n\n", "class": 0, "version": 65, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName){\n   unsigned int cnt = 0;\n   string none = \"None\";\n   for (unsigned int i = 0; i < nameVec.size(); ++i){\n      if (contactName == nameVec.at(i)){\n         return phoneNumberVec.at(i);\n         ++cnt;\n      }\n   }\n   if (cnt == 0){\n         return none;\n      }\n}\n\nint main() {\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   string contactName;\n   int size;\n   string polute;\n   string name;\n   string number;\n   \n   cin >> size;\n   \n   for (int i = 0; i < size; ++i){\n      cin >> polute;\n      name = polute.substr(0, polute.find(','));\n      nameVec.push_back(name);\n      number = polute.substr(polute.find(',') + 1, 8);\n      phoneNumberVec.push_back(number);\n         }\n\n   cin >> contactName;\n   \n   GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n   \n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 99, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   string result;\n   for ( int i = 0; i < nameVec.size(); i++) { \n      if ( contactName == nameVec.at(i)) { \n    result = phoneNumberVec.at(i);\n         }\n   }\n   return result; \n}\n\n   \n\nint main() {\n   vector<string> nv;\n   vector<string> pnv;\n   int z;\n   \n   string q;\n   cin >> z;\n  \n   nv.resize(z);  //resize the vectors\n   pnv.resize(z);\n      \n   for (int i = 0; i < z; i++) { //loop the size while getting cin from the user in referencing both vectors.\n      cin >>nv.at(i);\n      cin >> pnv.at(i);\n   }\n   cin >> q; // contact name as q\n   cout<< GetPhoneNumber(nv, pnv, q) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 53, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   string phoneN;\n   for ( unsigned int i = 0; i < nameVec.size(); ++i)\n   {\n   if ( nameVec.at(i) == contactName)\n   {\n      phoneN = phoneNumberVec.at(i);\n   }\n   }\n   return phoneN;\n}\nint main() {\n   /* Type your code here */\n   int N;\n   string contact;\n   cin >> N;\n   unsigned int i;\n   vector <string> name (N);\n   vector <string> phone (N);\n   for ( i = 0;  i < name.size(); ++i)\n   {\n      cin >> name.at(i);\n      cin >> phone.at(i);\n   }\n   \n   cin >> contact;\n   cout << GetPhoneNumber(name, phone, contact) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 139, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   string ans;\n   for (unsigned int i = 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         ans = phoneNumberVec.at(i);\n      }\n   }\n   return ans; \n}\nint main() {\n   /* Type your code here */\n   int num;\n   string name;\n   string phoneNumber;\n   string input;\n   string ans;\n   vector<string>names;\n   vector<string>numbers;\n   \n   cin >> num;\n   \n   for (int i = 0; i < num; ++i) {\n      cin >> name;\n      cin >> phoneNumber;\n      names.push_back(name);\n      numbers.push_back(phoneNumber);\n   }\n   \n   cin >> input; \n   ans = GetPhoneNumber(names, numbers, input);\n   cout << ans << endl;\n   return 0;\n}\n", "class": 0, "version": 149, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\n     string newNum;\n     for (int i = 0; i < nameVec.size(); ++i){\n          if (contactName == nameVec.at(i)){\n             newNum = phoneNumberVec.at(i);\n  }\n\n }   \n return newNum;\n}\n\nint main() {\n   vector<string> names;\n   vector<string> numbers;\n   string thisName;\n   int num;\n   string number;\n   string name;\n\n   cin >> num;\n   \n   for (unsigned int i =0; i < num; ++i){\n      cin >> name >> number;\n      names.push_back (name);\n      numbers.push_back (number);\n      \n\n}\n   cin >> thisName;\n\n   cout << GetPhoneNumber(names, numbers, thisName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 38, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName);\n\nint main() {\n   int numElements;\n   string name;\n   string number;\n   string currName;\n   cin >> numElements;\n   \n   vector<string> contactNames (numElements);\n   vector<string> contactNumbers (numElements);\n   \n   for (int i = 0; i < numElements; ++i) {\n      cin >> name;\n      contactNames.at(i) = name;\n      cin >> number;\n      contactNumbers.at(i) = number;\n   }\n   \n   cin >> currName;\n   \n   cout << GetPhoneNumber (contactNames, contactNumbers, currName) << endl;\n   \n   return 0;\n}\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   string userPhoneNumber;\n   for (unsigned int i = 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         userPhoneNumber = phoneNumberVec.at(i);\n      }\n   }\n   return userPhoneNumber;\n}", "class": 0, "version": 106, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   for(int i = 0 ; i < nameVec.size() ; i++)\n   {\n      if(nameVec.at(i) == contactName)\n      {\n         return phoneNumberVec.at(i);\n      }\n   }\n}\n\nint main() {\n   int n;\n   cin>>n;\n   \n   string str;\n   \n   vector<string> name(n), phn(n);\n   \n   for(int i = 0 ; i < n ; i++)\n   {\n      cin>>name.at(i)>>phn.at(i);\n   }\n   \n   cin>>str;\n   \n   cout<<GetPhoneNumber(name, phn, str)<<endl;\n\n   return 0;\n}\n", "class": 0, "version": 232, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n   unsigned int i;\n   string phoneNum;\n   bool nameInVec = false;\n   \n   for (i = 0; i < nameVec.size(); ++i) {\n      if (!nameInVec) {\n         if (contactName == nameVec.at(i)){\n            nameInVec = true;\n            phoneNum = phoneNumberVec.at(i);\n         }\n         else{\n            nameInVec = false;\n         }\n      }\n   }\n   return phoneNum;\n}\nint main() {\n   /* Type your code here */\n   int i;\n   int numWordPairs;\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   string name;\n   string phoneNum;\n   \n   cin >> numWordPairs;\n   \n   for (i = 0; i < numWordPairs * 2; ++i) {\n      cin >> name;\n      nameVec.push_back(name);\n      cin >> phoneNum;\n      phoneNumberVec.push_back(phoneNum);\n   }\n   \n   cin >> name;\n   \n   cout << GetPhoneNumber(nameVec, phoneNumberVec, name) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 94, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\r\n#include <vector>\r\nusing namespace std;\r\n//got help from Alex Duran, Jacob Smith, Amadi Cayatano, and the TA\r\n\r\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName) {\r\n   unsigned int i;\r\n   \r\n   for (i = 0; i < nameVec.size(); ++i) {\r\n      if (nameVec.at(i) == contactName) {\r\n         return phoneNumberVec.at(i);\r\n      }\r\n   }\r\n}\r\n\r\nint main() {\r\n   \r\n   vector <string> vName;\r\n   vector <string> vPhone;\r\n   int runTimes;\r\n   string userString;\r\n   int i;\r\n   string stringName, stringNum;\r\n   bool none = false;\r\n   \r\n   cin >> runTimes;\r\n   \r\n   for (i = 0; i < runTimes; ++i) {\r\n      cin >> stringName;\r\n      stringNum = stringName.substr(0, stringName.find(','));\r\n      stringName = stringName.substr(stringName.find(',') + 1);\r\n      vName.push_back(stringNum);\r\n      vPhone.push_back(stringName);\r\n   }\r\n   \r\n   cin >> userString;\r\n   \r\n   for (i = 0; i < runTimes; ++i) {\r\n      if (vName.at(i) == userString) {\r\n         cout << GetPhoneNumber(vName, vPhone, userString);\r\n         cout << endl;\r\n         none = true;\r\n      }\r\n   }\r\n   \r\n   if (none == false) {\r\n      cout << \"None\" << endl;\r\n   }\r\n\r\n\r\n   return 0;\r\n}", "class": 0, "version": 103, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber( const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName) { \n   int i; \n   for (i = 0; i < nameVec.size(); ++i) { \n      if (nameVec.at(i) == contactName) { \n         return phoneNumberVec.at(i);\n      } \n      else { \n         return \"None\"; \n      } \n   } \n} \n\n\nint main() {\n   string name; \n   string phoneNumber; \n   int i; \n   vector<string> names, phoneNumbers; \n   \n   int numWordpairs;\n   // number of word pairs in the list\n   \n   cin >> numWordpairs; \n   \n   for ( i = 0; i < numWordpairs; ++i) { \n      cin >> name; \n      cin >> phoneNumber; \n      names.push_back(name); \n      phoneNumbers.push_back(phoneNumber); \n   } \n   \n   cin >> name; \n   cout << GetPhoneNumber(names, phoneNumbers, name) << endl; \n   \n      \n\n   return 0;\n}\n", "class": 0, "version": 53, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   string phoneNumber;\n   \n   for (unsigned int i = 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         phoneNumber = phoneNumberVec.at(i);\n      }\n   }\n   return phoneNumber;\n}\n   \n\nint main() {\n   /* Type your code here */\n   vector<string> vecName;\n   vector<string> vecPhoneNum;\n   int numContacts;\n   string input;\n   string contactName;\n   \n   cin >> numContacts;\n   \n   for (int i = 0; i < numContacts; ++i) {\n      cin >> input;\n      vecName.push_back(input);\n      cin >> input;\n      vecPhoneNum.push_back(input);\n   }\n   \n   cin >> contactName;\n   \n   cout << GetPhoneNumber(vecName, vecPhoneNum, contactName) << endl;\n   //cout << vecPhoneNum.at(vecPhoneNum.size()-1) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 130, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   int i;\n   int length;\n   \n   length = nameVec.size();\n   \n   for(i = 0; i < length; ++i) {\n      if (contactName == nameVec.at(i)) {\n         return phoneNumberVec.at(i);\n      }\n   }\n}\n\nint main() {\n   int i;\n   string input_name;\n   vector<string> NameVec;\n   vector<string> PhoneVec;\n   int num;\n   \n   cin >> num;\n   \n   NameVec.resize(num);\n   PhoneVec.resize(num);\n   \n   for (i = 0; i < num; ++i) {\n      cin >> NameVec.at(i);\n      cin >> PhoneVec.at(i);\n   }\n\n   cin >> input_name;\n   \n   cout << GetPhoneNumber(NameVec,PhoneVec,input_name) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 13, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n   string phoneNumber;\n   int nameIndex = -1;\n   int i = 0;\n   \n   while(nameIndex < 0) { // finds index for contactName\n      if (nameVec.at(i) == contactName) {\n         nameIndex = i;\n      }\n      ++i;\n   }\n   \n   phoneNumber = phoneNumberVec.at(nameIndex);\n   \n   return phoneNumber;\n}\n\nint main() {\n   vector<string> contactList;\n   vector<string> phoneNumberList;\n   int numContacts;\n   int i;\n   string currContact;\n   string currPhoneNumber;\n   string contactName; // name of contact whose number to find\n   \n   cin >> numContacts;\n   \n   for (i = 0; i < numContacts; ++i) { // fill contact list and phone number vectors\n      cin >> currContact;\n      cin >> currPhoneNumber;\n      \n      contactList.push_back(currContact);\n      phoneNumberList.push_back(currPhoneNumber);\n   }\n   \n   cin >> contactName;\n   \n   cout << GetPhoneNumber(contactList, phoneNumberList, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 42, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   int number = 0;\n   for (unsigned int i = 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         number = i;\n      }\n   }\n   return phoneNumberVec.at(number);\n}\n\nint main() {\n   int name;\n   vector<string> nameVec;\n   vector<string> phoneNum(0);\n   string contactName;\n   \n   cin >> name;\n   \n   nameVec.resize(name);\n   phoneNum.resize(name);\n   \n   for (int i = 0; i < name; i++) {\n      cin >> nameVec.at(i);\n      cin >> phoneNum.at(i);\n   }\n   \n   cin >> contactName;\n   \n   cout << GetPhoneNumber(nameVec, phoneNum, contactName) << endl;\n   return 0;\n}\n", "class": 0, "version": 156, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName) {\n   int unsigned i;\n   bool ifReturn = false;\n   for (i = 0; i < nameVec.size(); ++i) {\n      if(nameVec.at(i) == contactName) {\n         return phoneNumberVec.at(i);\n         ifReturn = true;\n      }\n   }\n   if (ifReturn == false) {\n      return \"None\";\n   }\n   return 0;\n}  \n\n\n\nint main() {\n   int i;\n   int numLoops;\n   string inputStr;\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   string contactName;\n   \n   cin >> numLoops;\n   \n   for(i = 0; i < numLoops; ++i){\n      cin >> inputStr;\n      nameVec.push_back(inputStr.substr(0,inputStr.find(\",\")));\n      phoneNumberVec.push_back(inputStr.substr(inputStr.find(\",\")+1,inputStr.size()-1));\n\n   }\n   \n   cin >> contactName;\n   \n   cout << GetPhoneNumber(nameVec,phoneNumberVec,contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 24, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n//collaborated with zoom group (Nova, samantha, hiba)\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName){\n   int i;\n   string phone;\n   int name2;\n   string finalname;\n   for (i=0; i< nameVec.size(); ++i) {\n      phone= nameVec.at(i);\n      if (phone==contactName) {\n      name2=i;\n   }\n   }\n   finalname= phoneNumberVec.at(name2);\n   return finalname;\n}\n   \n\nint main() {\nint full;\ncin>>full;\nvector<string> nameVec(full);\nvector<string> phoneNumberVec(full);\nstring name;\nfor (int i=0; i<full; ++i){\n   cin>>nameVec.at(i);\n   cin>>phoneNumberVec.at(i);\n}\ncin>>name;\n\ncout<<GetPhoneNumber(nameVec, phoneNumberVec, name)<< endl;\n   return 0;\n}\n", "class": 0, "version": 36, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n// find how to print a vector from online for debugging\nvoid print_string_vector(std::vector <string> const &a) {\n   std::cout << \"The vector elements are : \";\n\n   for(int i=0; i < a.size(); i++)\n   std::cout << a.at(i) << ' ';\n}\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n\n   int currVal;\n   string names;\n   string phonenumbers;\n \n   for (int i=0; i < currVal; i++) {\n      if (contactName == nameVec.at(i)) {\n        return phoneNumberVec.at(i);\n}\n}\nreturn \"No_name_found\"; \n}\nint main() {\n   \n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n\n   int currVal;\n   string names;\n   string phonenumbers;\n   string matchingName;\n\n   cin >> currVal;\n\n   for (int i=0; i < currVal; i++) {\n     cin >> names;\n     cin >> phonenumbers;\n     nameVec.push_back(names);\n     phoneNumberVec.push_back(phonenumbers);\n}\n/*\n     print_string_vector(nameVec);\n     cout << endl;\n     print_string_vector(phoneNumberVec);\n     cout << endl;\n*/\n\n     cin >> matchingName;\n   \n     cout << GetPhoneNumber(nameVec, phoneNumberVec, matchingName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 98, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   string unknownPerson;\n   for (unsigned int i = 0; i < nameVec.size(); ++i)\n   {\n      if (nameVec.at(i) == contactName)\n      {\n         unknownPerson = phoneNumberVec.at(i); \n      }\n   }\n   \n   return unknownPerson;\n}\n\nint main() {\n   /* Type your code here */\n   int index;\n   vector <string> nameList(0);\n   vector <string> numberPhoneList(0);\n   string name;\n   string forreal;\n   cin >> index;\n   \n   for (int i = 0; i < index; ++i)\n   {\n      cin >> forreal;\n      nameList.push_back(forreal);\n      cin >> forreal;\n      numberPhoneList.push_back(forreal);\n   }\n   \n   cin >> name;\n   cout << GetPhoneNumber(nameList,numberPhoneList,name) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 96, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName)\n{\n   for (int i = 0; i < nameVec.size(); ++i)\n   {\n      if (nameVec.at(i) == contactName){\n         return phoneNumberVec.at(i);\n      }\n   }\n}\n         \nint main() {\n   vector<string> VecName;\n   vector<string> VecPhone;\n   unsigned int numInp;\n   string contactN;\n   unsigned int i;\n   \n   cin >> numInp;\n   \n    for(i = 0; i < numInp; ++i)\n   {\n      string tmp,tmpNm;\n                cin >> tmp;\n                tmpNm = tmp.substr(0, tmp.find(','));\n                tmp= tmp.substr(tmp.find(',') + 1);\n                VecName.push_back(tmpNm);\n                VecPhone.push_back(tmp);   \n   }\n\n   cin >> contactN;\n\n   cout << GetPhoneNumber(VecName,VecPhone,contactN);\n   cout << endl;\n}\n   \n   //Got help from Alex Duran", "class": 0, "version": 108, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName) {\n   string phoneNumberFor;\n   int j;\n   \n   phoneNumberFor = \"None\";\n   \n   for (j = 0; j < nameVec.size(); ++j) {\n      if (nameVec.at(j) == contactName) {\n         phoneNumberFor = phoneNumberVec.at(j);\n      }\n   }\n   \n   return phoneNumberFor;\n}\n\nint main() {\n   int N;\n   long unsigned int i;\n   long unsigned int z;\n   string lineInput;\n   string nameBefore;\n   string numBefore;\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   string contactName;\n   \n   cin >> N;\n   \n   for (i = 0; i < N; ++i) {\n      cin >> lineInput;\n      for (z = 0; z < lineInput.size(); ++z) {\n         if (isalpha(lineInput.at(z))) {\n            nameBefore.push_back(lineInput.at(z));\n         }\n         else if ((isdigit(lineInput.at(z))) || (lineInput.at(z) == '-')) {\n            numBefore.push_back(lineInput.at(z));\n         }\n      }\n      nameVec.push_back(nameBefore);\n      phoneNumberVec.push_back(numBefore);\n      nameBefore = \"\\0\";\n      numBefore = \"\\0\";\n   }\n   \n   cin >> contactName;\n   \n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 3, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n\n   for(int i = 0; i < nameVec.size(); i++) {\n      if(nameVec[i] == contactName) {\n         return phoneNumberVec[i];\n      }\n   }\n\n}\n\nint main() {\n\n   int n;\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   string contactName;\n   string phone;\n\n   cin>>n;\n   \n   for(int i = 0; i < n; i++) {\n      \n      cin >> contactName;\n      cin >> phone;\n\n      nameVec.push_back(contactName);\n      phoneNumberVec.push_back(phone);\n   }\n\n   cin >> contactName;\n\n   phone = GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n\n   cout << phone << endl;\n\nreturn 0;\n\n}", "class": 0, "version": 42, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber (const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   int index;\n   string phoneNumber;\n   \n   for (unsigned int i = 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         index = i;\n      }\n   }\n   \n   phoneNumber = phoneNumberVec.at(index);\n   \n   return phoneNumber;\n}\n\nint main() {\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   string contactName;\n   int wordPairs;\n   string name;\n   string number;\n   \n   cin >> wordPairs;\n   \n   for (int i = 0; i < wordPairs; ++i) {\n      cin >> name;\n      cin >> number;\n      nameVec.push_back(name);\n      phoneNumberVec.push_back(number);\n   }\n   \n   cin >> contactName;\n   \n   cout << GetPhoneNumber (nameVec, phoneNumberVec, contactName) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 261, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName){\n   int i;\n   \n   for (i = 0; i < nameVec.size(); ++i){\n      if (contactName == nameVec.at(i)){\n         return phoneNumberVec.at(i);\n      }\n   }\n}\n\nint main() {\n   vector <string> name;\n   vector <string> number;\n   string NAME;\n   string NUMBER;\n   int i;\n   int count;\n   string chosenName;\n   \n   cin >> count;\n   \n   for (i = 0; i < count; ++i){\n      cin >> NAME;\n      name.push_back(NAME);\n      cin >> NUMBER;\n      number.push_back(NUMBER);\n   }\n   \n   cin >> chosenName;\n   \n   cout << GetPhoneNumber(name, number, chosenName) << endl;\n      \n   \n\n   return 0;\n}\n", "class": 0, "version": 22, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n//Help from Garrett Reid.\n\nstring GetPhoneNumber (const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName) {\n   int i;\n   \n   for (i = 0; i < nameVec.size(); i++) {\n      if (nameVec.at(i) == contactName) {\n         return phoneNumberVec.at(i);\n      }\n   }\n   return \"None\";\n}\n\nint main() {\n   int i;\n   vector<string> vecName;\n   vector<string> vecPhoneNumber;\n   string Name;\n   int numNames;\n   string Reader;\n   \n   cin >> numNames;\n   \n   \n   for (i = 0; i < numNames; i++) {\n      cin >> Reader;\n      vecName.push_back(Reader.substr(0, Reader.find(',')));\n      vecPhoneNumber.push_back(Reader.substr(Reader.find(',') + 1, 8));\n   }\n   cin >> Name;\n   \n   cout << GetPhoneNumber(vecName,vecPhoneNumber,Name);\n   \n   cout << endl;\n\n   return 0;\n}\n", "class": 0, "version": 104, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(string nameArr[], string phoneNumberArr[], int size, string contactName) {\nstring phoneNumber;\n\nint found = 0;\n\nfor (int i = 0; i < size; i++) {\n   if (nameArr[i] == contactName) {\n      phoneNumber = phoneNumberArr[i];\n      found = 1;\n      }\n   }\n   if (found = 0) {\n      phoneNumber = \"\"; \n      }\n   return phoneNumber; \n   }\n\nint main() {\n   int size;\n   cin >> size;\n\nstring nameArr[size], phoneNumberArr[size]; \nstring contactName;\n\nfor (int i = 0; i < size; i++) {\n   cin >> nameArr[i];\n   cin >> phoneNumberArr[i];\n   }\n   cin >> contactName;\n\n   cout << GetPhoneNumber(nameArr, phoneNumberArr, size, contactName);\n   cout << endl;\n/* Type your code here */\n\n   return 0;\n}\n", "class": 0, "version": 250, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName);\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName)\n            return phoneNumberVec[i];\n    }\n}\n\nint main() {\n    int size;\n    string name, number;\n    vector<string> names, numbers;\n   \n   \n    cin >> size;\n    \n    for (int i = 0; i < size; ++i) {\n        cin >> name >> number;\n        names.push_back(name);\n        numbers.push_back(number);\n    }\n    \n    cin >> name;\n    cout << GetPhoneNumber(names, numbers, name) << endl;\n    return 0;\n}\n\n\n\n", "class": 0, "version": 56, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec, \nconst vector<string>& phoneNumberVec, string contactName) {\n   \n   for (int i = 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) ==contactName) {\n         return phoneNumberVec.at(i);\n      }\n   }\n   return \"None\";\n}\n   \nint main() {\n  \n\tvector<string> phoneNumberVec;\n\tvector<string> nameVec;\n\tstring tempString;\n\tstring tempNum;\n\tstring tempName;\n\tstring lookupNum;\n\tint commaIndex;\n\tint N;\n\t\n\tcin >> N;\n\tfor (int i = 0; i < N; ++i) {\n\t\tcin >> tempString;\n\t\tcommaIndex = tempString.find(',');\n\t\t\n\t\tnameVec.push_back(tempString.substr(0, commaIndex));\n\t\t\n\t\tphoneNumberVec.push_back(tempString.substr(commaIndex + 1));\n\t   }\n\t   \n   cin >> lookupNum;\n   cout << GetPhoneNumber(nameVec, phoneNumberVec, lookupNum) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 196, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(vector <string> nameVec, vector <string> phoneNumber, string contactName){\n   int i;\n   string Number;\n   i = 0;\n   for (i = 0; i < nameVec.size(); i++){\n      if (contactName == nameVec.at(i)){\n           Number = phoneNumber.at(i);\n      }\n   }\n   return Number;\n}\n\nint main() {\n   int num1;\n   int i;\n   string contact;\n   cin >> num1;\n   vector<string> name(num1);\n   vector<string> phoneNumber(num1);\n   \n   for (i = 0; i < num1; ++i){\n       cin >> name.at(i);\n       cin >> phoneNumber.at(i);\n   }\n   cin >> contact;\n   cout << GetPhoneNumber(name, phoneNumber, contact) << endl;\n   /* Type your code here */\n\n   return 0;\n}\n", "class": 0, "version": 39, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n   int j;\n   string chosenPhoneNum;\n   \n   for (j = 0; j < nameVec.size(); j++) {\n      if (nameVec.at(j) == contactName) {\n         chosenPhoneNum = phoneNumberVec.at(j);\n      }\n   }\n   return chosenPhoneNum;\n}\n\nint main() {\n   string name;\n   string number;\n   string chosenName;\n   vector<string> Names;\n   vector<string> phoneNum;\n   int i;\n   int N;\n   \n   cin >> N;\n   for (i = 0; i < N; i++) {\n      cin >> name >> number;\n      Names.push_back(name);\n      phoneNum.push_back(number);\n   }\n   \n   cin >> chosenName;\n   \n   cout << GetPhoneNumber(Names, phoneNum, chosenName) << endl; \n\n   return 0;\n}\n", "class": 0, "version": 2, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <iomanip>\n#include <fstream>\n#include <string>\n#include <cmath>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(std::vector<string> nameVec, std::vector<string> phoneNumberVec, string contactName)\n{\nfor (int i = 0; i < phoneNumberVec.size(); ++i)\n{\nif(nameVec[i] == contactName)\nreturn phoneNumberVec[i];\n}\n}\n\nint main()\n{\nint size;\ncin >> size;\n\nstring name, contactName, phone;\nvector<string> nameVec;\nvector<string> phoneNumberVec;\n\nfor (int i = 0; i < size; ++i)\n{\ncin >> name >> phone;\nnameVec.push_back(name);\nphoneNumberVec.push_back(phone);\n}\n\n\ncin >> contactName;\n\ncout << GetPhoneNumber(nameVec,phoneNumberVec,contactName) << endl;\n\nreturn 0;\n}", "class": 0, "version": 7, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\n   unsigned int i;\n   string phoneNumber;\n   for(i=0; i < nameVec.size(); ++i){\n      if(nameVec.at(i) == contactName){\n         phoneNumber = phoneNumberVec.at(i);\n      }\n   }\n   return phoneNumber;\n}\n\nint main() {\n   int i;\n   int numVar;\n   cin >> numVar;\n   vector<string> nameVec(numVar);\n   vector<string> phoneNumberVec(numVar);\n   string contactName;\n   \n   for(i=0; i< numVar; ++i){\n      cin >> nameVec.at(i);\n      cin >> phoneNumberVec.at(i);\n   }\n    \n   cin >> contactName;\n   \n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n  \n   return 0;\n}\n", "class": 0, "version": 245, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, \nconst vector<string> &phoneNumberVec, const string &contactName){\n   int i;\n   int length;\n   string phoneNum;\n   \n   length = phoneNumberVec.size();\n   for(i=0; i < length; ++i){\n      if(nameVec.at(i) == contactName){\n         phoneNum = phoneNumberVec.at(i);\n      }\n   }\n   return phoneNum;\n}\n\n\nint main() {\n   vector<string> nameV;\n   vector<string> pNumV;\n   int i;\n   int numVals;\n   string inputName;\n   \n   cin >> numVals;\n   nameV.resize(numVals);\n   pNumV.resize(numVals);\n   for(i=0; i<numVals; ++i){\n      cin>>nameV.at(i);\n      cin>>pNumV.at(i);\n   }\n   cin>>inputName;\n   cout<< GetPhoneNumber(nameV, pNumV, inputName)<<endl;\n   \n   return 0;\n}", "class": 0, "version": 222, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n   string phoneNum;\n   for(int i = 0; i < nameVec.size(); ++i) {\n      if(nameVec[i] == contactName) {\n         phoneNum = phoneNumberVec.at(i);\n      }\n   }\n   return phoneNum;\n}\n\nint main() {\n   int contactAmount;\n   cin >> contactAmount;\n   \n   vector<string> nameList;\n   vector<string> phoneList;\n\n   string contactName;\n   string contactNumber;\n   \n   for(int i = 0; i < contactAmount; ++i) {\n      cin >> contactName;\n      cin >> contactNumber;\n      nameList.push_back(contactName);\n      phoneList.push_back(contactNumber);\n   }\n   \n   cin >> contactName;\n   \n   cout << GetPhoneNumber(nameList, phoneList, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 55, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n   int i;\n   int numContactList;\n   cin >> numContactList; \n   string contactNameNumber;\n   string associatedName;\n\n   \n   for (i=0; i < numContactList; ++i) {\n      cin >> contactName;\n      nameVec.push_back(contactName);\n      cin >> contactNameNumber;\n      phoneNumberVec.push_back(contactNameNumber);\n   }\n   \n   cin >> associatedName;\n   for (i=0; i < numContactList; ++i) {\n      if (associatedName == nameVec.at(i)) {\n         return phoneNumberVec.at(i);\n      }\n   }\n\n}\n\nint main() {\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   string contactName;\n   \n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 12, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   string phoneNumber;\n   for (unsigned int i = 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         phoneNumber = phoneNumberVec.at(i);\n      }\n   }\n   return phoneNumber;\n}\n\nint main() {\n   unsigned int numInts, i;\n   string wantedName;\n   cin >> numInts;\n   \n   vector<string> names(numInts);\n   vector<string> phoneNumbers(numInts);\n\n   for (i = 0; i < names.size(); ++i) {\n      cin >> names.at(i);\n      cin >> phoneNumbers.at(i);\n   }\n   \n   cin >> wantedName;\n   \n   cout << GetPhoneNumber(names, phoneNumbers, wantedName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 3, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber( const vector <string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   int index = 0;\n\n   for (unsigned int i = 0; i < nameVec.size(); ++i){\n      if (nameVec.at(i) == contactName)\n         {\n            index = i;\n         }\n   }\n   \n   return phoneNumberVec.at(index);\n}\n\nint main() {\n   /* Type your code here */\n   int numOfPairs; \n   vector <string> vNames;\n   string contactName;\n   \n   \n   vector <string> vPhoneNumbers(0);\n   \n   string info;\n   \n   cin >> numOfPairs;\n   \n   vNames.resize( numOfPairs);\n   vPhoneNumbers.resize ( numOfPairs);\n   \n    for (int i = 0; i < numOfPairs; ++i) { \n   cin >> vNames.at(i);\n   \n   cin >> vPhoneNumbers.at(i);\n   \n    }\n    \n    cin >> contactName;\n    \n    cout << GetPhoneNumber(vNames, vPhoneNumbers, contactName) << endl;\n    \n    // test cout << vNames.at(0) << ' ' << vPhoneNumbers.at(0) << endl;\n    // test cout << vNames.at( vNames.size() -1) << ' ' << vPhoneNumbers.at( vPhoneNumbers.size() - 1) << endl;\n   return 0;\n}\n", "class": 0, "version": 135, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n//worked with Kaitlyn Bui\n\n/* Define your function here */\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n   for (int i = 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         return phoneNumberVec.at(i);\n      }\n   }\n}\n\nint main() {\n   /* Type your code here */\n   \n   int numOfStrings;\n   string numberStr = \"\";\n   string nameStr = \"\";\n   string requestedName = \"\";\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   \n   cin >> numOfStrings;\n   \n   for (int i = 0; i < numOfStrings; ++i) {\n      cin >> nameStr;\n      cin >> numberStr;\n      nameVec.push_back(nameStr);\n      phoneNumberVec.push_back(numberStr);\n   }\n   \n   cin >> requestedName;\n   \n   cout << GetPhoneNumber(nameVec, phoneNumberVec, requestedName) << endl;\n   \n   \n\n   return 0;\n}\n", "class": 0, "version": 21, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName) {\n   \n   for (long unsigned int i = 0; i < nameVec.size(); ++i) {\n      if ((contactName == nameVec.at(i))) {\n         return phoneNumberVec;\n      }\n   }\n\n\n\nint main() {\n   int N;\n   int i;\n   int j;\n   string testStr;\n   int dashFinder;\n   string testNum;\n   string testName;\n   string  nameSearch;\n   \n   cin >> N;\n   \n   vector<string> phoneNumberVec;\n   vector<string> contactName;\n   \n   for (i = 0; i < N; ++i) {\n      cin >> testStr;\n      dashFinder = testStr.find('-');\n      \n      for (j = 0; j < dashFinder; ++j) {\n         testNum.push_back(testStr.at(j));\n      }\n      phoneNumberVec.push_back(testNum);\n      \n      for (long unsigned int k = dashFinder + 1; k < testStr.size(); ++k) {\n         testName.push_back(testStr.at(k));\n      }\n      \n      contactName.push_back(testName);\n      \n   }\n   \n   cin >> nameSearch;\n   \n   cout << GetPhoneNumber(contactName, phoneNumberVec, nameSearch) << endl;\n   \n      \n   \n   \n   return 0;\n}\n", "class": 0, "version": 39, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\n   int index = 0;\n   for (unsigned int i= 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName)\n      {\n         index = i;\n      }\n   }\n   return phoneNumberVec.at(index);\n}\n\nint main() {\n   int numOfPairs;\n   vector <string> vNames;\n   string contactName;\n   vector <string> vPhoneNumbers(0);\n   \n   string info;\n   \n   \n   cin >> numOfPairs;\n   \n   vNames.resize (numOfPairs);\n   vPhoneNumbers.resize (numOfPairs);\n   \n   for (int i=0; i<numOfPairs; ++i)\n   {\n      cin >> vNames.at(i);\n      \n      cin >> vPhoneNumbers.at(i);\n   }\n   \n   cin >> contactName;\n   cout << GetPhoneNumber(vNames, vPhoneNumbers, contactName) << endl;\n   \n/*\nfor (int i= 0; i<numOfPairs; ++i) {  \n   \n   \n   cin >> info;\n   \n   vNames.push_back(info);\n   cin >> info;\n   vPhoneNumbers.push_back(info);\n }\n\n \n cout << vNames.at(0) << ' ' << vPhoneNumbers.at(0) << endl; \n cout << vNames.at(vNames.size()-1) << ' ' << vPhoneNumbers.at(vPhoneNumbers.size() - 1) <<endl;\n*/\n   \n   return 0;\n}\n", "class": 0, "version": 193, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   for (unsigned i = 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         return phoneNumberVec.at(i);\n      }\n   }\n   return 0;\n}\n\nint main() {\n   int numElements;\n   string requestedName;\n   cin >> numElements;\n   \n   vector<string> names(numElements);\n   vector<string> phoneNumbers(numElements);\n   \n   for (unsigned i = 0; i < names.size(); ++i) {\n      cin >> names.at(i);\n      cin >> phoneNumbers.at(i);\n   }\n   \n   cin >> requestedName;\n   \n   cout << GetPhoneNumber(names, phoneNumbers, requestedName) << endl;\n   \n   \n\n   return 0;\n}\n", "class": 0, "version": 138, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\r\n#include <vector>\r\n#include <string>\r\n\r\nusing namespace std;\r\n\r\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\r\n    for (int i = 0; i < nameVec.size(); ++i) {\r\n        if (nameVec[i] == contactName)\r\n            return phoneNumberVec[i];\r\n    }\r\n    return \"Contact doesn't exists!\";\r\n}\r\n\r\nint main() {\r\n    string name, number;\r\n    vector<string> names, numbers;\r\n    int size;\r\n    cin >> size;\r\n    for (int i = 0; i < size; ++i) {\r\n        cin >> name >> number;\r\n        names.push_back(name);\r\n        numbers.push_back(number);\r\n    }\r\n    cin >> name;\r\n    cout << GetPhoneNumber(names, numbers, name) << endl;\r\n    return 0;\r\n}", "class": 0, "version": 19, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\n   int amount = 0;\n   for(unsigned i = 0; i < nameVec.size(); i++){\n      if(contactName == nameVec.at(i)){\n         amount = i;\n         }\n      }\n   return phoneNumberVec.at(amount);\n   }\n\nint main() {\n   vector <string> nameVec;\n   vector <string> phoneNumberVec;\n   int num;\n   string contactName;\n   string contactNumber;\n   string bitchWho;\n   \n   cin >> num;\n   for (int i = 0; i < num; i++){\n      cin >> contactName;\n      nameVec.push_back(contactName);\n      cin >> contactNumber;\n      phoneNumberVec.push_back(contactNumber);\n      }\n   \n   cin >> bitchWho;   \n   \n   cout << GetPhoneNumber(nameVec, phoneNumberVec, bitchWho) << endl;\n\n   return 0;\n}", "class": 0, "version": 93, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   string targetNumber;\n   \n   for (unsigned int i = 0; i < nameVec.size(); ++i)\n   {\n      if (nameVec.at(i) == contactName)\n      {\n         targetNumber = phoneNumberVec.at(i);\n      }\n   }\n   \n   return targetNumber;\n}\n\nint main() {\n   vector<string> contactName;\n   vector<string> contactNum;\n   int listRange;\n   string userName;\n   string userNum;\n   string targetName;\n   \n   cin >> listRange;\n   \n   for (int i = 0; i < listRange; ++i)\n   {\n      cin >> userName;\n      contactName.push_back(userName);\n      \n      cin >> userNum;\n      contactNum.push_back(userNum);\n   }\n   \n   cin >> targetName;\n   cout << GetPhoneNumber(contactName, contactNum, targetName) << endl;\n\n\n   return 0;\n}\n", "class": 0, "version": 45, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\nstring placeHolder;\nfor(unsigned int i = 0; i < nameVec.size() ; i++ ) {\n   \n   if (contactName == nameVec.at(i)){\n      cout << phoneNumberVec.at(i);\n      placeHolder = phoneNumberVec.at(i);\n   }\n   \n}\nreturn placeHolder;\n}\n\n\nint main() {\n  int Start;\n  string inTake;\n  string inTake2;\n  vector <string> Contact;\n  vector <string> Phone;\n  string chosenName;\n  \n  cin >> Start;\n \n \n \n for (int i = 0; i < Start; i++) {\n  cin >> inTake;\n  Contact.push_back(inTake);\n  cin >> inTake2;\n  Phone.push_back(inTake2);\n\n}\ncin >> chosenName;\n \nGetPhoneNumber(Contact,Phone,chosenName);\n   \n   \ncout << endl;   \n\n\n\n   return 0;\n}\n", "class": 0, "version": 136, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector <string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\n   \n   int index =0; \n   \n   for(unsigned int i=0; i < nameVec.size(); ++i)\n   {\n      if (nameVec.at(i)== contactName)\n      {\n         index = i; \n      }\n   }\n   return phoneNumberVec.at(index); \n}\n\nint main() {\n   /* Type your code here */\n   int numOfPairs; \n   vector<string>vNames; \n   string contactName; \n   \n   vector<string>vPhoneNumbers(0); \n   string info;\n   cin >> numOfPairs; \n   \n   vNames.resize(numOfPairs);\n   vPhoneNumbers.resize(numOfPairs);\n   \n   for (int i =0; i < numOfPairs; ++i){ \n      cin >> vNames.at(i);\n      \n      cin >> vPhoneNumbers.at(i); \n   }\n   cin >> contactName; \n   cout << GetPhoneNumber(vNames, vPhoneNumbers, contactName) << endl; \n   \n  \n   \n\n   return 0;\n}\n", "class": 0, "version": 75, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   string returnNumber;\n   unsigned int i;\n   \n   for (i = 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         returnNumber = phoneNumberVec.at(i);\n      }\n   }\n   return returnNumber;\n}\n\nint main() {\n   /* Type your code here */\n   unsigned int numOfPeople;\n   string person;\n   vector<string> names;\n   vector<string> numbers;\n   unsigned int i;\n   \n   cin >> numOfPeople;\n   \n   for (i = 0; i < numOfPeople; ++i) {\n      string temp1;\n      string temp2;\n      cin >> temp1 >> temp2;\n      names.push_back(temp1);\n      numbers.push_back(temp2);\n   }\n   \n   cin >> person;\n   \n   cout << GetPhoneNumber(names, numbers, person) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 249, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName)\n{\n   for (int i=0; i<nameVec.size(); i++){\n      if (nameVec[i] == contactName)\n         return phoneNumberVec[i];\n   }\n   return \"\";\n}\nint main() {\n   int n;\n   cin >> n;\n   vector<string>NameVec(n);\n   vector<string> phoneNumberVec(n);\n   for (int i=0; i<n; i++) {\n      cin >> NameVec[i];\n      cin >> phoneNumberVec[i];\n   }\n   string contactName;\n   cin >> contactName;\n   \n   cout << GetPhoneNumber(NameVec, phoneNumberVec, contactName) << endl;\n   return 0;\n}\n", "class": 0, "version": 80, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   string number;\n   for(unsigned int i = 0; i < phoneNumberVec.size(); ++i) \n   {\n      if (nameVec.at(i) == contactName) \n      {\n         number = phoneNumberVec.at(i);\n         \n      }\n   }\n\nreturn number;\n\n}\n\nint main() {\n   /* Type your code here */\n   \n   int numContact;\n   cin >> numContact;\n   vector<string> nameList;\n   vector<string> phoneList;\n   \n   string name;\n   string number;\n   \n   for(int i = 0 ; i<numContact; ++i)\n   {\n      cin >> name;\n      nameList.push_back(name);\n      \n      cin >> number;\n      phoneList.push_back(number);\n      \n   }\n   string findContact;\n   cin >> findContact;\n   \n   cout << GetPhoneNumber(nameList, phoneList, findContact);\n\n   \n   \n   \n   \n\n   \n   cout << endl;\n   return 0;\n}\n", "class": 0, "version": 204, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\n   string phoneNumber;\n   \n   for(int j = 0; j < static_cast<int>(nameVec.size()); ++j){\n      if(nameVec.at(j) == contactName){\n         phoneNumber = phoneNumberVec.at(j);\n      }\n   }\n   \n   return phoneNumber;\n}\n   \n\nint main() {\n   /* Type your code here */\n   string input;\n   string contactName;\n   string temp;\n   vector<string> name;\n   vector<string> phoneNum;\n   int num;\n   \n   cin >> num;\n   \n   for(int i = 0; i < num * 2; ++i){\n      cin >> temp;\n      if(isalpha(temp.at(0))){\n         name.push_back(temp);\n         //cout << temp << endl;\n      }\n      else if (isdigit(temp.at(0))){\n         phoneNum.push_back(temp);\n         //cout << temp << endl;\n      }\n   }\n   \n   //getline(cin, contactName);\n   //cout << contactName;\n   cin >> contactName;\n   \n   cout << GetPhoneNumber(name, phoneNum, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 88, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName) {\n   int contact = -1;\n   string contactNumber;\n   \n   for (unsigned int i = 0; i < nameVec.size(); ++i) {\n      if (contactName == nameVec.at(i)) {\n         contact = i;\n         contactNumber = phoneNumberVec.at(contact);\n      }\n   }\n   \n   if (contact == -1) {\n      contactNumber = \"None\";\n   }\n   \n   return contactNumber;\n}\n\nint main() {\n   int amount;\n   int i;\n   unsigned int j;\n   string wordPair;\n   unsigned int comSpot;\n   string name;\n   string number;\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   string contactName;\n   \n   cin >> amount;\n   \n   for (i = 0; i < amount; ++i) {\n      cin >> wordPair;\n      comSpot = wordPair.find(','); // find where comma is to separate name and number\n      \n      for (j = 0; j < comSpot; ++j) { // establishing name in nameVec\n         if (j == 0) {\n            name = wordPair.at(0);\n         }\n         else {\n            name.push_back(wordPair.at(j));\n         }\n      }\n      nameVec.push_back(name);\n      name = \" \";\n         \n      for (j = comSpot + 1; j < wordPair.size(); ++j) { // establishing number in phoneNumberVec\n         if (j == comSpot + 1) {\n            number = wordPair.at(comSpot + 1);\n         }\n         else {\n            number.push_back(wordPair.at(j));\n         }\n      }\n      phoneNumberVec.push_back(number);\n      number = \" \";\n   }\n   \n   cin >> contactName;\n   \n   cout << GetPhoneNumber (nameVec, phoneNumberVec, contactName) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 150, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   for (unsigned i = 0; i < nameVec.size(); ++i) {\n      if (contactName == nameVec.at(i)) {\n         return phoneNumberVec.at(i);\n      }\n   }\n}\n\n\nint main() {\n   vector<string>names;\n   vector<string>number;\n   int num;\n   string name;\n   string phone;\n   string lname;\n   cin >> num;\n   for (int i = 0; i < num; ++i) {\n      cin >> name;\n      names.push_back(name);\n      cin >> phone;\n      number.push_back(phone);\n   }\n   cin >> lname;\n   cout << GetPhoneNumber(names, number, lname) << endl;\n   \n   \n   \n\n   return 0;\n}\n", "class": 0, "version": 10, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   string rain;\n   for(unsigned int i = 0; i < nameVec.size(); ++i) {\n      if(nameVec.at(i) == contactName) {\n          rain = phoneNumberVec.at(i);\n      }\n   }\n   return rain;\n}\n\n\nint main() {\n  vector<string> hola;\n  vector<string> hello;\n  string wow;\n  string sugoi;\n  int num;\n  string cool;\n  string boy;\n\n  cin >> num;\n    \n  for(int i = 0; i < num; ++i) {\n      cin >> wow;\n      hola.push_back(wow);\n      cin >> sugoi;\n      hello.push_back(sugoi);\n  }\n\n   cin >> boy;\n\n   cool = GetPhoneNumber(hola, hello, boy);\n  \n   cout << cool << endl;\n  \n   return 0;\n}\n", "class": 0, "version": 33, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName){\n\n for(unsigned i = 0; i < nameVec.size(); ++i){ \n    if( contactName == nameVec.at(i)){ \n     return  phoneNumberVec.at(i); \n}\n    }\nreturn \"None\"; \n}\n\nint main() {\nint number; \nvector<string> nameVec; \nvector<string> phoneNumber;\nstring contactName;\nstring input;\ncin >> number; \n\nnameVec.resize(number);\nphoneNumber.resize(number);\nfor (unsigned int i= 0; i < nameVec.size(); ++i) {\n   cin >> input;\n   \n   int x = input.find(',');\n   \n   nameVec.at(i) = input.substr(0,x);\n   phoneNumber.at(i) = input.substr(x+1);\n}\ncin >> contactName; \n\ncout <<GetPhoneNumber( nameVec, phoneNumber, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 110, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\n   unsigned int place; \n   string phoneNum;\n   for(unsigned int i = 0; i < nameVec.size(); ++i){\n      if(nameVec.at(i) == contactName){\n         place = i;   \n      }\n   }   \n   \n   phoneNum = phoneNumberVec.at(place);\n   return phoneNum;\n}\nint main() {\n   /* Type your code here */\n   unsigned int vecSize;\n   vector<string> vNames;\n   vector<string> vNums;\n   string names;\n   string numbers;\n   string findContact;\n   \n   cin >> vecSize;\n   for(unsigned int i = 0; i < vecSize; ++i){\n      cin >> names >> numbers;\n      vNames.push_back(names);\n      vNums.push_back(numbers);\n   }\n   \n   cin >> findContact;\n   \n   cout << GetPhoneNumber(vNames, vNums, findContact) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 120, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   string contactNumber;\n   unsigned int i;\n   \n   for (i = 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         contactNumber = phoneNumberVec.at(i);\n      }\n   }\n   return contactNumber;\n}  \n\nint main() {\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   unsigned int i;\n   string phoneNames;\n   string phoneNumber;\n   string contactName;\n   int vectorAmount;\n   \n   cin >> vectorAmount;\n   \n   for (i = 0; i < vectorAmount; ++i) {\n      cin >> phoneNames;\n      cin >> phoneNumber;\n      nameVec.push_back(phoneNames);\n      phoneNumberVec.push_back(phoneNumber);\n   }\n   cin >> contactName;\n   \n   cout << GetPhoneNumber (nameVec, phoneNumberVec, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 96, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\nstring number;\n   for (int x = 0; x < nameVec.size(); x++) {\n      if (nameVec.at(x) == contactName) {\n         number = phoneNumberVec.at(x);\n      }\n   }\n   return number;\n}\n\nint main() {\nint count;\nstring contact;\ncin >> count;\n\nvector<string> name(count);\nvector<string> phone(count);\n\nfor (int x = 0; x < name.size(); x++) {\n   cin >> name.at(x);\n   cin >> phone.at(x);\n}\n\ncin >> contact;\n\ncout << GetPhoneNumber(name, phone, contact) << endl;\n   return 0;\n}\n", "class": 0, "version": 8, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n//This lab was collborate with my friends//\n/* Define your function here */\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (unsigned i = 0; i < nameVec.size(); ++i) {\n   if (nameVec[i] == contactName)\n    return phoneNumberVec[i];\n    }\n    return \"Contact doesn't exists!\";\n}\nint main() {\n   /* Type your code here */\n string userName, userNumber;\n    vector<string> names, phoneNumbers;\n    int a;\n    cin >> a;\n    for (int i = 0; i < a; ++i) {\n    cin >> userName >> userNumber;\n    names.push_back(userName);\n   phoneNumbers.push_back(userNumber);\n    }\n   cin >> userName;\n   cout << GetPhoneNumber(names, phoneNumbers, userName) << endl;\n   return 0;\n}\n", "class": 0, "version": 15, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   for(unsigned int i = 0; i < nameVec.size(); i++)\n   {\n      if(nameVec.at(i) == contactName)\n      {\n         return phoneNumberVec.at(i);\n      }\n   }\n}\n\nint main() {\n   int input;\n   string contactName;\n   string name;\n   string numb;\n   cin >> input;\n   vector<string> numberList;\n   vector<string> nameList;\n   numberList.resize(input);\n   nameList.resize(input);\n   \n   for(unsigned int i = 0; i < nameList.size(); i++)\n   {\n      cin >> name;\n      nameList.at(i) = name;\n      cin >> numb;\n      numberList.at(i) = numb;\n   }\n   cin >> contactName;\n  // cout << nameList.at(0) << endl << numberList.at(0) << endl << contactName << endl;\n  cout << GetPhoneNumber(nameList, numberList, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 178, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName);\n\nint main() {\n   /* Type your code here */\n   int num;\n   cin >> num;\n   string wordPair;\n   string inputName;\n   vector<string> nameVec(num);\n   vector<string> phoneNumberVec(num);\n   \n   for (int i = 0; i < num; i++){\n      //cout << \"inside for loop\" << endl; \n      cin >> wordPair;\n      int ind = wordPair.find(',');\n      //cout << \"comma: \" << ind << endl;\n      string name = wordPair.substr(0, ind);\n      //cout << \"name: \" << name << endl;\n      string phoneNum = wordPair.substr(ind + 1, wordPair.size()-1);\n      //cout << \"phone num: \" << phoneNum << endl;\n      \n      nameVec.push_back(name);\n      phoneNumberVec.push_back(phoneNum);\n     \n   }\n   /*for (int i = 0; i < num; i++){\n      cout << nameVec.at(i) << endl;\n      cout << phoneNumberVec.at(i) << endl;\n   }*/\n      \n   cin >> inputName;\n   \n   cout << GetPhoneNumber(nameVec, phoneNumberVec, inputName) << endl;\n\n   return 0;\n}\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName){\n   bool test = false;\n   int num; \n   for (unsigned i = 0; i < nameVec.size(); i++){\n      if (nameVec.at(i) == contactName){\n         test = true;\n         num = i;\n         return phoneNumberVec.at(i);\n      }\n      else{\n        test = false;\n      }\n   }\n   return (\"None\");\n}\n", "class": 0, "version": 160, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n   for (int i =0; i < nameVec.size();i++) {\n      if (nameVec.at(i) == contactName) {\n         return phoneNumberVec.at(i);\n      }\n   }\n   return 0;\n}\n\nint main() {\n   int numVals;\n   string userName;\n   string userPhone;\n   vector<string>nameStr;\n   vector<string>phoneStr;\n   cin >> numVals;\n   \n   for(int i=0; i< numVals;i++) {\n      cin >> userName;\n      nameStr.push_back(userName);\n      cin >> userPhone;\n      phoneStr.push_back(userPhone);\n   }\n   \n   cin >> userName;\n   cout << GetPhoneNumber(nameStr, phoneStr, userName) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 92, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber (const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   string phoneNumber;\n   unsigned int i;\n   \n   for (i = 0; i < nameVec.size(); ++i) {\n      if (contactName == nameVec.at(i)) {\n         phoneNumber = phoneNumberVec.at(i);\n      }\n   }\n   \n   return phoneNumber;\n}\n/* Define your function here */\n\nint main() {\n   int wordPairs;\n   unsigned int i;\n   \n   cin >> wordPairs;\n   \n   string contactName;\n   \n   vector<string> nameVec(wordPairs);\n   \n   vector<string> phoneNumberVec(wordPairs);\n   \n   for (i = 0; i < nameVec.size(); ++i) {\n      cin >> nameVec[i] >> phoneNumberVec[i];\n   }\n   \n   cin >> contactName;\n   \n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n   \n   /* Type your code here */\n\n   return 0;\n}\n", "class": 0, "version": 34, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName)\n{\nstring phoneNumber;\n\n   for (unsigned int i = 0; i < nameVec.size(); ++i)\n   {\n      if (nameVec.at(i) == contactName)\n      {\n      phoneNumber = phoneNumberVec.at(i);\n      }\n   }\n\nif (phoneNumber == \"\")\n{\nphoneNumber = \"None\";\n}\n\nreturn phoneNumber;\n}\n\nint main() {\n\nvector<string> nameVec;\nvector<string> phoneNumberVec;\nstring contactName;\nint numPairs;\nstring namePhoneNum;\nstring name;\nstring phoneNum;\n\ncin >> numPairs;\n\nfor (int i = 0; i < numPairs; ++i)\n{\n\ncin >> namePhoneNum;\nint j = 0;\nname = \"\";\n\n   while (namePhoneNum.at(j) != ',')\n   {\n   name.push_back(namePhoneNum.at(j));\n   ++j;\n   }\n\nnameVec.push_back(name);\n\nphoneNum = \"\";\n\n   for (unsigned int j = namePhoneNum.find(\",\") + 1; j < namePhoneNum.size(); ++j)\n   {\n   phoneNum.push_back(namePhoneNum.at(j));\n   }\n\nphoneNumberVec.push_back(phoneNum);\n}\n\ncin >> contactName;\n\ncout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 43, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   int i;\n   string phoneNumber;\n   for( i = 0 ; i < nameVec.size() ; ++i)\n   {\n      if(nameVec.at(i) == contactName)\n      {\n         phoneNumber = phoneNumberVec.at(i);\n      }\n   }\n   \n   return phoneNumber;\n}\n\n         \n      \n\nint main() {\n   int userCount;\n   cin >> userCount;\n   int i;\n   string userString;\n   string contactName;\n   vector<string> nameVector;\n   vector<string> phoneNumberVector;\n  \n   \n   for(i = 0; i < userCount; ++i)\n   {\n      cin >> contactName;\n   \n   nameVector.push_back(contactName);\n   \n      cin >> userString;\n   phoneNumberVector.push_back(userString);\n   }\n   \n   cin >> contactName;\n   \n   cout<<GetPhoneNumber(nameVector,phoneNumberVector,contactName) << endl;\n      \n   \n   \n   \n   \n   \n   \n   \n   \n\n\n   return 0;\n}\n\n\n", "class": 0, "version": 24, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber( const vector <string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   int userInput = 0;\n\n   for (unsigned int i = 0; i < nameVec.size(); ++i){\n      if (nameVec.at(i) == contactName) { \n            userInput = i;\n         }\n   }\n\n   return phoneNumberVec.at(userInput);\n}\n\nint main() {\n   int UserNum; \n   vector <string> vecNames;\n   string contactName;\n\n   vector <string> vecPhoneNumbers(0);\n\n   string info;\n\n   cin >> UserNum;\n\n   vecNames.resize( UserNum);\n   vecPhoneNumbers.resize ( UserNum);\n\n    for (int i = 0; i < UserNum; ++i) { \n   cin >> vecNames.at(i);\n\n   cin >> vecPhoneNumbers.at(i);\n\n    }\n\n    cin >> contactName;\n\n    cout << GetPhoneNumber(vecNames, vecPhoneNumbers, contactName) << endl;\n\n \n   return 0;\n}\n", "class": 0, "version": 79, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n// string GetPhone(const vector<string>& phoneVec, const vector<string>& nameVec, string findName)\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName){\n   bool nameExists;\n   string numFound;\n   \n   for (int i = 0; i < nameVec.size(); ++i){\n      if (contactName == nameVec.at(i)){\n         nameExists = true;\n         numFound = numFound + phoneNumberVec.at(i);\n      }\n   }  \n   if (nameExists != true){\n      numFound = \"None\";\n   }\n   return numFound;   \n}\n\nint main() {\n   int numPairs;\n   \n   cin >> numPairs;\n   \n   vector<string> phoneVec;\n   vector<string> nameVec;\n   \n   for (int i = 0; i < numPairs; ++i){\n      string inputStr;\n      cin >> inputStr;\n      \n      int commaLoc = inputStr.find(',');\n      \n      string holdPhone;\n      \n      for (int j = 0; j < commaLoc; ++j){\n         holdPhone.push_back(inputStr.at(j));\n      }\n      phoneVec.push_back(holdPhone);\n      \n      string holdName;\n      \n      for (int l = commaLoc + 1; l < inputStr.size(); ++l){\n         holdName.push_back(inputStr.at(l));\n      }\n      nameVec.push_back(holdName);\n   }\n      string findName;\n      cin >> findName;\n      cout << GetPhoneNumber(phoneVec, nameVec, findName);\n      cout << endl;\n   return 0;\n}", "class": 0, "version": 20, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName)\n            return phoneNumberVec[i];\n    }\n    return \"Contact doesn't exists!\";\n}\n\nint main() {\n   \n    string userName;\n    string userNumber;\n    vector<string> names, phoneNumbers;\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; ++i) \n    {\n        cin >> userName;\n        cin >> userNumber;\n        names.push_back(userName);\n        phoneNumbers.push_back(userNumber);\n    }\n    cin >> userName;\n    cout << GetPhoneNumber(names, phoneNumbers, userName);\n    cout << endl;\n\n   return 0;\n}\n", "class": 0, "version": 185, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber (const vector<string> &nameVec, const vector<string> & phoneNumberVec, const string &contactName) {\n   unsigned int i;\n   int thisNum;\n   string phoneNumLOL;\n   \n   for (i = 0; i < nameVec.size(); ++i) {\n      if (contactName == nameVec.at(i)) {\n         thisNum = i;\n      }\n   }\n   \n   phoneNumLOL = phoneNumberVec.at(thisNum);\n   \n   return phoneNumLOL;\n   \n}\n\nint main() {\n   vector<string> nameVector;\n   vector<string> phoneNumVector;\n   string whichName;\n   string stringInput;\n   int numPairs;\n   int i;\n\n   cin >> numPairs;\n   \n   for (i = 0; i < numPairs; ++i) {\n      cin >> stringInput;\n      nameVector.push_back(stringInput);\n      \n      cin >> stringInput;\n      phoneNumVector.push_back(stringInput);\n   }\n   \n   cin >> whichName;\n   \n   cout << GetPhoneNumber(nameVector, phoneNumVector, whichName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 59, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   string phoneNumber;\n   for(unsigned i = 0; i < nameVec.size(); ++i) {\n      if(contactName == nameVec.at(i)) {\n         phoneNumber = phoneNumberVec.at(i);\n      }\n   }\n   return phoneNumber;\n}\n\nint main() {\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   string contactName;\n   string phoneNumber;\n   int contactListSize;\n   \n   cin >> contactListSize;\n   \n   for(int i = 0; i < contactListSize; ++i) {\n      cin >> contactName;\n      nameVec.push_back(contactName);\n      cin >> phoneNumber;\n      phoneNumberVec.push_back(phoneNumber);\n   }\n   \n   cin >> contactName;\n   \n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 136, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName){\n   bool foundName = false;\n   string phoneNumberToReturn;\n   \n   for (unsigned int i = 0; i < nameVec.size(); ++i) {\n      if (contactName == nameVec.at(i)){\n         phoneNumberToReturn = phoneNumberVec.at(i);\n         foundName = true;\n      }\n   }\n   \n   if (foundName) {\n      return phoneNumberToReturn;\n   } else {\n      return \"None\";\n   }\n}\n\nint main() {\n   int numPeople;\n   vector<string> phoneNumbers;\n   vector<string> contactNames;\n   string userString;\n   int commaIndex;\n   string nameToContact;\n   \n   cin >> numPeople;\n   \n   for (int i = 0; i < numPeople; ++i) {\n      cin >> userString;\n      commaIndex = userString.find(',');\n      contactNames.push_back( userString.substr(0 , commaIndex ) );\n      phoneNumbers.push_back( userString.substr(commaIndex + 1, userString.size() - 1 ) );\n   }\n   \n   cin >> nameToContact;\n   cout << GetPhoneNumber(contactNames, phoneNumbers, nameToContact) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 76, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   for (unsigned int i = 0; i < nameVec.size(); ++i)\n   {\n      if (nameVec.at(i) == contactName)\n      {\n         return phoneNumberVec.at(i);\n         break;\n      }\n   }\n}\n\nint main() {\n   int contacts;\n   cin >> contacts;\n   \n   vector<string> names(contacts);\n   vector<string> numbers(contacts);\n   string temp;\n   for (unsigned int i = 0; i < names.size(); ++i)\n   {\n      cin >> temp;\n      names.at(i) = temp;\n      cin >> temp;\n      numbers.at(i) = temp;\n   }\n   string search;\n   cin >> search;\n   string find;\n   \n   find = GetPhoneNumber(names, numbers, search);\n   cout << find << endl;\n\n   return 0;\n}\n", "class": 0, "version": 132, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n\n   for (int i = 0; i < phoneNumberVec.size(); ++i) {\n      if(nameVec[i] == contactName)\n         return phoneNumberVec[i];\n      }\n   }\n\nint main() {\n   int size;\n   cin >> size;\n\n   string name, contactName, phone;\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n\n   for (int i = 0; i < size; ++i) {\n   cin >> name >> phone;\n   nameVec.push_back(name);\n   phoneNumberVec.push_back(phone);\n}\n\ncin >> contactName;\ncout << GetPhoneNumber(nameVec,phoneNumberVec,contactName) << endl;\n\n\n\n   return 0;\n}\n", "class": 0, "version": 132, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber (const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\n   string match;\n   int p;\n   int u;\n   u = nameVec.size();\n   for ( p=0 ; p < u ; ++p){\n      if ( nameVec.at(p) == contactName){\n         match = phoneNumberVec.at(p);\n      }\n   }\n   return match;\n}\n\nint main() {\n   int i = 0;\n   int N;\n   string input;\n   string contactName;\n   vector<string> nameVec ;\n   vector<string> phoneNumberVec;\n   \n   cin >> input;\n   \n   N = stoi (input);\n   \n   while ( i < N){\n      cin >> input;\n      nameVec.push_back(input);\n      cin >> input;\n      phoneNumberVec.push_back(input);\n      ++i;\n   }\n   \n   cin >> input;\n   contactName = input;\n\n   cout << GetPhoneNumber( nameVec, phoneNumberVec, contactName) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 119, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, string contactName){\n   cin >> contactName;\n   for (unsigned int i = 0; i < nameVec.size(); i++){\n      if (contactName == nameVec.at(i)){\n         return phoneNumberVec.at(i);\n      }\n   }\n}\n \nint main() {\n   int numVal;\n   cin >> numVal;\n   vector <string> nameVec;\n   nameVec.resize(numVal);\n   vector <string> phoneNumberVec;\n   phoneNumberVec.resize(numVal);\n   string findname;\n   string findnumber;\n   for (unsigned int i = 0; i < numVal; ++i){\n      cin >> findname;\n      nameVec.at(i) = findname;\n      cin >> findnumber;\n      phoneNumberVec.at(i) = findnumber;\n   }\n   string contactName;\n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n   cout << endl;\n}", "class": 0, "version": 90, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   int index = 0;\n   for ( unsigned int i = 0; i < nameVec.size() ; ++i)\n   {\n      if ( nameVec.at(i) == contactName)\n      {\n         index = i;\n      }\n   }\n   return phoneNumberVec.at(index);\n}\n\nint main() {\n   int numOfPairs;\n   vector <string> vNames;\n   string contactName;\n   vector <string> vPhoneNumbers(0);\n   string info;\n   cin >> numOfPairs;\n   vNames.resize ( numOfPairs ); \n   vPhoneNumbers.resize ( numOfPairs);\n   for ( int i = 0; i < numOfPairs; ++i)\n   {\n      cin >> vNames.at(i);\n      cin >> vPhoneNumbers.at(i);\n   }\n   cin >> contactName;\n   cout << GetPhoneNumber(vNames, vPhoneNumbers, contactName) << endl;\n   }\n   \n   \n   \n   \n   \n   \n   //test to see vector was built correctly cout << vNames.at(0) << ' ' << vPhoneNumbers.at(0) << endl;\n   //test to see vector was built correctly cout << vNames.at( vNames.size() - 1)  << ' ' << vPhoneNumbers.at( vPhoneNumbers.size() - 1) << endl;\n   \n", "class": 0, "version": 50, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   for (unsigned int i = 0; i < nameVec.size(); ++i) {\n\n      if (nameVec.at(i) == contactName) {\n\n         return phoneNumberVec.at(i);\n      }\n   }\n   return \"not working\";\n}\n\nint main() {\n   /* Type your code here */\n   int num;\n   string input;\n   cin >> num;\n   \n   vector<string> names;\n   vector<string> phoneNums;\n   \n   for (int i = 0; i < num; ++i) {\n   cin >> input;\n   names.push_back(input);\n   \n   cin >> input;\n   phoneNums.push_back(input);\n   }\n\n   cin >> input;\n   cout << GetPhoneNumber(names, phoneNums, input) << endl;\n   \n   // cout << \"Names: \";\n   // for (int i = 0; i < num; ++i) {\n   //    cout << names.at(i) << \" \";\n   // }\n   \n   // cout << \"Nums: \";\n   // for (int i = 0; i < num; ++i) {\n   //    cout << phoneNums.at(i) << \" \";\n   // }\n   \n   return 0;\n}\n", "class": 0, "version": 76, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   for (int i=0; i<nameVec.size(); i++) {\n      if (nameVec[i] == contactName)\n      return phoneNumberVec[i];\n   }\n}\nint main() {\n   /* Type your code here */\n   string name;\n   string number;\n   vector <string> names, numbers;\n   int size;\n   cin >> size;\n   for (int i=0; i<size; i++) {\n      cin >> name >> number;\n      names.push_back(name);\n      numbers.push_back(number);\n   }\n   cin >> name;\n   cout << GetPhoneNumber(names, numbers, name) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 216, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n   string phoneNum;\n   unsigned i;\n   \n   for (i = 0; i < nameVec.size(); ++i) {\n      if (contactName == nameVec.at(i)) {\n         phoneNum = phoneNumberVec.at(i);\n      }\n   }\n   \n   return phoneNum;\n}\n\nint main() {\n   string contactName;\n   int assignedContact;\n   string contactNum;\n   \n   cin >> assignedContact;\n   \n   vector<string> nameVec(assignedContact);\n   vector<string> phoneNumberVec(assignedContact);\n   \n   for (int i = 0; i < assignedContact; ++i) {\n      cin >> nameVec.at(i);\n      cin >> phoneNumberVec.at(i);\n   }\n   \n   cin >> contactName;\n   \n   contactNum = GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n   \n   cout << contactNum << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 30, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\nstring number;\n   for(unsigned int i = 0; i < nameVec.size(); ++i){\n   if(nameVec.at(i) == contactName){\nnumber = phoneNumberVec.at(i);\n}}\nreturn number;}\n\nint main() {\n\n\nint numNames;\n\ncin >> numNames;\n\nvector<string> namesList(numNames);\nvector<string> numbersList(numNames);\nstring username;\nstring usernumber;\n   for(int i = 0; i < numNames; ++i){\ncin >> username;\ncin >> usernumber;\n   namesList.push_back(username);\n   numbersList.push_back(usernumber);\n}\nstring usercontact;\ncin >> usercontact;\n\ncout << GetPhoneNumber(namesList, numbersList, usercontact) << endl;\nreturn 0;}\n", "class": 0, "version": 85, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName){\n   string phoneNumber;\n   int index;\n   \n   //loop thru name vec n find index then find value of index on phone vec\n \n   for (int i = 0; i < nameVec.size(); ++i){\n      if (contactName == nameVec.at(i)){\n         index = i;\n      }\n   }\n   \n   phoneNumber = phoneNumberVec.at(index);\n   \n   return(phoneNumber);\n   \n}\n\nint main() {\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   string contactInList;\n   string contactName;\n   string phoneNumber;\n   int numContacts;\n   \n   cin >> numContacts;\n   \n   for (int i = 0; i < numContacts; i++){\n      cin >> contactInList;\n      nameVec.push_back(contactInList);\n      cin >> phoneNumber;\n      phoneNumberVec.push_back(phoneNumber);\n   }\n\n   cin >> contactName;\n   \n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n   cout << endl;\n\n   return 0;\n}\n", "class": 0, "version": 29, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   string phonenumber;\n   for (unsigned int i = 0; i < nameVec.size(); ++i)\n   {\n      for (unsigned int i = 0; i < phoneNumberVec.size(); ++i)\n      {\n         if(contactName == nameVec.at(i))\n         {\n            phonenumber = phoneNumberVec.at(i);\n         }\n      }\n   }\n   return phonenumber;\n}\n\n\nint main() {\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   string contactName;\n   string contactNumber;\n   string phoneNumber;\n   int num;\n   cin >> num;\n   for (int i = 0; i < num; ++i)\n   {\n      cin >> contactName;\n      nameVec.push_back(contactName);\n      \n      cin >> contactNumber;\n      phoneNumberVec.push_back(contactNumber);\n   }\n   cin >> contactName;\n   phoneNumber = GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n   \n   cout << phoneNumber << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 27, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n    string number;\n    for(unsigned i = 0; i < nameVec.size(); ++i) {\n       if(nameVec.at(i) == contactName) {\n          number = phoneNumberVec.at(i);\n       }\n    }\n    return number;\n}\n\nint main() {\n   int z;\n   string contact;\n   cin >> z;\n   \n   vector<string> phoneNumberVec(z);\n   vector<string> nameVec(z);\n   for(int i = 0; i < z; ++i) {\n      cin >> nameVec.at(i) >> phoneNumberVec.at(i);\n   }\n   cin >> contact;\n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contact);\n   \n   cout << endl;\n   \n   \n      \n\n   return 0;\n}\n", "class": 0, "version": 171, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\n// tony trieu helped me out with this code! \nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName){\n   for (unsigned int i = 0; i < nameVec.size(); i++){\n      if (nameVec.at(i) == contactName){\n         return phoneNumberVec.at(i);\n      }\n   }\n   return 0;\n}\nint main() {\n   /* Type your code here */\n   int N;\n   cin >> N;\n\n   string names;\n   string phone;\n   vector<string> vec1(N);\n   vector<string> vec2(N);\n   \n   for (unsigned int i = 0; i < vec1.size(); i++){\n      cin >> names;\n      vec1.at(i) = names;\n      cin >> phone;\n      vec2.at(i) = phone;\n   }\n   string contact;\n   cin >> contact; \n   \n   cout << GetPhoneNumber(vec1, vec2, contact) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 6, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, \nconst vector<string> &phoneNumberVec, const string &contactName){\n   int i;\n   int length;\n   string phoneNum;\n   \n   length = phoneNumberVec.size();\n   for(i=0; i < length; ++i){\n      if(nameVec.at(i) == contactName){\n         phoneNum = phoneNumberVec.at(i);\n      }\n   }\n   return phoneNum;\n}\n\n\nint main() {\n   vector<string> nameV;\n   vector<string> pNumV;\n   int i;\n   int numVals;\n   string inputName;\n   \n   cin >> numVals;\n   nameV.resize(numVals);\n   pNumV.resize(numVals);\n   for(i=0; i<numVals; ++i){\n      cin>>nameV.at(i);\n      cin>>pNumV.at(i);\n   }\n   cin>>inputName;\n   cout<< GetPhoneNumber(nameV, pNumV, inputName)<<endl;\n   \n   return 0;\n}\n", "class": 0, "version": 218, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   for (int i = 0; i < nameVec.size(); ++i)\n   {\n      if (nameVec.at(i) == contactName)\n      {\n         return phoneNumberVec.at(i);\n      }\n   }\n}\n\nint main() {\n   string inputName;\n   string inputNumber;\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   int size;\n   cin >> size;\n   \n   for (int i = 0; i < size; ++i)\n   {\n      cin >> inputName >> inputNumber;\n      nameVec.push_back(inputName);\n      \n      phoneNumberVec.push_back(inputNumber);\n   }\n   cin >> inputName;\n   cout << GetPhoneNumber(nameVec, phoneNumberVec, inputName) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 43, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName) {\n   for (unsigned int i = 0; i < nameVec.size(); ++i) {\n      if (nameVec[i] == contactName) {\n         return phoneNumberVec[i]; }\n      else if (nameVec[i] != contactName) {\n         return \"None\"; }\n   }\n}\n\nint main() {\n   int x;\n   \n   vector<string> y;\n   vector<string> z;\n   string yy;\n   string zz;\n   \n   cin >> x;\n   \n   for (int i = 0; i < x; ++i) {\n      cin >> yy;\n      y.push_back(yy);\n      cin >> zz;\n      z.push_back(zz); }\n      \n   cin >> zz;\n   \n   cout << GetPhoneNumber(y, z, zz) << endl;\n\n\n   return 0;\n}\n", "class": 0, "version": 193, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring GetPhoneNumber (const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   unsigned int i;\n   string num;\n   \n   for (i = 0; i < nameVec.size(); ++i) { \n      if (nameVec.at(i) == (contactName)){\n         num = phoneNumberVec.at(i);\n      }\n   }\n   return num;\n}\n\nint main() {\n   vector<string> name; \n   vector<string> number; \n   string currentNum; \n   string contact; \n   int n; \n   int i; \n   \n   cin >> n; \n   name.resize(n); \n   number.resize(n); \n   \n   for (i = 0; i < n; ++i) {\n      cin >> name.at(i); \n      cin >> number.at(i); \n   }\n   \n   cin >> contact; \n   currentNum.append(GetPhoneNumber (name, number, contact));\n   \n   cout << currentNum << endl; \n\n   return 0;\n}\n", "class": 0, "version": 143, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName) {\n   int i;\n   string result;\n   int commaIndex;\n   int elementIndex;\n   bool yep = false;\n   for (i = 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i).find(contactName) != string::npos) {\n         yep = true;\n         elementIndex = i;\n      }\n   }\n   \n   if (yep) {\n      commaIndex = phoneNumberVec.at(elementIndex).find(',');\n      for (i = commaIndex + 1; i < phoneNumberVec.at(elementIndex).size(); ++i) {\n         result += phoneNumberVec.at(elementIndex).at(i);\n      }\n   }\n   else {\n      result = \"None\";\n   }\n   return result;\n}\n\nint main() {\n   int numContacts;\n   cin >> numContacts;\n   int i;\n   string contactName;\n   \n   \n   vector<string> nameVec (numContacts);\n   vector<string> phoneNumberVec (numContacts);\n   \n   \n   \n   for (i = 0; i < numContacts; ++i) {\n      cin >> nameVec.at(i);\n   }\n   \n   for (i = 0; i < numContacts; ++i) {\n      phoneNumberVec.at(i) = nameVec.at(i);\n   }\n   \n   cin >> contactName;\n   \n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n   \n   cout << endl;\n\n   return 0;\n}\n", "class": 0, "version": 112, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\n   \n   int index = 0;\n   for (unsigned int i = 0; i < nameVec.size(); ++i) {\n      if(nameVec.at(i) == contactName) {\n         index = i;\n      }\n   }\n   \n   return phoneNumberVec.at(index);\n}\n\nint main() {\n   int numOfPairs;\n   vector <string> vNames;\n   vector <string> vPhoneNumbers(0);\n   string info;\n   string contactName;\n   \n   cin >> numOfPairs;\n   \n   for (int i = 0; i < numOfPairs; ++i) {\n   \n   cin >> info;\n   \n   vNames.push_back(info);\n   \n   cin >> info;\n   vPhoneNumbers.push_back(info);\n   }\n   cin >> contactName;\n   cout << GetPhoneNumber(vNames, vPhoneNumbers, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 248, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) \n   {\n      int index = 0;\n         for (unsigned int i = 0; i < nameVec.size(); ++i)\n         {\n            if (nameVec.at(i) == contactName)\n            {\n               index = i;\n            }\n         }\n   return GetPhoneNumber;\n   }\n   \nint main() {\n   \n   int numOfPairs;\n   \n   vector <string> vNames;\n   string contactName;\n   vector <string> vPhoneNumbers(0);\n   string info;\n   \n   cin >> numOfPairs;\n   \n   vNames.resize(numOfPairs);\n   vPhoneNumbers.resize(numOfPairs);\n   \n   for (int i = 0; i <numOfPairs; ++i)\n   {\n      cin >> vNames.at(i);\n      cin >> vPhoneNumbers.at(i);\n   }\n   \n   cin >> contactName;\n   \n   cout << GetPhoneNumber(vNames, vPhoneNumbers, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 249, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber (vector <string> nameVec, vector <string> phoneNumberVec, string contactName){\n   for ( int i = 0; i < nameVec.size(); ++i){\n      if (nameVec.at(i) == contactName){\n         return phoneNumberVec.at(i);\n      }\n   }\n}\n\nint main() {\nvector <string > nameVec;\nvector <string> phoneNumber;\nstring number;\nstring contactName;\nint cnt;\n   cin >> cnt;\n   for (int i = 0; i < cnt;i++){\n      cin >> contactName >> number;\n      nameVec.push_back(contactName);\n      phoneNumber.push_back(number);\n   }\n   cin >> contactName;\n   cout << GetPhoneNumber(nameVec,phoneNumber, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 95, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n   string GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n      for(unsigned int i=0; i<nameVec.size(); i++) {\n      if(nameVec[i] == contactName)\n         return phoneNumberVec[i];\n      }  \n      return \"\";\n   }\n\nint main() {\n   int n;\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   string names;\n   string phoneNum;\n   cin>>n;\n   \n   for(int i=0; i<n; i++){\n      cin>>names;      \n      cin>>phoneNum; \n      nameVec.push_back(names);\n      phoneNumberVec.push_back(phoneNum);\n   }\n   \n   cin >> names;\n   phoneNum = GetPhoneNumber(nameVec, phoneNumberVec, names);\n   cout<<phoneNum<<endl;\n   \n   return 0;\n}", "class": 0, "version": 293, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <iomanip>\n#include <fstream>\n#include <string>\n#include <cmath>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(std::vector<string> nameVec, std::vector<string> phoneNumberVec, string contactName)\n{\nfor (int i = 0; i < phoneNumberVec.size(); ++i)\n{\nif(nameVec[i] == contactName)\nreturn phoneNumberVec[i];\n}\n}\n\nint main()\n{\nint size;\ncin >> size;\n\nstring name, contactName, phone;\nvector<string> nameVec;\nvector<string> phoneNumberVec;\n\nfor (int i = 0; i < size; ++i)\n{\ncin >> name >> phone;\nnameVec.push_back(name);\nphoneNumberVec.push_back(phone);\n}\n\ncin >> contactName;\n\ncout << GetPhoneNumber(nameVec,phoneNumberVec,contactName) << endl;\n\nreturn 0;\n}\n", "class": 0, "version": 9, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName) {\n   unsigned int i;\n   string final = \"None\";\n   \n   \n   for (i=0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i)==contactName) {\n         final = phoneNumberVec.at(i);\n      }\n   }\n   return final;\n\n}\n\n\nint main() {\n   /* Type your code here */\n   string contactName;\n   int i=0;\n   int inSize;\n   char input;\n   \n   cin >> inSize;\n   vector<string> nameVec(inSize);\n   vector<string> phoneNumberVec(inSize);\n   \n   for(i=0; i<inSize; ++i){\n      cin >> input;\n      while(input!=','){\n         nameVec.at(i).push_back(input);\n         cin >> input;\n      }\n      cin >> phoneNumberVec.at(i);\n   }\n   cin >> contactName;\n   \n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n   \n   \n   \n   \n\n   return 0;\n}\n", "class": 0, "version": 120, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   int magni = 0;\n   for(unsigned i = 0; i < nameVec.size(); i++)\n      {\n      if(contactName == nameVec.at(i))\n         {\n         magni = i;\n         }\n      }\n   return phoneNumberVec.at(magni);\n}\n\n\nint main() \n   {\n   vector <string> nameVec;\n   vector <string> phoneNumberVec;\n   int temp;\n   string contactName;\n   string contactNumber;\n   string person;\n   \n   cin >> temp;\n   for (int i = 0; i < temp; i++)\n      {\n      cin >> contactName;\n      nameVec.push_back(contactName);\n      cin >> contactNumber;\n      phoneNumberVec.push_back(contactNumber);\n      }\n   \n   cin >> person;   \n   \n   cout << GetPhoneNumber(nameVec, phoneNumberVec, person) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 169, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName) {\n   unsigned int i;\n   string contactNumber;\n   \n   for (i = 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         contactNumber = phoneNumberVec.at(i);\n         i = nameVec.size();\n      }\n      else {\n         contactNumber = \"None\";\n      }\n   }\n   \n   return contactNumber;\n}\n\nint main() {\n   /* Type your code here */\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   string contactName;\n   int loopLength;\n   string inputVals;\n   string stringHold;\n   int i;\n   int commaPosition;\n   \n   cin >> loopLength;\n   \n   for (i = 0; i < loopLength; ++i) {\n      cin >> inputVals;\n      commaPosition = inputVals.find(',');\n      nameVec.push_back(inputVals.substr(0,commaPosition));\n      phoneNumberVec.push_back(inputVals.substr(commaPosition + 1, inputVals.size() - commaPosition + 1));\n   }\n   \n   cin >> contactName;\n\n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 64, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber (vector <string> nameVec, vector<string> phoneNumberVec, string contactName){\n   string result;\n   int newInd; \n   int j;\n   \n   newInd = nameVec.size();\n   \n   for (j = 0; j < newInd; ++j){\n      if (nameVec.at(j) == contactName)  {\n         result = phoneNumberVec.at(j);\n      }  \n   }\n      \n   return result;\n}\n\nint main() {\n   /* Type your code here */\n   vector <string> name;\n   vector <string> phone;\n   int ind;\n   string nameInput;\n   string phoneInput;\n   int i;\n   string targetName;\n   \n   cin >> ind;\n   \n   for (i = 0 ; i < ind ; ++i){\n      cin >> nameInput;\n      cin >> phoneInput;\n      name.push_back(nameInput);\n      phone.push_back(phoneInput);\n   }\n   \n   cin >> targetName;\n   \n   cout <<GetPhoneNumber(name,phone,targetName)<< endl;\n\n\n   return 0;\n}\n", "class": 0, "version": 71, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   int theIndex = -1;\n   for (unsigned int i = 0; i < nameVec.size(); i++)\n   {\n       if (nameVec.at(i) == contactName)\n       {\n          theIndex = i;\n          return phoneNumberVec.at(i);\n       }\n   }\n   return \"The number hasn't been found.\";\n}\n\nint main() {\n   /* Type your code here */\n   vector<string> theNames;\n   vector<string> theNumbers;\n   string eachName;\n   \n   int num;\n   \n   cin >> num;\n   \n   for (int i = 0; i < num; i++)\n   {\n      cin >> eachName;\n      theNames.push_back(eachName);\n      cin >> eachName;\n      theNumbers.push_back(eachName);\n   }\n   \n   string theContact;\n   \n   cin >> theContact;\n   \n   cout << GetPhoneNumber(theNames, theNumbers, theContact) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 203, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName){\n   unsigned int i;\n   int n;\n   cin >> n;\n   for (i = 0; i < n; i++) {\n      if (nameVec.at(i) == contactName) {\n         return phoneNumberVec.at(i);\n      }\n   }\n   return 0;\n}\n\nint main() {\n   vector<string> names;\n   vector<string> numbers;\n   string name;\n   string num;\n   int n;\n   string NameToNum;\n   unsigned int i;\n   \n   cin >> n;\n   \n   for (i = 0; i < n; i++) {\n      cin >> name;\n      names.push_back(name);\n      cin >> num;\n      numbers.push_back(num);\n   }\n   \n   for (i = 0; i < n; i++) {\n      cin >> NameToNum;\n      for (i = 0; i < n; i++) {\n         if (names.at(i) == NameToNum) {\n            cout << numbers.at(i);\n         }\n      }\n   }\n   cout << endl;\n\n   return 0;\n}\n", "class": 0, "version": 59, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   string phoneNum;\n   \n   for (unsigned int i = 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         phoneNum = phoneNumberVec.at(i);\n      }\n   }\n   \n   return phoneNum;\n}\n\nint main() {\n   vector<string> name;\n   vector<string> number;\n   int vectorSize;\n   string inputName;\n   string inputNum;\n   string wantedName;\n   \n   cin >> vectorSize;\n   \n   name.resize(vectorSize);\n   number.resize(vectorSize);\n   \n   for (unsigned int i = 0; i < name.size(); ++i) {\n      cin >> inputName;\n      name.at(i) = inputName;\n      cin >> inputNum;\n      number.at(i) = inputNum;\n   }\n   \n   cin >> wantedName;\n   \n   cout << GetPhoneNumber(name, number, wantedName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 41, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n   int i;\n   for(i = 0; i < nameVec.size(); i++) {\n      if(nameVec.at(i) == contactName) {\n         return phoneNumberVec.at(i);\n      }\n   }\n}\n\nint main() {\n\n   int N;\n   vector<string> nameList;\n   vector<string> phoneList;\n   string name;\n   string phone;\n   cin >> name;\n   cin >> phone;\n   cin >> N;\n   cout << N << endl;\n   for(int i = 0; i < N; i++) {\n      nameList.push_back(name);\n      phoneList.push_back(phone);\n   }\n   phone = GetPhoneNumber(nameList, phoneList, name);\n\n   cout << phone << endl;\n\n   return 0;\n\n}", "class": 0, "version": 182, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   int num = 0;\n   for ( unsigned int i = 0; i < nameVec.size() ; ++i)\n   {\n      if (nameVec.at(i) == contactName)\n      {\n         num = i;\n      }\n   }\n   return phoneNumberVec.at(num);\n}\n\n\nint main() {\n   int size;\n   string contactName;\n   cin >> size;\n   \n   vector <string> nameVec(size);\n   vector <string> phoneNumberVec(size);\n   \n  \n   for ( int i = 0; i < size; ++i)\n   {\n      cin >> nameVec.at(i);\n      cin >> phoneNumberVec.at(i);\n   }\n   \n   cin >> contactName;\n   \n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n   return 0;\n}", "class": 0, "version": 83, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName) {\n   int i;\n   string thePhoneNumber;\n   \n   thePhoneNumber = \"None\";\n   \n   for (i = 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         thePhoneNumber = phoneNumberVec.at(i);\n      }\n   }\n\n   return thePhoneNumber;\n}\n\nstring GetName(string currString) {\n   int i;\n   int commaIndex;\n   string nameString;\n   \n   commaIndex = currString.find(',');\n   for (i = 0; i < currString.size(); ++i) {\n         if (i < commaIndex) {\n            nameString.push_back(currString.at(i));\n         }\n   }\n\n   return nameString;\n}\n\nstring GetPhoneNumber(string currString) {\n   int i;\n   int commaIndex;\n   string phoneNumString;\n   \n   commaIndex = currString.find(',');\n   for (i = 0; i < currString.size(); ++i) {\n         if (i > commaIndex) {\n            phoneNumString.push_back(currString.at(i));\n         }\n   }\n   \n   return phoneNumString;\n   \n}\n\nint main() {\n   vector<string> nameVec;\n   vector<string> phoneNumVec;\n   int vecSize;\n   string nameString;\n   string phoneNumString;\n   int unsigned i;\n   string currString;\n   string contactName;\n   \n   cin >> vecSize;\n   \n   for (i = 0; i < vecSize; ++i) {\n      cin >> currString;\n      nameVec.push_back(GetName(currString));\n      phoneNumVec.push_back(GetPhoneNumber(currString));\n   }\n   \n   cin >> contactName;\n   \n   cout << GetPhoneNumber(nameVec, phoneNumVec,contactName) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 72, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\r\n#include <vector>\r\nusing namespace std;\r\n\r\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\r\n\r\n   for (unsigned int i = 0; i < phoneNumberVec.size(); ++i) {\r\n      if (nameVec.at(i) == contactName) {\r\n         \r\n      return phoneNumberVec.at(i);\r\n      }\r\n      \r\n\r\n   }\r\n}\r\n\r\nint main() {\r\n   \r\nint num;\r\ncin >> num;\r\n\r\nstring name;\r\nstring contactName;\r\n\r\n\r\nvector<string> nameVec(num);\r\nvector<string> phoneNumberVec(num);\r\n\r\n   for (int i = 0; i < nameVec.size(); ++i) {\r\n      cin >> nameVec.at(i); \r\n      cin >> phoneNumberVec.at(i);\r\n   }\r\n  \r\n\r\ncin >> contactName;\r\n\r\ncout << GetPhoneNumber(nameVec,phoneNumberVec,contactName) << endl;\r\n\r\nreturn 0;\r\n}", "class": 0, "version": 116, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\nstring GetPhoneNumber(const vector<string> &nameVec, \n      const vector<string> &phoneNumberVec, const string &contactName) \n{\n    string phoneNumber;\n    int found = 0;                \n    for (int i = 0; i <phoneNumberVec.size(); i++) \n    {\n        if (nameVec[i] == contactName) \n        {\n            phoneNumber = phoneNumberVec[i];\n            found = 1;\n        }\n    }\n/*    if (found == 0)\n    {\n        phoneNumber = \"\"; \n    }\n    */\n    return phoneNumber; \n\n}\n\nint main()\n{\n    int size; \n    cin >> size;\n    vector<string> nameVec(size), phoneNumberVec(size); \n    string contactName;\n\n    for (int i = 0; i < size; i++) {\n        cin >> nameVec[i];\n        cin >> phoneNumberVec[i];\n    }\n    cin >> contactName;\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName)<<endl;\n    return 0;\n}\n\n\n", "class": 0, "version": 294, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber (const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\nunsigned int i;\nstring phoneLookingFor;\n\nfor (i = 0; i < nameVec.size(); ++i) {\n   if (nameVec.at(i) == contactName) {\n      phoneLookingFor = phoneNumberVec.at(i);\n   }\n}\n\nreturn phoneLookingFor;\n}\n\nint main() {\n   /* Type your code here */\nunsigned int i;\nint numContacts;\nstring nameLookingFor;\n\ncin >> numContacts;\n\nvector<string> contactName(numContacts);\nvector<string> contactPhone(numContacts);\n\n//pop both vecs\nfor (i = 0; i < numContacts; ++i) {\n   cin >> contactName.at(i) >> contactPhone.at(i);\n}\ncin >> nameLookingFor;\n\ncout << GetPhoneNumber(contactName, contactPhone, nameLookingFor) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 9, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n int index;\n for (unsigned int i = 0; i < nameVec.size(); i++) {\n    if (nameVec.at(i) == contactName) {\n       index = i;\n    }\n }\n return phoneNumberVec.at(index);\n \n}\nint main() {\n   /* Type your code here */\nint num;\nstring name;\nstring phoneNum;\nvector<string> names;\nvector<string> phone;\n\ncin >> num;\nwhile (num > 0) {\n   cin >> name;\n   names.push_back(name);\n   cin >> phoneNum;\n   phone.push_back(phoneNum);\n   num = num -1; \n}\n\nstring contactName;\ncin >> contactName;\ncout << GetPhoneNumber(names,phone,contactName);\ncout << endl;\n\n   return 0;\n}\n", "class": 0, "version": 22, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName) {\n   string foundNumber;\n   int nameIndex;\n   bool askFound;\n   \n   for (unsigned int i = 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         nameIndex = i;\n         i = nameVec.size();\n         askFound = true;\n      }\n      else {\n         askFound = false;\n      }\n   }\n   \n   if (askFound) {\n      return phoneNumberVec.at(nameIndex);\n   }\n   else {\n      return \"None\";\n   }\n}   \n\nint main() {\n   int numEntries;\n   string currEntry;\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   string search;\n   int i;\n   \n   cin >> numEntries;\n   \n   for (i = 0; i < numEntries; ++i) {\n      cin >> currEntry;\n      \n      nameVec.push_back(currEntry.substr(0, currEntry.find(\",\")));\n      phoneNumberVec.push_back(currEntry.substr(currEntry.find(\",\") + 1, currEntry.size()));\n   }\n\n   cin >> search;\n   \n   cout << GetPhoneNumber(nameVec, phoneNumberVec, search) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 65, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName){\n   for (long unsigned int i=0;i < nameVec.size();++i){\n      if (nameVec[i]==contactName)\n         return phoneNumberVec[i];\n   }\n   return \"None\";\n}\nint main(){\n   string userName, userNumber;\n   vector<string> names, phoneNumbers;\n   int phone;\n   cin>>phone;\n   for (int i=0; i<phone; ++i){\n      cin>>userName>>userNumber;\n      names.push_back(userName);\n      phoneNumbers.push_back(userNumber);\n   }\n   cin>>userName;\n   cout << GetPhoneNumber(names, phoneNumbers, userName) <<endl;\n   return 0;\n}\n", "class": 0, "version": 200, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   int userIndex = 0;\n   unsigned int i;\n   \n   for (i = 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         userIndex = i;\n      }\n   }\n   return phoneNumberVec.at(userIndex);\n}\n\nint main() {\n   int numPairs;\n   int i;\n   \n   vector<string> userName;\n   string contactName;\n   \n   vector<string> userPhoneNumber(0);\n   string userInfo;\n   \n   cin >> numPairs;\n   \n   userName.resize(numPairs);\n   userPhoneNumber.resize(numPairs);\n   \n   for (i = 0; i < numPairs; ++i) {\n      cin >> userName.at(i);\n      cin >> userPhoneNumber.at(i);\n   }\n   \n   cin >> contactName;\n   \n   cout << GetPhoneNumber(userName, userPhoneNumber, contactName) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 174, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   string num;\n      for (unsigned int i = 0; i < nameVec.size(); i++) {\n         if (contactName == nameVec.at(i)) {\n            num = phoneNumberVec.at(i);\n         }\n      }\n   return num;\n}\n\nint main() {\n   vector <string> nameVec;\n   vector <string> phoneNumberVec;\n   \n   string name;\n   string number;\n   int limit;\n   string contactName;\n   \n   cin >> limit;\n   \n   for (int i = 0; i < limit; i++) {\n      cin >> name;\n      cin >> number;\n      nameVec.push_back(name);\n      phoneNumberVec.push_back(number);\n   }\n   \n   cin >> contactName;\n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 192, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\n   string newNum;\n      for (unsigned int i = 0; i < nameVec.size(); ++i){\n         if (contactName == nameVec.at(i)){\n            newNum = phoneNumberVec.at(i);\n         }\n      }\n   return newNum;\n}\nint main() {\n   vector <string> names;\n   vector <string> phoneNumber;\n   string currName;\n   int inputNum;\n   string number;\n   string name;\n   \n   cin >> inputNum;\n   \n   for (unsigned int i = 0; i < inputNum; ++i){\n      cin >> name >> number;\n      names.push_back(name);\n      phoneNumber.push_back(number);\n   }\n   \n   cin >> currName;\n   \n   cout << GetPhoneNumber(names, phoneNumber, currName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 289, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n   {\n   string ReturnString = \"\";\n   for(unsigned int i = 0; i < nameVec.size(); ++i)\n      {\n      if(nameVec.at(i) == contactName)\n         {\n         ReturnString = phoneNumberVec.at(i);\n         }\n      }\n   return ReturnString;\n   }\n\nint main() {\n \nint pairNum;\ncin >> pairNum;\nstring inputN;\nstring inputP;\nstring contactName;\nvector<string> NameVec(0);\nvector<string> phoneNumberVec(0);\n\n\nfor(int i = 0; i < pairNum; ++i)\n   {\n   cin >> inputN;\n   NameVec.push_back(inputN);\n   cin >> inputP;\n   phoneNumberVec.push_back(inputP);\n   }\ncin >> contactName;\ncout << GetPhoneNumber(NameVec, phoneNumberVec, contactName) << endl;\n   return 0;\n}\n", "class": 0, "version": 160, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber (const vector <string>& nameVec,\nconst vector <string>& phoneNumberVec, const string& contactName) {\n   string phoneNumber;\n\n   for (unsigned int i = 0; i < nameVec.size(); ++i) {\n      \n      if (contactName == nameVec.at(i)) {\n         \n         phoneNumber = phoneNumberVec.at(i);\n         \n         i = nameVec.size();\n      }\n      \n   }\n      \n   return phoneNumber;\n}\n\n\nint main() {\n   vector <string> nameVec;\n   vector <string> phoneNumberVec;\n   unsigned int idPairs;\n   string contactName;\n   \n   cin >> idPairs;\n   \n   nameVec.resize(idPairs);\n   phoneNumberVec.resize(idPairs);\n   \n   for (unsigned int i = 0; i < idPairs; ++i) {\n      cin >> nameVec.at(i);\n      cin >> phoneNumberVec.at(i);\n   }\n   \n   cin >> contactName;\n \n   cout << GetPhoneNumber (nameVec, phoneNumberVec, contactName);\n   \n   cout << endl;\n\n   return 0;\n}\n", "class": 0, "version": 84, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber( vector<string> nameVec,  vector<string> phoneNumberVec,  string contactName){\n   for(int i =0; i <nameVec.size(); ++i){\n      if (nameVec[i]==contactName)\n         return phoneNumberVec[i];\n      }\n      return \"No Contact\";\n}\n\nint main() {\n   string name, number;\n   vector<string> nameVec, phoneNumberVec;\n   int size;\n   cin>> size;\n   for (int i=0; i< size ; ++i){\n      cin>> name>> number;\n      nameVec.push_back(name);\n      phoneNumberVec.push_back(number);\n   }\n   cin>> name;\n   cout<< GetPhoneNumber (nameVec, phoneNumberVec, name) << endl;\n   return 0;\n}\n", "class": 0, "version": 147, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName)\n{\n    unsigned int i;\n    int input;\n    cin >> input;\n    string sameNumber;\n    string otherName, otherPhone, lastName;\n    string PhoneNumber;\n\n    for (unsigned int i = 0; i < input; i++)\n    {\n        cin >> otherName;\n        nameVec.push_back(otherName);\n        cin >> otherPhone;\n        phoneNumberVec.push_back(otherPhone);\n    }\n    cin >> lastName;\n    for (unsigned int i = 0; i < input; ++i)\n    {\n        if (nameVec.at(i) == lastName)\n        {\n            PhoneNumber = phoneNumberVec.at(i);\n        }\n    }\n    return PhoneNumber;\n}\n\n\nint main() {\n\n    vector <string> nameVec;\n    vector<string> phoneNumberVec;\n    string contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n\n    return 0;\n}\n", "class": 0, "version": 63, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector <string> &phoneNumberVec, const string & contactName) {\n   for (unsigned int i = 0; i < nameVec.size(); ++i) {\n      if ( nameVec.at(i) == contactName) {\n         return phoneNumberVec.at(i);\n      }\n   }\n}\n         \n\nint main() {\n   vector <string> VecNames;\n   vector <string> VecNumbers;\n   \n   int N;\n   \n   cin >> N;\n   \n   string read;\n\n   \n   \n   for ( unsigned int i = 0; i < N; ++i) {\n      cin >> read;\n      VecNames.push_back(read);\n      cin >> read;\n      VecNumbers.push_back(read);\n   }\n   cin >> read;\n   \n   cout << GetPhoneNumber(VecNames, VecNumbers, read) << endl;\n   \n   \n   \n   \n   \n\n   return 0;\n}\n", "class": 0, "version": 277, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName){\n   int j;\n   string contactNumber = \"None\";\n   for (j=0;j<nameVec.size();++j){\n      if (nameVec.at(j) == contactName){\n         contactNumber = phoneNumberVec.at(j);\n      }\n   }\n   return contactNumber;\n}\n   \nint main() {\n   /* Type your code here */\n   int num, i;\n   string contactName, nextStr;\n   vector<string> nameVec(0);\n   vector<string> phoneNumberVec(0);\n   \n   cin>>num;\n   nameVec.resize(num);\n   phoneNumberVec.resize(num);\n   \n   for (i=0;i<num;++i){\n      cin>>nextStr;\n      nameVec.at(i) = nextStr.substr(0,nextStr.find(','));\n      phoneNumberVec.at(i) = nextStr.substr(nextStr.find(',')+1);\n   }\n   cin>>contactName;\n   \n   cout<<GetPhoneNumber(nameVec, phoneNumberVec, contactName)<<endl;\n\n   return 0;\n}\n", "class": 0, "version": 180, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\n   \n   for (int i =0; i < nameVec.size(); i++){\n      if (nameVec.at(i) == contactName){\n         return phoneNumberVec.at(i);\n      }\n   }\n   return \"no\";\n}\n\nint main() {\n   /* Type your code here */\n   string userName;\n   string userNumber;\n   \n   vector<string> userNameVec;\n   vector<string> userNumberVec;\n   \n   int size;\n   cin >> size;\n   \n   for (int i=0; i < size; i++){\n      cin >> userName;\n      cin >> userNumber;\n      userNameVec.push_back(userName);\n      userNumberVec.push_back(userNumber);\n   }\n   \n   cin >> userName;\n   cout << GetPhoneNumber(userNameVec,userNumberVec, userName) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 28, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   string phoneNumber;\n   for(unsigned int i = 0;  i < nameVec.size(); ++i)\n   {\n      if(nameVec.at(i) == contactName)\n      {\n         phoneNumber = phoneNumberVec.at(i);\n      }\n   }\n   return phoneNumber;\n}\n\n\nint main() {\n\n   unsigned int i;\n   int numInputs;\n   cin >> numInputs;\n   string temp;\n   vector <string> nameVec(numInputs);\n   vector <string> phoneNumberVec(numInputs);\n\n   for(i = 0; i < nameVec.size(); ++i)\n   {\n         cin >> temp;\n         nameVec.at(i) = temp;\n         cin >> temp;\n         phoneNumberVec.at(i) = temp;\n   }\n   string contactName;\n   cin >> contactName;\n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 150, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n   for (int i = 0; i < nameVec.size(); i++) {\n      if (contactName == nameVec.at(i)) {\n         return phoneNumberVec.at(i);\n      }\n   }\n   return \"No Contact Found D: \";\n}\n\nint main() {\n   \n   int numContacts;\n   vector<string> names;\n   vector<string> phones;\n   \n   string currName;\n   string currPhone;\n   string goalName;\n   \n   cin >> numContacts;\n   cin >> currName;\n   cin >> currPhone;\n   \n   for (int i = 0; i < numContacts; i++) {\n      names.push_back(currName);\n      phones.push_back(currPhone);\n      if (i == numContacts - 1) {\n         cin >> goalName;\n      }\n      else {\n         cin >> currName;\n         cin >> currPhone;\n      }\n   }\n   \n   cout << GetPhoneNumber(names, phones, goalName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 34, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n   int i;\n   for (i=0;i<nameVec.size();++i) {\n      if (contactName==nameVec.at(i)) {\n         return phoneNumberVec.at(i);\n      }\n   }\n   return 0;\n}\n\nint main() {\n   int i;\n   int n;\n   cin>>n;\n   vector<string> namevec(n);\n   vector<string> numvec(n);\n   for (i=0;i<n;++i) {\n      cin>>namevec.at(i);\n      cin>>numvec.at(i);\n   }\n   string contactname;\n   cin>>contactname;\n   \n   cout<<GetPhoneNumber(namevec,numvec,contactname)<<endl;;\n   \n\n   return 0;\n}\n", "class": 0, "version": 65, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName) {\n   unsigned int i;\n   string finalPhoneNumber;\n   \n   finalPhoneNumber = \"None\";\n   for (i = 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         finalPhoneNumber = phoneNumberVec.at(i);\n      }\n   }\n   \n   return finalPhoneNumber;\n}\n\n\nint main() {\n   int numContacts;\n   int i;\n   string nameNumber;\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   string contactName;\n   \n   cin >> numContacts;\n   \n   for(i = 0; i < numContacts; i++) {\n      cin >> nameNumber;\n      nameVec.push_back(nameNumber.substr(0, nameNumber.find(',')));\n      phoneNumberVec.push_back(nameNumber.substr(nameNumber.find(',') + 1, nameNumber.size() - 1));\n   }\n   \n   cin >> contactName;\n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 87, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   string write;\n   int freq;\n   for(unsigned int i = 0; i < nameVec.size(); ++i) {\n      if(contactName == nameVec.at(i)) {\n         freq = i;\n      }\n   }\n   write = phoneNumberVec.at(freq);\n   return write;\n}\nint main() {\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   string contactName;\n   int numInputs;\n   string userInput;\n   \n   cin >> numInputs;\n   \n   for(int i = 0; i < numInputs; ++i) {\n      cin >> userInput; //to take the name\n      nameVec.push_back(userInput); //store the user name\n      cin >> userInput; //to take the phone #\n      phoneNumberVec.push_back(userInput); //store the user Phone #\n   }\n   cin >> contactName;\n   \n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 103, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec,const string &contactName){string retStr;for(unsigned int i = 0; i < nameVec.size(); i++){if(contactName == nameVec.at(i)){retStr=phoneNumberVec.at(i);}}return retStr;}int main(){int n;cin>>n;vector<string>nameVec(n);vector<string>phoneNumberVec(n);string contactName;string phoneNumber;for(int i=0;i<n;i++){cin>>contactName;nameVec.at(i)=contactName;cin>>phoneNumber;phoneNumberVec.at(i)=phoneNumber;}cin>>contactName;cout<<GetPhoneNumber(nameVec,phoneNumberVec,contactName)<<endl;return 0;}\n", "class": 0, "version": 146, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n// Fun side note;as I write this code, there is a crying infant behind the wall to my left\n// Always \"fun\" to have my cousins over\n// His whining is persistent \n/* Define your function here */\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, const string& contactName) {\n   string phoneNumber;\n   for( unsigned int i = 0; i < nameVec.size(); ++i) {\n      if (contactName == nameVec.at(i)) {\n         phoneNumber = phoneNumberVec.at(i);\n      }\n   }\n   return phoneNumber;\n}\n\nint main() {\n   /* Type your code here */\n   int vctrSize;\n   cin >> vctrSize;\n   vector<string> slistOfNames(vctrSize);\n   vector<string> sphoneBook(vctrSize);\n   string nameOfPhone;\n   \n   for (unsigned int i = 0; i < slistOfNames.size(); ++i) {\n      cin >> slistOfNames.at(i);\n      cin >> sphoneBook.at(i);\n   }\n   \n   cin >> nameOfPhone;\n   \n   cout << GetPhoneNumber(slistOfNames, sphoneBook, nameOfPhone) << endl;\n   \n   \n\n   return 0;\n}\n", "class": 0, "version": 189, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n//collaborated with Samantha Lopez\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n   int numValue;\n   int i;\n   string userPhone;\n   string userContact;\n   \n   for (i = 0; i < nameVec.size(); ++i) {\n      userPhone = nameVec.at(i);\n      if (userPhone == userContact) {\n         numValue = i;\n      }\n   }\n   userContact = phoneNumberVec.at(numValue);\n   \n   return userContact;\n}\n         \nint main() {\n   int i;\n   int userNum;\n   cin >> userNum;\n   string nameVec;\n   string phoneNumberVec;\n   string contactName;\n   \n   GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n\n   return 0;\n}\n", "class": 0, "version": 61, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber (const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   for (unsigned i = 0; i <nameVec.size(); ++i) {\n      if (contactName == nameVec.at(i)) {\n         return phoneNumberVec.at(i);\n      }\n   }\n}\n\nint main() {\n   int numInp;\n   string contactName;\n   cin >> numInp;\n   vector<string> nameVec (numInp);\n   vector<string> phoneVec (numInp);\n   \n   for (unsigned i = 0; i < nameVec.size(); ++i) {\n      cin >> nameVec.at(i);\n      cin >> phoneVec.at(i);\n   }\n   \n   cin >> contactName;\n   cout << GetPhoneNumber(nameVec, phoneVec, contactName) << endl;\n\n\n   return 0;\n}\n", "class": 0, "version": 271, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   for (unsigned int i = 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         return phoneNumberVec.at(i);\n      }\n   }\n   return \"No Contact\";\n}\n\nint main() {\n   string userName;\n   string userNum;\n   vector<string> name;\n   vector<string> number;\n   int size;\n   cin >> size;\n   for (int i = 0; i < size; ++i) {\n      cin >> userName;\n      cin >> userNum;\n      name.push_back(userName);\n      number.push_back(userNum);\n   }\n   cin >> userName;\n   cout << GetPhoneNumber(name, number, userName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 229, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName) {\n   unsigned int j;\n   int num = -1;\n   for (j = 0;j < nameVec.size();++j) {\n      if (nameVec.at(j) == contactName) {\n         num = j;\n      }\n   }\n   if (num != -1) {\n      return phoneNumberVec.at(num);\n   }\n   else {\n      return \"None\";\n   }\n}\n\nint main() {\n   vector<string> nameVec(20);\n   vector<string> numVec(20);\n   string inputName;\n   int size;\n   string element;\n   unsigned int i;\n   \n   cin >> size;\n   for (i = 0;i < size;++i) {\n      cin >> element;\n      numVec.at(i) = (element.substr(element.size()-8, 8));\n      nameVec.at(i) = (element.substr(0,element.size()-9));\n   }\n   cin >> inputName;\n   cout << GetPhoneNumber(nameVec,numVec,inputName) << endl;\n   return 0;\n}\n", "class": 0, "version": 8, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName);\n\nint main() \n{\n   int amt;\n   string contactName;\n\n   cin >> amt;\n   vector<string> nameVec(amt);\n   vector<string> phoneNumberVec(amt);\n   for (int i = 0; i < amt; ++i) \n   {\n      cin >> nameVec.at(i);\n      cin >> phoneNumberVec.at(i);\n   }\n\n   cin >> contactName;\n   string phone = GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n   cout << phone << \"\\n\";\n   return 0;\n}\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n   string phone;\n   for (unsigned i = 0; i < nameVec.size(); i++) \n   {\n      if (contactName == nameVec.at(i)) \n      {\n         phone = phoneNumberVec.at(i);\n      }\n   }\n   return phone;\n}\n", "class": 0, "version": 7, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   int index = 0;\n   \n   for ( unsigned int i = 0; i < nameVec.size() ; ++i)\n   {\n      if ( nameVec.at(i) == contactName)\n      {\n         index = i;\n      }\n   }\n   \n   return phoneNumberVec.at(index);\n}\n\nint main() {\n   \n   int numOfPairs;\n   vector <string> vNames;\n   string contactName;\n   \n   vector <string> vPhoneNumbers(0);\n  \n   string info;\n    \n   cin >> numOfPairs;\n   \n   vNames.resize ( numOfPairs ); \n   vPhoneNumbers.resize ( numOfPairs); \n  \n   for ( int i = 0; i < numOfPairs; ++i)\n   {\n      cin >> vNames.at(i);\n      \n      cin >> vPhoneNumbers.at(i);\n   }\n   \n   cin >> contactName;\n   \n   cout << GetPhoneNumber(vNames, vPhoneNumbers, contactName) << endl;\n \n   \n\n   return 0;\n}\n\n", "class": 0, "version": 215, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n\nfor(int i=0; i<nameVec.size(); i++) {\n\nif(nameVec[i] == contactName)\n\nreturn phoneNumberVec[i];\n\n}\n\nreturn \"Not Available\";\n\n}\n\nint main() {\n\nint n;\n\nvector<string> nameList;\n\nvector<string> phoneList;\n\nstring name, phone;\n\ncin>>n;\n\n\nfor(int i=0; i<n; i++){\n\ncin>>name;\n\ncin>>phone;\n\nnameList.push_back(name);\n\nphoneList.push_back(phone);\n\n}\n\n\ncin>>name;\n\nphone = GetPhoneNumber(nameList, phoneList, name);\n\ncout<<phone<<endl;\n\n   return 0;\n}\n", "class": 0, "version": 295, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n\n   for(unsigned int i=0; i<nameVec.size(); i++) \n   {\n      if(nameVec.at(i) == contactName)\n      return phoneNumberVec.at(i);\n   }\n\nreturn \"Not Available\";\n}\n\nint main() {\n\n   int n;\n   cin>>n;\n\n   vector<string> nameList(n);\n   vector<string> phoneList(n);\n   string name, phone;\n\n   for(int i=0; i<n; i++){\n   cin>>nameList.at(i);\n   cin>>phoneList.at(i);\n}\n\n\n   cin>>name;\n   phone = GetPhoneNumber(nameList, phoneList, name);\n   cout << phone << endl;\n\n   return 0;\n}\n", "class": 0, "version": 263, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName)\n{\n   unsigned int i;\n   string phoneNumber;\n   \n   for ( i = 0; i < nameVec.size(); ++i)\n   {\n      if (nameVec.at(i) == contactName)\n      {\n         phoneNumber = phoneNumberVec.at(i);\n         return phoneNumber;\n      }\n      \n   }\n   for (i = 0; i < nameVec.size(); ++i)\n   {\n      if (nameVec.at(i) != contactName)\n      {\n         return \"None\";\n      }\n   }\n   \n}\n\nint main() {\n   int i;\n   int elements;\n   int commaIndex;\n   string contactName;\n   cin >> elements;\n   \n   \n   vector<string>namesVector(elements);\n   vector<string>numbersVector(elements);\n   \n   // loop for numbers & names\n   for (i = 0; i < elements; ++i)\n   {\n      cin >> numbersVector.at(i);\n      commaIndex = numbersVector.at(i).find(',');\n      namesVector.at(i) = numbersVector.at(i).substr(0, commaIndex);\n      numbersVector.at(i) = numbersVector.at(i).substr(commaIndex + 1, numbersVector.at(i).size());\n   }\n   cin >> contactName;\n   \n   cout << GetPhoneNumber(namesVector, numbersVector, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 88, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName) {\n   \n   string phone = \"\";\n   \n   for (int i = 0; i < nameVec.size(); i++) {\n      \n      if (nameVec.at(i) == contactName) {\n         \n         phone = phoneNumberVec.at(i);\n         \n      }\n      \n   }\n   \n   if (phone == \"\") {\n      \n      phone = \"None\";\n      \n   }\n\n   return phone;\n}\n\nint main() {\n   \n   int numInfo;\n   vector<string> name;\n   vector<string> number;\n   string tempInfo;\n   string person;\n   int commaPosition;\n   string tempName;\n   string tempNum;\n   \n   cin >> numInfo;\n   \n   for (int i = 0; i < numInfo; ++i) {\n      \n      cin >> tempInfo;\n      \n      commaPosition = tempInfo.find(',');\n      \n      for (int j = 0; j < commaPosition; ++j) {\n         \n         tempName.push_back(tempInfo.at(j));\n         \n      }\n      \n      for (int k = commaPosition + 1; k < commaPosition + 9; ++k) {\n         \n         tempNum.push_back(tempInfo.at(k));\n         \n      }\n      \n      name.push_back(tempName);\n      number.push_back(tempNum);\n      \n      tempName = \"\";\n      tempNum = \"\";\n      \n   }\n   \n   cin >> person;\n   \n   cout << GetPhoneNumber(name, number, person) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 118, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) { \n   // for loop is to compare if the contactName is in the vector nameVec and if it is, it returns the contactName's number\n   for (int i = 0; i < nameVec.size(); ++i) {\n      if(contactName == nameVec.at(i)) {\n            return phoneNumberVec.at(i);\n            \n      }\n   }\n}\n\nint main() {\n   int size;\n   vector<string> nameV;\n   vector<string> numV;\n   string name;\n   string num;\n   string contact;\n   \n   cin >> size;\n   \n   for (int i = 0; i < size; ++i) {\n      cin >> name;\n      nameV.push_back(name);\n      \n      cin >> num;\n      numV.push_back(num);\n   }\n   \n   cin >> contact; // cin again to find the contactName\n   \n   // Make a separate function\n   cout << GetPhoneNumber(nameV, numV, contact) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 43, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(string userInputC,const vector<string> vNameVec, vector<string> vPhoneNumberVec, string contactName, string contactNumber){\n   int NameTrackerNumber = 0;\n   for (unsigned int e=0;e<vNameVec.size();e++){\n      if (userInputC == vNameVec.at(e)){\n         NameTrackerNumber = NameTrackerNumber + e;\n         return vPhoneNumberVec.at(NameTrackerNumber);\n      }\n      else{\n       return \"None\";  \n      }\n   }  \n   }\nint main() {\n   int userInputA;\n   string userInputB;\n   string contactName = \"\";\n   string contactNumber = \"\";\n   bool HitTheComma = 0;\n   unsigned int k;\n   string userInputC;\n   \n   vector<string> vNameVec;\n   vector<string> vPhoneNumberVec;\n   /* Type your code here */\n   cin >> userInputA;\n   \n for (int i = 0; i < userInputA; i++){\n   cin >> userInputB;\n   for (k=0;k<userInputB.size();k++){\n      if (userInputB.at(k) != ',' && HitTheComma == 0){\n         contactName = contactName + userInputB.at(k);  \n      }\n      else if (userInputB.at(k) == ','){\n         HitTheComma = 1; \n      }\n      else if (userInputB.at(k) != ',' && HitTheComma == 1){\n         contactNumber = contactNumber + userInputB.at(k); \n      }\n   }\n   vNameVec.push_back(contactName);\n   vPhoneNumberVec.push_back(contactNumber);\n   HitTheComma = 0; \n }\n \n   cin >> userInputC;\n   cout <<  GetPhoneNumber(userInputC,vNameVec,vPhoneNumberVec,contactName,contactNumber) << endl;\n   return 0;\n\n}", "class": 0, "version": 168, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n   unsigned int i;\n   string phoneNumber;\n   for (i = 0; i < nameVec.size(); ++ i) {\n      if (nameVec.at(i) == contactName) {\n         phoneNumber = phoneNumberVec.at(i);\n         cout << phoneNumber << endl;\n         return phoneNumber;\n      }\n   }\n}\n\nint main() {\n   int numInts;\n   cin >> numInts;\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   string userName;\n   string userPhone;\n   int i;\n   for (i = 0; i < numInts; ++i) {\n      cin >> userName;\n      nameVec.push_back(userName);\n      cin >> userPhone;\n      phoneNumberVec.push_back(userPhone);\n      // tried this and it works: cout << nameVec.at(i) << phoneNumberVec.at(i);\n   }\n   string contactName;\n   cin >> contactName;\n   GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n\n\n   \n\n\n   return 0;\n}\n", "class": 0, "version": 19, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName){\n   int index;\n   unsigned int i;\n   int counter = 0;\n   \n   \n   for (i = 0;i < nameVec.size();++i) {\n      if (nameVec.at(i) == contactName) {\n         \n         index = i;\n         counter += 1;\n      }\n   }\n   if (counter > 0){\n      return phoneNumberVec.at(index);\n   }\n   else {\n      return \"None\";\n   }\n}\n   \n\n\n\n\nint main() {\n   /* Type your code here */\n   int numPairs;\n   string name;\n   string phoneNum;\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   string inputString;\n   string contactName;\n   int i;\n   \n   cin >> numPairs;\n   for(i = 0;i < numPairs;++i) {\n      cin >> inputString;\n      \n      name = inputString.substr(0,inputString.find(','));\n      nameVec.push_back(name);\n      phoneNum = inputString.substr(inputString.find(',') + 1,inputString.size() - inputString.find(',') - 1);\n      phoneNumberVec.push_back(phoneNum);\n      \n   }\n   cin >> contactName;\n   \n   cout << GetPhoneNumber(nameVec, phoneNumberVec,contactName)<<endl;\n      \n      \n\n   return 0;\n}\n", "class": 0, "version": 69, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\n   int count = 0;\n   for(unsigned i = 0; i < nameVec.size(); i++){\n      if(contactName == nameVec.at(i)){\n         count = i;\n         }\n      }\n   return phoneNumberVec.at(count);\n   }\n\nint main() {\n   int amount;\n   string name;\n   string number;\n   string find;\n   vector <string> list;\n   vector <string> numb;\n   \n   cin >> amount;\n   for (int i = 0; i < amount; i++){\n      cin >> name;\n      list.push_back(name);\n      cin >> number;\n      numb.push_back(number);\n      }\n   \n   cin >> find;   \n   \n   cout << GetPhoneNumber(list, numb, find) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 66, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n      string phone;\n      \n      for(unsigned int i = 0; i < nameVec.size(); i++)\n      {\n         //cout << \"n \" << nameVec.at(i) << endl;\n         if(nameVec.at(i) == contactName)\n         {\n            return phoneNumberVec.at(i);   \n         }\n      }\n      return phoneNumberVec.at(0);\n}\n\nint main() {\n   /* Type your code here */\n   vector <string> nameVector;\n   vector <string> numVector;\n   string input;\n   int range;\n   string name;\n   string number;\n   string nameFind;\n   \n   cin >> range; \n   \n   for(int i = 0; i < range; i++)\n   {\n       cin >> name; \n       nameVector.push_back(name);\n       cin >> number;\n       numVector.push_back(number);\n       \n   }\n   \n   for( int i = 0; i < range; i++)\n   {\n       //cout << nameVector.at(i) << \" \";\n       //cout << numVector.at(i) << \" \";\n       \n   }\n   cin >> nameFind;\n   cout << GetPhoneNumber(nameVector, numVector, nameFind ) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 73, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName) {\n   int vLen = nameVec.size();\n   for (int i = 0; i < vLen; ++i) {\n      if (nameVec.at(i) == contactName) {\n         return phoneNumberVec.at(i);\n      }\n   }\n   \n   return \"None\";\n}\n\nvoid Seperate(vector<string>& nameVec, vector<string>& phoneNumberVec) {\n   string wholeWord;\n   string name;\n   string phone;\n   int stringLen;\n   int comma = 0;\n   \n   cin >> wholeWord;\n   stringLen = wholeWord.size();\n   \n   for (int i = 0; i < stringLen; ++i) {\n      if (wholeWord.at(i) == ',') {\n         comma = 2;\n      }\n      \n      if (comma == 0) {\n         name += wholeWord.at(i);\n      }\n      \n      else if (comma == 1) {\n         phone += wholeWord.at(i);\n      }\n      \n      else if (comma == 2) {\n         comma = 1;\n      }\n   }\n   \n   nameVec.push_back(name);\n   phoneNumberVec.push_back(phone);\n}\n\nint main() {\n   /* Type your code here */\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   string contactName;\n   int numNames;\n   \n   cin >> numNames;\n   \n   for (int i = 0; i < numNames; ++i) {\n      Seperate(nameVec, phoneNumberVec);\n   }\n   \n   cin >> contactName;\n   \n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 57, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n   string phoneNum;\n   int location;\n   int i;\n   \n   for (i = 0;i < nameVec.size();i++) {\n      if (nameVec.at(i) == contactName) {\n         location = i;\n      }\n   }\n   \n   phoneNum = phoneNumberVec.at(location);\n   \n   return phoneNum;\n}\n\nint main() {\n   int numIn;\n   int i;\n   vector<string> nameVec;\n   vector<string> phoneNum;\n   string conName;\n   string tempStr;\n   \n   cin >> numIn;\n   \n   for (i = 0;i < numIn;i++) {\n      cin >> tempStr;\n      nameVec.push_back(tempStr);\n      cin >> tempStr;\n      phoneNum.push_back(tempStr);\n   }\n   \n   cin >> conName;\n   \n   cout << GetPhoneNumber(nameVec, phoneNum, conName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 28, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   unsigned int i;\n   string output;\n   for (i = 0; i < nameVec.size(); ++ i) {\n      if (nameVec.at(i) == contactName) {\n         output = phoneNumberVec.at(i);\n}\n}\nreturn output;\n}\nint main() {\n   vector <string> name;\n   vector <string> phoneNumber;\n   int inputOne;\n   int i;\n   string contactName;\n   \n   cin >> inputOne;\n   \n   name.resize(inputOne);\n   phoneNumber.resize(inputOne);\n   \n   for (i = 0; i < inputOne; ++i) {\n      cin >> name.at(i);\n      cin >> phoneNumber.at(i);\n   }\n   \n   cin >> contactName;\n   \n   cout << GetPhoneNumber (name, phoneNumber, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 201, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\n   for(int i = 0; i < nameVec.size(); i++){\n      if(nameVec.at(i) == contactName){\n         return phoneNumberVec[i];\n      }\n   }\n   return contactName;\n}\nint main() {\n   /* Type your code here */\nvector<string> nameVec, phoneNumberVec;\nstring name, number;\nint size;\ncin >> size;\n\nfor(int i = 0; i < size; i++){\n   cin >> name;\n   cin >> number;\n   nameVec.push_back(name);\n   phoneNumberVec.push_back(number);\n}\ncin >> name;\nstring phoneNumber = GetPhoneNumber(nameVec, phoneNumberVec, name);\ncout << phoneNumber << endl;\n   return 0;\n}\n", "class": 0, "version": 154, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n   unsigned int i;\n   \n   for (i = 0; i < phoneNumberVec.size(); i++) {\n      if ( nameVec.at(i) == contactName) {\n         return phoneNumberVec.at(i);\n      }\n   }\n}/* Define your function here */\n\nint main() {\n   int numConts;\n   \n   cin >> numConts;\n      \n   int i;\n   string totString;\n   string contactName;\n   string contPhone;\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   \n   \n   for (i = 0; i < numConts; i++) {\n      cin >> totString >> contPhone;\n      nameVec.push_back(totString);\n      phoneNumberVec.push_back(contPhone);\n   }\n   \n   cin >> contactName;\n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;/* Type your code here */\n\n   return 0;\n}\n", "class": 0, "version": 31, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n   int i;\n   \n   for (i = 0; i < nameVec.size(); ++i) {\n      if (contactName == nameVec.at(i)) {\n         return phoneNumberVec.at(i);\n      }\n   }\n}\n\nint main() {\n   vector<string> nameStr;\n   vector<string> numberStr;\n   int inputVal;\n   int i;\n   int totalStr;\n   string firstName;\n\n   cin >> inputVal;\n   \n   nameStr.resize(inputVal);\n   numberStr.resize(inputVal);\n   \n   for (i = 0; i < nameStr.size(); ++i) {\n      cin >> firstName;\n      nameStr.at(i) = firstName;\n      cin >> firstName;\n      numberStr.at(i) = firstName;\n   }\n   \n   cin >> firstName;\n   \n   cout << GetPhoneNumber(nameStr, numberStr, firstName) << endl;\n   \n   \n   return 0;\n}\n", "class": 0, "version": 74, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   string temp;\n   for (unsigned x = 0; x < nameVec.size(); x++)\n   {\n     if (nameVec.at(x) == contactName)\n     {\n        temp = phoneNumberVec.at(x);\n     }\n   }\n   return temp;\n}\n\nint main() {\n   int size;\n   cin >> size;\n   vector<string> nameVec(size);\n   vector<string> phoneNumberVec(size);\n   string contactName;\n   \n   for (int x = 0; x < size; x++)\n   {\n       cin >> nameVec.at(x);\n   cin >>phoneNumberVec.at(x);\n      \n   }\n   cin >> contactName;\n  cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n   //cout << hold;\n   \n\n   return 0;\n}\n", "class": 0, "version": 135, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   int index = 0;\n   for (unsigned int i =0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         index = i;\n      }\n   }\n   return phoneNumberVec.at(index);\n}\nint main() {\n   int numOfPairs;\n   vector <string> vNames;\n   vector <string> vNumbers;\n   string contactName;\n   \n   cin >> numOfPairs;\n   \n   vNames.resize (numOfPairs);\n   vNumbers.resize (numOfPairs);\n   \n   for (int i=0; i < numOfPairs; ++i) {\n      cin >> vNames.at(i);\n      \n      cin >> vNumbers.at(i);\n   }\n   cin >> contactName;\n   \n   cout << GetPhoneNumber(vNames, vNumbers, contactName) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 239, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(vector<string>& nameVec, vector<string>& phoneNumberVec, string contactName) {\n   int contactCount;\n   string phoneNumber;\n   string phoneName;\n   string contactInfo;\n   string result;\n   int matchCount = 0;\n   int i;\n   \n   cin >> contactCount;\n   \n   for (i = 0; i < contactCount; ++i) {\n      cin >> contactInfo;\n      phoneNumber = contactInfo.substr(contactInfo.find(',') + 1, 8);\n      phoneNumberVec.push_back(phoneNumber);\n      phoneName = contactInfo.substr((0), contactInfo.find(','));\n      nameVec.push_back(phoneName);\n   }\n   \n   cin >> contactName;\n   \n   for (i = 0; i < contactCount; ++i) {\n      if (contactName == nameVec.at(i)) {\n         result = phoneNumberVec.at(i);\n         matchCount = 1;\n      }\n   }\n   if (matchCount == 0) {\n      result = \"None\";  \n   }\nreturn result;\n}\n\nint main() {\n   /* Type your code here */\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   string contactName;\n   \n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 157, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\nstring output;\n\nint numElements = nameVec.size();\nfor( int j = 0; j < numElements; ++j) {\n   if(nameVec.at(j) == contactName) {\n      output = phoneNumberVec.at(j);\n   }\n}\n\nreturn output;\n}\nint main() {\n   int NUMELEMENTS;\n   cin >> NUMELEMENTS;\n   string userInput;\n   vector<string> contactsName(NUMELEMENTS);\n   vector<string> contactsNumber(NUMELEMENTS);\n   for(int i = 0; i < NUMELEMENTS; ++i) {\n     cin >> contactsName.at(i);\n     cin >> contactsNumber.at(i);\n}\n      cin >> userInput;\n      cout << GetPhoneNumber(contactsName, contactsNumber, userInput) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 237, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName){\n   for (int i = 0; i < nameVec.size(); ++i){\n      if ( nameVec.at(i) == contactName){\n        return phoneNumberVec.at(i);\n      }\n      \n   }\n\n}\nint main() {\n   string name;\n   string number;\n   vector <string> nameV;\n   vector <string> phoneNumberV;\n   int num;\n   cin >> num;\n   for ( int i = 0; i < num; ++i){\n      cin >> name >> number;\n      nameV.push_back(name);\n      phoneNumberV.push_back(number);\n   }\n   cin >> name;\n   cout << GetPhoneNumber(nameV, phoneNumberV, name);\n   cout << endl;\n\n   return 0;\n}\n", "class": 0, "version": 44, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName);\nint main() {\n   /* Type your code here */\n   int quantity;\n   vector<string> names;\n   vector<string> numbers;\n   cin >> quantity;\n   for(int i = 0; i < quantity; i++)\n   {\n      string temp;\n      string tempNum;\n      cin >> temp;\n      cin >> tempNum;\n      names.push_back(temp);\n      numbers.push_back(tempNum);\n   }\n   string contact;\n   cin >> contact;\n   cout << GetPhoneNumber(names, numbers, contact) << endl;\n   return 0;\n}\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName)\n{\n   int location = 0;\n   for(int i = 0; i < nameVec.size(); i++)\n   {\n      if(nameVec.at(i) == contactName)\n      {\n         location = i;\n      }\n   }\n   return phoneNumberVec.at(location);\n}", "class": 0, "version": 67, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"None\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<string> nameVec;\n    vector<string> phoneNumberVec;\n\n    for (int i = 0; i < n; i++) {\n        string nameAndNumber;\n        cin >> nameAndNumber;\n        int commaPos = nameAndNumber.find(',');\n        string name = nameAndNumber.substr(0, commaPos);\n        string number = nameAndNumber.substr(commaPos + 1);\n        nameVec.push_back(name);\n        phoneNumberVec.push_back(number);\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}\n", "class": 0, "version": 2, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <cctype>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName)\n{\n   int i;\n   int sizeName = nameVec.size();\n   string Correct;\n   \n   for(i = 0 ; i < sizeName; i++)\n   {\n      if (contactName == nameVec.at(i))\n      {\n         Correct = phoneNumberVec.at(i);\n         break;\n         \n      }   \n      \n   }\n   return Correct;\n   \n   \n   \n   \n}\n\nint main() {\n   int userInput;\n   int t;\n   string myStr;\n  \n   \n   cin>>userInput;\n   vector<string> name(userInput);\n   vector<string> phone(userInput);\n   \n   for (t = 0 ; t < userInput ; t++)\n   {\n      cin>> myStr;\n      name.at(t) = myStr;\n      cin>> myStr;\n      phone.at(t) = myStr;         \n   }\n   cin>> myStr;\n   cout<<GetPhoneNumber(name, phone, myStr)<<\"\\n\";\n\n   return 0;\n}\n", "class": 0, "version": 61, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n   for(int i = 0; i < nameVec.size(); i++) {\n      if(contactName == nameVec.at(i)) {\n         return phoneNumberVec.at(i);\n      }\n   }\n   return \"Error\";\n}\n\n\nint main() {\n   int firstV;\n   string contactName;\n   string n;\n   string p;\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   \n   cin >> firstV;\n\n   for(int i = 0; i < firstV; i++) {\n      cin >> n;\n      cin >> p;\n      nameVec.push_back(n);\n      phoneNumberVec.push_back(p);\n   }\n   \n   cin >> contactName;\n   \n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << \"\\n\";\n      \n   \n   return 0;\n}\n", "class": 0, "version": 87, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n   string foneNum;\n   for (unsigned int i = 0; i < nameVec.size(); i++) {\n      if (nameVec.at(i) == contactName) {\n         foneNum = phoneNumberVec.at(i);\n      }\n   }\n   return foneNum;\n}\n\nint main() {\n   unsigned int inputNum = 0;\n   cin >> inputNum;\n   string name;\n   string phoneNum;\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   string contactName;\n   \n   for (unsigned int i = 0; i < inputNum; i++) {\n      cin >> name >> phoneNum;\n      nameVec.push_back(name);\n      phoneNumberVec.push_back(phoneNum);\n   }\n   cin >> contactName;\n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n   \n   \n\n   return 0;\n}\n", "class": 0, "version": 39, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName)   {\n   int i;\n   \n   for (i = 0; i < nameVec.size(); i++)   {\n      if (nameVec.at(i) == contactName)   {\n         return phoneNumberVec.at(i);\n      }\n   }\n}\n\nint main() {\n   int num;\n   int i;\n   string specificName;\n   string currName;\n   string currNumber;\n   vector<string>names(0);\n   vector<string>numbers(0);\n   \n   cin >> num;\n   \n   for (i = 0; i < num; i++)   {\n      cin >> currName;\n      cin >> currNumber;\n      \n      names.push_back(currName);\n      numbers.push_back(currNumber);\n   }\n   \n   cin >> specificName;\n   \n   cout << GetPhoneNumber(names, numbers, specificName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 28, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec,const vector<string>& phoneNumberVec, string contactName) {\n   unsigned int i;   \n   for (i = 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         return phoneNumberVec.at(i);\n      }\n   }\n   return \"None\";\n}\n\nint main() {\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   string contactName;\n   int num_element;\n   int commaindex;\n   string pairs;\n   int i;\n   int j;\n   string name;\n   string phonenumber;\n   \n   cin >> num_element;\n   nameVec.resize(num_element);\n   phoneNumberVec.resize(num_element);\n   for (i = 0; i < num_element; ++i) {\n      cin >> pairs;\n      commaindex = pairs.find(\",\");\n      for (j = 0; j < commaindex; ++j) {\n         name.push_back(pairs.at(j)); \n      }\n      for (unsigned int k = commaindex+1; k < pairs.size(); ++k) {\n         phonenumber.push_back(pairs.at(k)); \n      }\n      nameVec.at(i) = name;\n      phoneNumberVec.at(i) = phonenumber;\n      name = \"\";\n      phonenumber = \"\";\n   }\n   cin >> contactName;\n   cout << GetPhoneNumber(nameVec,phoneNumberVec,contactName) << endl;\n\n   \n   return 0;\n}\n", "class": 0, "version": 16, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   for(unsigned i = 0; i < nameVec.size(); i++) {\n      if(nameVec.at(i) == contactName) {  \n         return phoneNumberVec.at(i);\n      }\n   }\n   return \"no name\";\n}\n\n\nint main() {\n   int N = 0;\n   vector<string> names;\n   vector<string> phoneNums;\n   cin >> N;\n   \n   string currName;\n   string currNum;\n   string testName;\n   \n   for(int i = 0; i < N; i++) {\n      cin >> currName;\n      cin >> currNum;\n      names.push_back(currName);\n      phoneNums.push_back(currNum);\n   }\n   \n   cin >> testName;\n   \n   cout << GetPhoneNumber(names,phoneNums,testName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 67, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName) {\n   for (unsigned int i = 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         return phoneNumberVec.at(i);\n      }    \n   }\n   return \"None\"; \n}\n\nint main() {\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   int vectorSize;\n   string contact;\n   string name;\n   string number;\n   string contactName;\n   \n   cin >> vectorSize;\n   for (int i = 0; i < vectorSize; ++i) {\n      cin >> contact;\n      name = contact.substr(0, contact.find(\",\")); \n      nameVec.push_back(name);\n      number = contact.substr(contact.find(\",\") + 1);\n      phoneNumberVec.push_back(number);\n   }\n   \n   cin >> contactName;\n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 189, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\n   int i;\n   int j = nameVec.size();\n   string phoneNum;\n   for(i=0; i<j; ++i){\n      if(nameVec.at(i)==contactName){\n         phoneNum = phoneNumberVec.at(i);\n      }\n   }\n   return phoneNum;\n}\n\nint main() {\n   int N;\n   cin>>N;\n   string input;\n   string contactName;\n   string phoneNum;\n   vector<string> nameVec(N);\n   vector<string> phoneNumberVec(N);\n   int i;\n   int j = nameVec.size();\n   for(i=0; i < j; ++i){\n      cin>>input;\n      nameVec.at(i)= input;\n      cin>> input;\n      phoneNumberVec.at(i) = input;\n   }\n   cin>> contactName;\n   phoneNum = GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n   cout<< phoneNum<<endl;\n   return 0;\n}\n", "class": 0, "version": 35, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector <string> &nameVec, const vector <string> &phoneNumberVec, const string &contactName)\n{\n   string number;\n   for(unsigned int i = 0; i < nameVec.size(); i++)\n   {\n      if(nameVec.at(i) == contactName)\n      {\n         number = phoneNumberVec.at(i);\n      }\n   }\n   return number;\n}\n\nint main() {\n\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   \n   int num;\n   string userInput;\n   string name;\n   \n   cin >> num;\n   \n   for(int i = 0; i < num; i++)\n   {\n      cin >> userInput;\n      nameVec.push_back(userInput);\n      cin >> userInput;\n      phoneNumberVec.push_back(userInput);\n   }\n   \n   cin >> name;\n\n   cout << GetPhoneNumber(nameVec, phoneNumberVec, name);\n   cout << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 89, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   string number;\n   for (int i =0;i<nameVec.size();++i)\n   {\n      if (nameVec.at(i)==contactName)\n      {\n         number = phoneNumberVec.at(i);\n      }\n   }\n   return number;\n}\nint main() {\nint input;\ncin>>input;\nvector<string> nameVec(input);\nvector<string> phoneNumberVec(input);\nfor (int i=0;i<input;++i)\n{\n   cin>>nameVec.at(i);\n   cin>>phoneNumberVec.at(i);\n}\nstring contactName;\ncin >> contactName;\ncout << GetPhoneNumber(nameVec, phoneNumberVec, contactName)<< endl;\n   return 0;\n}\n", "class": 0, "version": 184, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\n   for (int i =0; i<nameVec.size(); ++i){\n      if (nameVec[i] == contactName){\n         return phoneNumberVec[i];\n      }\n   }\n}\nint main() {\n   /* Type your code here */\nstring n;\nstring s;\nvector <string> k, phoneNumbers;\nint v;\ncin >> v;\nfor (int i =0; i < v; ++i){\n   cin >> n >> s;\n   k.push_back(n);\n   phoneNumbers.push_back(s);\n}\ncin >> n;\ncout << GetPhoneNumber(k, phoneNumbers, n) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 227, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string name)\n{\n   string contactPhone;\n   //contactPhone = nameVec.at(1);\n   \n   for (unsigned int i = 0; i < nameVec.size(); ++i)\n   {\n      if ( name.compare( nameVec.at(i) ) == 0 )\n      {\n         contactPhone = phoneNumberVec.at(i);\n         i = nameVec.size();\n      }\n      else\n      {\n         contactPhone = \"None\";\n      }\n   }\n   \n   return contactPhone;\n}\nint main() {\n   unsigned int list;\n   vector<string> phoneNumbers;\n   vector<string> names;\n   string contactName;\n   string temp;\n   char seperator;\n   \n   \n   seperator = ',';\n   cin >> list;\n   for (unsigned int i = 0; i < list; ++i)\n   {\n      cin >> temp;\n      names.push_back(temp.substr(0,temp.find(seperator)));\n      phoneNumbers.push_back(temp.substr(temp.find(seperator)+1, 8) );\n   }\n\n   cin >> contactName;\n   cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 125, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, const string& contactName)\n{\n   int size = nameVec.size();\n   int indexOfPhone;\n   for(int i = 0; i < size; ++i)\n   {\n      if(nameVec.at(i) == contactName)\n      {\n         indexOfPhone = i;\n      }\n   }\n   return phoneNumberVec.at(indexOfPhone);\n}\n\nint main() \n{\n   int numPairs;\n   cin >> numPairs;\n   \n   vector<string> names(numPairs);\n   vector<string> numbers(numPairs);\n   \n   for(int i = 0; i < numPairs; i++)\n   {\n      cin >> names.at(i) >> numbers.at(i);\n   }\n   string phone = \"\";\n   cin >> phone;\n   \n   cout << GetPhoneNumber(names, numbers, phone) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 231, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\n\nint index = 0;\n\nfor (unsigned int i=0; i< nameVec.size(); ++i) {\n   if (nameVec.at(i) == contactName) {\n      index = i;\n      \n   }\n   \n}\n\n\nreturn phoneNumberVec.at(index);\n}\n/* Define your function here */\n\nint main() {\n  int numOfPairs;\n  vector <string> vNames;\n  vector <string> vPhoneNumbers;\n  string info;\n  string contactName;\n  \n  cin >> numOfPairs;\n  \n  vNames.resize (numOfPairs);\n  vPhoneNumbers.resize(numOfPairs);\n  \n  for (int i =0; i < numOfPairs; ++i) {\n     \n     cin >> vNames.at(i);\n     \n     cin >> vPhoneNumbers.at(i);\n     \n  }   \n  \n  cin >> contactName;\n \n cout << GetPhoneNumber (vNames, vPhoneNumbers, contactName);\n \n \n/*  \n  for (int i = 0; i < numOfPairs; ++i) {\n  \n  cin >> info;\n  \n  vNames.push_back(info);\n  \n  cin >> info;\n  vPhoneNumbers.push_back(info);\n}\n*/\n\n /* cout << vNames.at(0) << ' ' << vPhoneNumbers.at(0) << endl;\n  cout << vNames.at(vNames.size() - 1) << endl;\n  */\ncout << endl;\n   return 0;\n}\n", "class": 0, "version": 255, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n\nfor(int i=0; i<nameVec.size(); i++) {\n\nif(nameVec[i] == contactName)\n\nreturn phoneNumberVec[i];\n\n}\n\nreturn \"Not Available\";\n\n}\n\nint main() {\n\nint n;\n\nvector<string> nameList;\n\nvector<string> phoneList;\n\nstring name, phone;\n\n\ncin>>n;\n\n\n\nfor(int i=0; i<n; i++){\n\ncin>>name;\n\ncin>>phone;\n\nnameList.push_back(name);\n\nphoneList.push_back(phone);\n\n}\n\n\ncin>>name;\n\nphone = GetPhoneNumber(nameList, phoneList, name);\n\ncout<<phone<<endl;\n\nreturn 0;\n\n}", "class": 0, "version": 258, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\n   string chosennum;\n   \n   for(int i=0; i<nameVec.size(); ++i){\n      \n      if(contactName==nameVec.at(i)){\n         \n         chosennum=phoneNumberVec.at(i);\n         \n      }\n      \n   }\n   \n   return chosennum;\n}//end of string\n\nint main() {\n   vector<string> name(0);\n   vector<string> number(0);\n   int numpeople;\n   string chosen;\n   \n   cin>>numpeople;\n   \n   name.resize(numpeople);\n   number.resize(numpeople);\n   \n   for(int i=0; i<numpeople; ++i){\n      \n      cin>>name.at(i);\n      cin>>number.at(i);\n      \n   }//end of for\n\n   cin>>chosen;\n   \n   cout<<GetPhoneNumber(name, number, chosen)<<endl;\n\n   return 0;\n}\n", "class": 0, "version": 235, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\n   for(int i = 0; i < nameVec.size(); i++){\n      if(nameVec.at(i) == contactName){\n         return phoneNumberVec.at(i);\n      }\n   }\n}\n\nint main() {\n   int num;\n   cin >> num;\n   vector<string> names;\n   vector<string> nums;\n   for(int i = 0; i < num; i++){\n      string name;\n      string num;\n      cin >> name;\n      cin >> num;\n      names.push_back(name);\n      nums.push_back(num);\n   }\n   string request;\n   cin >> request;\n   cout << GetPhoneNumber(names, nums, request) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 241, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n    string str;\n    \n    for(int i = 0; i < nameVec.size(); i++)\n    {\n        if(contactName == nameVec.at(i))\n            str= phoneNumberVec.at(i);\n    }\n    return str;\n    \n}\n\nint main()\n{\n    vector<string> nameVec;\n    vector<string> phoneNumberVec;\n    string contactName;\n    int input;\n    string num, name;\n    \n    cin >> input;\n    \n    for( unsigned int i =0; i < input; i++)\n    {\n        cin >> name;\n        cin >> num;\n        nameVec.push_back(name);\n        phoneNumberVec.push_back(num);\n    }\n    \n    cin >>  contactName;\n    \n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n    \n    \n}\n", "class": 0, "version": 213, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string>& nameVec, vector<string>& phoneNumberVec, string contactName) {\n   unsigned int t;\n   string correctNum;\n   \n   correctNum = \"0\";\n   \n   for (t = 0; t < nameVec.size(); ++t) {\n      if (nameVec.at(t) == contactName) {\n         correctNum = phoneNumberVec.at(t);\n      }  \n   }\n   \n   if (correctNum == \"0\") {\n      correctNum = \"None\";\n   }\n   \n   return correctNum;\n}\n\nint main() {\n   vector<string> tempVec;\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   string contactName;\n   string tempString;\n   int numContacts;\n   int i;\n   \n   cin >> numContacts;\n   \n   //creates tempVec which is blueprint for nameVec & phone#vec\n   for (i = 0; i < numContacts; ++i) {\n      cin >> tempString;\n      tempVec.push_back(tempString);\n   }\n   \n   //creates nameVEC\n   for (i = 0; i < numContacts; ++i) {\n      nameVec.push_back(tempVec.at(i).substr(0, tempVec.at(i).find(',')));\n   }\n   \n   //creates phonenumbervec\n   for (i = 0; i < numContacts; ++i){\n      phoneNumberVec.push_back(tempVec.at(i).substr(tempVec.at(i).find(',') + 1, 8)); /*WOW I REALLY DID THAT LOL*/\n   }\n   \n   cin >> contactName;\n   \n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 149, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\n   //need to find the phone number associated with the name\n   //find the index associated with the name, so where is the name located in tname vector?\n   // to do this, we need to find each element in the name vector and see if its the name we are looking for \n   \n   int index=0;\n   \n   for(unsigned int i=0; i<nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         index = i; // we do index because if it is, remember index #\n         //once we are done looking at all names, read the phone # vector at that index \n      }\n   }\n return phoneNumberVec.at(index);\n}\n\nint main() {\n   int numOfPairs;\n   vector<string>vNames;\n   string contactName;\n   \n   vector<string> vPhoneNumbers(0);\n   string info;\n   \n   cin>>numOfPairs;\n   \n   vNames.resize(numOfPairs);\n   vPhoneNumbers.resize(numOfPairs);\n   \n   for (int i=0; i < numOfPairs; ++i ) {\n      cin>>vNames.at(i);\n      cin>> vPhoneNumbers.at(i);\n   }\n   \n   cin>> contactName;\n   \n   cout << GetPhoneNumber(vNames, vPhoneNumbers, contactName) << endl;\n   // first way to build a vector with non existing elements\n   for (int i=0; i < numOfPairs; ++i) {\n      // read in the information \n      cin>> info; \n      // add it to the vector \n      vNames.push_back(info); // 1) creates a new element at the end of the vector\n      //2) initializes it with the value in the ()\n   cin>> info; \n   vPhoneNumbers.push_back(info);\n\n   }\n   return 0;\n}\n", "class": 0, "version": 142, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   unsigned int i;\n   \n   for (i = 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         break;\n      }\n   }\n   return phoneNumberVec.at(i);\n}\n\nint main() {\n   vector<string> nameVec;\n   vector<string> phoneNumberVec;\n   string name;\n   string phoneNumber;\n   \n   int i;\n   int N;\n   cin >> N;\n   \n   for (i = 0; i < N; ++i) {\n      cin >> name >> phoneNumber;\n      nameVec.push_back(name);\n      phoneNumberVec.push_back(phoneNumber);\n   }\n   \n   cin >> name;\n   \n   cout << GetPhoneNumber(nameVec, phoneNumberVec, name) << endl;\n\n\n   return 0;\n}\n", "class": 0, "version": 266, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   int index = 0;\n   \n   for ( unsigned int i = 0; i < nameVec.size() ; ++i)\n   {\n      if ( nameVec.at(i) == contactName)\n      {\n         index = i;\n      }\n   }\n   \n   return phoneNumberVec.at(index);\n}\n\n\nint main() {\n    int numOfPairs;\n   vector <string> vNames;\n   string contactName;\n   \n   vector <string> vPhoneNumbers(0);\n   \n   string info;\n    \n   cin >> numOfPairs;\n   \n   vNames.resize ( numOfPairs );\n   vPhoneNumbers.resize ( numOfPairs); \n  \n   for ( int i = 0; i < numOfPairs; ++i)\n   {\n      cin >> vNames.at(i);\n      \n      cin >> vPhoneNumbers.at(i);\n   }\n   \n   cin >> contactName;\n   \n   cout << GetPhoneNumber(vNames, vPhoneNumbers, contactName) << endl;\n  \n\n\n   return 0;\n}\n", "class": 0, "version": 108, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   string phoneNum = \"hi\";\n   for (unsigned int i = 0; i < nameVec.size(); ++i)\n      {\n         if (nameVec.at(i) == contactName)\n         {\n            phoneNum = phoneNumberVec.at(i);\n         }\n      }\n   return phoneNum;\n}\n\nint main() {\n   int inputNum;\n   string inputStr;\n   cin >> inputNum;\n   vector<string> listNums(inputNum);\n   vector<string> listNames(inputNum);\n   for (unsigned int i = 0; i < listNames.size(); ++i)\n   {\n      cin >> inputStr;\n      listNames.at(i) = inputStr;\n      cin >> inputStr;\n      listNums.at(i) = inputStr;\n   }\n   cin >> inputStr;\n   cout << GetPhoneNumber(listNames, listNums, inputStr) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 20, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> names, vector<string> phoneNumbers, string wantedName) {/* Define your function here */\n   \n   int x;\n   unsigned int i;\n    for (i=0;i<names.size();++i) {\n       if (names.at(i) == wantedName) {\n          x = i;\n       }\n    }\n    \n    string number;\n    number = phoneNumbers.at(x);\n    return number;\n}\nint main() {\n   int numNums;\n   string currName;\n   string currPhoneNumber;\n   vector<string> names;\n   vector<string> phoneNumbers;\n   cin >> numNums;\n   for (int i=0;i<numNums;++i) {\n      cin >> currName;\n      names.push_back(currName);\n      cin >> currPhoneNumber;\n      phoneNumbers.push_back(currPhoneNumber);\n      }\n   string wantedName;\n   cin >> wantedName;\n   cout << GetPhoneNumber(names, phoneNumbers, wantedName) << endl;/* Type your code here */\n\n   return 0;\n}\n", "class": 0, "version": 5, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, const string &contactName) {\n   int size = nameVec.size();\n   string current;\n   string output;\n   for (int i = 0; i < size; i++) {\n      current = nameVec.at(i);\n      if (current == contactName) {\n         output = phoneNumberVec.at(i);\n         cout << phoneNumberVec.at(i)<< endl;\n         \n      }\n   }\n   return output;\n}\n\nint main() {\n   vector <string> name;\n   vector <string> number;\n   int x;\n   string contact;\n   string infoName;\n   string infoNumber;\n   cin >> x;\n   for (int i = 0; i < x; i++) {\n      cin >> infoName;\n      cin >> infoNumber;\n      name.push_back(infoName);\n      number.push_back(infoNumber);\n      \n   }\n   cin >> contact;\n   \n   GetPhoneNumber(name,number,contact);\n\n   return 0;\n}\n", "class": 0, "version": 38, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName) {\n   int i;\n   string contactNum;\n   \n   for (i = 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         contactNum = phoneNumberVec.at(i);\n         i = nameVec.size();\n      }\n      else {\n         contactNum = \"None\";\n      }\n   }\n   return contactNum;\n}\n\nint main() {\n   int numContacts;\n   int i;\n   string contact;\n   int commaIndx = 0;\n   vector<string> nameList;\n   vector<string> numList;\n   \n   cin >> numContacts;\n   \n   for (i = 0; i < numContacts; ++i) {\n      cin >> contact;\n      commaIndx = contact.find(',');\n      nameList.push_back(contact.substr(0, commaIndx));\n      numList.push_back(contact.substr(commaIndx + 1, contact.size() - commaIndx));\n   }\n   \n   cin >> contact;\n   \n   cout << GetPhoneNumber(nameList, numList, contact) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 197, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   for (unsigned int i = 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         return phoneNumberVec.at(i);\n      }\n   }\n   return \" \";\n}\n\n      \nint main() {\n   /* Type your code here */\n   vector <string> nameVec;\n   vector <string> phoneNumberVec;\n   string contactName;\n   string strName;\n   string strNumber;\n   int input;\n   \n   cin >> input;\n   \n   for (int i = 0; i < input; ++i) {\n      cin >> strName;\n      nameVec.push_back(strName);\n      cin >> strNumber;\n      phoneNumberVec.push_back(strNumber);\n   }\n   \n   cin >> contactName;\n   \n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n      \n   return 0;\n}\n", "class": 0, "version": 229, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\nstring phoneNum;\nfor (unsigned i = 0; i < nameVec.size(); ++i) {\nif (contactName == nameVec.at(i)) {\nphoneNum = phoneNumberVec.at(i);\n}\n}\nreturn phoneNum;\n}\n\n\nint main() {\nint listSize;\nstring names;\nstring phoneNumbers;\nstring desiredName;\n\ncin >> listSize;\n\nvector<string> nameList;\nvector<string> phoneNumberList;\n\nfor (int i = 0; i < listSize; ++i) {\ncin >> names;\nnameList.push_back(names);\ncin >> phoneNumbers;\nphoneNumberList.push_back(phoneNumbers);\n}\n\ncin >> desiredName;\ncout << GetPhoneNumber(nameList, phoneNumberList, desiredName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 175, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec, \nconst vector<string>& phoneNumberVec, string contactName) {\n    string phoneNumberFound;\n    for(int i = 0; i < nameVec.size(); i++) {\n        if(nameVec.at(i) == contactName) {\n            phoneNumberFound = phoneNumberVec.at(i);\n            break;\n        }\n        else {\n            phoneNumberFound = \"None\";\n        }\n    }\n    return phoneNumberFound;\n}\n\nint main()\n{\n    vector<string> nameVec;\n    vector<string> phoneNumberVec;\n    string contactName;\n    int n;\n    string input;\n    \n    cin >> n;\n    \n    for(int i = 0; i < n; i++) {\n        cin >> input;\n        nameVec.push_back(input.substr(0, input.find(',')));\n        phoneNumberVec.push_back(input.substr((input.find(',') + 1), \n        (input.size() - input.find(',') - 1)));\n    }\n    \n    cin >> contactName;\n    \n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}\n", "class": 0, "version": 83, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/*\ntakes input an integer N - represents the # of word pairs in the list followed\nword pairs - name and phone # (both strings)\nlist is followed by name - program should output number associated with name\nex: 3 Joe 123-5432 Linda 983-4123 Frank 867-5309 \nFrank\noutput: \n867-5309\n*/\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\n   unsigned int i;\n   string number;\n   for (i = 0; i < nameVec.size(); ++i) \n   {\n      if (nameVec.at(i) == contactName) {\n        number  = phoneNumberVec.at(i);\n   }\n}\nreturn number;\n}\n\nint main() {\n   //define the int that shows the pairs that follow \n   unsigned int numPairs;\n   unsigned int i;\n   unsigned int k = 0;\n   unsigned int j = 0;\n   string contactName;\n   cin >> numPairs; \n   string name; \n   string phone_number;\n   //unsigned int bothvec = numPairs*2;\n   vector<string> nameVec (numPairs);\n   vector<string> phoneNumberVec(numPairs);\n //  vector<string> bothVec (bothvec);\n\n   \n   for(i = 0; i < numPairs; ++i)\n   {\n      cin >> name >> phone_number; \n      nameVec.push_back(name);\n      phoneNumberVec.push_back(phone_number);\n      //cout << \"Both Names and Numbers:\" << bothVec.at(i) << \" \";\n   }\n  // nameVec.at(j) = bothVec.at(0);\n  // phoneNumberVec.at(k) = bothVec.at(1);\n   //cout << nameVec.at(j);\n   // cout << phoneNumberVec.at(k);\n  // ++j;\n  // ++k;\n   //cout << j;\n   //cout << k;\n   \n   //bothVec(1) = numbervec(0); bothVec(2) = namevec(1); bothVec(3) = numbervec(1); bothVec(4) = namevec(2);  bothVec(5) = numbervec(2)\n  \n  // for(i = 2; i < bothVec.size(); ++i)\n  // {\n     // if(i % 2 != 0) {\n         //why does it automatically increment k?\n        // phoneNumberVec.at(k) = bothVec.at(i);\n         //cout << \"Phone Numbers:\" << phoneNumberVec.at(k) << \" \"; \n     // }\n     // else {\n         //nameVec.at(j) = bothVec.at(i);\n         //cout << \"Names:\"<< nameVec.at(k) << \" \"; \n      //}\n   //}\n   \n   cin >> contactName; \n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName)  << endl;\n      \n      \n      \n   return 0;\n}\n", "class": 0, "version": 125, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n//Helped by Jack Robinson\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n   int i;\n   \n   for (i = 0; i < nameVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         return phoneNumberVec.at(i);\n      }\n   }   \n}\n\nint main() {\n   vector<string> listContacts;\n   vector<string> listNames;\n   int i; \n   int numPairs; \n   string contactS;\n   string numberS;\n   string indexName;\n   \n   cin >> numPairs; \n   \n   for (i = 0; i < numPairs; ++i) {\n      cin >> contactS;\n      listContacts.push_back(contactS);\n      cin >> numberS;\n      listNames.push_back(numberS);\n   }\n   \n   cin >> indexName; \n   \n   cout << GetPhoneNumber(listContacts, listNames, indexName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 70, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName) {\n   \n   for (unsigned int i = 0; i < phoneNumberVec.size(); ++i) {\n      if (contactName == nameVec.at(i)) {\n         return phoneNumberVec.at(i);\n      }\n   }\n   for (unsigned int i = 0; i < phoneNumberVec.size(); ++i) {\n      if (contactName != nameVec.at(i)) {\n         return \"None\";\n      }\n   }\n}\n\n\nint main() {\n   int numOfTimes;\n   vector<string> subString;\n   vector<string> names;\n   vector<string> phoneNums;\n   string nameOutput;\n   \n   cin >> numOfTimes;\n\n   for (int i = 0; i < numOfTimes; ++i) {\n      cin >> nameOutput;\n      names.push_back(nameOutput);\n      phoneNums.push_back(nameOutput);\n      \n      names.at(i) = names.at(i).substr(0, names.at(i).find(','));\n      \n      phoneNums.at(i) = phoneNums.at(i).substr(phoneNums.at(i).find(',') + 1, phoneNums.at(i).find(' '));\n   }\n   \n   cin >> nameOutput;\n   \n   cout << GetPhoneNumber (names, phoneNums, nameOutput) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 84, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\n   int num = 0;\n   \n   for( unsigned int i = 0; i< nameVec.size(); ++i){\n      if(nameVec.at(i) == contactName) {\n         num = i;\n      }\n   }\n   return phoneNumberVec.at(num);\n}\n/* Define your function here */\n\nint main() {\n   /* Type your code here */\n   int numPairs;\n   vector<string> vNames;\n   string name;\n   vector<string> vPhoneNumbers;\n   \n   cin >> numPairs;\n   vNames.resize(numPairs);\n   vPhoneNumbers.resize(numPairs);\n   \n   for(int i = 0; i < numPairs; ++i) {\n      cin >> vNames.at(i);\n      cin >> vPhoneNumbers.at(i);\n   }\n\n   cin >> name;\n   cout << GetPhoneNumber(vNames, vPhoneNumbers, name) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 144, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\n   string GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName)\n            return phoneNumberVec[i];\n    }\n    return \"Contact doesn't exists!\";\n}\nint main() {\n   /* Type your code here */\nstring userName, userNumber;\n    vector<string> names, phoneNumbers;\n    int n;\n    cin >> n;\n       for (int i = 0; i < n; ++i) {\n          cin >> userName >> userNumber;\n         names.push_back(userName);\n         phoneNumbers.push_back(userNumber);\n    }\n    cin >> userName;\n    cout << GetPhoneNumber(names, phoneNumbers, userName) << endl;\n   return 0;\n}\n", "class": 0, "version": 5, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   for (unsigned int i = 0; i < nameVec.size(); ++i) {\n      if (nameVec[i] == contactName) {\n         return  phoneNumberVec[i]; \n      }}\n      return \"Contact doesn't exist!\"; \n}\nint main() {\n string contactname; \n string phonenum; \n vector <string> nameV, phonenumV; \n int num; \n cin >> num; \n for (int i = 0; i < num; ++i) {\n    cin >> contactname >> phonenum; \n    nameV.push_back (contactname); \n    phonenumV.push_back(phonenum); \n }\n cin >> contactname; \n cout << GetPhoneNumber (nameV, phonenumV, contactname) << endl; \n\n   return 0;\n}\n", "class": 0, "version": 70, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n\nfor(unsigned int i=0; i<nameVec.size();++i) { if( contactName==nameVec.at(i)) { return phoneNumberVec.at(i);}\n\n}  } \n   \n\nint main() {\nvector<string> word;\nvector<string> phone;\nint num;\nint i;\nstring word4;\nstring word5;\nstring word1;\n\ncin >> num;\n\nfor (i=0; i<num; ++i) { cin >> word4; word.push_back(word4); cin >> word5; phone.push_back(word5);}\n\ncin>> word1;\n\ncout << GetPhoneNumber(word, phone, word1) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 78, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName){\n   string contact;\n   for(unsigned i = 0; i < phoneNumberVec.size(); i++){\n      if(contactName == nameVec.at(i)){\n         contact = phoneNumberVec.at(i);\n      }\n   }\n   return contact;\n}\n\n\nint main() {\n   /* Type your code here */\n   \n   int size;\n   string name;\n   string number;\n   vector<string> names;\n   vector<string> numbers;\n   cin >> size;\n   for(int i = 0; i < size; i++){\n      cin >> name;\n      cin >> number;\n      names.push_back(name);\n      numbers.push_back(number);\n   }\n   string search;\n   cin >> search;\n   string contact = GetPhoneNumber(names, numbers, search);\n   cout << contact << endl;\n\n   return 0;\n}\n", "class": 0, "version": 62, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\r\n#include <vector>\r\nusing namespace std;\r\n\r\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\r\n{\r\n   for (int i = 0; i < phoneNumberVec.size(); ++i) {\r\n      if(nameVec.at(i) == contactName) {\r\n         return phoneNumberVec.at(i);\r\n      }\r\n   }\r\n}\r\nint main() {\r\n   int size;\r\n   cin >> size;\r\n\r\n   string name, contactName, phone;\r\n   vector<string> nameVec;\r\n   vector<string> phoneNumberVec;\r\n\r\n   for (int i = 0; i < size; ++i) {\r\n      cin >> name >> phone;\r\n      nameVec.push_back(name);\r\n      phoneNumberVec.push_back(phone);\r\n   }\r\n\r\n   cin >> contactName;\r\n\r\n   cout << GetPhoneNumber(nameVec,phoneNumberVec,contactName) << endl;\r\n\r\n   return 0;\r\n}", "class": 0, "version": 187, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   string num;\n   for (unsigned int i = 0 ; i < nameVec.size() ; ++i)\n   {\n      if (nameVec.at(i) == contactName)\n      {\n         num = phoneNumberVec.at(i);\n      }\n   }\n   return num;\n}\n\nint main() {\n   int input;\n   string name;\n   cin >> input;\n   \n   vector<string> vNames(input);\n   vector<string> vNums(input);\n   \n   for (unsigned int i = 0 ; i < vNames.size() ; ++i)\n   {\n      cin >> vNames.at(i) >> vNums.at(i);\n      //cout << vNames.at(i) << \" \" << vNums.at(i) << endl;  \n   }\n   \n   cin >> name;\n   \n   cout << GetPhoneNumber(vNames, vNums, name) << endl;\n   \n\n   return 0;\n}\n", "class": 0, "version": 112, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n\nfor(int i=0; i<nameVec.size(); i++) {\n\nif(nameVec[i] == contactName)\n\nreturn phoneNumberVec[i];\n\n}\n\nreturn \"Not Available\";\n\n}\n\nint main() {\n\nint n;\n\nvector<string> nameList;\n\nvector<string> phoneList;\n\nstring name, phone;\n\n\ncin>>n;\n\n\nfor(int i=0; i<n; i++){\n\ncin>>name;\n\ncin>>phone;\n\nnameList.push_back(name);\n\nphoneList.push_back(phone);\n\n}\n\n\ncin>>name;\n\nphone = GetPhoneNumber(nameList, phoneList, name);\ncout <<phone<<endl;\n\nreturn 0;\n\n}", "class": 0, "version": 238, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   int index = 0;\n  \n   for ( unsigned int i = 0; i < nameVec.size() ; ++i)\n   {\n      if ( nameVec.at(i) == contactName)\n      {\n         index = i;\n      }\n   }\n   \n   return phoneNumberVec.at(index);\n}\n\nint main() {\n   \n   int numOfPairs;\n   vector <string> vNames;\n   string contactName;\n   \n   vector <string> vPhoneNumbers(0);\n\n   cin >> numOfPairs; //number of contacts\n   \n   vNames.resize ( numOfPairs ); \n   vPhoneNumbers.resize ( numOfPairs); \n  \n   for ( int i = 0; i < numOfPairs; ++i) //getting list with names and numbers\n   {\n      cin >> vNames.at(i);\n      \n      cin >> vPhoneNumbers.at(i);\n   }\n   \n   cin >> contactName; //which name?\n   \n   cout << GetPhoneNumber(vNames, vPhoneNumbers, contactName) << endl; //output #\n  \n\n   return 0;\n}\n", "class": 0, "version": 93, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName)\n{\n   string phoneNum;\n   unsigned int i;\n   int count = 0;\n   \n   for(i = 0; i < nameVec.size(); ++i)\n   {\n      \n      if (nameVec.at(i) == contactName)\n      {\n         phoneNum = phoneNumberVec.at(i);\n         count = count + 1;\n      }\n   }\n   if (count == 0)\n   {\n      phoneNum = \"None\";\n   }\n   \n   return phoneNum;\n}\n\nint main() {\n   int numPairs;\n   int i = 0;\n   string currString;\n   string currName;\n   string currPhone;\n   vector<string> inputName;\n   vector<string> inputPhone;\n   string matchName;\n   string finalPhone;\n   \n   cin >> numPairs;\n   \n   while( i < numPairs)\n   {\n      cin >> currString;\n      currName = currString.substr(0, currString.find(','));\n      inputName.push_back(currName);\n      currPhone = currString.substr(currString.find(',') + 1, currString.size() - 1);\n      inputPhone.push_back(currPhone);\n      i = i + 1;\n   }\n   \n   cin >> matchName;\n  \n  finalPhone = GetPhoneNumber( inputName, inputPhone, matchName);\n   \n   cout << finalPhone << endl;\n   \n   \n   \n   \n   return 0;\n}\n", "class": 0, "version": 78, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName) {\n   string answer;\n   \n   for(unsigned i = 0; i < phoneNumberVec.size(); ++i) {\n      if (nameVec.at(i) == contactName) {\n         answer = phoneNumberVec.at(i); \n         i = phoneNumberVec.size();\n      }\n   }\n   return answer;  \n}\n\nint main() {\n   int numElements;\n   string nameOfPerson;\n   string phoneNumber;\n   string userInputforPhone;\n   string returnedPhoneNum;\n   \n   cin >> numElements; \n   \n   vector<string> names(numElements);\n   \n   vector<string> phoneNums(numElements); \n   \n   for(int i = 0; i < numElements; ++i) {\n      cin >> nameOfPerson;\n      names.at(i) = nameOfPerson;\n      cin >> phoneNumber; \n      phoneNums.at(i) = phoneNumber;\n   }\n   \n   cin >> userInputforPhone; \n   \n   returnedPhoneNum = GetPhoneNumber(names, phoneNums, userInputforPhone); \n   \n   cout << returnedPhoneNum << endl;\n\n   return 0;\n}\n", "class": 0, "version": 143, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n/* Define your function here */\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)\n{\n   int i = 0;\n   for ( i = 0; i < nameVec.size(); ++i) \n   {\n      if (nameVec.at(i) == contactName)\n      {\n         return phoneNumberVec.at(i);\n      }\n   }\n}\nint main() {\n   /* Type your code here */\n int userAmountofContacts;\n unsigned int i = 0;\n string userName;\n string userPhoneNum;\n cin >> userAmountofContacts;\n vector <string> nameVec (userAmountofContacts);\n vector <string> phoneNumberVec (userAmountofContacts);\n \n for (i = 0; i < userAmountofContacts; ++i)\n {\n    cin >> userName;\n    cin >> userPhoneNum;\n    nameVec.at(i) = userName;\n    phoneNumberVec.at(i) = userPhoneNum;\n }\n \n cin >> userName;\n \n \n cout << GetPhoneNumber(nameVec, phoneNumberVec, userName) << endl;\n   return 0;\n}\n", "class": 0, "version": 282, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n// got help from erika silva\n // i got a good amount of help from her with populating the vector, but she helped explain it to me rather than copying\n\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName) { \n\nint i;\nint sum;\nsum = 0; \n\n   for (i = 0; i < nameVec.size(); ++i){\n   if (nameVec.at(i) == contactName) {\n      return phoneNumberVec.at(i);\n      sum = sum + 1;\n   }\n}\n\nif (sum == 0) {\n   return \"None\";\n}\n}\n      \n\n\nint main() {\n\nint contacts; \ncin >> contacts; \n\nstring name;\nstring phone;\n\nvector<string> nameVec;\nvector<string> phoneNumberVec;\nint i; \n\nfor (i = 0; i < contacts; ++i) { \n   cin >> name;                       // this vector has both name AND number\n   phone = name.substr(name.find(',') + 1, name.size());   // this line finds the number starting after the comma, until the end\n   phoneNumberVec.push_back(phone);                 // populate number vector\n   nameVec.push_back(name.substr(0, name.find(',')));\n   }\n\nstring contactName;\ncin >> contactName; \n\ncout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n\n      \n   \n\n   return 0;\n}\n", "class": 0, "version": 56, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber ( vector<string> nameVec, vector<string> phoneNumberVec, string contactName){\nint i;\nint n;\nstring name;\nstring phoneNum;\nstring currName;\nstring getPhoneNumber;\ncin >> n;\n\nfor ( i = 0; i < n; ++i){\n   cin >> name;\n   nameVec.push_back(name);\n   cin >> phoneNum;\n   phoneNumberVec.push_back(phoneNum);\n}\ncin >> currName;\n\nfor (i = 0; i < n ; ++i){\n   if ( nameVec.at(i) == currName){\n      getPhoneNumber = phoneNumberVec.at(i);\n   }\n}\n\nreturn getPhoneNumber;\n}\n\nint main() {\nvector<string> nameVec;\nvector<string> phoneNumberVec;\nstring contactName;\nstring getPhoneNumber;\n\ngetPhoneNumber = GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n\ncout << getPhoneNumber << endl;\n\n\n   return 0;\n}\n", "class": 0, "version": 42, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n   string phoneNum;\n   \n   for (unsigned int i = 0; i < nameVec.size(); i++) {\n      if (contactName == nameVec.at(i)) {\n         phoneNum = phoneNumberVec.at(i);\n         break;\n      }\n   }\n   \n   return phoneNum;\n}\n\nint main() {\n   int num;\n   cin >> num;\n   \n   vector<string> nameVec(num);\n   vector<string> phoneNumberVec(num);\n   string contactName;\n   \n   for (unsigned int i = 0; i < nameVec.size(); i++) {\n      cin >> nameVec.at(i) >> phoneNumberVec.at(i);\n   }\n   cin >> contactName;\n   \n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 2, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string> &nameVec, const vector<string> &phoneNumberVec, const string &contactName)   {\n   string result;\n   \n   for (unsigned int i = 0; i < nameVec.size(); ++i)   {\n      if (nameVec.at(i) == contactName)   {\n         result = phoneNumberVec.at(i);\n      }\n   }\n   \n   return result;\n}\n\nint main() {\n   vector <string> nameVec;\n   vector <string> phoneNumberVec;\n   int totalList;\n   string name;\n   string phoneNumber;\n   string contactName;\n   \n   cin >> totalList;\n   \n   for (int i = 0; i < totalList; ++i)   {\n      cin >> name;\n      nameVec.push_back(name);\n      cin >> phoneNumber;\n      phoneNumberVec.push_back(phoneNumber);\n   }\n   \n   cin >> contactName; \n   \n   cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n   return 0;\n}\n", "class": 0, "version": 95, "model": "Human"}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(const vector<string>& nameVec, const vector<string>& phoneNumberVec, string contactName){\n   string result = \"None\";\n   if (contactName != \"\"){\n      for (unsigned int i = 0; i < nameVec.size(); i++){\n         if (nameVec.at(i) == contactName){\n            result = phoneNumberVec.at(i);\n         }\n      }\n   }\n   return result;\n}\n\nint main() {\n   string userString = \"\";\n   string name = \"\";\n   string number = \"\";\n   string contactName = \"\";\n   vector<string> namVec;\n   vector<string> numberVec;\n   unsigned int num;\n   \n   cin >> num;\n   getline(cin, userString);\n   //cout << userString;\n   for (unsigned int i = 0; i < userString.size()-1; i++){\n      //cout << \"USER STRING: \" << userString.at(i) << endl;\n      if (isalpha(userString.at(i))){\n         name.push_back(userString.at(i));\n      }\n      if (userString.at(i) == ','){\n         //cout << \"i: \" << i << \" NAME: \" << name << endl;\n         namVec.push_back(name);\n         name = \"\";\n      }\n      if (isdigit(userString.at(i)) || userString.at(i) == '-'){\n         number.push_back(userString.at(i));\n      }\n      if (isspace(userString.at(i + 1)) && isalpha(userString.at(i+2))){\n         //cout << \"i: \" << i << \" NUMBER: \" << number << endl;\n         numberVec.push_back(number);\n         number = \"\";\n      }\n      if (namVec.size() == num && isalpha(userString.at(i))){\n         contactName.push_back(userString.at(i));\n      }\n   }\n   contactName.push_back(userString.at(userString.size()-1));\n   cout << GetPhoneNumber(namVec, numberVec, contactName) << endl;\n   \n   return 0;\n}\n", "class": 0, "version": 152, "model": "Human"}
