{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int num1, num2;\n  cin >> num1 >> num2;\n  cout << MaxMagnitude(num1, num2) << endl;\n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 1}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int num1, num2;\n\n  cin >> num1 >> num2;\n\n  cout << MaxMagnitude(num1, num2) << endl;\n\n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 2}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int num1, num2;\n  std::cin >> num1 >> num2;\n  std::cout << MaxMagnitude(num1, num2) << std::endl;\n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 3}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int num1, num2;\n  cin >> num1 >> num2;\n  cout << MaxMagnitude(num1, num2) << endl;\n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 4}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) >= abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    cin >> num1 >> num2;\n    cout << MaxMagnitude(num1, num2) << endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 5}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) >= abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    cin >> num1 >> num2;\n\n    cout << MaxMagnitude(num1, num2) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 6}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) >= abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    cin >> num1 >> num2;\n    cout << MaxMagnitude(num1, num2) << endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 7}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) >= abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    cin >> num1 >> num2;\n\n    cout << MaxMagnitude(num1, num2) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 8}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) >= abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    cin >> num1 >> num2;\n\n    cout << MaxMagnitude(num1, num2) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 9}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) >= abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    cin >> num1 >> num2;\n\n    cout << MaxMagnitude(num1, num2) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 10}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) >= abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    cin >> num1;\n    cin >> num2;\n\n    cout << MaxMagnitude(num1, num2) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 1}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int num1, num2;\n  std::cin >> num1 >> num2;\n  std::cout << MaxMagnitude(num1, num2) << std::endl;\n  return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 2}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) >= abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int input1;\n    int input2;\n\n    cin >> input1;\n    cin >> input2;\n\n    cout << MaxMagnitude(input1, input2) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 3}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) >= abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    cin >> num1 >> num2;\n\n    cout << MaxMagnitude(num1, num2) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 4}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) >= std::abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2) << std::endl;\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 5}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) >= abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    cin >> num1;\n    cin >> num2;\n\n    cout << MaxMagnitude(num1, num2) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 6}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) >= abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    cin >> num1 >> num2;\n\n    cout << MaxMagnitude(num1, num2) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 7}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) >= abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    cin >> num1 >> num2;\n\n    cout << MaxMagnitude(num1, num2) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 8}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int num1, num2;\n\n  cin >> num1 >> num2;\n\n  cout << MaxMagnitude(num1, num2) << endl;\n\n  return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 9}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) >= abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int input1, input2;\n\n    cin >> input1 >> input2;\n\n    cout << MaxMagnitude(input1, input2) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 10}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int num1, num2;\n  cin >> num1 >> num2;\n\n  cout << MaxMagnitude(num1, num2) << endl;\n\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 1}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int num1, num2;\n\n  cin >> num1 >> num2;\n\n  cout << MaxMagnitude(num1, num2) << endl;\n\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 2}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) >= abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    cin >> num1 >> num2;\n\n    cout << MaxMagnitude(num1, num2) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 3}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) >= abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    cin >> num1 >> num2;\n\n    cout << MaxMagnitude(num1, num2) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 4}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) >= abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int input1;\n    int input2;\n\n    cin >> input1;\n    cin >> input2;\n\n    cout << MaxMagnitude(input1, input2) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 5}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int num1, num2;\n\n  cin >> num1 >> num2;\n\n  cout << MaxMagnitude(num1, num2) << endl;\n\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 6}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int num1, num2;\n  cin >> num1 >> num2;\n  cout << MaxMagnitude(num1, num2) << endl;\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 7}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int num1;\n  int num2;\n\n  cin >> num1;\n  cin >> num2;\n\n  cout << MaxMagnitude(num1, num2) << endl;\n\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 8}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) >= abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    cin >> num1 >> num2;\n\n    cout << MaxMagnitude(num1, num2) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 9}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int num1, num2;\n\n  cin >> num1 >> num2;\n\n  cout << MaxMagnitude(num1, num2) << endl;\n\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 10}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) >= abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    cin >> num1 >> num2;\n\n    cout << MaxMagnitude(num1, num2) << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 1}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) >= abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    cin >> num1 >> num2;\n\n    cout << MaxMagnitude(num1, num2) << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 2}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int num1, num2;\n\n  cin >> num1;\n  cin >> num2;\n\n  cout << MaxMagnitude(num1, num2) << endl;\n\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 3}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) >= abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    cin >> num1 >> num2;\n\n    cout << MaxMagnitude(num1, num2) << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 4}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int input1, input2;\n\n  cin >> input1;\n  cin >> input2;\n\n  cout << MaxMagnitude(input1, input2) << endl;\n\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 5}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) > abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int input1;\n  int input2;\n\n  cin >> input1;\n  cin >> input2;\n\n  cout << MaxMagnitude(input1, input2) << endl;\n\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 6}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) >= abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    cin >> num1 >> num2;\n\n    cout << MaxMagnitude(num1, num2) << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 7}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) >= abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    cin >> num1 >> num2;\n\n    cout << MaxMagnitude(num1, num2) << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 8}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int input1;\n  int input2;\n\n  cin >> input1;\n  cin >> input2;\n\n  cout << MaxMagnitude(input1, input2) << endl;\n\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 9}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int num1, num2;\n  cin >> num1 >> num2;\n  cout << MaxMagnitude(num1, num2) << endl;\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 10}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) >= std::abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2) << std::endl;\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 1}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    int absNum1 = std::abs(num1);\n    int absNum2 = std::abs(num2);\n\n    if (absNum1 >= absNum2) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n\n    int result = MaxMagnitude(num1, num2);\n    std::cout << result << std::endl;\n\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 2}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) >= abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    cin >> num1 >> num2;\n\n    cout << MaxMagnitude(num1, num2) << endl;\n\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 3}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) >= abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    cin >> num1 >> num2;\n    cout << MaxMagnitude(num1, num2) << endl;\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 4}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) >= std::abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2) << std::endl;\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 5}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n  if (std::abs(a) >= std::abs(b)) {\n    return a;\n  } else {\n    return b;\n  }\n}\n\nint main() {\n  int num1, num2;\n  std::cin >> num1 >> num2;\n  std::cout << MaxMagnitude(num1, num2) << std::endl;\n  return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 6}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int num1, num2;\n  cin >> num1 >> num2;\n  cout << MaxMagnitude(num1, num2) << endl;\n  return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 7}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int a, b;\n  cin >> a >> b;\n  cout << MaxMagnitude(a, b) << endl;\n  return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 8}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n  if (std::abs(a) >= std::abs(b)) {\n    return a;\n  } else {\n    return b;\n  }\n}\n\nint main() {\n  int num1, num2;\n  std::cin >> num1 >> num2;\n  std::cout << MaxMagnitude(num1, num2) << std::endl;\n  return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 9}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n  if (std::abs(num1) >= std::abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int input1;\n  int input2;\n\n  std::cin >> input1;\n  std::cin >> input2;\n\n  std::cout << MaxMagnitude(input1, input2) << std::endl;\n\n  return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 10}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n  if (std::abs(a) >= std::abs(b)) {\n    return a;\n  } else {\n    return b;\n  }\n}\n\nint main() {\n  int num1, num2;\n  std::cin >> num1 >> num2;\n  std::cout << MaxMagnitude(num1, num2) << std::endl;\n  return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 1}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) >= std::abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int input1, input2;\n    std::cin >> input1 >> input2;\n    std::cout << MaxMagnitude(input1, input2) << std::endl;\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 2}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n  if (std::abs(num1) >= std::abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int input1, input2;\n  std::cin >> input1 >> input2;\n  std::cout << MaxMagnitude(input1, input2) << std::endl;\n  return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 3}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    int absNum1 = std::abs(num1);\n    int absNum2 = std::abs(num2);\n\n    if (absNum1 >= absNum2) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int number1;\n    int number2;\n\n    std::cin >> number1 >> number2;\n\n    std::cout << MaxMagnitude(number1, number2) << std::endl;\n\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 4}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int a, int b) {\n  if (abs(a) >= abs(b)) {\n    return a;\n  } else {\n    return b;\n  }\n}\n\nint main() {\n  int num1, num2;\n\n  cin >> num1 >> num2;\n\n  cout << MaxMagnitude(num1, num2) << endl;\n\n  return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 5}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) >= std::abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int input1, input2;\n    std::cin >> input1 >> input2;\n    std::cout << MaxMagnitude(input1, input2) << std::endl;\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 6}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) >= std::abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int a, b;\n    std::cin >> a >> b;\n    std::cout << MaxMagnitude(a, b) << std::endl;\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 7}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n  if (std::abs(a) >= std::abs(b)) {\n    return a;\n  } else {\n    return b;\n  }\n}\n\nint main() {\n  int num1, num2;\n\n  std::cin >> num1 >> num2;\n\n  std::cout << MaxMagnitude(num1, num2) << std::endl;\n\n  return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 8}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) >= std::abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2) << std::endl;\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 9}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int a, int b) {\n    if (abs(a) >= abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    cin >> num1 >> num2;\n    cout << MaxMagnitude(num1, num2) << endl;\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 10}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int num1, num2;\n  cin >> num1 >> num2;\n  cout << MaxMagnitude(num1, num2) << endl;\n  return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 1}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n  if (std::abs(num1) >= std::abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int num1, num2;\n  std::cin >> num1 >> num2;\n  std::cout << MaxMagnitude(num1, num2) << std::endl;\n  return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 2}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n  if (std::abs(num1) >= std::abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int num1, num2;\n  std::cin >> num1 >> num2;\n  std::cout << MaxMagnitude(num1, num2) << std::endl;\n  return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 3}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int num1, num2;\n\n  cin >> num1 >> num2;\n\n  cout << MaxMagnitude(num1, num2) << endl;\n\n  return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 4}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) >= std::abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    std::cin >> num1 >> num2;\n\n    std::cout << MaxMagnitude(num1, num2) << std::endl;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 5}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) >= std::abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2) << std::endl;\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 6}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n  if (std::abs(num1) >= std::abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int num1, num2;\n  std::cin >> num1 >> num2;\n  std::cout << MaxMagnitude(num1, num2) << std::endl;\n  return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 7}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) >= std::abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2) << std::endl;\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 8}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int num1, num2;\n\n  cin >> num1 >> num2;\n\n  cout << MaxMagnitude(num1, num2) << endl;\n\n  return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 9}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) >= std::abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2) << std::endl;\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 10}
{"problem": 1, "code": "#include <iostream>\n#include <cmath> // maybe?\n\n// Returns the value with the largest magnitude\nint MaxMagnitude(int num1, int num2) {\n  // TODO: Figure out the correct logic\n  // I think i need to use abs()\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int input1;\n  int input2;\n\n  std::cin >> input1;\n  std::cin >> input2;\n\n  // Call the function and print the result\n  std::cout << MaxMagnitude(input1, input2) << std::endl;\n\n  return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 1}
{"problem": 1, "code": "#include <iostream>\n#include <cmath> // might need this\n\nusing namespace std;\n\n// Returns the largest magnitude value between two numbers.\nint MaxMagnitude(int num1, int num2) {\n  // check if num1 is bigger\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2; // otherwise num2 is bigger\n  }\n}\n\nint main() {\n  int input1;\n  int input2;\n\n  // Get user input\n  cout << \"Enter two integers: \";\n  cin >> input1;\n  cin >> input2;\n\n  // Calculate the max magnitude\n  int maxMag = MaxMagnitude(input1, input2);\n\n  // Print the result\n  cout << maxMag << endl;\n\n  return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 2}
{"problem": 1, "code": "#include <iostream>\n#include <cmath> // maybe needed?\n\nusing namespace std;\n\n// Returns the largest magnitude value of two integers.\nint MaxMagnitude(int num1, int num2) {\n  // Check which one is bigger magnitude\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int input1;\n  int input2;\n\n  cin >> input1;\n  cin >> input2;\n\n  //Find the max magnitude\n  int maxMag = MaxMagnitude(input1, input2);\n\n  cout << maxMag << endl;\n\n  return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 3}
{"problem": 1, "code": "#include <iostream>\n#include <cmath> // maybe need this?\n\n// Function to find the max magnitude\nint MaxMagnitude(int num1, int num2) {\n  // umm, what do i do here again?\n  int abs1 = std::abs(num1);\n  int abs2 = std::abs(num2);\n\n  // compare absolute values\n  if (abs1 > abs2) {\n    return num1; // return original number\n  } else {\n    return num2; // return original number\n  }\n}\n\nint main() {\n  int input1;\n  int input2;\n\n  std::cin >> input1;\n  std::cin >> input2;\n\n  int maxMag = MaxMagnitude(input1, input2);\n\n  std::cout << maxMag << std::endl;\n\n  return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 4}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\n// Function to find the maximum magnitude between two numbers\nint MaxMagnitude(int num1, int num2) {\n    // Check if absolute value of num1 is greater than absolute value of num2\n    if (abs(num1) > abs(num2)) {\n        return num1; // Return num1 if it has a larger magnitude\n    } else {\n        return num2; // Otherwise, return num2\n    }\n}\n\nint main() {\n    int input1, input2;\n\n    // Get input from the user\n    cout << \"Enter two integers: \";\n    cin >> input1 >> input2;\n\n    // Calculate the max magnitude using the function\n    int maxMag = MaxMagnitude(input1, input2);\n\n    // Output the result\n    cout << \"The largest-magnitude value is: \" << maxMag << endl;\n\n    return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 5}
{"problem": 1, "code": "#include <iostream>\n#include <cmath> // maybe I'll need this...\n\nusing namespace std;\n\n// Function to find the max magnitude value.  Like, the one furthest from zero.\nint MaxMagnitude(int num1, int num2) {\n    // Compare the absolute values\n    if (abs(num1) > abs(num2)) {\n        return num1; // First one is further\n    } else {\n        return num2; // Second one is further or equal\n    }\n}\n\nint main() {\n    int input1;\n    int input2;\n\n    // Get the inputs\n    cin >> input1;\n    cin >> input2;\n\n    // Calculate the result\n    int result = MaxMagnitude(input1, input2);\n\n    // Print the result to console\n    cout << result << endl;\n\n    return 0; // Success!\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 6}
{"problem": 1, "code": "#include <iostream>\n#include <cmath> // for abs()\n\nusing namespace std;\n\n// returns the larger magnitude\nint MaxMagnitude(int num1, int num2) {\n  // check absolute values\n  if (abs(num1) >= abs(num2)) {\n    return num1; // return the first number\n  } else {\n    return num2; // return the second number\n  }\n}\n\nint main() {\n  int input1;\n  int input2;\n\n  // get input from the user\n  cout << \"Enter two integers: \";\n  cin >> input1 >> input2;\n\n  // find the max magnitude\n  int maxMag = MaxMagnitude(input1, input2);\n\n  // output the result\n  cout << maxMag << endl;\n\n  return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 7}
{"problem": 1, "code": "#include <iostream>\n#include <cmath> // maybe I need this?\n\nusing namespace std;\n\n// Returns the largest magnitude value\nint MaxMagnitude(int num1, int num2) {\n  // ok so what do i do here?\n  // need to compare abs values\n  // and then return the right one\n\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2; // seems right\n  }\n}\n\nint main() {\n  int input1;\n  int input2;\n\n  cin >> input1;\n  cin >> input2;\n\n  //call the function\n  int result = MaxMagnitude(input1, input2);\n\n  cout << result << endl;\n\n  return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 8}
{"problem": 1, "code": "#include <iostream>\n#include <cmath> // needed for abs()\n\nusing namespace std;\n\n// Function to return the largest magnitude value\nint MaxMagnitude(int num1, int num2) {\n  // TODO: Implement the function to return the larger magnitude.\n  // Umm, should I consider negative numbers?\n  if (abs(num1) > abs(num2)) {\n    return num1; // num1 has the larger magnitude\n  } else {\n    return num2; // otherwise num2 does\n  }\n}\n\nint main() {\n  int input1;\n  int input2;\n  \n  // Get the two numbers from the user\n  cout << \"Enter two integers: \";\n  cin >> input1 >> input2;\n\n  //Call the max magnitude func\n  int maxMag = MaxMagnitude(input1, input2);\n\n  // Print the result\n  cout << \"The largest magnitude value is: \" << maxMag << endl;\n\n  return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 9}
{"problem": 1, "code": "#include <iostream>\n#include <cmath> // maybe?\n\nusing namespace std;\n\n// Returns the max magnitude of two ints.\n// Yeah, basically.\nint MaxMagnitude(int a, int b) {\n  if (abs(a) >= abs(b)) {\n    return a;\n  } else {\n    return b;\n  }\n}\n\nint main() {\n  int num1;\n  int num2;\n\n  // Read inputs\n  cin >> num1;\n  cin >> num2;\n\n  // Get the max mag and print it\n  int maxMag = MaxMagnitude(num1, num2);\n  cout << maxMag << endl;\n\n  return 0; // success!\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 10}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int num1, num2;\n  cin >> num1 >> num2;\n\n  cout << MaxMagnitude(num1, num2) << endl;\n\n  return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 1}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) >= abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    cin >> num1 >> num2;\n    cout << MaxMagnitude(num1, num2) << endl;\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 2}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) >= std::abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2) << std::endl;\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 3}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int a, int b) {\n  if (abs(a) >= abs(b)) {\n    return a;\n  } else {\n    return b;\n  }\n}\n\nint main() {\n  int num1, num2;\n\n  cin >> num1 >> num2;\n\n  cout << MaxMagnitude(num1, num2) << endl;\n\n  return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 4}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) >= abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    cin >> num1 >> num2;\n    cout << MaxMagnitude(num1, num2) << endl;\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 5}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int num1, num2;\n\n  cin >> num1 >> num2;\n\n  cout << MaxMagnitude(num1, num2) << endl;\n\n  return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 6}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) >= abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int input1;\n    int input2;\n\n    cin >> input1 >> input2;\n\n    cout << MaxMagnitude(input1, input2) << endl;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 7}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int input1;\n  int input2;\n\n  cin >> input1 >> input2;\n\n  cout << MaxMagnitude(input1, input2) << endl;\n\n  return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 8}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int input1;\n  int input2;\n\n  cin >> input1;\n  cin >> input2;\n\n  cout << MaxMagnitude(input1, input2) << endl;\n\n  return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 9}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int num1, num2;\n\n  cin >> num1 >> num2;\n\n  cout << MaxMagnitude(num1, num2) << endl;\n\n  return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 10}
{"problem": 1, "code": "#include <iostream>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    int absNum1 = num1;\n    if (num1 < 0) {\n        absNum1 = -num1;\n    }\n\n    int absNum2 = num2;\n    if (num2 < 0) {\n        absNum2 = -num2;\n    }\n\n    if (absNum1 >= absNum2) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int input1, input2;\n\n    cin >> input1 >> input2;\n\n    cout << MaxMagnitude(input1, input2) << endl;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 1}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n  int absNum1 = std::abs(num1);\n  int absNum2 = std::abs(num2);\n\n  if (absNum1 >= absNum2) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int input1;\n  int input2;\n\n  std::cin >> input1;\n  std::cin >> input2;\n\n  int result = MaxMagnitude(input1, input2);\n  std::cout << result << std::endl;\n\n  return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 2}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n  int absNum1 = std::abs(num1);\n  int absNum2 = std::abs(num2);\n\n  if (absNum1 >= absNum2) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int input1, input2;\n\n  std::cin >> input1 >> input2;\n\n  int result = MaxMagnitude(input1, input2);\n\n  std::cout << result << std::endl;\n\n  return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 3}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    int absNum1 = abs(num1);\n    int absNum2 = abs(num2);\n\n    if (absNum1 >= absNum2) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int input1, input2;\n\n    cin >> input1 >> input2;\n\n    cout << MaxMagnitude(input1, input2) << endl;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 4}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    int absA = std::abs(a);\n    int absB = std::abs(b);\n    if (absA >= absB) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2) << std::endl;\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 5}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n  int absNum1 = std::abs(num1);\n  int absNum2 = std::abs(num2);\n\n  if (absNum1 >= absNum2) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int input1;\n  int input2;\n\n  std::cin >> input1;\n  std::cin >> input2;\n\n  int result = MaxMagnitude(input1, input2);\n\n  std::cout << result << std::endl;\n\n  return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 6}
{"problem": 1, "code": "#include <iostream>\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) >= abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint abs(int x) {\n    if (x < 0) {\n        return -x;\n    }\n    return x;\n}\n\nint main() {\n    int input1;\n    int input2;\n\n    std::cin >> input1;\n    std::cin >> input2;\n\n    int result = MaxMagnitude(input1, input2);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 7}
{"problem": 1, "code": "#include <iostream>\n\nint MaxMagnitude(int num1, int num2) {\n  int absNum1 = num1;\n  if (num1 < 0) {\n    absNum1 = -num1;\n  }\n\n  int absNum2 = num2;\n  if (num2 < 0) {\n    absNum2 = -num2;\n  }\n\n  if (absNum1 >= absNum2) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int input1;\n  int input2;\n\n  std::cin >> input1;\n  std::cin >> input2;\n\n  int result = MaxMagnitude(input1, input2);\n  std::cout << result << std::endl;\n\n  return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 8}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  int absNum1 = abs(num1);\n  int absNum2 = abs(num2);\n\n  if (absNum1 >= absNum2) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int input1;\n  int input2;\n\n  cin >> input1;\n  cin >> input2;\n\n  cout << MaxMagnitude(input1, input2) << endl;\n\n  return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 9}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    int absNum1 = std::abs(num1);\n    int absNum2 = std::abs(num2);\n\n    if (absNum1 >= absNum2) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int input1, input2;\n\n    std::cin >> input1 >> input2;\n\n    int result = MaxMagnitude(input1, input2);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 10}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 1}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n  int userSteps;\n\n  cin >> userSteps;\n\n  cout << fixed << setprecision(4) << StepsToMiles(userSteps) << endl;\n\n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 2}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n\n  cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n\n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 3}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 4}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int userSteps;\n    cin >> userSteps;\n    cout << fixed << setprecision(4) << StepsToMiles(userSteps) << endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 5}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 6}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int userSteps;\n    cin >> userSteps;\n\n    cout << fixed << setprecision(4) << StepsToMiles(userSteps) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 7}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int userSteps;\n    cin >> userSteps;\n\n    cout << fixed << setprecision(4) << StepsToMiles(userSteps) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 8}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int userSteps;\n    cin >> userSteps;\n    cout << fixed << setprecision(4) << StepsToMiles(userSteps) << endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 9}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n  int userSteps;\n  cin >> userSteps;\n  cout << fixed << setprecision(4) << StepsToMiles(userSteps) << endl;\n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 10}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 1}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n\n    cin >> steps;\n\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 2}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n  cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n  return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 3}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n   int steps;\n   cin >> steps;\n   cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n   return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 4}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n\n    double miles = StepsToMiles(steps);\n\n    cout << fixed << setprecision(4) << miles << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 5}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n  cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n  return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 6}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  double miles = static_cast<double>(userSteps) / 2000.0;\n  return miles;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n  cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n  return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 7}
{"problem": 2, "code": "#include <iostream>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n\n    double miles = StepsToMiles(steps);\n    cout << miles << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 8}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    double miles = (double)userSteps / 2000.0;\n    return miles;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n\n    double miles = StepsToMiles(steps);\n\n    cout << fixed << setprecision(4) << miles << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 9}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n\n    double miles = StepsToMiles(steps);\n\n    cout << fixed << setprecision(4) << miles << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 10}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n  \n  double miles = StepsToMiles(steps);\n  \n  cout << fixed << setprecision(4) << miles << endl;\n  \n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 1}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  double miles = static_cast<double>(userSteps) / 2000.0;\n  return miles;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n  cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 2}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    double miles = static_cast<double>(userSteps) / 2000.0;\n    return miles;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    double miles = StepsToMiles(steps);\n    cout << fixed << setprecision(4) << miles << endl;\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 3}
{"problem": 2, "code": "#include <iostream>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return (double)userSteps / 2000.0;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n  cout << StepsToMiles(steps) << endl;\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 4}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n\n  double miles = StepsToMiles(steps);\n\n  cout << fixed << setprecision(4) << miles << endl;\n\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 5}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return (double)userSteps / 2000.0;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n\n  double miles = StepsToMiles(steps);\n\n  cout << fixed << setprecision(4) << miles << endl;\n\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 6}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return (double)userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 7}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n  int userSteps;\n  cin >> userSteps;\n  cout << fixed << setprecision(4) << StepsToMiles(userSteps) << endl;\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 8}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n\n  double miles = StepsToMiles(steps);\n\n  cout << fixed << setprecision(4) << miles << endl;\n\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 9}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n\n    cin >> steps;\n\n    double miles = StepsToMiles(steps);\n\n    cout << fixed << setprecision(4) << miles << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 10}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    \n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n    \n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 1}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n  cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 2}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n\n    double miles = StepsToMiles(steps);\n\n    cout << fixed << setprecision(4) << miles << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 3}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    double miles = static_cast<double>(userSteps) / 2000.0;\n    return miles;\n}\n\nint main() {\n    int userSteps;\n\n    cin >> userSteps;\n\n    double milesWalked = StepsToMiles(userSteps);\n\n    cout << fixed << setprecision(4) << milesWalked << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 4}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 5}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n\n    double miles = StepsToMiles(steps);\n\n    cout << fixed << setprecision(4) << miles << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 6}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 7}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n\n    double miles = StepsToMiles(steps);\n\n    cout << fixed << setprecision(4) << miles << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 8}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    double miles = (double)userSteps / 2000.0;\n    return miles;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n\n    double milesWalked = StepsToMiles(steps);\n\n    cout << fixed << setprecision(4) << milesWalked << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 9}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n  cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 10}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    double miles = static_cast<double>(userSteps) / 2000.0;\n    return miles;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 1}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 2}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 3}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n\n  cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n\n  return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 4}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 5}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 6}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 7}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 8}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n\n    double miles = StepsToMiles(steps);\n\n    cout << fixed << setprecision(4) << miles << endl;\n\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 9}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n\n    cin >> steps;\n\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 10}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 1}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n\n    cin >> steps;\n\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 2}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n  cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n  return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 3}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    double miles = static_cast<double>(userSteps) / 2000.0;\n    return miles;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 4}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  double miles = static_cast<double>(userSteps) / 2000.0;\n  return miles;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n\n  double milesWalked = StepsToMiles(steps);\n\n  cout << fixed << setprecision(4) << milesWalked << endl;\n\n  return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 5}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n  int steps;\n\n  cin >> steps;\n\n  cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n\n  return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 6}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n  int steps;\n\n  cin >> steps;\n\n  cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n\n  return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 7}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  double miles = static_cast<double>(userSteps) / 2000.0;\n  return miles;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n  cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n  return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 8}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n\n    double miles = StepsToMiles(steps);\n\n    cout << fixed << setprecision(4) << miles << endl;\n\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 9}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  double miles = static_cast<double>(userSteps) / 2000.0;\n  return miles;\n}\n\nint main() {\n  int steps;\n\n  cin >> steps;\n\n  cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n\n  return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 10}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n\n  cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n\n  return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 1}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 2}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 3}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 4}
{"problem": 2, "code": "#include <iostream>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n  cout << StepsToMiles(steps) << endl;\n  return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 5}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 6}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 7}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n  cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n  return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 8}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n\n  cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n\n  return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 9}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n\n    cin >> steps;\n\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 10}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\n// Function to convert steps to miles, duh.\ndouble StepsToMiles(int userSteps) {\n    // 2000 steps per mile\n    double miles = static_cast<double>(userSteps) / 2000.0; // Cast to double for accurate division\n    return miles;\n}\n\nint main() {\n    int steps;\n    \n    // Get the number of steps from the user.  Like, ask them.\n    cout << \"Enter the number of steps: \";\n    cin >> steps;\n    \n    // Calculate the miles walked\n    double milesWalked = StepsToMiles(steps);\n    \n    // Display the result, formatted to four decimal places.  Because that's what the problem says.\n    cout << fixed << setprecision(4) << milesWalked << endl;\n\n    return 0; // good practice, i guess\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 1}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\n// Function to convert steps to miles\ndouble StepsToMiles(int userSteps) {\n  // Calculate miles based on 2000 steps per mile\n  double miles = static_cast<double>(userSteps) / 2000.0;\n  return miles;\n}\n\nint main() {\n  int steps;\n\n  // Get the number of steps from the user\n  cout << \"Enter the number of steps: \";\n  cin >> steps;\n\n  // Calculate the miles walked\n  double milesWalked = StepsToMiles(steps);\n\n  // Output the miles walked with 4 decimal places\n  cout << fixed << setprecision(4) << milesWalked << endl; // display result\n\n  return 0; // end program\n}\n\n//end of file", "class": 1, "version": 8, "model": "Gemini", "variation": 2}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\n// Function to convert steps to miles\ndouble StepsToMiles(int userSteps) {\n  // Calculate miles based on 2000 steps per mile\n  double miles = static_cast<double>(userSteps) / 2000.0;\n  return miles;\n}\n\nint main() {\n  int steps;\n\n  // Get input from the user\n  cout << \"Enter the number of steps: \";\n  cin >> steps;\n\n  // Calculate miles\n  double milesWalked = StepsToMiles(steps);\n\n  // Print the result, formatted to 4 decimal places\n  cout << fixed << setprecision(4) << milesWalked << endl;\n\n  return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 3}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\n// Converts steps to miles. I think.\ndouble StepsToMiles(int userSteps) {\n  // Calculate miles.  Hopefully.\n  double miles = (double)userSteps / 2000.0;\n  return miles;\n}\n\nint main() {\n  int steps;\n\n  // Prompt the user for steps.\n  cout << \"Enter the number of steps: \";\n  cin >> steps;\n\n  // Call the function and print the result.\n  double milesWalked = StepsToMiles(steps);\n  cout << fixed << setprecision(4) << milesWalked << endl;\n\n  return 0; // End of program. Or is it?\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 4}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\n// Function to convert steps to miles (assuming 2000 steps per mile).\ndouble StepsToMiles(int userSteps) {\n    // TODO: Implement the conversion logic.  Maybe add error handling? Nah.\n    //  Just divide by 2000 lol\n    double miles = static_cast<double>(userSteps) / 2000.0;\n    return miles; // Returns the number of miles.\n}\n\nint main() {\n    int steps;\n\n    // Get user input. Assuming the user enters an integer value.\n    cout << \"Enter the number of steps: \";\n    cin >> steps;\n\n    // Calculate miles and print to the console.\n    double milesWalked = StepsToMiles(steps);\n\n    // Output the result with specified precision (4 decimal places).\n    cout << fixed << setprecision(4) << milesWalked << endl;\n\n    return 0; // Exit the program.  Yay.\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 5}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip> //maybe needed?\n\nusing namespace std;\n\n// Okay, so we need a function to convert steps to miles\n// Considering 2000 steps = 1 mile\n\n// Returns miles walked\ndouble StepsToMiles(int userSteps) {\n    // Calculate the miles\n    double miles = (double)userSteps / 2000.0; // Cast to double to avoid integer division\n    return miles; // return the calculated miles\n}\n\nint main() {\n    int steps;\n    // Prompt user for steps\n    cout << \"Enter the number of steps: \";\n    cin >> steps;\n\n    // Call the StepsToMiles function\n    double milesWalked = StepsToMiles(steps);\n\n    // Output the result, set precision to 4 decimal places\n    cout << fixed << setprecision(4) << milesWalked << endl;\n    // Done!\n    return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 6}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip> // for setprecision\n\nusing namespace std;\n\n// Function to convert steps to miles\ndouble StepsToMiles(int userSteps) {\n  // okay, so we need to divide the steps by 2000\n  // to get the number of miles, right?\n  double miles = (double)userSteps / 2000.0; // Casting to double for accurate results.\n  return miles;\n}\n\nint main() {\n  int steps;\n\n  // Get input from the user\n  cout << \"Enter the number of steps: \";\n  cin >> steps;\n\n  // Call the function to calculate miles\n  double milesWalked = StepsToMiles(steps);\n\n  // Display the result\n  cout << fixed << setprecision(4) << milesWalked << endl; //Output to 4 decimal places.\n\n  return 0; // Program is done.\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 7}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\n// Function to convert steps to miles\ndouble StepsToMiles(int userSteps) {\n  // Um, yeah, just divide steps by 2000\n  return static_cast<double>(userSteps) / 2000.0; // Make sure it's a double\n}\n\nint main() {\n  int steps;\n\n  // Prompt the user for input\n  cout << \"Enter the number of steps: \";\n  cin >> steps;\n\n  // Calculate miles and output result\n  double miles = StepsToMiles(steps);\n  cout << fixed << setprecision(4) << miles << endl; // Formatting for 4 decimal places\n\n  return 0; // Looks good\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 8}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\n// Function to convert steps to miles\ndouble StepsToMiles(int userSteps) {\n  // Hmm, gotta remember the conversion factor\n  double miles = (double)userSteps / 2000.0; // type casting! Important!\n  return miles;\n}\n\nint main() {\n  int steps;\n\n  // Prompt user for input\n  cout << \"Enter the number of steps: \";\n  cin >> steps;\n\n  // Calculate miles walked\n  double milesWalked = StepsToMiles(steps);\n\n  // Output the result\n  cout << fixed << setprecision(4) << milesWalked << endl;  //Formatting, important!\n\n  return 0; // Standard return\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 9}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip> //for formatting\n\nusing namespace std;\n\n// Function to convert steps to miles\ndouble StepsToMiles(int userSteps) {\n  //Okay, so 2000 steps is a mile, right?\n  return (double)userSteps / 2000.0;\n}\n\nint main() {\n  int steps;\n  //Get the steps from the user\n  cout << \"Enter the number of steps: \";\n  cin >> steps;\n\n  //Calculate the miles, using that function we made\n  double miles = StepsToMiles(steps);\n\n  //Display the results\n  cout << fixed << setprecision(4) << miles << endl;\n\n  return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 10}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n\n    double miles = StepsToMiles(steps);\n\n    cout << fixed << setprecision(4) << miles << endl;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 1}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n\n    double miles = StepsToMiles(steps);\n\n    cout << fixed << setprecision(4) << miles << endl;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 2}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n\n  cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n\n  return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 3}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n\n  cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n\n  return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 4}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n\n    cin >> steps;\n\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 5}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n\n    cin >> steps;\n\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 6}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n  int userSteps;\n  cin >> userSteps;\n\n  cout << fixed << setprecision(4) << StepsToMiles(userSteps) << endl;\n\n  return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 7}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 8}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n  int steps;\n\n  cin >> steps;\n\n  cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n\n  return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 9}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n\n    cin >> steps;\n\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 10}
{"problem": 2, "code": "#include <iostream>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    double miles = (double)userSteps / 2000.0;\n    return miles;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps) << endl;\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 1}
{"problem": 2, "code": "#include <iostream>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return (double)userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n\n    cin >> steps;\n\n    cout << StepsToMiles(steps) << endl;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 2}
{"problem": 2, "code": "#include <iostream>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n  cout << StepsToMiles(steps) << endl;\n  return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 3}
{"problem": 2, "code": "#include <iostream>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    double miles = (double)userSteps / 2000.0;\n    return miles;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n\n    double miles = StepsToMiles(steps);\n    cout << miles << endl;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 4}
{"problem": 2, "code": "#include <iostream>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    double miles = (double)userSteps / 2000.0;\n    return miles;\n}\n\nint main() {\n    int steps;\n\n    cin >> steps;\n\n    double miles = StepsToMiles(steps);\n\n    cout << miles << endl;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 5}
{"problem": 2, "code": "#include <iostream>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  double miles = (double)userSteps / 2000.0;\n  return miles;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n  cout << StepsToMiles(steps) << endl;\n  return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 6}
{"problem": 2, "code": "#include <iostream>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    double miles = (double)userSteps / 2000.0;\n    return miles;\n}\n\nint main() {\n    int steps;\n\n    cin >> steps;\n\n    cout << StepsToMiles(steps) << endl;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 7}
{"problem": 2, "code": "#include <iostream>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n  cout << StepsToMiles(steps) << endl;\n  return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 8}
{"problem": 2, "code": "#include <iostream>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    double miles = (double)userSteps / 2000.0;\n    return miles;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps) << endl;\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 9}
{"problem": 2, "code": "#include <iostream>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n\n  double miles = StepsToMiles(steps);\n\n  cout << miles << endl;\n\n  return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 10}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool prevSpace = true;\n\n    for (char c : userPhrase) {\n        if (isspace(c)) {\n            prevSpace = true;\n        } else if (prevSpace && isupper(c)) {\n            acronym += c;\n            prevSpace = false;\n        } else if (prevSpace && islower(c)) {\n            prevSpace = false;\n        } else {\n            prevSpace = false;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n\n    getline(cin, userPhrase);\n\n    cout << CreateAcronym(userPhrase) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 1}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    stringstream ss(userPhrase);\n    string word;\n    string acronym = \"\";\n    while (ss >> word) {\n        if (isupper(word[0])) {\n            acronym += word[0];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    cout << CreateAcronym(phrase) << endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 2}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (char c : userPhrase) {\n        if (newWord && isupper(c)) {\n            acronym += c;\n            newWord = false;\n        } else if (isspace(c)) {\n            newWord = true;\n        } else if (newWord && islower(c)){\n            newWord = false;\n        }\n        else if (isalpha(c)){\n            newWord = false;\n        }\n\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n\n    string acronym = CreateAcronym(userPhrase);\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 3}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    stringstream ss(userPhrase);\n    string word;\n    string acronym = \"\";\n\n    while (ss >> word) {\n        if (isupper(word[0])) {\n            acronym += word[0];\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n\n    string acronym = CreateAcronym(userPhrase);\n\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 4}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool isFirstLetter = true;\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (isFirstLetter) {\n            if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n                acronym += userPhrase[i];\n            }\n            isFirstLetter = false;\n        } else if (userPhrase[i] == ' ') {\n            isFirstLetter = true;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase) << endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 5}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n    for (char c : userPhrase) {\n        if (newWord) {\n            if (isupper(c)) {\n                acronym += c;\n            }\n            newWord = false;\n        }\n        if (c == ' ') {\n            newWord = true;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase) << endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 6}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    stringstream ss(userPhrase);\n    string word;\n    string acronym = \"\";\n\n    while (ss >> word) {\n        if (isupper(word[0])) {\n            acronym += word[0];\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n\n    string acronym = CreateAcronym(userPhrase);\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 7}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool isNewWord = true;\n    for (char c : userPhrase) {\n        if (isNewWord && isupper(c)) {\n            acronym += c;\n            isNewWord = false;\n        } else if (isspace(c)) {\n            isNewWord = true;\n        } else {\n            isNewWord = false;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase) << endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 8}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n  string acronym = \"\";\n  bool newWord = true;\n\n  for (char c : userPhrase) {\n    if (newWord && isupper(c)) {\n      acronym += c;\n    }\n    newWord = (c == ' ');\n  }\n\n  return acronym;\n}\n\nint main() {\n  string userPhrase;\n  getline(cin, userPhrase);\n\n  cout << CreateAcronym(userPhrase) << endl;\n\n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 9}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool isNewWord = true;\n    for (char c : userPhrase) {\n        if (isNewWord && isupper(c)) {\n            acronym += c;\n        }\n        if (isspace(c)) {\n            isNewWord = true;\n        } else {\n            isNewWord = false;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    cout << CreateAcronym(phrase) << endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 10}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord) {\n            if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n                acronym += userPhrase[i];\n            }\n            newWord = false;\n        } else if (userPhrase[i] == ' ') {\n            newWord = true;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n\n    getline(cin, userPhrase);\n\n    string acronym = CreateAcronym(userPhrase);\n\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 1}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n            newWord = false;\n        } else if (userPhrase[i] == ' ') {\n            newWord = true;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n\n    string acronym = CreateAcronym(userPhrase);\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 2}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord) {\n            if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n                acronym += userPhrase[i];\n            }\n            newWord = false;\n        }\n        if (userPhrase[i] == ' ') {\n            newWord = true;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    cout << CreateAcronym(phrase) << endl;\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 3}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n            newWord = false;\n        } else if (userPhrase[i] == ' ') {\n            newWord = true;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n\n    string acronym = CreateAcronym(phrase);\n\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 4}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool prevSpace = true;\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (userPhrase[i] == ' ') {\n            prevSpace = true;\n        } else {\n            if (prevSpace && isupper(userPhrase[i])) {\n                acronym += userPhrase[i];\n            }\n            prevSpace = false;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    string acronym = CreateAcronym(userPhrase);\n    cout << acronym << endl;\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 5}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n            newWord = false;\n        } else if (userPhrase[i] == ' ') {\n            newWord = true;\n        } else {\n            newWord = false;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n\n    string acronym = CreateAcronym(phrase);\n\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 6}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool firstLetter = true;\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (firstLetter) {\n            if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n                acronym += userPhrase[i];\n            }\n            firstLetter = false;\n        } else if (userPhrase[i] == ' ') {\n            if (i + 1 < userPhrase.length() && userPhrase[i + 1] >= 'A' && userPhrase[i + 1] <= 'Z') {\n                acronym += userPhrase[i + 1];\n            }\n            firstLetter = true;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n\n    string acronym = CreateAcronym(phrase);\n\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 7}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord) {\n            if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n                acronym += userPhrase[i];\n            }\n            newWord = false;\n        }\n        if (userPhrase[i] == ' ') {\n            newWord = true;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase) << endl;\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 8}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n            newWord = false;\n        } else if (userPhrase[i] == ' ') {\n            newWord = true;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n\n    string acronym = CreateAcronym(userPhrase);\n\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 9}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    string word = \"\";\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (userPhrase[i] == ' ') {\n            if (word.length() > 0 && isupper(word[0])) {\n                acronym += word[0];\n            }\n            word = \"\";\n        } else {\n            word += userPhrase[i];\n        }\n    }\n\n    if (word.length() > 0 && isupper(word[0])) {\n        acronym += word[0];\n    }\n\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n\n    string acronym = CreateAcronym(phrase);\n\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 10}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n    for (char c : userPhrase) {\n        if (newWord && isupper(c)) {\n            acronym += c;\n        }\n        if (isspace(c)) {\n            newWord = true;\n        } else {\n            newWord = false;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase) << endl;\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 1}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n            newWord = false;\n        } else if (userPhrase[i] == ' ') {\n            newWord = true;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n\n    string acronym = CreateAcronym(phrase);\n\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 2}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    string word;\n    size_t pos = 0;\n    string delimiter = \" \";\n\n    while ((pos = userPhrase.find(delimiter)) != string::npos) {\n        word = userPhrase.substr(0, pos);\n        if (word[0] >= 'A' && word[0] <= 'Z') {\n            acronym += word[0];\n        }\n        userPhrase.erase(0, pos + delimiter.length());\n    }\n    if (userPhrase[0] >= 'A' && userPhrase[0] <= 'Z') {\n        acronym += userPhrase[0];\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n\n    string acronym = CreateAcronym(userPhrase);\n\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 3}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    stringstream ss(userPhrase);\n    string word;\n\n    while (ss >> word) {\n        if (isupper(word[0])) {\n            acronym += word[0];\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n\n    string acronym = CreateAcronym(userPhrase);\n\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 4}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n    for (char c : userPhrase) {\n        if (newWord) {\n            if (isupper(c)) {\n                acronym += c;\n            }\n            newWord = false;\n        }\n        if (c == ' ') {\n            newWord = true;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    cout << CreateAcronym(phrase) << endl;\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 5}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    stringstream ss(userPhrase);\n    string word;\n\n    while (ss >> word) {\n        if (isupper(word[0])) {\n            acronym += word[0];\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n\n    string acronym = CreateAcronym(userPhrase);\n\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 6}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    stringstream ss(userPhrase);\n    string word;\n    string acronym = \"\";\n\n    while (ss >> word) {\n        if (word[0] >= 'A' && word[0] <= 'Z') {\n            acronym += word[0];\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n\n    string acronym = CreateAcronym(userPhrase);\n\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 7}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n    for (char c : userPhrase) {\n        if (isalpha(c)) {\n            if (newWord) {\n                if (isupper(c)) {\n                    acronym += c;\n                }\n                newWord = false;\n            }\n        } else {\n            newWord = true;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    cout << CreateAcronym(phrase) << endl;\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 8}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    string word;\n    \n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (i == 0 || userPhrase.at(i - 1) == ' ') {\n            if (isupper(userPhrase.at(i))) {\n                acronym += userPhrase.at(i);\n            }\n        }\n    }\n    \n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n\n    getline(cin, userPhrase);\n\n    cout << CreateAcronym(userPhrase) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 9}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n            newWord = false;\n        } else if (newWord && islower(userPhrase[i])) {\n            newWord = false;\n        }\n        if (userPhrase[i] == ' ') {\n            newWord = true;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 10}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    string word = \"\";\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (userPhrase[i] == ' ') {\n            if (word.length() > 0 && isupper(word[0])) {\n                acronym += word[0];\n            }\n            word = \"\";\n        } else {\n            word += userPhrase[i];\n        }\n    }\n    if (word.length() > 0 && isupper(word[0])) {\n        acronym += word[0];\n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    cout << CreateAcronym(phrase) << endl;\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 1}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord) {\n            if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n                acronym += userPhrase[i];\n            }\n            newWord = false;\n        }\n        if (userPhrase[i] == ' ') {\n            newWord = true;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n\n    getline(cin, userPhrase);\n\n    cout << CreateAcronym(userPhrase) << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 2}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool prevSpace = true;\n\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (userPhrase[i] == ' ') {\n            prevSpace = true;\n        } else {\n            if (prevSpace) {\n                if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n                    acronym += userPhrase[i];\n                }\n                prevSpace = false;\n            }\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n\n    string acronym = CreateAcronym(phrase);\n\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 3}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord) {\n            if (isupper(userPhrase[i])) {\n                acronym += userPhrase[i];\n            }\n            newWord = false;\n        }\n        if (userPhrase[i] == ' ') {\n            newWord = true;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    cout << CreateAcronym(phrase) << endl;\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 4}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord) {\n            if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n                acronym += userPhrase[i];\n            }\n            newWord = false;\n        }\n        if (userPhrase[i] == ' ') {\n            newWord = true;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n\n    string acronym = CreateAcronym(phrase);\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 5}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    string word;\n    \n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (i == 0 || userPhrase[i - 1] == ' ') {\n            if (isupper(userPhrase[i])) {\n                acronym += userPhrase[i];\n            }\n        }\n    }\n    \n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    \n    string acronym = CreateAcronym(userPhrase);\n    \n    cout << acronym << endl;\n    \n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 6}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    string word = \"\";\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (userPhrase[i] == ' ') {\n            if (word[0] >= 'A' && word[0] <= 'Z') {\n                acronym += word[0];\n            }\n            word = \"\";\n        } else {\n            word += userPhrase[i];\n        }\n    }\n    if (word.length() > 0 && word[0] >= 'A' && word[0] <= 'Z') {\n        acronym += word[0];\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    string acronym = CreateAcronym(userPhrase);\n    cout << acronym << endl;\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 7}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord) {\n            if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n                acronym += userPhrase[i];\n            }\n            newWord = false;\n        } else if (userPhrase[i] == ' ') {\n            newWord = true;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n\n    string acronym = CreateAcronym(userPhrase);\n\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 8}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool prevSpace = true;\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (userPhrase[i] == ' ') {\n            prevSpace = true;\n        } else {\n            if (prevSpace) {\n                if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n                    acronym += userPhrase[i];\n                }\n                prevSpace = false;\n            }\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n\n    string acronym = CreateAcronym(userPhrase);\n\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 9}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord) {\n            if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n                acronym += userPhrase[i];\n            }\n            newWord = false;\n        } else if (userPhrase[i] == ' ') {\n            newWord = true;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n\n    string acronym = CreateAcronym(phrase);\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 10}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n    for (char c : userPhrase) {\n        if (newWord && isupper(c)) {\n            acronym += c;\n            newWord = false;\n        } else if (c == ' ') {\n            newWord = true;\n        } else {\n            newWord = false;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    cout << CreateAcronym(phrase) << endl;\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 1}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool prevSpace = true;\n\n    for (char c : userPhrase) {\n        if (c == ' ') {\n            prevSpace = true;\n        } else if (prevSpace && isupper(c)) {\n            acronym += c;\n            prevSpace = false;\n        } else {\n            prevSpace = false;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n\n    string acronym = CreateAcronym(phrase);\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 2}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n    for (char c : userPhrase) {\n        if (newWord && isupper(c)) {\n            acronym += c;\n        }\n        if (isspace(c)) {\n            newWord = true;\n        } else {\n            newWord = false;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    cout << CreateAcronym(phrase) << endl;\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 3}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n    for (char c : userPhrase) {\n        if (newWord && isupper(c)) {\n            acronym += c;\n            newWord = false;\n        } else if (c == ' ') {\n            newWord = true;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    cout << CreateAcronym(phrase) << endl;\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 4}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n    for (char c : userPhrase) {\n        if (newWord && isupper(c)) {\n            acronym += c;\n            newWord = false;\n        } else if (c == ' ') {\n            newWord = true;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    cout << CreateAcronym(phrase) << endl;\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 5}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (char c : userPhrase) {\n        if (newWord && isupper(c)) {\n            acronym += c;\n            newWord = false;\n        } else if (c == ' ') {\n            newWord = true;\n        } else {\n            newWord = false;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    cout << CreateAcronym(phrase) << endl;\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 6}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n            newWord = false;\n        } else if (userPhrase[i] == ' ') {\n            newWord = true;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n\n    string acronym = CreateAcronym(userPhrase);\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 7}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n    for (char c : userPhrase) {\n        if (isalpha(c)) {\n            if (newWord) {\n                if (isupper(c)) {\n                    acronym += c;\n                }\n                newWord = false;\n            }\n        } else {\n            newWord = true;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    cout << CreateAcronym(phrase) << endl;\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 8}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (char c : userPhrase) {\n        if (newWord && isupper(c)) {\n            acronym += c;\n        }\n\n        if (isspace(c)) {\n            newWord = true;\n        } else {\n            newWord = false;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n\n    cout << CreateAcronym(phrase) << endl;\n\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 9}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n  string acronym = \"\";\n  bool newWord = true;\n  for (char c : userPhrase) {\n    if (newWord) {\n      if (c >= 'A' && c <= 'Z') {\n        acronym += c;\n      }\n      newWord = false;\n    } else if (c == ' ') {\n      newWord = true;\n    }\n  }\n  return acronym;\n}\n\nint main() {\n  string phrase;\n  getline(cin, phrase);\n  cout << CreateAcronym(phrase) << endl;\n  return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 10}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n  string acronym = \"\";\n  stringstream ss(userPhrase);\n  string word;\n\n  while (ss >> word) {\n    if (word[0] >= 'A' && word[0] <= 'Z') {\n      acronym += word[0];\n    }\n  }\n\n  return acronym;\n}\n\nint main() {\n  string userPhrase;\n  getline(cin, userPhrase);\n  cout << CreateAcronym(userPhrase) << endl;\n\n  return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 1}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n  string acronym = \"\";\n  stringstream ss(userPhrase);\n  string word;\n\n  while (ss >> word) {\n    if (word[0] >= 'A' && word[0] <= 'Z') {\n      acronym += word[0];\n    }\n  }\n\n  return acronym;\n}\n\nint main() {\n  string userPhrase;\n\n  getline(cin, userPhrase);\n\n  cout << CreateAcronym(userPhrase) << endl;\n\n  return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 2}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    stringstream ss(userPhrase);\n    string word;\n\n    while (ss >> word) {\n        if (isupper(word[0])) {\n            acronym += word[0];\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n\n    cout << CreateAcronym(phrase) << endl;\n\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 3}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n  string acronym = \"\";\n  stringstream ss(userPhrase);\n  string word;\n\n  while (ss >> word) {\n    if (word[0] >= 'A' && word[0] <= 'Z') {\n      acronym += word[0];\n    }\n  }\n\n  return acronym;\n}\n\nint main() {\n  string userPhrase;\n  getline(cin, userPhrase);\n\n  string acronym = CreateAcronym(userPhrase);\n  cout << acronym << endl;\n\n  return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 4}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    stringstream ss(userPhrase);\n    string word;\n\n    while (ss >> word) {\n        if (isupper(word[0])) {\n            acronym += word[0];\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n\n    string acronym = CreateAcronym(userPhrase);\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 5}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n    for (char c : userPhrase) {\n        if (newWord && isupper(c)) {\n            acronym += c;\n            newWord = false;\n        } else if (isspace(c)) {\n            newWord = true;\n        } else if (newWord && islower(c))\n        {\n            newWord = false;\n        }\n        \n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    cout << CreateAcronym(phrase) << endl;\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 6}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n    for (char c : userPhrase) {\n        if (newWord && isupper(c)) {\n            acronym += c;\n            newWord = false;\n        } else if (isspace(c)) {\n            newWord = true;\n        } else if (newWord && islower(c)) {\n            newWord = false;\n        } else if (isalpha(c)) {\n            newWord = false;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    cout << CreateAcronym(phrase) << endl;\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 7}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (char c : userPhrase) {\n        if (newWord) {\n            if (isupper(c)) {\n                acronym += c;\n            }\n            newWord = false;\n        }\n        if (c == ' ') {\n            newWord = true;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n\n    string acronym = CreateAcronym(phrase);\n\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 8}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n  string acronym = \"\";\n  bool prevSpace = true;\n\n  for (char c : userPhrase) {\n    if (isspace(c)) {\n      prevSpace = true;\n    } else if (prevSpace && isupper(c)) {\n      acronym += c;\n      prevSpace = false;\n    } else if (prevSpace && islower(c)) {\n        prevSpace = false;\n    }\n    else {\n      prevSpace = false;\n    }\n  }\n\n  return acronym;\n}\n\nint main() {\n  string userPhrase;\n  getline(cin, userPhrase);\n\n  string acronym = CreateAcronym(userPhrase);\n\n  cout << acronym << endl;\n\n  return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 9}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    stringstream ss(userPhrase);\n    string word;\n\n    while (ss >> word) {\n        if (isupper(word[0])) {\n            acronym += word[0];\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n\n    string acronym = CreateAcronym(phrase);\n\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 10}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n            newWord = false;\n        } else if (userPhrase[i] == ' ') {\n            newWord = true;\n        } else {\n            newWord = (isupper(userPhrase[i]));\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n\n    string acronym = CreateAcronym(userPhrase);\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 1}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n            newWord = false;\n        } else if (userPhrase[i] == ' ') {\n            newWord = true;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n\n    string acronym = CreateAcronym(userPhrase);\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 2}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (char c : userPhrase) {\n        if (newWord) {\n            if (c >= 'A' && c <= 'Z') {\n                acronym += c;\n            }\n            newWord = false;\n        }\n        if (c == ' ') {\n            newWord = true;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n\n    string acronym = CreateAcronym(phrase);\n\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 3}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord) {\n            if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n                acronym += userPhrase[i];\n            }\n            newWord = false;\n        }\n        if (userPhrase[i] == ' ') {\n            newWord = true;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    cout << CreateAcronym(phrase) << endl;\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 4}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord && isalpha(userPhrase[i])) {\n            if (isupper(userPhrase[i])) {\n                acronym += userPhrase[i];\n            }\n            newWord = false;\n        } else if (userPhrase[i] == ' ') {\n            newWord = true;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n\n    string acronym = CreateAcronym(userPhrase);\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 5}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord && isalpha(userPhrase[i])) {\n            if (isupper(userPhrase[i])) {\n                acronym += userPhrase[i];\n            }\n            newWord = false;\n        }\n        if (userPhrase[i] == ' ') {\n            newWord = true;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n\n    string acronym = CreateAcronym(userPhrase);\n\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 6}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n  string acronym = \"\";\n  bool newWord = true;\n  for (char c : userPhrase) {\n    if (isalpha(c)) {\n      if (newWord) {\n        if (isupper(c)) {\n          acronym += c;\n        }\n        newWord = false;\n      }\n    } else {\n      newWord = true;\n    }\n  }\n  return acronym;\n}\n\nint main() {\n  string phrase;\n  getline(cin, phrase);\n  cout << CreateAcronym(phrase) << endl;\n  return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 7}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n            newWord = false;\n        } else if (isspace(userPhrase[i])) {\n            newWord = true;\n        } else if (isupper(userPhrase[i])){\n            newWord = false;\n        } else {\n            newWord = false;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n\n    getline(cin, userPhrase);\n\n    cout << CreateAcronym(userPhrase) << endl;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 8}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n    for (char c : userPhrase) {\n        if (newWord && isupper(c)) {\n            acronym += c;\n        }\n        if (isspace(c)) {\n            newWord = true;\n        } else {\n            newWord = false;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase) << endl;\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 9}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n  string acronym = \"\";\n  bool newWord = true;\n\n  for (int i = 0; i < userPhrase.length(); ++i) {\n    if (newWord && isupper(userPhrase[i])) {\n      acronym += userPhrase[i];\n      newWord = false;\n    } else if (userPhrase[i] == ' ') {\n      newWord = true;\n    }\n  }\n\n  return acronym;\n}\n\nint main() {\n  string userPhrase;\n  getline(cin, userPhrase);\n\n  string acronym = CreateAcronym(userPhrase);\n  cout << acronym << endl;\n\n  return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 10}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <sstream> //for splitting string\n\nusing namespace std;\n\n// Creates an acronym from a phrase.\n// Input: A string representing the phrase.\n// Output: A string representing the acronym.\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    stringstream ss(userPhrase);\n    string word;\n\n    // Loop through each word in the phrase\n    while (ss >> word) {\n        // Check if the first letter is uppercase\n        if (isupper(word[0])) {\n            // Add the first letter to the acronym\n            acronym += word[0];\n        }\n        //else do nothing\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    \n    //Get input from user\n    getline(cin, userPhrase);\n    \n    //Create the acronym\n    string acronym = CreateAcronym(userPhrase);\n\n    //Output the acronym\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 1}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\n// Function to create an acronym from a phrase.\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    stringstream ss(userPhrase);\n    string word;\n\n    // Iterate through each word in the phrase.\n    while (ss >> word) {\n        // Check if the first letter is uppercase.\n        if (isupper(word[0])) {\n            acronym += word[0];\n        } // else, skip it!\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n\n    // Get the phrase from the user.\n    getline(cin, userPhrase);\n\n    // Create the acronym.\n    string acronym = CreateAcronym(userPhrase);\n\n    // Print the acronym.\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 2}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\n// Creates an acronym from a given phrase.\nstring CreateAcronym(string userPhrase) {\n  string acronym = \"\";\n  stringstream ss(userPhrase);\n  string word;\n  // Loop through each word in the phrase.\n  while (ss >> word) {\n    // Check if the first character is uppercase.\n    if (isupper(word[0])) {\n      acronym += word[0]; // Append to acronym\n    }\n    // else {\n    //   // Do nothing. lowercase..\n    // }\n  }\n  return acronym;\n}\n\nint main() {\n  string phrase;\n\n  // Get the phrase from the user.\n  getline(cin, phrase);\n\n  // Create the acronym.\n  string acronym = CreateAcronym(phrase);\n\n  // Print the acronym.\n  cout << acronym << endl;\n\n  return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 3}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\n// Function to create an acronym from a phrase\nstring CreateAcronym(string userPhrase) {\n  string acronym = \"\";\n  stringstream ss(userPhrase);\n  string word;\n\n  // Loop through each word in the phrase\n  while (ss >> word) {\n    // Check if the first letter is uppercase\n    if (isupper(word[0])) {\n      acronym += word[0]; // Add the first letter to the acronym\n    } else {\n      //dont do anything\n    }\n  }\n\n  return acronym; // Return the acronym\n}\n\nint main() {\n  string userPhrase;\n\n  // Prompt the user to enter a phrase\n  cout << \"Enter a phrase: \";\n  getline(cin, userPhrase); // Read the entire line\n\n  // Create the acronym\n  string acronym = CreateAcronym(userPhrase);\n\n  // Display the acronym\n  cout << \"Acronym: \" << acronym << endl;\n\n  return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 4}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\n// Function to create an acronym from a phrase\nstring CreateAcronym(string userPhrase) {\n  // Initialize the acronym string\n  string acronym = \"\";\n\n  // Create a stringstream from the userPhrase\n  stringstream ss(userPhrase);\n\n  // String to hold each word\n  string word;\n\n  // Loop through each word in the phrase\n  while (ss >> word) {\n    // Check if the first letter is uppercase\n    if (isupper(word[0])) {\n      // Append the first letter to the acronym\n      acronym += word[0];\n    } //else {\n    //  cout << \"skipping: \" << word << endl;\n    //}\n  }\n\n  // Return the acronym\n  return acronym;\n}\n\nint main() {\n  // Declare a string variable to store the user's phrase\n  string userPhrase;\n\n  // Prompt the user to enter a phrase\n  cout << \"Enter a phrase: \";\n  getline(cin, userPhrase); // Use getline to handle spaces in the phrase\n\n  // Create the acronym\n  string acronym = CreateAcronym(userPhrase);\n\n  // Output the acronym\n  cout << \"Acronym: \" << acronym << endl;\n\n  // Return 0 to indicate successful execution\n  return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 5}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <sstream> // Need this for stringstream!\n\nusing namespace std;\n\n// Function to create an acronym.\n// Arguments: a string representing the phrase.\n// Returns: a string representing the acronym.\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    stringstream ss(userPhrase);\n    string word;\n\n    while (ss >> word) {\n        // Check if the first letter is uppercase.\n        if (word[0] >= 'A' && word[0] <= 'Z') {\n            acronym += word[0]; // Append the first letter to the acronym.\n        }\n        // else, do nothing? or maybe a comment here?\n    }\n\n    return acronym;\n}\n\n\nint main() {\n    string userPhrase;\n\n    // Prompt the user for a phrase.\n    cout << \"Enter a phrase: \";\n    getline(cin, userPhrase); // Use getline to handle spaces in the input.\n\n    // Create the acronym.\n    string acronym = CreateAcronym(userPhrase);\n\n    // Print the acronym.\n    cout << \"Acronym: \" << acronym << endl;\n\n    return 0; // Exit successfully.\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 6}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\n// TODO: Add error handling for empty input string\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    stringstream ss(userPhrase);\n    string word;\n\n    // Iterate through each word in the phrase\n    while (ss >> word) {\n        // Check if the first character is uppercase\n        if (isupper(word[0])) {\n            acronym += word[0];\n        } // else do nothing\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    //Prompt the user to enter a phrase\n    cout << \"Enter a phrase: \";\n    getline(cin, userPhrase);\n\n    //Create the acronym using the CreateAcronym function\n    string acronym = CreateAcronym(userPhrase);\n\n    //Output the acronym\n    cout << \"Acronym: \" << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 7}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\n// Function to create an acronym from a phrase\nstring CreateAcronym(string userPhrase) {\n  string acronym = \"\";\n  stringstream ss(userPhrase);\n  string word;\n\n  // Loop thru each word in the phrase\n  while (ss >> word) {\n    // Check if the first letter is uppercase\n    if (isupper(word[0])) {\n      acronym += word[0]; // Add the first letter to the acronym\n    }\n     // else, do nothing - don't add lowercase first letters\n  }\n\n  return acronym;\n}\n\nint main() {\n  string userPhrase;\n\n  // Get the phrase from the user\n  cout << \"Enter a phrase: \";\n  getline(cin, userPhrase);\n\n  // Create the acronym\n  string acronym = CreateAcronym(userPhrase);\n\n  // Print the acronym\n  cout << \"Acronym: \" << acronym << endl;\n\n  return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 8}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <vector>\n\nusing namespace std;\n\n// Function to create an acronym from a phrase.\nstring CreateAcronym(string userPhrase) {\n  string acronym = \"\"; // Initialize an empty string for the acronym\n  stringstream ss(userPhrase); // Use stringstream to split the phrase into words\n  string word;\n\n  // Iterate through each word in the phrase\n  while (ss >> word) {\n    // Check if the first letter of the word is uppercase\n    if (isupper(word[0])) {\n      acronym += word[0]; // Append the first letter to the acronym\n    }\n    // Otherwise, ignore the word\n  }\n\n  return acronym; // Return the generated acronym\n}\n\n//This is the main function. Entry point for the program.\nint main() {\n  string userPhrase;\n\n  // Get the phrase from the user\n  getline(cin, userPhrase);\n\n  // Create the acronym\n  string acronym = CreateAcronym(userPhrase);\n\n  // Print the acronym to the console\n  cout << acronym << endl;\n\n  return 0; // Indicate successful execution\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 9}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <sstream> // For stringstream\n\nusing namespace std;\n\n// Function to create an acronym from a phrase.  Pretty simple.\nstring CreateAcronym(string userPhrase) {\n  string acronym = \"\";\n  stringstream ss(userPhrase); // Use stringstream to easily iterate through words\n  string word;\n\n  while (ss >> word) {\n      // Check if the first letter is uppercase\n      if (word[0] >= 'A' && word[0] <= 'Z') {\n          acronym += word[0]; // Append the first letter to the acronym\n      }\n      // otherwise ignore it.  should probably handle empty strings better\n  }\n\n  return acronym;\n}\n\nint main() {\n    string userPhrase;\n\n    // Get the phrase from the user\n    getline(cin, userPhrase); // Important for phrases with spaces\n\n    // Create the acronym\n    string acronym = CreateAcronym(userPhrase);\n\n    // Print the acronym\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 10}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    stringstream ss(userPhrase);\n    string word;\n\n    while (ss >> word) {\n        if (isupper(word[0])) {\n            acronym += word[0];\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n\n    string acronym = CreateAcronym(userPhrase);\n\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 1}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    stringstream ss(userPhrase);\n    string word;\n\n    while (ss >> word) {\n        if (isupper(word[0])) {\n            acronym += word[0];\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n\n    string acronym = CreateAcronym(userPhrase);\n\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 2}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool firstLetter = true;\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (firstLetter && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n            firstLetter = false;\n        } else if (userPhrase[i] == ' ') {\n            firstLetter = true;\n        } else if (firstLetter && islower(userPhrase[i]))\n        {\n            firstLetter = false;\n        }\n        else if (firstLetter && isupper(userPhrase[i]))\n        {\n            acronym += userPhrase[i];\n            firstLetter = false;\n        }\n        \n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase) << endl;\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 3}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    string word = \"\";\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (userPhrase[i] == ' ') {\n            if (word.length() > 0 && isupper(word[0])) {\n                acronym += word[0];\n            }\n            word = \"\";\n        } else {\n            word += userPhrase[i];\n        }\n    }\n    if (word.length() > 0 && isupper(word[0])) {\n        acronym += word[0];\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase) << endl;\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 4}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    stringstream ss(userPhrase);\n    string word;\n    string acronym = \"\";\n\n    while (ss >> word) {\n        if (word[0] >= 'A' && word[0] <= 'Z') {\n            acronym += word[0];\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n\n    getline(cin, userPhrase);\n\n    cout << CreateAcronym(userPhrase) << endl;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 5}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    string word;\n    size_t pos = 0;\n    string delimiter = \" \";\n\n    while ((pos = userPhrase.find(delimiter)) != string::npos) {\n        word = userPhrase.substr(0, pos);\n        if (word[0] >= 'A' && word[0] <= 'Z') {\n            acronym += word[0];\n        }\n        userPhrase.erase(0, pos + delimiter.length());\n    }\n\n    if (userPhrase[0] >= 'A' && userPhrase[0] <= 'Z') {\n        acronym += userPhrase[0];\n    }\n\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n\n    string acronym = CreateAcronym(phrase);\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 6}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (char c : userPhrase) {\n        if (newWord && isupper(c)) {\n            acronym += c;\n            newWord = false;\n        } else if (isspace(c)) {\n            newWord = true;\n        } else if (newWord && islower(c)) {\n            newWord = false;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n\n    string acronym = CreateAcronym(userPhrase);\n\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 7}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    string word;\n    size_t pos = 0;\n    string delimiter = \" \";\n\n    while ((pos = userPhrase.find(delimiter)) != string::npos) {\n        word = userPhrase.substr(0, pos);\n        if (word[0] >= 'A' && word[0] <= 'Z') {\n            acronym += word[0];\n        }\n        userPhrase.erase(0, pos + delimiter.length());\n    }\n\n    if (userPhrase[0] >= 'A' && userPhrase[0] <= 'Z') {\n        acronym += userPhrase[0];\n    }\n\n    return acronym;\n}\n\nint main() {\n    string phrase;\n\n    getline(cin, phrase);\n\n    cout << CreateAcronym(phrase) << endl;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 8}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    stringstream ss(userPhrase);\n    string word;\n\n    while (ss >> word) {\n        if (isupper(word[0])) {\n            acronym += word[0];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n\n    string acronym = CreateAcronym(phrase);\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 9}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    string word;\n    size_t pos = 0;\n    string delimiter = \" \";\n    \n    while ((pos = userPhrase.find(delimiter)) != string::npos) {\n        word = userPhrase.substr(0, pos);\n        if (word[0] >= 'A' && word[0] <= 'Z') {\n            acronym += word[0];\n        }\n        userPhrase.erase(0, pos + delimiter.length());\n    }\n    \n    if (userPhrase[0] >= 'A' && userPhrase[0] <= 'Z') {\n        acronym += userPhrase[0];\n    }\n    \n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    \n    cout << CreateAcronym(phrase) << endl;\n    \n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 10}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (userPhrase[i] == ' ') {\n            newWord = true;\n        } else {\n            if (newWord) {\n                if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n                    acronym += userPhrase[i];\n                }\n                newWord = false;\n            }\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n\n    string acronym = CreateAcronym(phrase);\n\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 1}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord) {\n            if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n                acronym += userPhrase[i];\n            }\n            newWord = false;\n        } else if (userPhrase[i] == ' ') {\n            newWord = true;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    cout << CreateAcronym(phrase) << endl;\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 2}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool lastWasSpace = true;\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (userPhrase[i] == ' ') {\n            lastWasSpace = true;\n        } else {\n            if (lastWasSpace) {\n                if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n                    acronym += userPhrase[i];\n                }\n                lastWasSpace = false;\n            }\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase) << endl;\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 3}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool prevWasSpace = true;\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (userPhrase[i] == ' ') {\n            prevWasSpace = true;\n        } else {\n            if (prevWasSpace) {\n                if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n                    acronym += userPhrase[i];\n                }\n                prevWasSpace = false;\n            }\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    string acronym = CreateAcronym(userPhrase);\n    cout << acronym << endl;\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 4}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord) {\n            if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n                acronym += userPhrase[i];\n            }\n            newWord = false;\n        } else if (userPhrase[i] == ' ') {\n            newWord = true;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n\n    string acronym = CreateAcronym(phrase);\n\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 5}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool firstWord = true;\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (firstWord) {\n            if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n                acronym += userPhrase[i];\n            }\n            firstWord = false;\n        } else if (userPhrase[i] == ' ') {\n            if (i + 1 < userPhrase.length() && userPhrase[i + 1] >= 'A' && userPhrase[i + 1] <= 'Z') {\n                acronym += userPhrase[i + 1];\n            }\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    cout << CreateAcronym(phrase) << endl;\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 6}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (newWord) {\n            if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n                acronym += userPhrase[i];\n            }\n            newWord = false;\n        } else if (userPhrase[i] == ' ') {\n            newWord = true;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n\n    string acronym = CreateAcronym(phrase);\n\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 7}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool prevSpace = true;\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (userPhrase[i] == ' ') {\n            prevSpace = true;\n        } else {\n            if (prevSpace) {\n                if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n                    acronym += userPhrase[i];\n                }\n                prevSpace = false;\n            }\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    string acronym = CreateAcronym(phrase);\n    cout << acronym << endl;\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 8}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool prevSpace = true;\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (userPhrase[i] == ' ') {\n            prevSpace = true;\n        } else {\n            if (prevSpace) {\n                if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n                    acronym += userPhrase[i];\n                }\n                prevSpace = false;\n            }\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    cout << CreateAcronym(phrase) << endl;\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 9}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool firstWord = true;\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (firstWord) {\n            if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n                acronym += userPhrase[i];\n            }\n            firstWord = false;\n        } else if (userPhrase[i] == ' ') {\n            if (i + 1 < userPhrase.length() && userPhrase[i + 1] >= 'A' && userPhrase[i + 1] <= 'Z') {\n                acronym += userPhrase[i + 1];\n            }\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    cout << CreateAcronym(phrase) << endl;\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 10}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (char c : userString) {\n        if (c == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 1}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (char c : userString) {\n        if (c == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    getline(cin >> ws, userString);\n    userChar = userString[0];\n    userString = userString.substr(2);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 2}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (char c : userString) {\n        if (c == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 3}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (char c : userString) {\n    if (c == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  cin.ignore();\n  getline(cin, userString);\n\n  cout << CountCharacters(userChar, userString) << endl;\n\n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 4}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (char c : userString) {\n        if (c == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    getline(cin, userString);\n    userChar = userString[0];\n    userString = userString.substr(2);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 5}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (char c : userString) {\n    if (c == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  getline(cin >> ws, userString);\n  userChar = userString[0];\n  userString = userString.substr(2);\n  \n\n  cout << CountCharacters(userChar, userString) << endl;\n\n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 6}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (char c : userString) {\n        if (c == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 7}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (char c : userString) {\n        if (c == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 8}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (char c : userString) {\n        if (c == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 9}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (int i = 0; i < userString.length(); ++i) {\n    if (userString[i] == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  cin.ignore(); \n  getline(cin, userString);\n\n  cout << CountCharacters(userChar, userString) << endl;\n\n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 10}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (int i = 0; i < userString.length(); ++i) {\n    if (userString[i] == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  getline(cin >> ws, userString);\n\n  cout << CountCharacters(userChar, userString) << endl;\n\n  return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 1}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin >> ws, userString);\n\n    int result = CountCharacters(userChar, userString);\n\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 2}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin >> ws, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 3}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin >> ws, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 4}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 5}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    getline(cin, userString);\n\n    userChar = userString[0];\n    userString = userString.substr(2);\n\n    cout << CountCharacters(userChar, userString) << endl;\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 6}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 7}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin >> ws, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 8}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    getline(cin >> ws, userString);\n    userChar = userString[0];\n    userString = userString.substr(2);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 9}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 10}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    getline(cin, userString);\n    userChar = userString[0];\n    userString = userString.substr(2);\n    cout << CountCharacters(userChar, userString) << endl;\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 1}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 2}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin >> ws, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 3}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin >> ws, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 4}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 5}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString.at(i) == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    getline(cin, userString);\n    userChar = userString.at(0);\n    userString = userString.substr(2);\n    \n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 6}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (int i = 0; i < userString.length(); ++i) {\n    if (userString[i] == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  cin.ignore(); \n  getline(cin, userString);\n\n  cout << CountCharacters(userChar, userString) << endl;\n\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 7}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (int i = 0; i < userString.length(); ++i) {\n    if (userString[i] == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  getline(cin >> ws, userString);\n\n  cout << CountCharacters(userChar, userString) << endl;\n\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 8}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin >> ws, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 9}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (int i = 0; i < userString.length(); ++i) {\n    if (userString[i] == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  getline(cin >> ws, userString);\n\n  cout << CountCharacters(userChar, userString) << endl;\n\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 10}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 1}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (int i = 0; i < userString.length(); ++i) {\n    if (userString[i] == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  cin.ignore(); \n  getline(cin, userString);\n\n  int result = CountCharacters(userChar, userString);\n  cout << result << endl;\n\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 2}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (int i = 0; i < userString.length(); ++i) {\n    if (userString[i] == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  getline(cin >> ws, userString);\n\n  cout << CountCharacters(userChar, userString) << endl;\n\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 3}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 4}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 5}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 6}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (int i = 0; i < userString.length(); ++i) {\n    if (userString[i] == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char inputChar;\n  string inputString;\n\n  cin >> inputChar;\n  cin.ignore(); \n  getline(cin, inputString);\n\n  int charCount = CountCharacters(inputChar, inputString);\n\n  cout << charCount << endl;\n\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 7}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 8}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 9}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (int i = 0; i < userString.length(); ++i) {\n    if (userString[i] == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  cin.ignore(); \n  getline(cin, userString);\n\n  int result = CountCharacters(userChar, userString);\n  cout << result << endl;\n\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 10}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 1}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 2}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 3}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin >> ws;\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 4}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin >> ws;\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 5}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 6}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (int i = 0; i < userString.length(); ++i) {\n    if (userString[i] == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char inputChar;\n  string inputString;\n\n  cin >> inputChar;\n  cin.ignore(); \n  getline(cin, inputString);\n\n  cout << CountCharacters(inputChar, inputString) << endl;\n\n  return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 7}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 8}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 9}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin >> ws; \n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 10}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (int i = 0; i < userString.length(); ++i) {\n    if (userString[i] == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  cin.ignore(); \n  getline(cin, userString);\n\n  cout << CountCharacters(userChar, userString) << endl;\n\n  return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 1}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (char c : userString) {\n    if (c == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  cin.ignore();\n  getline(cin, userString);\n\n  cout << CountCharacters(userChar, userString) << endl;\n\n  return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 2}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (int i = 0; i < userString.length(); ++i) {\n    if (userString[i] == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  cin.ignore(); \n  getline(cin, userString);\n\n  cout << CountCharacters(userChar, userString) << endl;\n\n  return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 3}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (char c : userString) {\n        if (c == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 4}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (char c : userString) {\n    if (c == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  cin.ignore(); \n  getline(cin, userString);\n\n  int charCount = CountCharacters(userChar, userString);\n  cout << charCount << endl;\n\n  return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 5}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 6}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin >> ws, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 7}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (int i = 0; i < userString.length(); ++i) {\n    if (userString[i] == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  getline(cin, userString);\n  userChar = userString[0];\n  userString = userString.substr(2);\n\n  cout << CountCharacters(userChar, userString) << endl;\n\n  return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 8}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (char c : userString) {\n    if (c == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  cin.ignore();\n  getline(cin, userString);\n\n  cout << CountCharacters(userChar, userString) << endl;\n\n  return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 9}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 10}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin >> ws, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 1}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (int i = 0; i < userString.length(); ++i) {\n    if (userString[i] == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  cin.ignore(); \n  getline(cin, userString);\n\n  int result = CountCharacters(userChar, userString);\n  cout << result << endl;\n\n  return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 2}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin >> ws, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 3}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 4}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (int i = 0; i < userString.length(); ++i) {\n    if (userString[i] == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  cin.ignore();\n  getline(cin, userString);\n\n  cout << CountCharacters(userChar, userString) << endl;\n\n  return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 5}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    getline(cin, userString);\n    userChar = userString[0];\n    userString = userString.substr(2);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 6}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 7}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (int i = 0; i < userString.length(); ++i) {\n    if (userString[i] == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  cin.ignore(); \n  getline(cin, userString);\n\n  cout << CountCharacters(userChar, userString) << endl;\n\n  return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 8}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 9}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 10}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\n//counts chars in a string. pretty simple.\nint CountCharacters(char userChar, string userString) {\n   int count = 0;\n   for (int i = 0; i < userString.length(); ++i) {\n      if (userString[i] == userChar) {\n         count++;\n      }\n   }\n   return count;\n}\n\nint main() {\n   char userChar;\n   string userString;\n\n   cin >> userChar;\n   //cin.ignore(); // Consume the newline character\n   getline(cin >> ws, userString); // Read the whole line after the character. important!\n\n   // Call the function and print the result\n   cout << CountCharacters(userChar, userString) << endl;\n\n   return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 1}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\n//counts chars in a string. duh\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  //loop through the string\n  for (int i = 0; i < userString.length(); ++i) {\n    //check if the char matches\n    if (userString.at(i) == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  //cin >> userString; //this is wrong. only reads one word!\n\n  getline(cin, userString); //reads the whole line\n  // remove the leading space\n    if (!userString.empty() && userString[0] == ' ') {\n        userString.erase(0, 1);\n    }\n  \n  \n  int result = CountCharacters(userChar, userString);\n  cout << result << endl;\n\n  return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 2}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\n// Counts the number of times a char appears in a string.\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  // iterate through the string\n  for (int i = 0; i < userString.length(); ++i) {\n    // check if the char matches\n    if (userString.at(i) == userChar) {\n      count++; // increment the count\n    }\n  }\n  return count; // return the count\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  cin.ignore(); // consume the newline character\n  getline(cin, userString);\n\n  int result = CountCharacters(userChar, userString);\n\n  cout << result << endl;\n\n  return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 3}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\n// okay so this is the count characters function\n// it takes a char and a string and returns the number of times the char appears in the string\n// like magic\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    // loop through the string\n    for (int i = 0; i < userString.length(); ++i) {\n        // check if the current character is equal to the userChar\n        if (userString.at(i) == userChar) {\n            // increment the count\n            count++;\n        }\n    }\n    // return the count\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    // get the input from the user\n    cin >> userChar;\n    // consume the newline character\n    cin.ignore();\n    getline(cin, userString);\n\n    // call the function to count the characters\n    int count = CountCharacters(userChar, userString);\n\n    // print the result\n    cout << count << endl;\n\n    return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 4}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\n// Counts the number of times a character appears in a string.\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    // loop through the string and check each character\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString.at(i) == userChar) {\n            count++; // increment the count if the character matches\n        }\n    }\n    return count; // return the final count\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin >> ws, userString); // consume the newline character and read the entire line\n\n    int charCount = CountCharacters(userChar, userString);\n    cout << charCount << endl; // Output the result\n\n    return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 5}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\n// Function to count occurrences of a character in a string\nint CountCharacters(char userChar, string userString) {\n    int count = 0; // Initialize count to zero\n\n    // Loop through the string\n    for (int i = 0; i < userString.length(); ++i) {\n        // Check if the current character matches the target character\n        if (userString[i] == userChar) {\n            count++; // Increment count if there's a match\n        }\n    }\n\n    return count; // Return the final count\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    // Get input from the user\n    cin >> userChar;\n    getline(cin >> ws, userString); // Read the rest of the line\n\n    // Call the function to count characters\n    int charCount = CountCharacters(userChar, userString);\n\n    // Output the result\n    cout << charCount << endl;\n\n    return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 6}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\n//Count the number of times a character appears in a string\nint CountCharacters(char userChar, string userString) {\n    int count = 0; //initialize the counter\n    //loop thru the string\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++; //increment the counter\n        }\n    }\n    return count; //return the total\n}\n\nint main() {\n    char userChar; //the character to search for\n    string userString; //the string to search in\n\n    cin >> userChar;\n    getline(cin >> ws, userString);\n\n    //Call the function to count and print the result\n    int charCount = CountCharacters(userChar, userString);\n    cout << charCount << endl; //output to console\n\n    return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 7}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\n// CountCharacters function!  It counts the chars.\nint CountCharacters(char userChar, string userString) {\n    // TODO: Implement the counting logic\n    int count = 0;\n\n    // Loop through the string\n    for (int i = 0; i < userString.length(); ++i) {\n        // Check if the character matches\n        if (userString[i] == userChar) {\n            // Increment the count\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    // Get the character input\n    cin >> userChar;\n\n    // Get the string input -- consume the newline character\n    cin.ignore(); // Important!\n\n    getline(cin, userString);\n\n    // Call the CountCharacters function\n    int charCount = CountCharacters(userChar, userString);\n\n    // Print the result\n    cout << charCount << endl;\n\n    return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 8}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\n//counts the number of times a character shows up in a string\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  // loop through the string\n  for (int i = 0; i < userString.length(); ++i) {\n    // check if the char at i is equal to userChar\n    if (userString.at(i) == userChar) {\n      // if it is, increment count\n      count++;\n    }\n  }\n  // return the count\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  // get the character and string from the user\n  cin >> userChar;\n  getline(cin >> ws, userString); // consume newline\n\n  // Call the function and print the result\n  cout << CountCharacters(userChar, userString) << endl;\n\n  return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 9}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\n// Function to count the number of times a character appears in a string.\nint CountCharacters(char userChar, string userString) {\n  int count = 0; // Initialize the counter\n  // Loop through the string\n  for (int i = 0; i < userString.length(); ++i) {\n    // Check if the character at the current index is equal to the input character\n    if (userString[i] == userChar) {\n      count++; // Increment the counter if it matches\n    }\n  }\n  return count; // Return the final count\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  // Get the input character and string from the user\n  cin >> userChar;\n  cin.ignore(); // Consume the newline character left by cin >> userChar\n  getline(cin, userString); // Read the entire line into the string\n\n  // Call the CountCharacters function and print the result\n  cout << CountCharacters(userChar, userString) << endl;\n\n  return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 10}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    getline(cin, userString);\n\n    userChar = userString[0];\n    userString = userString.substr(2);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 1}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (int i = 0; i < userString.length(); ++i) {\n    if (userString.at(i) == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  getline(cin >> ws, userString);\n\n  cout << CountCharacters(userChar, userString) << endl;\n\n  return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 2}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (char c : userString) {\n    if (c == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  cin.ignore(); \n  getline(cin, userString);\n\n  int result = CountCharacters(userChar, userString);\n  cout << result << endl;\n\n  return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 3}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (char c : userString) {\n    if (c == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  cin.ignore(); \n  getline(cin, userString);\n\n  cout << CountCharacters(userChar, userString) << endl;\n\n  return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 4}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (char c : userString) {\n        if (c == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin >> ws, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 5}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (int i = 0; i < userString.length(); ++i) {\n    if (userString[i] == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  cin.ignore(); \n  getline(cin, userString);\n\n  cout << CountCharacters(userChar, userString) << endl;\n\n  return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 6}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (int i = 0; i < userString.length(); ++i) {\n    if (userString[i] == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  cin.ignore(); \n  getline(cin, userString);\n\n  cout << CountCharacters(userChar, userString) << endl;\n\n  return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 7}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (char c : userString) {\n        if (c == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 8}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (char c : userString) {\n        if (c == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 9}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 10}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin >> ws, userString);\n\n    int result = CountCharacters(userChar, userString);\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 1}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 2}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 3}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 4}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (int i = 0; i < userString.length(); ++i) {\n    if (userString[i] == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  getline(cin >> ws, userString);\n\n  int result = CountCharacters(userChar, userString);\n\n  cout << result << endl;\n\n  return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 5}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin >> ws, userString);\n\n    int result = CountCharacters(userChar, userString);\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 6}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin >> ws, userString);\n\n    int result = CountCharacters(userChar, userString);\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 7}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 8}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin >> ws, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 9}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 10}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 1}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 2}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 3}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    std::cin >> year;\n\n    if (IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\" << std::endl;\n    } else {\n        std::cout << year << \" is not a leap year.\" << std::endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 4}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year\" << endl;\n  } else {\n    cout << year << \" is not a leap year\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 5}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 6}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 7}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    std::cin >> year;\n\n    if (IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\" << std::endl;\n    } else {\n        std::cout << year << \" is not a leap year.\" << std::endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 8}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  std::cin >> year;\n  if (IsLeapYear(year)) {\n    std::cout << year << \" is a leap year.\" << std::endl;\n  } else {\n    std::cout << year << \" is not a leap year.\" << std::endl;\n  }\n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 9}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year\" << endl;\n  } else {\n    cout << year << \" is not a leap year\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 10}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year.\" << endl;\n  } else {\n    cout << year << \" is not a leap year.\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 1}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 2}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 3}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 4}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 5}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 6}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year\" << endl;\n  } else {\n    cout << year << \" is not a leap year\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 7}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year.\" << endl;\n  } else {\n    cout << year << \" is not a leap year.\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 8}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year\" << endl;\n    } else {\n        cout << year << \" is not a leap year\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 9}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 10}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 1}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 2}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 3}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year.\" << endl;\n  } else {\n    cout << year << \" is not a leap year.\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 4}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 5}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 6}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 7}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year\" << endl;\n    } else {\n        cout << year << \" is not a leap year\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 8}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year\" << endl;\n  } else {\n    cout << year << \" is not a leap year\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 9}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year.\" << endl;\n  } else {\n    cout << year << \" is not a leap year.\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 10}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 1}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 2}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 3}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year\" << endl;\n  } else {\n    cout << year << \" is not a leap year\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 4}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 5}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year\" << endl;\n  } else {\n    cout << year << \" is not a leap year\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 6}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 7}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 8}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 9}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 10}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 1}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 2}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  std::cin >> year;\n  if (IsLeapYear(year)) {\n    std::cout << year << \" is a leap year\" << std::endl;\n  } else {\n    std::cout << year << \" is not a leap year\" << std::endl;\n  }\n  return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 3}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year.\" << endl;\n  } else {\n    cout << year << \" is not a leap year.\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 4}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    std::cin >> year;\n    if (IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\" << std::endl;\n    } else {\n        std::cout << year << \" is not a leap year.\" << std::endl;\n    }\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 5}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    std::cin >> year;\n    if (IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\" << std::endl;\n    } else {\n        std::cout << year << \" is not a leap year.\" << std::endl;\n    }\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 6}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 7}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year.\" << endl;\n  } else {\n    cout << year << \" is not a leap year.\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 8}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year\" << endl;\n  } else {\n    cout << year << \" is not a leap year\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 9}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year.\" << endl;\n  } else {\n    cout << year << \" is not a leap year.\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 10}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    std::cin >> year;\n\n    if (IsLeapYear(year)) {\n        std::cout << year << \" is a leap year\" << std::endl;\n    } else {\n        std::cout << year << \" is not a leap year\" << std::endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 1}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int yr) {\n  if (yr % 4 != 0) {\n    return false;\n  } else if (yr % 100 != 0) {\n    return true;\n  } else if (yr % 400 != 0) {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nint main() {\n  int year;\n  std::cin >> year;\n\n  if (IsLeapYear(year)) {\n    std::cout << year << \" is a leap year\" << std::endl;\n  } else {\n    std::cout << year << \" is not a leap year\" << std::endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 2}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  std::cin >> year;\n\n  if (IsLeapYear(year)) {\n    std::cout << year << \" is a leap year\" << std::endl;\n  } else {\n    std::cout << year << \" is not a leap year\" << std::endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 3}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int year) {\n    if (year % 4 == 0) {\n        if (year % 100 == 0) {\n            return (year % 400 == 0);\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    std::cin >> year;\n\n    if (IsLeapYear(year)) {\n        std::cout << year << \" is a leap year\" << std::endl;\n    } else {\n        std::cout << year << \" is not a leap year\" << std::endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 4}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    std::cin >> year;\n    if (IsLeapYear(year)) {\n        std::cout << year << \" is a leap year\" << std::endl;\n    } else {\n        std::cout << year << \" is not a leap year\" << std::endl;\n    }\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 5}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  std::cin >> year;\n  if (IsLeapYear(year)) {\n    std::cout << year << \" is a leap year\" << std::endl;\n  } else {\n    std::cout << year << \" is not a leap year\" << std::endl;\n  }\n  return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 6}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 7}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  std::cin >> year;\n\n  if (IsLeapYear(year)) {\n    std::cout << year << \" is a leap year.\" << std::endl;\n  } else {\n    std::cout << year << \" is not a leap year.\" << std::endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 8}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    std::cin >> year;\n    if (IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\" << std::endl;\n    } else {\n        std::cout << year << \" is not a leap year.\" << std::endl;\n    }\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 9}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 10}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 1}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 2}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    std::cin >> year;\n    if (IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\" << std::endl;\n    } else {\n        std::cout << year << \" is not a leap year.\" << std::endl;\n    }\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 3}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year.\" << endl;\n  } else {\n    cout << year << \" is not a leap year.\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 4}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 5}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year\" << endl;\n  } else {\n    cout << year << \" is not a leap year\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 6}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year\" << endl;\n  } else {\n    cout << year << \" is not a leap year\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 7}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 8}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 9}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 10}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\n// Function to determine if a year is a leap year\nbool IsLeapYear(int userYear) {\n  // Check if the year is divisible by 4\n  if (userYear % 4 == 0) {\n    // If it's a century year, check if it's divisible by 400\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true; // It's a leap year\n      } else {\n        return false; // Not a leap year\n      }\n    } else {\n      return true; // It's a leap year\n    }\n  } else {\n    return false; // Not a leap year\n  }\n}\n\nint main() {\n  int year;\n\n  // Get the year from the user\n  cin >> year;\n\n  // Check if it's a leap year using the function\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year\" << endl;\n  } else {\n    cout << year << \" is not a leap year\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 1}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\n// Function to determine if a year is a leap year\nbool IsLeapYear(int userYear) {\n  // Check if the year is divisible by 4\n  if (userYear % 4 == 0) {\n    // Check if it's a century year\n    if (userYear % 100 == 0) {\n      // If it's a century year, it must be divisible by 400\n      if (userYear % 400 == 0) {\n        return true; // It's a leap year\n      } else {\n        return false; // Not a leap year\n      }\n    } else {\n      return true; // It's a leap year\n    }\n  } else {\n    return false; // Not a leap year\n  }\n}\n\nint main() {\n  int year;\n\n  // Get the year from the user\n  cin >> year;\n\n  // Check if the year is a leap year using the function\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year\" << endl;\n  } else {\n    cout << year << \" is not a leap year\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 2}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\n// Function to determine if a year is a leap year.\nbool IsLeapYear(int userYear) {\n    // Check if divisible by 4\n    if (userYear % 4 == 0) {\n        // Check if it's a century year\n        if (userYear % 100 == 0) {\n            // If century year, check if divisible by 400\n            if (userYear % 400 == 0) {\n                return true; // Leap year\n            } else {\n                return false; // Not a leap year\n            }\n        } else {\n            return true; // Leap year\n        }\n    } else {\n        return false; // Not a leap year\n    }\n}\n\nint main() {\n    int year;\n\n    // Get the year from the user\n    cin >> year;\n\n    // Determine if it's a leap year and print the result\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 3}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\n// Function to check if a year is a leap year\nbool IsLeapYear(int userYear) {\n    // Leap year conditions\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true; // Divisible by 400, so it's a leap year\n            } else {\n                return false; // Divisible by 100 but not 400, so not a leap year\n            }\n        } else {\n            return true; // Divisible by 4 but not 100, so it's a leap year\n        }\n    } else {\n        return false; // Not divisible by 4, so not a leap year\n    }\n}\n\nint main() {\n    int year;\n\n    // Get input from the user\n    cout << \"Enter a year: \";\n    cin >> year;\n\n    // Check if the year is a leap year using the function\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 4}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\n//bool IsLeapYear(int year); // Function prototype\n\n// Function to check if a year is a leap year\nbool IsLeapYear(int userYear) {\n  // Check if divisible by 4\n  if (userYear % 4 == 0) {\n    // Check if century year and divisible by 400\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true; // Leap year\n      } else {\n        return false; // Not a leap year\n      }\n    } else {\n      return true; // Leap year\n    }\n  } else {\n    return false; // Not a leap year\n  }\n}\n\nint main() {\n  int year;\n\n  // Get user input\n  cout << \"Enter a year: \";\n  cin >> year;\n\n  // Check if the year is a leap year\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year.\" << endl;\n  } else {\n    cout << year << \" is not a leap year.\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 5}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\n// Function to check if a year is a leap year\nbool IsLeapYear(int userYear) {\n  // Check if divisible by 4\n  if (userYear % 4 == 0) {\n    // If it's a century year, check if divisible by 400\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true; // It's a leap year\n      } else {\n        return false; // Not a leap year\n      }\n    } else {\n      return true; // It's a leap year\n    }\n  } else {\n    return false; // Not a leap year\n  }\n}\n\nint main() {\n  int year;\n\n  // Get input from the user\n  cout << \"Enter a year: \";\n  cin >> year;\n\n  // Check if it's a leap year\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year.\" << endl;\n  } else {\n    cout << year << \" is not a leap year.\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 6}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\n// Function to determine if a year is a leap year.\nbool IsLeapYear(int userYear) {\n  // Check if divisible by 4\n  if (userYear % 4 == 0) {\n    //check if divisible by 100\n    if (userYear % 100 == 0) {\n      // If divisible by 100, also check if divisible by 400\n      if (userYear % 400 == 0) {\n        return true; // Leap year\n      } else {\n        return false; // Not a leap year\n      }\n    } else {\n      return true; // Leap year\n    }\n  } else {\n    return false; // Not a leap year\n  }\n}\n\nint main() {\n  int year;\n\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year.\" << endl;\n  } else {\n    cout << year << \" is not a leap year.\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 7}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\n// Function to determine if a year is a leap year\nbool IsLeapYear(int userYear) {\n    // Check if divisible by 4\n    if (userYear % 4 == 0) {\n        // if a century year, check if divisible by 400\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true; // It's a leap year!\n            } else {\n                return false; // Not a leap year\n            }\n        } else {\n            return true; // It's a leap year!\n        }\n    } else {\n        return false; // Not a leap year\n    }\n}\n\nint main() {\n    int year;\n\n    // Get input from user\n    cout << \"Enter a year: \";\n    cin >> year;\n\n    // Check if it's a leap year using the function\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 8}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\n// Function to check if a year is a leap year\nbool IsLeapYear(int userYear) {\n    // Check if divisible by 4\n    if (userYear % 4 == 0) {\n        // If it's a century year, check if divisible by 400\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true; // It's a leap year\n            } else {\n                return false; // Not a leap year\n            }\n        } else {\n            return true; // It's a leap year\n        }\n    } else {\n        return false; // Not a leap year\n    }\n}\n\nint main() {\n    int year;\n\n    // Get input from the user\n    cout << \"Enter a year: \";\n    cin >> year;\n\n    // Check if it's a leap year and print the result\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 9}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\n// Function to determine if a year is a leap year\nbool IsLeapYear(int userYear) {\n  // Check if divisible by 4\n  if (userYear % 4 == 0) {\n    // If century year, check if divisible by 400\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true; // Leap year\n      } else {\n        return false; // Not a leap year\n      }\n    } else {\n      return true; // Leap year\n    }\n  } else {\n    return false; // Not a leap year\n  }\n}\n\nint main() {\n  int year;\n\n  // Get user input\n  cout << \"Enter a year: \";\n  cin >> year;\n\n  // Determine if leap year\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year.\" << endl;\n  } else {\n    cout << year << \" is not a leap year.\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 10}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 1}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year.\" << endl;\n  } else {\n    cout << year << \" is not a leap year.\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 2}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year.\" << endl;\n  } else {\n    cout << year << \" is not a leap year.\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 3}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year.\" << endl;\n  } else {\n    cout << year << \" is not a leap year.\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 4}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year.\" << endl;\n  } else {\n    cout << year << \" is not a leap year.\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 5}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 6}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 7}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 8}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 9}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year.\" << endl;\n  } else {\n    cout << year << \" is not a leap year.\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 10}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year.\" << endl;\n  } else {\n    cout << year << \" is not a leap year.\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 1}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 2}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year.\" << endl;\n  } else {\n    cout << year << \" is not a leap year.\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 3}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    std::cin >> year;\n    if (IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\" << std::endl;\n    } else {\n        std::cout << year << \" is not a leap year.\" << std::endl;\n    }\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 4}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year.\" << endl;\n  } else {\n    cout << year << \" is not a leap year.\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 5}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 6}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year.\" << endl;\n  } else {\n    cout << year << \" is not a leap year.\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 7}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  std::cin >> year;\n\n  if (IsLeapYear(year)) {\n    std::cout << year << \" is a leap year.\" << std::endl;\n  } else {\n    std::cout << year << \" is not a leap year.\" << std::endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 8}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year\" << endl;\n  } else {\n    cout << year << \" is not a leap year\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 9}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 10}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n    cin.ignore(); \n\n    vector<string> nameVec(n);\n    vector<string> phoneNumberVec(n);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 1}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n    cin.ignore(); \n\n    vector<string> names(n);\n    vector<string> phoneNumbers(n);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 2}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"not found\"; \n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 3}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"not found\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<string> names(n);\n    vector<string> phoneNumbers(n);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 4}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\"; \n}\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore(); \n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 5}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 6}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\"; \n}\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore(); \n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 7}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\"; \n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 8}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n    cin.ignore();\n\n    vector<string> names(n);\n    vector<string> phoneNumbers(n);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 9}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\"; \n}\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<string> names(n);\n    vector<string> phoneNumbers(n);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 10}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 1}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i];\n        cin >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 2}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 3}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 4}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore();\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 5}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 6}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 7}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 8}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 9}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 10}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec.at(i) == contactName) {\n            return phoneNumberVec.at(i);\n        }\n    }\n    return \"not found\"; \n}\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<string> names(n);\n    vector<string> phoneNumbers(n);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> names.at(i) >> phoneNumbers.at(i);\n    }\n\n    string searchName;\n    cin >> searchName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, searchName) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 1}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 2}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 3}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n    cin.ignore();\n\n    vector<string> names(n);\n    vector<string> phoneNumbers(n);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 4}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec.at(i) == contactName) {\n            return phoneNumberVec.at(i);\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names.at(i);\n        cin >> phoneNumbers.at(i);\n    }\n\n    string searchName;\n    cin >> searchName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, searchName) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 5}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 6}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 7}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<string> names(n);\n    vector<string> phoneNumbers(n);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 8}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<string> names(n);\n    vector<string> phoneNumbers(n);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 9}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<string> names(n);\n    vector<string> phoneNumbers(n);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 10}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<string> names(n);\n    vector<string> phoneNumbers(n);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 1}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore();\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i];\n        cin >> phoneNumbers[i];\n    }\n\n    string searchName;\n    cin >> searchName;\n\n    string phoneNumber = GetPhoneNumber(names, phoneNumbers, searchName);\n\n    cout << phoneNumber << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 2}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"not found\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n    cin.ignore();\n\n    vector<string> names(n);\n    vector<string> phoneNumbers(n);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 3}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 4}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"not found\"; \n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 5}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 6}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore(); \n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 7}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\"; \n}\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore();\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string searchName;\n    cin >> searchName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, searchName) << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 8}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string searchName;\n    cin >> searchName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, searchName) << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 9}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 10}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 1}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"not found\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<string> names(n);\n    vector<string> phoneNumbers(n);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 2}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n  for (size_t i = 0; i < nameVec.size(); ++i) {\n    if (nameVec[i] == contactName) {\n      return phoneNumberVec[i];\n    }\n  }\n  return \"not found\";\n}\n\nint main() {\n  int N;\n  cin >> N;\n  cin.ignore();\n\n  vector<string> nameVec(N);\n  vector<string> phoneNumberVec(N);\n\n  for (int i = 0; i < N; ++i) {\n    cin >> nameVec[i] >> phoneNumberVec[i];\n  }\n\n  string contactName;\n  cin >> contactName;\n\n  cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n  return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 3}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 4}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 5}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 6}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 7}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    string phoneNumber = GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n\n    cout << phoneNumber << endl;\n\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 8}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore();\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 9}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 5, "model": "Gemini", "variation": 10}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 1}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n  for (size_t i = 0; i < nameVec.size(); ++i) {\n    if (nameVec[i] == contactName) {\n      return phoneNumberVec[i];\n    }\n  }\n  return \"Not found\";\n}\n\nint main() {\n  int N;\n  cin >> N;\n  cin.ignore();\n\n  vector<string> nameVec(N);\n  vector<string> phoneNumberVec(N);\n\n  for (int i = 0; i < N; ++i) {\n    cin >> nameVec[i] >> phoneNumberVec[i];\n  }\n\n  string contactName;\n  cin >> contactName;\n\n  cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n  return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 2}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"not found\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n    cin.ignore();\n\n    vector<string> names(n);\n    vector<string> phoneNumbers(n);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 3}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<string> names(n);\n    vector<string> phoneNumbers(n);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    string phoneNumber = GetPhoneNumber(names, phoneNumbers, contactName);\n\n    if (phoneNumber != \"\") {\n        cout << phoneNumber << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 4}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore();\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    string phoneNumber = GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n\n    cout << phoneNumber << endl;\n\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 5}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore();\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 6}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore();\n\n    vector<string> names(N);\n    vector<string> numbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> numbers[i];\n    }\n\n    string targetName;\n    cin >> targetName;\n\n    cout << GetPhoneNumber(names, numbers, targetName) << endl;\n\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 7}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(const std::vector<std::string>& nameVec, const std::vector<std::string>& phoneNumberVec, const std::string& contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> nameVec(N);\n    std::vector<std::string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    std::string contactName;\n    std::cin >> contactName;\n\n    std::string phoneNumber = GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n\n    if (!phoneNumber.empty()) {\n        std::cout << phoneNumber << std::endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 8}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore();\n\n    vector<string> names(N);\n    vector<string> numbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> numbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    string phoneNumber = GetPhoneNumber(names, numbers, contactName);\n    \n    if (phoneNumber != \"\") {\n      cout << phoneNumber << endl;\n    }\n    \n\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 9}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore();\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 6, "model": "Gemini", "variation": 10}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 1}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string searchName;\n    cin >> searchName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, searchName) << endl;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 2}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 3}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 4}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 5}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore(); \n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 6}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 7}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 8}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 9}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "Gemini", "variation": 10}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\n// Function to get the phone number from contact list\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    // Loop through the contact list\n    for (int i = 0; i < nameVec.size(); ++i) {\n        // Check if the name matches\n        if (nameVec[i] == contactName) {\n            // Return the phone number\n            return phoneNumberVec[i];\n        }\n    }\n    // Return an empty string if the name is not found\n    return \"\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    // Vectors to store names and phone numbers\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    // Read the names and phone numbers\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    // Read the contact name to search for\n    string contactName;\n    cin >> contactName;\n\n    // Get the phone number\n    string phoneNumber = GetPhoneNumber(names, phoneNumbers, contactName);\n\n    // Print the phone number\n    if (phoneNumber != \"\") {\n        cout << phoneNumber << endl;\n    } else {\n        //cout << \"Contact not found\" << endl; // not required by the prompt\n    }\n\n    return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 1}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\n// maybe this should be in a class? nah.\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    // ok so just loop through the names\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            // found it!\n            return phoneNumberVec[i];\n        }\n    }\n    // hmm not found?\n    return \"NOT_FOUND\"; // or something\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    // read in the data\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string searchName;\n    cin >> searchName;\n\n    // ok call the function and print the result\n    string phoneNumber = GetPhoneNumber(names, phoneNumbers, searchName);\n\n    if (phoneNumber == \"NOT_FOUND\") {\n        cout << \"Contact not found\" << endl;\n    } else {\n        cout << phoneNumber << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 2}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\n// Function to get the phone number\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    // loop through the names\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        // if the name matches return the phone number\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    // if the name is not found, return an empty string\n    return \"\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    // read the names and phone numbers\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    // Get the phone number\n    string phoneNumber = GetPhoneNumber(names, phoneNumbers, contactName);\n\n    // Print the phone number if found\n    if (phoneNumber != \"\") {\n        cout << phoneNumber << endl;\n    }\n    else {\n        // Handle the case where the name is not found\n        //cout << \"Not found\" << endl; // maybe don't do this\n    }\n\n    return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 3}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\n// oh boy, here we go...\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n  // okay, so like, loop through the names\n  for (int i = 0; i < nameVec.size(); ++i) {\n    // check if the name matches\n    if (nameVec[i] == contactName) {\n      // if it does, return the corresponding phone number\n      return phoneNumberVec[i];\n    }\n  }\n  // otherwise, return an empty string or something\n  return \"\"; // should probably handle this better maybe?\n}\n\nint main() {\n  int n;\n  cin >> n;\n\n  vector<string> names(n);\n  vector<string> phoneNumbers(n);\n\n  // read in the names and phone numbers\n  for (int i = 0; i < n; ++i) {\n    cin >> names[i] >> phoneNumbers[i];\n  }\n\n  string contactName;\n  cin >> contactName;\n\n  // get the phone number\n  string phoneNumber = GetPhoneNumber(names, phoneNumbers, contactName);\n\n  // print the phone number\n  if (phoneNumber != \"\") {\n    cout << phoneNumber << endl;\n  } else {\n    // uh oh, not found\n    // cout << \"Not found\" << endl; // maybe print this? nah\n  }\n\n  return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 4}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\n// Function to get the phone number from vectors\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    // Loop through the name vector\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        // Check if the name matches the contact name\n        if (nameVec[i] == contactName) {\n            // If it matches, return the corresponding phone number\n            return phoneNumberVec[i];\n        }\n    }\n    // If the contact name is not found, return an empty string.  Maybe should throw an error? nah.\n    return \"\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    // Vectors to store names and phone numbers\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    // Input the name-phone number pairs\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    // Input the contact name to search for\n    string contactName;\n    cin >> contactName;\n\n    // Get the phone number using the function\n    string phoneNumber = GetPhoneNumber(names, phoneNumbers, contactName);\n\n    // Output the phone number if found\n    if (phoneNumber != \"\") {\n        cout << phoneNumber << endl;\n    }\n    else {\n        //Contact not found.  Should I output an error message?  Probably not.\n        //cout << \"Contact not found.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 5}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\n// Function to get the phone number for a given contact name\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    // Iterate through the name vector\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        // Check if the current name matches the contact name\n        if (nameVec[i] == contactName) {\n            // If it matches, return the corresponding phone number\n            return phoneNumberVec[i];\n        }\n    }\n\n    // If the contact name is not found, return an empty string (or some error indication)\n    return \"\"; // Or maybe throw an exception or something?\n}\n\nint main() {\n    int N;\n\n    cin >> N; // Read the number of contacts\n\n    vector<string> names(N); // Vector to store names\n    vector<string> phoneNumbers(N); // Vector to store phone numbers\n\n    // Read the name and phone number pairs\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i]; // Read the name and phone number\n    }\n\n    string contactName;\n    cin >> contactName; // Read the contact name to search for\n\n    // Get the phone number using the GetPhoneNumber function\n    string phoneNumber = GetPhoneNumber(names, phoneNumbers, contactName);\n\n    // Check if the phone number was found\n    if (phoneNumber != \"\") {\n        cout << phoneNumber << endl; // Output the phone number\n    } else {\n        // Handle the case where the contact name is not found\n        cout << \"Not found\" << endl; // Or some other error message\n    }\n\n    return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 6}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\n// Function to get the phone number given a name\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n  // Iterate through the name vector\n  for (size_t i = 0; i < nameVec.size(); ++i) {\n    // Check if the current name matches the contact name\n    if (nameVec[i] == contactName) {\n      // If it matches, return the corresponding phone number\n      return phoneNumberVec[i];\n    }\n  }\n  // If the name is not found, return an empty string.  Maybe should throw an exception.\n  return \"\";\n}\n\nint main() {\n  int N;\n\n  // Read the number of contacts\n  cin >> N;\n\n  // Create vectors to store names and phone numbers\n  vector<string> names(N);\n  vector<string> phoneNumbers(N);\n\n  // Read the names and phone numbers\n  for (int i = 0; i < N; ++i) {\n    cin >> names[i] >> phoneNumbers[i];\n  }\n\n  // Read the contact name to search for\n  string contactName;\n  cin >> contactName;\n\n  // Get the phone number using the GetPhoneNumber function\n  string phoneNumber = GetPhoneNumber(names, phoneNumbers, contactName);\n\n  // Output the phone number\n  cout << phoneNumber << endl;\n\n  return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 7}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\n// Function to get the phone number given vectors of names and phone numbers\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    // Loop through the name vector\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        // Check if the current name matches the contact name\n        if (nameVec[i] == contactName) {\n            // If it matches, return the corresponding phone number\n            return phoneNumberVec[i];\n        }\n    }\n\n    // If the contact name is not found, return an empty string (or some other appropriate value)\n    return \"\";\n}\n\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<string> names;\n    vector<string> phoneNumbers;\n\n    // Read in the names and phone numbers\n    for (int i = 0; i < n; ++i) {\n        string name, phoneNumber;\n        cin >> name >> phoneNumber;\n        names.push_back(name);\n        phoneNumbers.push_back(phoneNumber);\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    // Get the phone number using the function\n    string phoneNumber = GetPhoneNumber(names, phoneNumbers, contactName);\n\n    // Output the phone number\n    cout << phoneNumber << endl;\n\n    return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 8}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\n// Function to get phone number.  Like it says.\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    // Iterate through the name vector\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        // Check if the current name matches the contact name\n        if (nameVec[i] == contactName) {\n            // If it matches, return the corresponding phone number\n            return phoneNumberVec[i];\n        }\n    }\n    //If no phone number found, return an empty string. Or maybe throw an error? NAH.\n    return \"\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    // Read the name and phone number pairs\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string searchName;\n    cin >> searchName;\n\n    // Get the phone number\n    string phoneNumber = GetPhoneNumber(names, phoneNumbers, searchName);\n\n    // Output the phone number\n    cout << phoneNumber << endl;\n\n    return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 9}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\n// uh oh, this is a function\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    // I hope this works\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i]; //found it!\n        }\n    }\n    return \"not found\"; // or something, I dunno\n}\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore(); // eat the newline character\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    // fill in the contact list\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n        //cout << \"read: \" << names[i] << \" \" << phoneNumbers[i] << endl; //debug\n    }\n\n    string searchName;\n    cin >> searchName;\n\n    // time to search\n    string phoneNumber = GetPhoneNumber(names, phoneNumbers, searchName);\n\n    if (phoneNumber != \"not found\") {\n        cout << phoneNumber << endl;\n    }\n    else {\n        // cout << \"Contact not found.\" << endl; //should I output that?\n        // I'm not supposed to do that, I guess\n    }\n\n    return 0;\n}", "class": 1, "version": 8, "model": "Gemini", "variation": 10}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"not found\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n    cin.ignore();\n\n    vector<string> names(n);\n    vector<string> phoneNumbers(n);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 1}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n  for (int i = 0; i < nameVec.size(); ++i) {\n    if (nameVec[i] == contactName) {\n      return phoneNumberVec[i];\n    }\n  }\n  return \"Not found\"; \n}\n\nint main() {\n  int N;\n  cin >> N;\n\n  vector<string> nameVec(N);\n  vector<string> phoneNumberVec(N);\n\n  for (int i = 0; i < N; ++i) {\n    cin >> nameVec[i] >> phoneNumberVec[i];\n  }\n\n  string contactName;\n  cin >> contactName;\n\n  cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n  return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 2}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore();\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    cin.ignore();\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 3}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\"; \n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 4}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 5}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore(); \n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 6}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\"; \n}\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore();\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    cin.ignore();\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 7}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore();\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    \n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 8}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 9}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"not found\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<string> names(n);\n    vector<string> phoneNumbers(n);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "Gemini", "variation": 10}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"NOT_FOUND\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<string> names;\n    vector<string> phoneNumbers;\n\n    for (int i = 0; i < n; ++i) {\n        string name;\n        string phoneNumber;\n        cin >> name >> phoneNumber;\n        names.push_back(name);\n        phoneNumbers.push_back(phoneNumber);\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    string phoneNumber = GetPhoneNumber(names, phoneNumbers, contactName);\n\n    cout << phoneNumber << endl;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 1}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"NOT_FOUND\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore(); \n\n    vector<string> names;\n    vector<string> phoneNumbers;\n\n    for (int i = 0; i < N; ++i) {\n        string name;\n        string phoneNumber;\n        cin >> name >> phoneNumber;\n        names.push_back(name);\n        phoneNumbers.push_back(phoneNumber);\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    string phoneNumber = GetPhoneNumber(names, phoneNumbers, contactName);\n\n    cout << phoneNumber << endl;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 2}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"NOT_FOUND\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore(); \n\n    vector<string> names;\n    vector<string> phoneNumbers;\n\n    for (int i = 0; i < N; ++i) {\n        string name, phoneNumber;\n        cin >> name >> phoneNumber;\n        names.push_back(name);\n        phoneNumbers.push_back(phoneNumber);\n    }\n\n    string searchName;\n    cin >> searchName;\n\n    string phoneNumber = GetPhoneNumber(names, phoneNumbers, searchName);\n    cout << phoneNumber << endl;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 3}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n  for (int i = 0; i < nameVec.size(); ++i) {\n    if (nameVec[i] == contactName) {\n      return phoneNumberVec[i];\n    }\n  }\n  return \"NOT_FOUND\";\n}\n\nint main() {\n  int N;\n  cin >> N;\n\n  vector<string> names;\n  vector<string> phoneNumbers;\n\n  for (int i = 0; i < N; ++i) {\n    string name, phoneNumber;\n    cin >> name >> phoneNumber;\n    names.push_back(name);\n    phoneNumbers.push_back(phoneNumber);\n  }\n\n  string contactName;\n  cin >> contactName;\n\n  string phoneNumber = GetPhoneNumber(names, phoneNumbers, contactName);\n\n  cout << phoneNumber << endl;\n\n  return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 4}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"NOT_FOUND\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<string> names;\n    vector<string> phoneNumbers;\n\n    for (int i = 0; i < n; ++i) {\n        string name, phoneNumber;\n        cin >> name >> phoneNumber;\n        names.push_back(name);\n        phoneNumbers.push_back(phoneNumber);\n    }\n\n    string searchName;\n    cin >> searchName;\n\n    string phoneNumber = GetPhoneNumber(names, phoneNumbers, searchName);\n\n    cout << phoneNumber << endl;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 5}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"NOT_FOUND\"; \n}\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore();\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 6}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"NOT_FOUND\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names;\n    vector<string> phoneNumbers;\n\n    for (int i = 0; i < N; ++i) {\n        string name;\n        string phoneNumber;\n        cin >> name >> phoneNumber;\n        names.push_back(name);\n        phoneNumbers.push_back(phoneNumber);\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    string phoneNumber = GetPhoneNumber(names, phoneNumbers, contactName);\n\n    cout << phoneNumber << endl;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 7}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"NOT_FOUND\"; \n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string searchName;\n    cin >> searchName;\n\n    string phoneNumber = GetPhoneNumber(names, phoneNumbers, searchName);\n\n    cout << phoneNumber << endl;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 8}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"NOT_FOUND\"; \n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names;\n    vector<string> phoneNumbers;\n\n    for (int i = 0; i < N; ++i) {\n        string name, phoneNumber;\n        cin >> name >> phoneNumber;\n        names.push_back(name);\n        phoneNumbers.push_back(phoneNumber);\n    }\n\n    string searchName;\n    cin >> searchName;\n\n    string phoneNumber = GetPhoneNumber(names, phoneNumbers, searchName);\n\n    if(phoneNumber != \"NOT_FOUND\"){\n        cout << phoneNumber << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 9}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n  for (int i = 0; i < nameVec.size(); ++i) {\n    if (nameVec[i] == contactName) {\n      return phoneNumberVec[i];\n    }\n  }\n  return \"NOT_FOUND\"; \n}\n\nint main() {\n  int n;\n  cin >> n;\n  cin.ignore(); \n\n  vector<string> names;\n  vector<string> phoneNumbers;\n\n  for (int i = 0; i < n; ++i) {\n    string name;\n    string phoneNumber;\n    cin >> name >> phoneNumber;\n    names.push_back(name);\n    phoneNumbers.push_back(phoneNumber);\n  }\n\n  string contactName;\n  cin >> contactName;\n\n  string phoneNumber = GetPhoneNumber(names, phoneNumbers, contactName);\n\n  cout << phoneNumber << endl;\n\n  return 0;\n}", "class": 1, "version": 10, "model": "Gemini", "variation": 10}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (std::abs(a) >= std::abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2) << std::endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 1}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\n\nint MaxMagnitude(int a, int b) {\n  if (std::abs(a) >= std::abs(b)) {\n    return a;\n  } else {\n    return b;\n  }\n}\n\nint main() {\n  int num1, num2;\n  std::cin >> num1 >> num2;\n  std::cout << MaxMagnitude(num1, num2) << std::endl;\n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 2}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (std::abs(a) >= std::abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2) << std::endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 3}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\n\nint MaxMagnitude(int a, int b) {\n    int absA = std::abs(a);\n    int absB = std::abs(b);\n\n    if (absA >= absB) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2) << std::endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 4}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (std::abs(a) >= std::abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2) << std::endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 5}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\n\nint MaxMagnitude(int a, int b) {\n  if (std::abs(a) >= std::abs(b)) {\n    return a;\n  } else {\n    return b;\n  }\n}\n\nint main() {\n  int num1, num2;\n  std::cin >> num1 >> num2;\n  std::cout << MaxMagnitude(num1, num2) << std::endl;\n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 6}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n  if (std::abs(a) >= std::abs(b)) {\n    return a;\n  } else {\n    return b;\n  }\n}\n\nint main() {\n  int num1, num2;\n  std::cin >> num1 >> num2;\n  std::cout << MaxMagnitude(num1, num2) << std::endl;\n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 7}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n  if (std::abs(num1) >= std::abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int num1, num2;\n  std::cin >> num1 >> num2;\n  std::cout << MaxMagnitude(num1, num2) << std::endl;\n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 8}
{"problem": 1, "code": "#include <iostream>\n\nint MaxMagnitude(int a, int b) {\n  if (a < 0) a = -a;\n  if (b < 0) b = -b;\n  \n  int result;\n  if (a >= b) result = a;\n  else result = b;\n\n  if(result == a) {\n    if (a == -a) return a;\n    if(a < 0) return -a;\n    else return a;\n  }\n  else {\n    if (b == -b) return b;\n    if(b < 0) return -b;\n    else return b;\n  }\n}\n\nint main() {\n  int num1, num2;\n  std::cin >> num1 >> num2;\n  std::cout << MaxMagnitude(num1, num2) << std::endl;\n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 9}
{"problem": 1, "code": "#include <iostream>\n\nint MaxMagnitude(int num1, int num2) {\n  if (num1 < 0) {\n    num1 = -num1;\n  }\n  if (num2 < 0) {\n    num2 = -num2;\n  }\n  if (num1 >= num2) {\n    if (num1 == num2) {\n        if (num1 == 0) {\n            return 0;\n        }\n    }\n    if (num1 == -num2) {\n        if (num1 < 0) {\n            return -num2;\n        }\n    }\n    return (num1 == -num2) ? num1 : (num1 == num2) ? num1 : (num1 == -num2) ? num1 : (num1 > num2) ? num1 : (num1 == num2) ? num1 : 0;\n  } else {\n    return (num1 < num2) ? num2 : 0;\n  }\n}\n\nint main() {\n  int num1, num2;\n  std::cin >> num1 >> num2;\n\n  if ((num1 < 0 ? -num1 : num1) >= (num2 < 0 ? -num2 : num2)) {\n      if ((num1 < 0 ? -num1 : num1) == (num2 < 0 ? -num2 : num2)) {\n          std::cout << num2 << std::endl;\n      } else {\n          std::cout << num1 << std::endl;\n      }\n  } else {\n      std::cout << num2 << std::endl;\n  }\n  \n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 10}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  int absNum1 = abs(num1);\n  int absNum2 = abs(num2);\n\n  if (absNum1 >= absNum2) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int input1;\n  int input2;\n\n  cin >> input1;\n  cin >> input2;\n\n  int result = MaxMagnitude(input1, input2);\n\n  cout << result << endl;\n\n  return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 1}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  int absNum1 = abs(num1);\n  int absNum2 = abs(num2);\n\n  if (absNum1 >= absNum2) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int input1;\n  int input2;\n\n  cin >> input1;\n  cin >> input2;\n\n  int result = MaxMagnitude(input1, input2);\n\n  cout << result << endl;\n\n  return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 2}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    int absNum1 = abs(num1);\n    int absNum2 = abs(num2);\n\n    if (absNum1 > absNum2) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int input1;\n    int input2;\n\n    cin >> input1;\n    cin >> input2;\n\n    int result = MaxMagnitude(input1, input2);\n\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 3}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    int absNum1 = abs(num1);\n    int absNum2 = abs(num2);\n\n    if (absNum1 >= absNum2) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int input1;\n    int input2;\n\n    cin >> input1;\n    cin >> input2;\n\n    int result = MaxMagnitude(input1, input2);\n\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 4}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  int absNum1 = abs(num1);\n  int absNum2 = abs(num2);\n\n  if (absNum1 >= absNum2) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int input1;\n  int input2;\n\n  cin >> input1;\n  cin >> input2;\n\n  int result = MaxMagnitude(input1, input2);\n\n  cout << result << endl;\n\n  return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 5}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    int absNum1 = abs(num1);\n    int absNum2 = abs(num2);\n\n    if (absNum1 >= absNum2) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int input1;\n    int input2;\n\n    cin >> input1;\n    cin >> input2;\n\n    int result = MaxMagnitude(input1, input2);\n\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 6}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  int absNum1 = abs(num1);\n  int absNum2 = abs(num2);\n\n  if (absNum1 >= absNum2) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int input1;\n  int input2;\n\n  cin >> input1;\n  cin >> input2;\n\n  int result = MaxMagnitude(input1, input2);\n\n  cout << result << endl;\n\n  return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 7}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  int absNum1 = abs(num1);\n  int absNum2 = abs(num2);\n\n  if (absNum1 >= absNum2) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int input1;\n  int input2;\n\n  cin >> input1;\n  cin >> input2;\n\n  int result = MaxMagnitude(input1, input2);\n\n  cout << result << endl;\n\n  return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 8}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  int absNum1 = abs(num1);\n  int absNum2 = abs(num2);\n\n  if (absNum1 >= absNum2) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int input1;\n  int input2;\n\n  cin >> input1;\n  cin >> input2;\n\n  int result = MaxMagnitude(input1, input2);\n\n  cout << result << endl;\n\n  return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 9}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  int absNum1 = abs(num1);\n  int absNum2 = abs(num2);\n\n  if (absNum1 >= absNum2) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int input1;\n  int input2;\n\n  cin >> input1;\n  cin >> input2;\n\n  int result = MaxMagnitude(input1, input2);\n\n  cout << result << endl;\n\n  return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 10}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int num1, num2;\n\n  cin >> num1 >> num2;\n\n  cout << MaxMagnitude(num1, num2) << endl;\n\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 1}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) >= abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    cin >> num1 >> num2;\n\n    cout << MaxMagnitude(num1, num2) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 2}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int num1, num2;\n  std::cin >> num1 >> num2;\n  std::cout << MaxMagnitude(num1, num2) << std::endl;\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 3}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) >= abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    cin >> num1 >> num2;\n\n    cout << MaxMagnitude(num1, num2) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 4}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) >= std::abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2) << std::endl;\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 5}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int num1, num2;\n\n  cin >> num1 >> num2;\n\n  cout << MaxMagnitude(num1, num2) << endl;\n\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 6}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int num1, num2;\n\n  cin >> num1 >> num2;\n\n  cout << MaxMagnitude(num1, num2) << endl;\n\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 7}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int num1, num2;\n\n  cin >> num1 >> num2;\n\n  cout << MaxMagnitude(num1, num2) << endl;\n\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 8}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) >= abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    cin >> num1 >> num2;\n\n    cout << MaxMagnitude(num1, num2) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 9}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) >= abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    cin >> num1 >> num2;\n\n    cout << MaxMagnitude(num1, num2) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 10}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    int absNum1 = abs(num1);\n    int absNum2 = abs(num2);\n\n    if (absNum1 >= absNum2) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int input1;\n    int input2;\n\n    cin >> input1 >> input2;\n\n    int result = MaxMagnitude(input1, input2);\n\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 1}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int input1, input2;\n  cin >> input1 >> input2;\n\n  int result = MaxMagnitude(input1, input2);\n\n  cout << result << endl;\n\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 2}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int a, int b) {\n    if (abs(a) >= abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    cin >> num1 >> num2;\n\n    cout << MaxMagnitude(num1, num2) << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 3}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  int absNum1 = abs(num1);\n  int absNum2 = abs(num2);\n\n  if (absNum1 >= absNum2) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int input1;\n  int input2;\n\n  cin >> input1 >> input2;\n\n  int result = MaxMagnitude(input1, input2);\n\n  cout << result << endl;\n\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 4}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  int absNum1 = abs(num1);\n  int absNum2 = abs(num2);\n\n  if (absNum1 >= absNum2) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int input1;\n  int input2;\n\n  cin >> input1 >> input2;\n\n  cout << MaxMagnitude(input1, input2) << endl;\n\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 5}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  int absNum1 = abs(num1);\n  int absNum2 = abs(num2);\n\n  if (absNum1 >= absNum2) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int input1;\n  int input2;\n\n  cin >> input1 >> input2;\n\n  int result = MaxMagnitude(input1, input2);\n\n  cout << result << endl;\n\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 6}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) >= abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int input1;\n    int input2;\n\n    cin >> input1;\n    cin >> input2;\n\n    cout << MaxMagnitude(input1, input2) << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 7}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int input1;\n  int input2;\n\n  cin >> input1;\n  cin >> input2;\n\n  int result = MaxMagnitude(input1, input2);\n\n  cout << result << endl;\n\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 8}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  if (abs(num1) >= abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int input1;\n  int input2;\n\n  cin >> input1;\n  cin >> input2;\n\n  cout << MaxMagnitude(input1, input2) << endl;\n\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 9}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n  int abs1 = abs(num1);\n  int abs2 = abs(num2);\n\n  if (abs1 >= abs2) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int input1;\n  int input2;\n\n  cin >> input1;\n  cin >> input2;\n\n  cout << MaxMagnitude(input1, input2) << endl;\n\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 10}
{"problem": 2, "code": "#include <iostream>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps) << endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 1}
{"problem": 2, "code": "#include <iostream>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n\n    double miles = StepsToMiles(steps);\n    cout << miles << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 2}
{"problem": 2, "code": "#include <iostream>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n   int steps;\n   cin >> steps;\n   cout << StepsToMiles(steps) << endl;\n   return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 3}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps) << std::endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 4}
{"problem": 2, "code": "#include <iostream>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n  cout << StepsToMiles(steps) << endl;\n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 5}
{"problem": 2, "code": "#include <iostream>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps) << endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 6}
{"problem": 2, "code": "#include <iostream>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout.precision(4);\n    cout << fixed << StepsToMiles(steps) << endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 7}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps) << std::endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 8}
{"problem": 2, "code": "#include <iostream>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n  cout << StepsToMiles(steps) << endl;\n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 9}
{"problem": 2, "code": "#include <iostream>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps) << endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 10}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  double miles = (double)userSteps / 2000.0;\n  return miles;\n}\n\nint main() {\n  int steps;\n\n  cin >> steps;\n\n  double milesWalked = StepsToMiles(steps);\n\n  cout << fixed << setprecision(4) << milesWalked << endl;\n\n  return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 1}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    double miles = (double)userSteps / 2000.0;\n    return miles;\n}\n\nint main() {\n    int steps;\n\n    cin >> steps;\n\n    double milesWalked = StepsToMiles(steps);\n\n    cout << fixed << setprecision(4) << milesWalked << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 2}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  double miles;\n  miles = (double)userSteps / 2000.0;\n  return miles;\n}\n\nint main() {\n  int steps;\n  double miles;\n\n  cin >> steps;\n\n  miles = StepsToMiles(steps);\n\n  cout << fixed << setprecision(4) << miles << endl;\n\n  return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 3}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    double miles = (double)userSteps / 2000.0;\n    return miles;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    \n    double miles = StepsToMiles(steps);\n    \n    cout << fixed << setprecision(4) << miles << endl;\n    \n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 4}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  double miles = static_cast<double>(userSteps) / 2000.0;\n  return miles;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n  \n  double milesWalked = StepsToMiles(steps);\n  \n  cout << fixed << setprecision(4) << milesWalked << endl;\n  \n  return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 5}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  double miles = (double)userSteps / 2000.0;\n  return miles;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n\n  double milesWalked = StepsToMiles(steps);\n\n  cout << fixed << setprecision(4) << milesWalked << endl;\n\n  return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 6}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    double miles = (double)userSteps / 2000.0;\n    return miles;\n}\n\nint main() {\n    int steps;\n\n    cin >> steps;\n\n    double milesWalked = StepsToMiles(steps);\n\n    cout << fixed << setprecision(4) << milesWalked << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 7}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    double miles = (double)userSteps / 2000.0;\n    return miles;\n}\n\nint main() {\n    int steps;\n\n    cin >> steps;\n\n    double milesWalked = StepsToMiles(steps);\n\n    cout << fixed << setprecision(4) << milesWalked << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 8}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    double miles = (double)userSteps / 2000.0;\n    return miles;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n\n    double milesWalked = StepsToMiles(steps);\n\n    cout << fixed << setprecision(4) << milesWalked << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 9}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    double miles = (double)userSteps / 2000.0;\n    return miles;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    double milesWalked = StepsToMiles(steps);\n    cout << fixed << setprecision(4) << milesWalked << endl;\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 10}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n  cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 1}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 2}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n\n  cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 3}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n\n    double miles = StepsToMiles(steps);\n\n    cout << fixed << setprecision(4) << miles << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 4}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n  cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 5}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 6}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 7}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n  int steps;\n\n  cin >> steps;\n\n  cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 8}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 9}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 10}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    double miles = (double)userSteps / 2000.0;\n    return miles;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n\n    double milesWalked = StepsToMiles(steps);\n\n    cout << fixed << setprecision(4) << milesWalked << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 1}
{"problem": 2, "code": "#include <iostream>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    double miles = (double)userSteps / 2000.0;\n    return miles;\n}\n\nint main() {\n    int steps;\n\n    cin >> steps;\n\n    double milesWalked = StepsToMiles(steps);\n\n    cout << milesWalked << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 2}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    double miles = (double)userSteps / 2000.0;\n    return miles;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    \n    double milesWalked = StepsToMiles(steps);\n    \n    cout << fixed << setprecision(4) << milesWalked << endl;\n    \n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 3}
{"problem": 2, "code": "#include <iostream>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return (double)userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps) << endl;\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 4}
{"problem": 2, "code": "#include <iostream>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return (double)userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps) << endl;\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 5}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   double miles = (double)userSteps / 2000.0;\n   return miles;\n}\n\nint main() {\n   int steps;\n   cin >> steps;\n   \n   double milesWalked = StepsToMiles(steps);\n   \n   cout << fixed << setprecision(4) << milesWalked << endl;\n   \n   return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 6}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  double miles = (double)userSteps / 2000.0;\n  return miles;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n\n  double miles = StepsToMiles(steps);\n\n  cout << fixed << setprecision(4) << miles << endl;\n\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 7}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n   return (double)userSteps / 2000.0;\n}\n\nint main() {\n   int steps;\n   cin >> steps;\n   \n   cout << fixed << setprecision(4) << StepsToMiles(steps) << endl;\n   \n   return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 8}
{"problem": 2, "code": "#include <iostream>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  return (double)userSteps / 2000.0;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n  cout << StepsToMiles(steps) << endl;\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 9}
{"problem": 2, "code": "#include <iostream>\n#include <iomanip>\n\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  double miles = (double)userSteps / 2000.0;\n  return miles;\n}\n\nint main() {\n  int steps;\n  cin >> steps;\n\n  double miles = StepsToMiles(steps);\n\n  cout << fixed << setprecision(4) << miles << endl;\n\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 10}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord) {\n            if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n                acronym += userPhrase[i];\n            }\n            newWord = false;\n        }\n        if (userPhrase[i] == ' ') {\n            newWord = true;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase) << endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 1}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord) {\n            if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n                acronym += userPhrase[i];\n            }\n            newWord = false;\n        } else if (userPhrase[i] == ' ') {\n            newWord = true;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    cout << CreateAcronym(phrase) << endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 2}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool isFirst = true;\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (isFirst) {\n            if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n                acronym += userPhrase[i];\n            }\n            isFirst = false;\n        } else if (userPhrase[i] == ' ') {\n            if (i + 1 < userPhrase.length() && userPhrase[i + 1] >= 'A' && userPhrase[i + 1] <= 'Z') {\n                acronym += userPhrase[i + 1];\n            }\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase) << endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 3}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord && userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n            acronym += userPhrase[i];\n            newWord = false;\n        } else if (newWord && userPhrase[i] >= 'a' && userPhrase[i] <= 'z') {\n            newWord = false;\n        } else if (userPhrase[i] == ' ') {\n            newWord = true;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    cout << CreateAcronym(phrase) << endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 4}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord) {\n            if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n                acronym += userPhrase[i];\n            }\n            newWord = false;\n        } else if (userPhrase[i] == ' ') {\n            newWord = true;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase) << endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 5}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool firstLetter = true;\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (firstLetter && userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n            acronym += userPhrase[i];\n            firstLetter = false;\n        } else if (firstLetter && userPhrase[i] >= 'a' && userPhrase[i] <= 'z') {\n            firstLetter = false;\n        } else if (userPhrase[i] == ' ') {\n            firstLetter = true;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    cout << CreateAcronym(phrase) << endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 6}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n  string acronym = \"\";\n  bool newWord = true;\n\n  for (int i = 0; i < userPhrase.length(); ++i) {\n    if (newWord) {\n      if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n        acronym += userPhrase[i];\n      }\n      newWord = false;\n    } else if (userPhrase[i] == ' ') {\n      newWord = true;\n    }\n  }\n\n  return acronym;\n}\n\nint main() {\n  string userPhrase;\n  getline(cin, userPhrase);\n\n  cout << CreateAcronym(userPhrase) << endl;\n\n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 7}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool isFirstLetter = true;\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (isFirstLetter) {\n            if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n                acronym += userPhrase[i];\n            }\n            isFirstLetter = false;\n        } else if (userPhrase[i] == ' ') {\n            isFirstLetter = true;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    cout << CreateAcronym(phrase) << endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 8}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n            newWord = false;\n        } else if (userPhrase[i] == ' ') {\n            newWord = true;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    cout << CreateAcronym(phrase) << endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 9}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord) {\n            if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n                acronym += userPhrase[i];\n            }\n            newWord = false;\n        } else if (userPhrase[i] == ' ') {\n            newWord = true;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n\n    string acronym = CreateAcronym(userPhrase);\n\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 10}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n  string acronym = \"\";\n  bool newWord = true;\n\n  for (int i = 0; i < userPhrase.length(); ++i) {\n    if (newWord) {\n      if (isupper(userPhrase[i])) {\n        acronym += userPhrase[i];\n      }\n      newWord = false;\n    } else if (userPhrase[i] == ' ') {\n      newWord = true;\n    }\n  }\n\n  return acronym;\n}\n\nint main() {\n  string phrase;\n\n  getline(cin, phrase);\n\n  string acronym = CreateAcronym(phrase);\n\n  cout << acronym << endl;\n\n  return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 1}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    string word = \"\";\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (userPhrase[i] == ' ') {\n            if (word.length() > 0 && isupper(word[0])) {\n                acronym += word[0];\n            }\n            word = \"\";\n        } else {\n            word += userPhrase[i];\n        }\n    }\n\n    if (word.length() > 0 && isupper(word[0])) {\n        acronym += word[0];\n    }\n    \n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n\n    string acronym = CreateAcronym(phrase);\n\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 2}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord) {\n            if (isupper(userPhrase[i])) {\n                acronym += userPhrase[i];\n            }\n            newWord = false;\n        } else if (userPhrase[i] == ' ') {\n            newWord = true;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n\n    string acronym = CreateAcronym(phrase);\n\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 3}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n  string acronym = \"\";\n  string word;\n  \n  for (int i = 0; i < userPhrase.length(); ++i) {\n    if (userPhrase[i] != ' ') {\n      word += userPhrase[i];\n    } else {\n      if (word[0] >= 'A' && word[0] <= 'Z') {\n        acronym += word[0];\n      }\n      word = \"\";\n    }\n  }\n\n  if (word[0] >= 'A' && word[0] <= 'Z') {\n    acronym += word[0];\n  }\n\n  return acronym;\n}\n\nint main() {\n  string phrase;\n\n  getline(cin, phrase);\n\n  string acronym = CreateAcronym(phrase);\n\n  cout << acronym << endl;\n\n  return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 4}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (userPhrase[i] == ' ') {\n            newWord = true;\n        } else {\n            if (newWord && isupper(userPhrase[i])) {\n                acronym += userPhrase[i];\n            }\n            newWord = false;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n\n    string acronym = CreateAcronym(phrase);\n\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 5}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    string word = \"\";\n\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (userPhrase[i] == ' ') {\n            if (word.length() > 0 && isupper(word[0])) {\n                acronym += word[0];\n            }\n            word = \"\";\n        } else {\n            word += userPhrase[i];\n        }\n    }\n\n    if (word.length() > 0 && isupper(word[0])) {\n        acronym += word[0];\n    }\n\n    return acronym;\n}\n\nint main() {\n    string phrase;\n\n    getline(cin, phrase);\n\n    string acronym = CreateAcronym(phrase);\n\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 6}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    string word = \"\";\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (userPhrase[i] == ' ') {\n            if (word.length() > 0 && isupper(word[0])) {\n                acronym += word[0];\n            }\n            word = \"\";\n        } else {\n            word += userPhrase[i];\n        }\n    }\n    if (word.length() > 0 && isupper(word[0])) {\n        acronym += word[0];\n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    \n    string acronym = CreateAcronym(phrase);\n    cout << acronym << endl;\n    \n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 7}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    stringstream ss(userPhrase);\n    string word;\n\n    while (ss >> word) {\n        if (word[0] >= 'A' && word[0] <= 'Z') {\n            acronym += word[0];\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n\n    string acronym = CreateAcronym(phrase);\n\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 8}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <cctype>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool firstLetter = true;\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (firstLetter) {\n            if (isupper(userPhrase[i])) {\n                acronym += userPhrase[i];\n            }\n            firstLetter = false;\n        } else if (userPhrase[i] == ' ') {\n            firstLetter = true;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string inputPhrase;\n    getline(cin, inputPhrase);\n\n    string acronym = CreateAcronym(inputPhrase);\n\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 9}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    string word = \"\";\n    vector<string> words;\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (userPhrase[i] == ' ') {\n            words.push_back(word);\n            word = \"\";\n        } else {\n            word += userPhrase[i];\n        }\n    }\n    words.push_back(word);\n\n    for (int i = 0; i < words.size(); ++i) {\n        if (words[i][0] >= 'A' && words[i][0] <= 'Z') {\n            acronym += words[i][0];\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n\n    string acronym = CreateAcronym(phrase);\n\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 10}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord) {\n            if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n                acronym += userPhrase[i];\n            }\n            newWord = false;\n        }\n        if (userPhrase[i] == ' ') {\n            newWord = true;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n\n    string acronym = CreateAcronym(phrase);\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 1}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord && isalpha(userPhrase[i]) && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n            newWord = false;\n        } else if (userPhrase[i] == ' ') {\n            newWord = true;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n\n    string acronym = CreateAcronym(phrase);\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 2}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n    for (char c : userPhrase) {\n        if (newWord && isupper(c)) {\n            acronym += c;\n        }\n        if (isspace(c)) {\n            newWord = true;\n        } else {\n            newWord = false;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase) << endl;\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 3}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n  string acronym = \"\";\n  bool newWord = true;\n\n  for (int i = 0; i < userPhrase.length(); ++i) {\n    if (newWord) {\n      if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n        acronym += userPhrase[i];\n      }\n      newWord = false;\n    }\n    if (userPhrase[i] == ' ') {\n      newWord = true;\n    }\n  }\n\n  return acronym;\n}\n\nint main() {\n  string phrase;\n  getline(cin, phrase);\n  cout << CreateAcronym(phrase) << endl;\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 4}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord && isalpha(userPhrase[i])) {\n            if (isupper(userPhrase[i])) {\n                acronym += userPhrase[i];\n            }\n            newWord = false;\n        } else if (userPhrase[i] == ' ') {\n            newWord = true;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string phrase;\n\n    getline(cin, phrase);\n\n    cout << CreateAcronym(phrase) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 5}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n  string acronym = \"\";\n  string word = \"\";\n\n  for (int i = 0; i < userPhrase.length(); ++i) {\n    if (userPhrase[i] == ' ') {\n      if (word[0] >= 'A' && word[0] <= 'Z') {\n        acronym += word[0];\n      }\n      word = \"\";\n    } else {\n      word += userPhrase[i];\n    }\n  }\n\n  if (word[0] >= 'A' && word[0] <= 'Z') {\n    acronym += word[0];\n  }\n  \n  return acronym;\n}\n\nint main() {\n  string phrase;\n  getline(cin, phrase);\n\n  string acronym = CreateAcronym(phrase);\n  cout << acronym << endl;\n\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 6}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n    for (char c : userPhrase) {\n        if (newWord && isupper(c)) {\n            acronym += c;\n            newWord = false;\n        } else if (isspace(c)) {\n            newWord = true;\n        } else if (newWord && islower(c)){\n            newWord = false;\n        }\n        else if(isalpha(c)){\n            newWord = false;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    cout << CreateAcronym(phrase) << endl;\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 7}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n  string acronym = \"\";\n  bool newWord = true;\n  for (int i = 0; i < userPhrase.length(); i++) {\n    if (newWord && isalpha(userPhrase[i])) {\n      if (isupper(userPhrase[i])) {\n        acronym += userPhrase[i];\n      }\n      newWord = false;\n    } else if (userPhrase[i] == ' ') {\n      newWord = true;\n    }\n  }\n  return acronym;\n}\n\nint main() {\n  string phrase;\n  getline(cin, phrase);\n  cout << CreateAcronym(phrase) << endl;\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 8}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    string word;\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (i == 0 || userPhrase[i - 1] == ' ') {\n            if (isupper(userPhrase[i])) {\n                acronym += userPhrase[i];\n            }\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase) << endl;\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 9}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n    for (char c : userPhrase) {\n        if (newWord && isupper(c)) {\n            acronym += c;\n            newWord = false;\n        } else if (isspace(c)) {\n            newWord = true;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    cout << CreateAcronym(phrase) << endl;\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 10}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    string word = \"\";\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (userPhrase[i] == ' ') {\n            if (word[0] >= 'A' && word[0] <= 'Z') {\n                acronym += word[0];\n            }\n            word = \"\";\n        } else {\n            word += userPhrase[i];\n        }\n    }\n    if (word.length() > 0 && word[0] >= 'A' && word[0] <= 'Z') {\n        acronym += word[0];\n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n\n    string acronym = CreateAcronym(phrase);\n    cout << acronym << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 1}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (newWord) {\n            if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n                acronym += userPhrase[i];\n            }\n            newWord = false;\n        }\n        if (userPhrase[i] == ' ') {\n            newWord = true;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase) << endl;\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 2}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    string word = \"\";\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (userPhrase[i] == ' ') {\n            if (word[0] >= 'A' && word[0] <= 'Z') {\n                acronym += word[0];\n            }\n            word = \"\";\n        } else {\n            word += userPhrase[i];\n        }\n    }\n    if (word.length() > 0 && word[0] >= 'A' && word[0] <= 'Z') {\n        acronym += word[0];\n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    cout << CreateAcronym(phrase) << endl;\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 3}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n  string acronym = \"\";\n  string word = \"\";\n  for (int i = 0; i < userPhrase.length(); ++i) {\n    if (userPhrase[i] == ' ') {\n      if (word[0] >= 'A' && word[0] <= 'Z') {\n        acronym += word[0];\n      }\n      word = \"\";\n    } else {\n      word += userPhrase[i];\n    }\n  }\n  if (word[0] >= 'A' && word[0] <= 'Z') {\n    acronym += word[0];\n  }\n  return acronym;\n}\n\nint main() {\n  string phrase;\n  getline(cin, phrase);\n  cout << CreateAcronym(phrase) << endl;\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 4}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    string word = \"\";\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (userPhrase[i] == ' ') {\n            if (word.length() > 0 && isupper(word[0])) {\n                acronym += word[0];\n            }\n            word = \"\";\n        } else {\n            word += userPhrase[i];\n        }\n    }\n    if (word.length() > 0 && isupper(word[0])) {\n        acronym += word[0];\n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    cout << CreateAcronym(phrase) << endl;\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 5}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n  string acronym = \"\";\n  bool newWord = true;\n\n  for (int i = 0; i < userPhrase.length(); i++) {\n    if (newWord && isupper(userPhrase[i])) {\n      acronym += userPhrase[i];\n      newWord = false;\n    } else if (userPhrase[i] == ' ') {\n      newWord = true;\n    } else {\n      newWord = (isupper(userPhrase[i]));\n    }\n  }\n\n  return acronym;\n}\n\nint main() {\n  string phrase;\n\n  getline(cin, phrase);\n\n  string acronym = CreateAcronym(phrase);\n\n  cout << acronym << endl;\n\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 6}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    string word;\n    \n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (i == 0 || userPhrase[i-1] == ' ') {\n            if (isupper(userPhrase[i])) {\n                acronym += userPhrase[i];\n            }\n        }\n    }\n    \n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    \n    string acronym = CreateAcronym(userPhrase);\n    cout << acronym << endl;\n    \n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 7}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n  string acronym = \"\";\n  string word;\n  string temp = \"\";\n\n  for (int i = 0; i < userPhrase.length(); ++i) {\n    if (userPhrase[i] == ' ') {\n      word = temp;\n      if (word[0] >= 'A' && word[0] <= 'Z') {\n        acronym += word[0];\n      }\n      temp = \"\";\n    } else {\n      temp += userPhrase[i];\n    }\n  }\n\n  word = temp;\n  if (word[0] >= 'A' && word[0] <= 'Z') {\n    acronym += word[0];\n  }\n\n  return acronym;\n}\n\nint main() {\n  string phrase;\n\n  getline(cin, phrase);\n\n  string acronym = CreateAcronym(phrase);\n\n  cout << acronym << endl;\n\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 8}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool prevSpace = true;\n    \n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (userPhrase[i] == ' ') {\n            prevSpace = true;\n        } else {\n            if (prevSpace) {\n                if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n                    acronym += userPhrase[i];\n                }\n                prevSpace = false;\n            }\n        }\n    }\n    \n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    \n    string acronym = CreateAcronym(phrase);\n    cout << acronym << endl;\n    \n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 9}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    string word = \"\";\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (userPhrase[i] == ' ') {\n            if (word[0] >= 'A' && word[0] <= 'Z') {\n                acronym += word[0];\n            }\n            word = \"\";\n        } else {\n            word += userPhrase[i];\n        }\n    }\n    if (word.length() > 0 && word[0] >= 'A' && word[0] <= 'Z') {\n         acronym += word[0];\n    }\n    \n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    string acronym = CreateAcronym(phrase);\n    cout << acronym << endl;\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 10}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (int i = 0; i < userString.length(); ++i) {\n    if (userString[i] == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  getline(cin >> ws, userString);\n\n  cout << CountCharacters(userChar, userString) << endl;\n\n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 1}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin >> ws, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 2}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (int i = 0; i < userString.length(); ++i) {\n    if (userString[i] == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  cin.ignore(); \n  getline(cin, userString);\n\n  cout << CountCharacters(userChar, userString) << endl;\n\n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 3}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin >> ws, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 4}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin >> ws, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 5}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin >> ws, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 6}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin >> ws, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 7}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 8}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (int i = 0; i < userString.length(); ++i) {\n    if (userString[i] == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  getline(cin >> ws, userString);\n\n  cout << CountCharacters(userChar, userString) << endl;\n\n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 9}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (int i = 0; i < userString.length(); ++i) {\n    if (userString[i] == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  cin.ignore(); \n  getline(cin, userString);\n\n  cout << CountCharacters(userChar, userString) << endl;\n\n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 10}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 1}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin >> ws, userString);\n\n    int result = CountCharacters(userChar, userString);\n\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 2}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin >> ws, userString);\n\n    int result = CountCharacters(userChar, userString);\n\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 3}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char inputChar;\n    string inputString;\n    \n    cin >> inputChar;\n    getline(cin >> ws, inputString); \n    \n    int result = CountCharacters(inputChar, inputString);\n    cout << result << endl;\n    \n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 4}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (int i = 0; i < userString.length(); ++i) {\n    if (userString[i] == userChar) {\n      count = count + 1;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char inputChar;\n  string inputString;\n\n  cin >> inputChar;\n  getline(cin >> ws, inputString); \n\n  int result = CountCharacters(inputChar, inputString);\n\n  cout << result << endl;\n\n  return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 5}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (int i = 0; i < userString.length(); i++) {\n    if (userString[i] == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  cin.ignore(); \n  getline(cin, userString);\n\n  int result = CountCharacters(userChar, userString);\n\n  cout << result << endl;\n\n  return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 6}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char inputChar;\n    string inputString;\n\n    cin >> inputChar;\n    getline(cin >> ws, inputString);\n\n    int result = CountCharacters(inputChar, inputString);\n\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 7}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 8}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin >> ws, userString);\n\n    int result = CountCharacters(userChar, userString);\n\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 9}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char inputChar;\n    string inputString;\n\n    cin >> inputChar;\n    cin.ignore(); \n    getline(cin, inputString);\n\n    int result = CountCharacters(inputChar, inputString);\n\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 10}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 1}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 2}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 3}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin >> ws, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 4}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 5}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (int i = 0; i < userString.length(); ++i) {\n    if (userString[i] == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  getline(cin >> ws, userString);\n\n  cout << CountCharacters(userChar, userString) << endl;\n\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 6}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (int i = 0; i < userString.length(); ++i) {\n    if (userString[i] == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  getline(cin >> ws, userString);\n\n  cout << CountCharacters(userChar, userString) << endl;\n\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 7}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (int i = 0; i < userString.length(); ++i) {\n    if (userString[i] == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  cin.ignore(); \n  getline(cin, userString);\n\n  cout << CountCharacters(userChar, userString) << endl;\n\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 8}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 9}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 10}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 1}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (int i = 0; i < userString.length(); ++i) {\n    if (userString[i] == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  getline(cin >> ws, userString);\n\n  cout << CountCharacters(userChar, userString) << endl;\n\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 2}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    int result = CountCharacters(userChar, userString);\n    cout << result << endl;\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 3}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 4}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin >> ws, userString);\n\n    int result = CountCharacters(userChar, userString);\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 5}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 6}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 7}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (int i = 0; i < userString.length(); ++i) {\n    if (userString[i] == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  cin.ignore();\n  getline(cin, userString);\n\n  int result = CountCharacters(userChar, userString);\n  cout << result << endl;\n\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 8}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n  int count = 0;\n  for (int i = 0; i < userString.length(); ++i) {\n    if (userString[i] == userChar) {\n      count++;\n    }\n  }\n  return count;\n}\n\nint main() {\n  char userChar;\n  string userString;\n\n  cin >> userChar;\n  cin.ignore();\n  getline(cin, userString);\n\n  cout << CountCharacters(userChar, userString) << endl;\n\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 9}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 10}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    std::cin >> year;\n    if (IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\" << std::endl;\n    } else {\n        std::cout << year << \" is not a leap year.\" << std::endl;\n    }\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 1}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  std::cin >> year;\n\n  if (IsLeapYear(year)) {\n    std::cout << year << \" is a leap year.\" << std::endl;\n  } else {\n    std::cout << year << \" is not a leap year.\" << std::endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 2}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    std::cin >> year;\n\n    if (IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\" << std::endl;\n    } else {\n        std::cout << year << \" is not a leap year.\" << std::endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 3}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  std::cin >> year;\n\n  if (IsLeapYear(year)) {\n    std::cout << year << \" is a leap year.\" << std::endl;\n  } else {\n    std::cout << year << \" is not a leap year.\" << std::endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 4}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  std::cin >> year;\n\n  if (IsLeapYear(year)) {\n    std::cout << year << \" is a leap year.\" << std::endl;\n  } else {\n    std::cout << year << \" is not a leap year.\" << std::endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 5}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 6}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year\" << endl;\n  } else {\n    cout << year << \" is not a leap year\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 7}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  std::cin >> year;\n\n  if (IsLeapYear(year)) {\n    std::cout << year << \" is a leap year.\" << std::endl;\n  } else {\n    std::cout << year << \" is not a leap year.\" << std::endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 8}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year.\" << endl;\n  } else {\n    cout << year << \" is not a leap year.\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 9}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  std::cin >> year;\n\n  if (IsLeapYear(year)) {\n    std::cout << year << \" is a leap year.\" << std::endl;\n  } else {\n    std::cout << year << \" is not a leap year.\" << std::endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 10}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year.\" << endl;\n  } else {\n    cout << year << \" is not a leap year.\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 1}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year.\" << endl;\n  } else {\n    cout << year << \" is not a leap year.\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 2}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year\" << endl;\n  } else {\n    cout << year << \" is not a leap year\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 3}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 4}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year.\" << endl;\n  } else {\n    cout << year << \" is not a leap year.\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 5}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year.\" << endl;\n  } else {\n    cout << year << \" is not a leap year.\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 6}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year\" << endl;\n  } else {\n    cout << year << \" is not a leap year\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 7}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int year) {\n    if (year % 4 == 0) {\n        if (year % 100 == 0) {\n            if (year % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year\" << endl;\n    } else {\n        cout << year << \" is not a leap year\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 8}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year.\" << endl;\n  } else {\n    cout << year << \" is not a leap year.\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 9}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 10}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year\" << endl;\n    } else {\n        cout << year << \" is not a leap year\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 1}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year\" << endl;\n    } else {\n        cout << year << \" is not a leap year\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 2}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year\" << endl;\n    } else {\n        cout << year << \" is not a leap year\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 3}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year\" << endl;\n    } else {\n        cout << year << \" is not a leap year\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 4}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year\" << endl;\n  } else {\n    cout << year << \" is not a leap year\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 5}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year\" << endl;\n  } else {\n    cout << year << \" is not a leap year\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 6}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year\" << endl;\n    } else {\n        cout << year << \" is not a leap year\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 7}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 8}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year\" << endl;\n    } else {\n        cout << year << \" is not a leap year\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 9}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year\" << endl;\n    } else {\n        cout << year << \" is not a leap year\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 10}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year\" << endl;\n  } else {\n    cout << year << \" is not a leap year\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 1}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 2}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year\" << endl;\n  } else {\n    cout << year << \" is not a leap year\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 3}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 4}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 5}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 6}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year\" << endl;\n  } else {\n    cout << year << \" is not a leap year\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 7}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year\" << endl;\n    } else {\n        cout << year << \" is not a leap year\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 8}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year\" << endl;\n  } else {\n    cout << year << \" is not a leap year\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 9}
{"problem": 5, "code": "#include <iostream>\n\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if (userYear % 4 == 0) {\n    if (userYear % 100 == 0) {\n      if (userYear % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nint main() {\n  int year;\n  cin >> year;\n\n  if (IsLeapYear(year)) {\n    cout << year << \" is a leap year\" << endl;\n  } else {\n    cout << year << \" is not a leap year\" << endl;\n  }\n\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 10}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore();\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 1}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 2}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 3}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    string phoneNumber = GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n\n    cout << phoneNumber << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 4}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"not found\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<string> nameVec(n);\n    vector<string> phoneNumberVec(n);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 5}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    string phoneNumber = GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n\n    cout << phoneNumber << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 6}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 7}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    string phoneNumber = GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n\n    cout << phoneNumber << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 8}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore();\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i];\n        cin >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 9}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore();\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "Gemini", "variation": 10}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    string phoneNumber = GetPhoneNumber(names, phoneNumbers, contactName);\n\n    cout << phoneNumber << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 1}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 2}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\"; \n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string searchName;\n    cin >> searchName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, searchName) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 3}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    string phoneNumber = GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n\n    cout << phoneNumber << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 4}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string searchName;\n    cin >> searchName;\n\n    string phoneNumber = GetPhoneNumber(names, phoneNumbers, searchName);\n\n    cout << phoneNumber << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 5}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 6}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\"; \n}\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore();\n\n    vector<string> names;\n    vector<string> phoneNumbers;\n\n    for (int i = 0; i < N; ++i) {\n        string name;\n        string phoneNumber;\n        cin >> name >> phoneNumber;\n        names.push_back(name);\n        phoneNumbers.push_back(phoneNumber);\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 7}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names;\n    vector<string> phoneNumbers;\n\n    for (int i = 0; i < N; ++i) {\n        string name, number;\n        cin >> name >> number;\n        names.push_back(name);\n        phoneNumbers.push_back(number);\n    }\n\n    string searchName;\n    cin >> searchName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, searchName) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 8}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    string phoneNumber = GetPhoneNumber(names, phoneNumbers, contactName);\n\n    cout << phoneNumber << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 9}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "Gemini", "variation": 10}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"not found\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<string> names(n);\n    vector<string> phoneNumbers(n);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 1}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<string> names(n);\n    vector<string> phoneNumbers(n);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 2}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 3}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<string> names(n);\n    vector<string> phoneNumbers(n);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 4}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 5}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 6}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<string> names(n);\n    vector<string> phoneNumbers(n);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 7}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n    cin.ignore();\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    cin.ignore();\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 8}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<string> names(n);\n    vector<string> phoneNumbers(n);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 9}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<string> names(n);\n    vector<string> phoneNumbers(n);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "Gemini", "variation": 10}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<string> names(n);\n    vector<string> phoneNumbers(n);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string searchName;\n    cin >> searchName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, searchName) << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 1}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<string> names(n);\n    vector<string> numbers(n);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> names[i] >> numbers[i];\n    }\n\n    string searchName;\n    cin >> searchName;\n\n    cout << GetPhoneNumber(names, numbers, searchName) << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 2}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"not found\"; \n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 3}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 4}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<string> names(n);\n    vector<string> phoneNumbers(n);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 5}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<string> names(n);\n    vector<string> phoneNumbers(n);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 6}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<string> names(n);\n    vector<string> numbers(n);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> names[i] >> numbers[i];\n    }\n\n    string searchName;\n    cin >> searchName;\n\n    cout << GetPhoneNumber(names, numbers, searchName) << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 7}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<string> names(n);\n    vector<string> phoneNumbers(n);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string searchName;\n    cin >> searchName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, searchName) << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 8}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n  for (int i = 0; i < nameVec.size(); ++i) {\n    if (nameVec[i] == contactName) {\n      return phoneNumberVec[i];\n    }\n  }\n  return \"not found\";\n}\n\nint main() {\n  int n;\n  cin >> n;\n\n  vector<string> names;\n  vector<string> numbers;\n\n  for (int i = 0; i < n; ++i) {\n    string name;\n    string number;\n    cin >> name >> number;\n    names.push_back(name);\n    numbers.push_back(number);\n  }\n\n  string searchName;\n  cin >> searchName;\n\n  cout << GetPhoneNumber(names, numbers, searchName) << endl;\n\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 9}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n  for (int i = 0; i < nameVec.size(); ++i) {\n    if (nameVec[i] == contactName) {\n      return phoneNumberVec[i];\n    }\n  }\n  return \"Not found\";\n}\n\nint main() {\n  int n;\n  cin >> n;\n\n  vector<string> names(n);\n  vector<string> phoneNumbers(n);\n\n  for (int i = 0; i < n; ++i) {\n    cin >> names[i];\n    cin >> phoneNumbers[i];\n  }\n\n  string targetName;\n  cin >> targetName;\n\n  cout << GetPhoneNumber(names, phoneNumbers, targetName) << endl;\n\n  return 0;\n}", "class": 1, "version": 4, "model": "Gemini", "variation": 10}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    return (std::abs(a) > std::abs(b)) ? a : b;\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 1}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if(std::abs(a) > std::abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n\n    std::cout << MaxMagnitude(num1, num2);\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 2}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int a, int b) {\n    return (abs(a) > abs(b) ? a : b);\n}\n\nint main() {\n    int num1, num2;\n\n    cin >> num1 >> num2;\n\n    cout << MaxMagnitude(num1, num2);\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 3}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if(abs(num1) > abs(num2))\n        return num1;\n    else\n        return num2;\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n\n    std::cout << MaxMagnitude(num1, num2);\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 4}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    return (std::abs(a) > std::abs(b) ? a : b);\n}\n\nint main() {\n    int num1, num2;\n\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 5}
{"problem": 1, "code": "#include<iostream>\n#include<cmath>\n\nint MaxMagnitude(int a, int b) {\n    return (std::abs(a) > std::abs(b) ? a : b);\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 6}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) > std::abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int number1, number2;\n\n    std::cin >> number1;\n    std::cin >> number2;\n\n    std::cout << MaxMagnitude(number1, number2);\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 7}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (abs(a) > abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    std::cin >> num1 >> num2;\n\n    std::cout << MaxMagnitude(num1, num2);\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 8}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if(abs(a) >= abs(b))\n        return a;\n    else\n        return b;\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 9}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    return (std::abs(num1) > std::abs(num2) ? num1 : num2);\n}\n\nint main() {\n    int number1, number2;\n    std::cin >> number1 >> number2;\n\n    std::cout << MaxMagnitude(number1, number2);\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 10}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) > abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 1}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b){\n    if(abs(a) > abs(b)){\n        return a;\n    }else{\n        return b;\n    }\n}\n\nint main() {\n    int x, y;\n\n    std::cin >> x >> y;\n\n    std::cout << MaxMagnitude(x, y);\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 2}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (abs(a) > abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    std::cin >> num1 >> num2;\n\n    std::cout << MaxMagnitude(num1, num2) << std::endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 3}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (std::abs(a) >= std::abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 4}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    return (abs(num1) > abs(num2)) ? num1 : num2;\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 5}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b){\n    if(abs(a) > abs(b)){\n        return a;\n    }\n    else{\n        return b;\n    }\n}\n\nint main(){\n    int num1, num2;\n    std::cin >> num1 >> num2;\n\n    std::cout << MaxMagnitude(num1, num2);\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 6}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2) {\n    if(abs(num1) > abs(num2)) {\n        return num1;\n    }\n    else {\n        return num2;\n    }\n}\n\nint main() {\n    int input1, input2;\n    cin >> input1 >> input2;\n\n    cout << MaxMagnitude(input1, input2);\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 7}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if(abs(num1) > abs(num2)) {\n        return num1;\n    }\n    else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 8}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) > abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    \n    std::cin >> num1 >> num2;\n    \n    std::cout << MaxMagnitude(num1, num2);\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 9}
{"problem": 1, "code": "#include<iostream>\n#include<cmath>\nusing namespace std;\n\nint MaxMagnitude(int a, int b) {\n    if(abs(a) > abs(b))\n        return a;\n    else\n        return b;\n}\n\nint main() {\n    int num1, num2;\n    cin >> num1 >> num2;\n    cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 10}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    return (std::abs(num1) > std::abs(num2)) ? num1 : num2;\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n\n    int result = MaxMagnitude(num1, num2);\n    std::cout << result;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 1}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2){\n    if(abs(num1) > abs(num2))\n        return num1;\n    else\n        return num2;\n}\n\nint main(){\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 2}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    return (abs(a) > abs(b)) ? a : b;\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 3}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b){\n    if(std::abs(a) > std::abs(b)){\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main(){\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 4}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    return (std::abs(a) > std::abs(b)) ? a : b;\n}\n\nint main() {\n    int num1, num2;\n\n    std::cin >> num1 >> num2;\n\n    std::cout << MaxMagnitude(num1, num2);\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 5}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (std::abs(a) > std::abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 6}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if(std::abs(num1) > std::abs(num2)){\n        return num1;\n    }\n    else{\n        return num2;\n    }\n}\n\nint main() {\n    int a, b;\n    std::cin >> a >> b;\n    std::cout << MaxMagnitude(a, b);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 7}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (std::abs(a) > std::abs(b)) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 8}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) > std::abs(num2)) {\n        return num1;\n    }\n    else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    \n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 9}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) > abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 10}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if(abs(num1) > abs(num2)) {\n        return num1;\n    }\n    else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    std::cout << \"Enter two numbers: \";\n    std::cin >> num1 >> num2;\n    \n    std::cout << \"The number with the largest magnitude is: \" << MaxMagnitude(num1, num2);\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 1}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b){\n    if(abs(a) > abs(b)){\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main(){\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 2}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) > abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    \n    std::cout << MaxMagnitude(num1, num2);\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 3}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) > std::abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int a, b;\n    std::cin >> a >> b;\n    std::cout << MaxMagnitude(a, b);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 4}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (abs(a) > abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n\n    std::cout << MaxMagnitude(num1, num2);\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 5}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) > std::abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int a, b;\n    std::cin >> a >> b;\n\n    std::cout << MaxMagnitude(a, b);\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 6}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if(abs(a) > abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 7}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2){\n  if(abs(num1) > abs(num2)){\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main(){\n  int num1, num2;\n  std::cout << \"Enter two numbers: \";\n  std::cin >> num1 >> num2;\n\n  int result = MaxMagnitude(num1, num2);\n  std::cout << \"The number with largest magnitude is: \" << result;\n\n  return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 8}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (std::abs(a) > std::abs(b)) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n\n    std::cout << MaxMagnitude(num1, num2);\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 9}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) > std::abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 10}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    return (std::abs(num1) > std::abs(num2)) ? num1 : num2;\n}\n\nint main() {\n    int a, b;\n    std::cin >> a >> b;\n    std::cout << MaxMagnitude(a, b);\n\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 1}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (std::abs(a) > std::abs(b)) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n\n    std::cout << MaxMagnitude(num1, num2);\n\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 2}
{"problem": 1, "code": "#include<iostream>\n#include<cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    return (std::abs(num1) > std::abs(num2)) ? num1 : num2;\n}\n\nint main() {\n    int num1, num2;\n\n    std::cin >> num1 >> num2;\n\n    std::cout << MaxMagnitude(num1, num2);\n\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 3}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib>\n\nint MaxMagnitude(int num1, int num2) {\n    return (std::abs(num1) > std::abs(num2)) ? num1 : num2;\n}\n\nint main() {\n    int a, b;\n    std::cin >> a >> b;\n    std::cout << MaxMagnitude(a, b);\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 4}
{"problem": 1, "code": "#include<iostream>\n#include<cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    return (abs(num1) > abs(num2)) ? num1 : num2;\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 5}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) > std::abs(num2))\n        return num1;\n    else\n        return num2;\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n\n    std::cout << MaxMagnitude(num1, num2);\n\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 6}
{"problem": 1, "code": "#include<iostream>\n#include<cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if(abs(num1) > abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 7}
{"problem": 1, "code": "#include<iostream>\n#include<cmath>\n\nint MaxMagnitude(int num1, int num2){\n    return (std::abs(num1) > std::abs(num2)) ? num1 : num2;\n}\n\nint main() {\n    int number1, number2;\n    std::cin >> number1 >> number2;\n    std::cout << MaxMagnitude(number1, number2);\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 8}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2){\n    if (std::abs(num1) > std::abs(num2)){\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 9}
{"problem": 1, "code": "#include<iostream>\n#include<cmath>\n\nint MaxMagnitude(int a, int b){\n    if(abs(a) > abs(b)){\n        return a;\n    }else{\n        return b;\n    }\n}\n\nint main(){\n    int x, y;\n    std::cin >> x >> y;\n    std::cout << MaxMagnitude(x, y);\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 10}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) > std::abs(num2))\n        return num1;\n    else\n        return num2;\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 1}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (std::abs(a) > std::abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    \n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 2}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    return (std::abs(num1) > std::abs(num2)) ? num1 : num2;\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 3}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if(std::abs(a) > std::abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int x, y;\n    std::cin >> x >> y;\n    std::cout << MaxMagnitude(x, y);\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 4}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if(abs(a) > abs(b)) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 5}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    return (std::abs(a) > std::abs(b)) ? a : b;\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    \n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 6}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if(abs(num1) > abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n\n    std::cout << MaxMagnitude(num1, num2);\n\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 7}
{"problem": 1, "code": "#include<iostream>\n#include<cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) > abs(num2)) {\n        return num1;\n    }\n    else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 8}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    return (std::abs(num1) > std::abs(num2)) ? num1 : num2;\n}\n\nint main() {\n    int number1, number2;\n    std::cin >> number1 >> number2;\n    std::cout << MaxMagnitude(number1, number2);\n    \n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 9}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if(std::abs(a) > std::abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int x, y;\n    std::cin >> x >> y;\n    std::cout << MaxMagnitude(x, y);\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 10}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (abs(a) > abs(b)) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    \n    std::cin >> num1 >> num2;\n\n    std::cout << MaxMagnitude(num1, num2);\n\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 1}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (std::abs(a) > std::abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 2}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) > std::abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int a, b;\n    std::cin >> a >> b;\n    std::cout << MaxMagnitude(a, b);\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 3}
{"problem": 1, "code": "#include<iostream>\n#include<cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) > std::abs(num2))\n        return num1;\n    else\n        return num2;\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 4}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (abs(a) > abs(b))\n        return a;\n    else\n        return b;\n}\n\nint main() {\n    int num1, num2;\n\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 5}
{"problem": 1, "code": "#include<iostream>\n#include<cmath>\n\nint MaxMagnitude(int num1, int num2){\n    if(abs(num1) > abs(num2))\n        return num1;\n    else\n        return num2;\n}\n\nint main(){\n    int num1, num2;\n    std::cin>>num1>>num2;\n    std::cout<<MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 6}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (abs(a) > abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 7}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (std::abs(a) > std::abs(b)) {\n        return a;\n    } \n    else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 8}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) > std::abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int a, b;\n    std::cin >> a >> b;\n\n    std::cout << MaxMagnitude(a, b);\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 9}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if(abs(a) > abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 10}
{"problem": 1, "code": "#include <iostream>\n#include <cmath> \n\n// Function to find the maximum magnitude\nint MaxMagnitude(int num1, int num2) {\n    // Using abs() function from cmath library to compare absolute values\n    if (abs(num1) > abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    // Taking two integer inputs from the user\n    std::cin >> num1 >> num2;\n\n    // Using the MaxMagnitude function and displaying the result\n    std::cout << MaxMagnitude(num1, num2);\n\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 1}
{"problem": 1, "code": "#include<iostream>\n#include<cmath> \n\nint MaxMagnitude(int x, int y) {\n    if(abs(x) > abs(y)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n\nint main() {\n    int a, b;\n    std::cin >> a >> b;\n    std::cout << MaxMagnitude(a, b);\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 2}
{"problem": 1, "code": "#include <iostream>\n#include <cmath> \n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) > abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 3}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if(std::abs(num1) > std::abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int input1, input2;\n    std::cin >> input1 >> input2;\n    std::cout << MaxMagnitude(input1, input2);\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 4}
{"problem": 1, "code": "#include<iostream>\n#include<cmath>\n\n// Function to find maximum magnitude\nint MaxMagnitude(int num1, int num2){\n    // Use abs() function to get absolute values\n    int abs_num1 = std::abs(num1);\n    int abs_num2 = std::abs(num2);\n\n    // Check for largest magnitude\n    if (abs_num1 > abs_num2){\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main(){\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2) << std::endl;\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 5}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\n// Function to get the maximum magnitude\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) > std::abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    std::cout << \"Enter two numbers: \";\n    std::cin >> num1 >> num2;\n\n    int maxMagnitude = MaxMagnitude(num1, num2);\n    std::cout << \"The number with largest magnitude is: \" << maxMagnitude << std::endl;\n\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 6}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\n// Function to find the maximum magnitude\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) > std::abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 7}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\n// Function MaxMagnitude\nint MaxMagnitude(int a, int b) {\n    if (abs(a) > abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    std::cout << \"Enter two integers: \";\n    std::cin >> num1 >> num2;\n\n    int maxMag = MaxMagnitude(num1, num2);\n\n    std::cout << \"The number with the largest magnitude is: \" << maxMag << std::endl;\n\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 8}
{"problem": 1, "code": "#include<iostream>\n#include<cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if(abs(num1) > abs(num2)) {\n        return num1;\n    }\n    else {\n        return num2;\n    }\n}\n\nint main() {\n    int input1, input2;\n    std::cin >> input1 >> input2;\n    std::cout << MaxMagnitude(input1, input2);\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 9}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\n// Function to find max magnitude\nint MaxMagnitude(int a, int b) {\n    // using abs function from cmath library\n    if (abs(a) > abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    \n    // User input\n    std::cout << \"Enter two integers: \";\n    std::cin >> num1 >> num2;\n\n    // Display largest magnitude value\n    std::cout << \"The value with the largest magnitude is: \" << MaxMagnitude(num1, num2);\n\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 10}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) > std::abs(num2)) {\n        return num1;\n    }\n    else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2) << std::endl;\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 1}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int a, int b){\n    if(abs(a) > abs(b)){\n        return a;\n    }\n    else{\n        return b;\n    }\n}\n\nint main(){\n    int num1, num2;\n    cin >> num1 >> num2;\n    cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 2}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (std::abs(a) > std::abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    \n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 3}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if(abs(num1) > abs(num2))\n        return num1;\n    else\n        return num2;\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 4}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) > std::abs(num2)) {\n        return num1;\n    }\n    else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 5}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    return (std::abs(a) > std::abs(b)) ? a : b;\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 6}
{"problem": 1, "code": "#include<iostream>\n#include<cmath>\n\nint MaxMagnitude(int a, int b){\n    if(abs(a) > abs(b)){\n        return a;\n    }\n    else{\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 7}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) > std::abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    \n    std::cout << MaxMagnitude(num1, num2);\n\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 8}
{"problem": 1, "code": "#include<iostream>\n#include<cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if(std::abs(num1) > std::abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    std::cin >> num1 >> num2;\n\n    std::cout << MaxMagnitude(num1, num2);\n\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 9}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) > abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 10}
{"problem": 1, "code": "#include<iostream>\n#include<cmath>\n\nint MaxMagnitude(int a, int b){\n    if(abs(a) > abs(b))\n        return a;\n    else\n        return b;\n}\n\nint main(){\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2) << std::endl;\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 1}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (std::abs(a) > std::abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    std::cin >> num1 >> num2;\n\n    std::cout << MaxMagnitude(num1, num2);\n\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 2}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) > std::abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int input1, input2;\n\n    std::cin >> input1;\n    std::cin >> input2;\n\n    std::cout << MaxMagnitude(input1, input2);\n\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 3}
{"problem": 1, "code": "#include<iostream>\n#include<cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (abs(a) > abs(b))\n        return a;\n    else\n        return b;\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 4}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (abs(a) > abs(b))\n        return a;\n    else\n        return b;\n}\n\nint main() {\n    int x, y;\n    std::cin >> x >> y;\n    std::cout << MaxMagnitude(x, y);\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 5}
{"problem": 1, "code": "#include<iostream>\n#include<cstdlib>\n\nint MaxMagnitude(int num1, int num2)\n{\n    if (std::abs(num1) > std::abs(num2))\n    {\n        return num1;\n    }\n    else\n    {\n        return num2;\n    }\n}\n\nint main()\n{\n    int num1, num2;\n    std::cout << \"Enter two integers: \";\n    std::cin >> num1 >> num2;\n    std::cout << \"Largest-magnitude value: \" << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 6}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (std::abs(a) > std::abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 7}
{"problem": 1, "code": "#include<iostream>\n#include<cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) > abs(num2))\n        return num1;\n    else\n        return num2;\n}\n\nint main() {\n    int a, b;\n    std::cin >> a >> b;\n\n    std::cout << MaxMagnitude(a, b);\n\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 8}
{"problem": 1, "code": "#include<iostream>\n#include<cmath>\n\nint MaxMagnitude(int a, int b) {\n    if(abs(a) > abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 9}
{"problem": 1, "code": "#include <iostream>\n\nint MaxMagnitude(int num1, int num2) {\n    if(abs(num1) > abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cout << \"Enter two integers: \";\n    std::cin >> num1 >> num2;\n    std::cout << \"Largest magnitude value is: \" << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 10}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 1}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return (double)userSteps / 2000;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 2}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n\n    std::cout << StepsToMiles(steps);\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 3}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 4}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return (double)userSteps / 2000;\n}\n\nint main() {\n    int userSteps;\n    std::cin >> userSteps;\n\n    double miles = StepsToMiles(userSteps);\n    std::cout << miles;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 5}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 6}
{"problem": 2, "code": "#include<iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int userSteps;\n    std::cin >> userSteps;\n    std::cout << StepsToMiles(userSteps);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 7}
{"problem": 2, "code": "#include<iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 8}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int userSteps;\n    std::cin >> userSteps;\n    std::cout << StepsToMiles(userSteps);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 9}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n\n    cout << StepsToMiles(steps);\n    \n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 10}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int userSteps;\n    std::cin >> userSteps;\n    std::cout << StepsToMiles(userSteps);\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 1}
{"problem": 2, "code": "#include<iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int userSteps;\n    std::cin >> userSteps;\n    std::cout << StepsToMiles(userSteps);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 2}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int userSteps;\n    cin >> userSteps;\n    cout << StepsToMiles(userSteps);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 3}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 4}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int userSteps;\n    std::cin >> userSteps;\n    std::cout << StepsToMiles(userSteps);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 5}
{"problem": 2, "code": "#include<iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 6}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 7}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 8}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n  return userSteps / 2000.0;\n}\n\nint main() {\n  int userSteps;\n  std::cin >> userSteps;\n  std::cout << StepsToMiles(userSteps);\n  return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 9}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 10}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return (double)userSteps / 2000;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 1}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps);\n\nint main() {\n    int steps;\n    std::cin >> steps;\n\n    double miles = StepsToMiles(steps);\n    std::cout << miles;\n\n    return 0;\n}\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 2}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 3}
{"problem": 2, "code": "#include<iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 4}
{"problem": 2, "code": "#include<iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 5}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int userSteps;\n    cin >> userSteps;\n    cout << StepsToMiles(userSteps);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 6}
{"problem": 2, "code": "#include<iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps){\n    return userSteps / 2000.0;\n}\n\nint main(){\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 7}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 8}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 9}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n\n    cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 10}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps);\n\nint main() {\n   int steps;\n   cin >> steps;\n\n   cout << StepsToMiles(steps);\n\n   return 0;\n}\n\ndouble StepsToMiles(int userSteps) {\n   return userSteps / 2000.0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 1}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 2}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 3}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 4}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 5}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps) << std::endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 6}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    \n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 7}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int userSteps;\n    std::cin >> userSteps;\n    std::cout << StepsToMiles(userSteps);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 8}
{"problem": 2, "code": "#include<iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 9}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    cout << \"Enter the number of steps: \";\n    cin >> steps;\n    cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 10}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps);\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 1}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 2}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 3}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 4}
{"problem": 2, "code": "#include<iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps){\n    return userSteps / 2000.0;\n}\n\nint main(){\n    int userSteps;\n    cin >> userSteps;\n    cout << StepsToMiles(userSteps);\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 5}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int userSteps;\n    std::cin >> userSteps;\n    std::cout << StepsToMiles(userSteps);\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 6}
{"problem": 2, "code": "#include<iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps)\n{\n    return (double)userSteps / 2000;\n}\n\nint main()\n{\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 7}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 8}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return (double)userSteps / 2000;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 9}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int userSteps;\n    std::cin >> userSteps;\n    std::cout << StepsToMiles(userSteps);\n\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 10}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n\n    double miles = StepsToMiles(steps);\n    cout << miles;\n\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 1}
{"problem": 2, "code": "#include<iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n\n    cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 2}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    double miles = StepsToMiles(steps);\n    std::cout << miles;\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 3}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 4}
{"problem": 2, "code": "#include<iostream>\n\ndouble StepsToMiles(int userSteps){\n    return userSteps/2000.0;\n}\n\nint main(){\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 5}
{"problem": 2, "code": "#include<iostream>\n\ndouble StepsToMiles(int userSteps){\n    return userSteps / 2000.0;\n}\n\nint main(){\n    int userSteps;\n    std::cin >> userSteps;\n    std::cout << StepsToMiles(userSteps);\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 6}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int userSteps;\n    std::cin >> userSteps;\n\n    std::cout << StepsToMiles(userSteps);\n\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 7}
{"problem": 2, "code": "#include<iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 8}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 9}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n\n    std::cout << StepsToMiles(steps);\n    \n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 10}
{"problem": 2, "code": "#include<iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    double miles = (double)userSteps / 2000;\n    return miles;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 1}
{"problem": 2, "code": "#include<iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 2}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int userSteps;\n    std::cin >> userSteps;\n\n    double milesWalked = StepsToMiles(userSteps);\n    std::cout << milesWalked;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 3}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n\n    std::cout << StepsToMiles(steps);\n\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 4}
{"problem": 2, "code": "#include<iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000;\n}\n\nint main() {\n    int userSteps;\n    std::cin >> userSteps;\n    std::cout << StepsToMiles(userSteps);\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 5}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000;\n}\n\nint main() {\n    int userSteps;\n    std::cin >> userSteps;\n    std::cout << StepsToMiles(userSteps);\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 6}
{"problem": 2, "code": "#include<iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return (double)userSteps / 2000;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 7}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps){\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int userSteps;\n    std::cin >> userSteps;\n    \n    double miles = StepsToMiles(userSteps);\n    std::cout << miles;\n    \n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 8}
{"problem": 2, "code": "#include<iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 9}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 10}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n// Function declaration\ndouble StepsToMiles(int userSteps);\n\nint main() {\n    int userSteps;\n    cout << \"Enter the number of steps: \";\n    cin >> userSteps;\n    cout << \"Miles walked: \" << StepsToMiles(userSteps);\n    return 0;\n}\n\n// Function definition\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 1}
{"problem": 2, "code": "#include <iostream>\n\n// Function to convert steps to miles\ndouble StepsToMiles(int userSteps) {\n    const double stepsPerMile = 2000.0;\n    return userSteps / stepsPerMile;\n}\n\nint main() {\n    int userSteps;\n\n    // Get the input from the user\n    std::cin >> userSteps;\n\n    // Print the miles\n    std::cout << StepsToMiles(userSteps);\n\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 2}
{"problem": 2, "code": "#include <iostream>\n\n// Function to convert steps to miles\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000;\n}\n\nint main() {\n    int userSteps;\n\n    // Ask the user to input the number of steps\n    std::cout << \"Enter the number of steps: \";\n    std::cin >> userSteps;\n\n    // Call the function and display the result\n    std::cout << \"Miles walked: \" << StepsToMiles(userSteps) << std::endl;\n\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 3}
{"problem": 2, "code": "#include <iostream>\n\n// Function to convert steps to miles\ndouble StepsToMiles(int userSteps) {\n    // 2000 steps = 1 mile\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cout << \"Enter the number of steps: \";\n    std::cin >> steps;\n\n    double miles = StepsToMiles(steps);\n    std::cout << \"Miles walked: \" << miles;\n\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 4}
{"problem": 2, "code": "#include<iostream>\nusing namespace std;\n\n// Function that converts steps to miles.\ndouble StepsToMiles(int userSteps) {\n    // There are 2000 steps in a mile.\n    return (double)userSteps / 2000;\n}\n\nint main() {\n    int steps;\n\n    cout << \"Enter number of steps: \";\n    cin >> steps;\n\n    // Call the function and output the result.\n    cout << \"Miles walked: \" << StepsToMiles(steps);\n\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 5}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\n// Function to convert steps to miles\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    \n    // User input for steps\n    cin >> steps;\n    \n    // Print miles walked\n    cout << StepsToMiles(steps);\n    \n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 6}
{"problem": 2, "code": "#include<iostream>\n\n// Function to convert steps to miles\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 7}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    cout << \"Enter the number of steps: \";\n    cin >> steps;\n    cout << \"Miles walked: \" << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 8}
{"problem": 2, "code": "#include<iostream>\nusing namespace std;\n\n// Function to convert steps to miles\ndouble StepsToMiles(int userSteps) {\n    double miles = userSteps / 2000.0;\n    return miles;\n}\n\nint main() {\n    int steps;\n    cout << \"Enter steps: \";\n    cin >> steps;\n    double result = StepsToMiles(steps);\n    cout << \"Miles walked: \" << result << endl;\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 9}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 10}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return (double)userSteps / 2000;\n}\n\nint main() {\n    int steps;\n    cout << \"Enter number of steps: \";\n    cin >> steps;\n    \n    cout << StepsToMiles(steps);\n    \n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 1}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps);\n\nint main() {\n    int steps;\n\n    std::cin >> steps;\n\n    std::cout << StepsToMiles(steps);\n\n    return 0;\n}\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 2}
{"problem": 2, "code": "#include<iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps);\n\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 3}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int userSteps;\n    std::cin >> userSteps;\n    std::cout << StepsToMiles(userSteps);\n\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 4}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    double miles = userSteps / 2000.0;\n    return miles;\n}\n\nint main() {\n    int steps;\n    cout << \"Enter the number of steps: \";\n    cin >> steps;\n    double miles = StepsToMiles(steps);\n    cout.precision(4);\n    cout << fixed << miles << endl;\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 5}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 6}
{"problem": 2, "code": "#include<iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000;\n}\n\nint main() {\n    int userSteps;\n    std::cin >> userSteps;\n    std::cout << StepsToMiles(userSteps);\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 7}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 8}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 9}
{"problem": 2, "code": "#include<iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000;\n}\n\nint main() {\n    int steps;\n    cout << \"Enter number of steps: \";\n    cin >> steps;\n    cout << \"Miles walked: \" << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 10}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    double miles = StepsToMiles(steps);\n    std::cout << miles;\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 1}
{"problem": 2, "code": "#include<iostream>\n\ndouble StepsToMiles(int userSteps) {\n    double miles = userSteps / 2000.0;\n    return miles;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps) << std::endl;\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 2}
{"problem": 2, "code": "#include<iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n  double milesWalked = userSteps / 2000.0;\n  return milesWalked;\n}\n\nint main() {\n  int steps;\n  cout << \"Enter the number of steps:\";\n  cin >> steps;\n  cout << StepsToMiles(steps);\n  return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 3}
{"problem": 2, "code": "#include<iostream>\n\ndouble StepsToMiles(int userSteps){\n    return userSteps / 2000.0;\n}\n\nint main(){\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 4}
{"problem": 2, "code": "#include<iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int userSteps;\n    std::cin >> userSteps;\n    std::cout << StepsToMiles(userSteps);\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 5}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 6}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int userSteps;\n    std::cin >> userSteps;\n    std::cout << StepsToMiles(userSteps);\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 7}
{"problem": 2, "code": "#include<iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int userSteps;\n    std::cin >> userSteps;\n    std::cout << StepsToMiles(userSteps);\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 8}
{"problem": 2, "code": "#include<iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 9}
{"problem": 2, "code": "#include<iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 10}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 1}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.size(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 2}
{"problem": 3, "code": "#include <string>\n#include <iostream>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    \n    for (int i = 0; i < userPhrase.size(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    \n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 3}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for(int i = 0; i < userPhrase.size(); i++){\n        if(i == 0 && isupper(userPhrase[i])){\n            acronym += userPhrase[i];\n        }\n        else if(userPhrase[i] == ' ' && isupper(userPhrase[i+1])){\n            acronym += userPhrase[i+1];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n\n    cout << CreateAcronym(userPhrase);\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 4}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 5}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase) << endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 6}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (isupper(userPhrase[i]))\n            acronym += userPhrase[i];\n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    cout << CreateAcronym(phrase);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 7}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    \n    for(int i = 0; i < userPhrase.length(); i++){\n        if(isupper(userPhrase[i])){\n            acronym += userPhrase[i];\n        }\n    }\n    \n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n\n    getline(cin, userPhrase);\n\n    cout << CreateAcronym(userPhrase);\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 8}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n        else if (userPhrase[i] == ' ' && isupper(userPhrase[i + 1])) {\n            acronym += userPhrase[i + 1];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    std::string userPhrase;\n    std::getline(std::cin, userPhrase);\n\n    std::string acronym = CreateAcronym(userPhrase);\n    std::cout << acronym << std::endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 9}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 10}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym;\n    for(int i = 0; i < userPhrase.size(); i++) {\n        if(isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 1}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n        else if (userPhrase[i] == ' ' && isupper(userPhrase[i + 1])) {\n            acronym += userPhrase[i + 1];\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n\n    cout << CreateAcronym(userPhrase);\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 2}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.size(); i++) {\n        if (i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n        else if (userPhrase[i] == ' ' && isupper(userPhrase[i + 1])) {\n            acronym += userPhrase[i + 1];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 3}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nstd::string CreateAcronym(std::string userPhrase);\n\nint main() {\n    std::string userPhrase;\n    std::getline(std::cin, userPhrase);\n\n    std::cout << CreateAcronym(userPhrase);\n\n    return 0;\n}\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::string acronym = \"\";\n\n    for(int i = 0; i < userPhrase.length(); i++){\n        if(i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n        else if(userPhrase[i] == ' ' && i + 1 < userPhrase.length() && isupper(userPhrase[i + 1])) {\n            acronym += userPhrase[i + 1];\n        }\n    }\n\n    return acronym;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 4}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for(int i = 0; i < userPhrase.length(); i++) {\n        if(i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        } else if(userPhrase[i] == ' ' && isupper(userPhrase[i + 1])) {\n            acronym += userPhrase[i + 1];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 5}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::string acronym;\n    for (int i = 0; i < userPhrase.size(); i++) {\n        if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    std::string userPhrase;\n    std::getline(std::cin, userPhrase);\n    std::cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 6}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase) << endl;\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 7}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 8}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::string acronym;\n    \n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n        else if (userPhrase[i] == ' ' && i+1 != userPhrase.length() && isupper(userPhrase[i + 1])) {\n            acronym += userPhrase[i + 1];\n        }\n    }\n    \n    return acronym;\n}\n\nint main() {\n    std::string userPhrase;\n    std::getline(std::cin, userPhrase);\n    \n    std::cout << CreateAcronym(userPhrase);\n    \n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 9}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n\n    for (int i = 0; i < userPhrase.size(); i++) {\n        if (i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n        else if (userPhrase[i] == ' ' && isupper(userPhrase[i+1])) {\n            acronym += userPhrase[i+1];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase) << endl;\n    \n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 10}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n        else if (userPhrase[i] == ' ' && isupper(userPhrase[i + 1])) {\n            acronym += userPhrase[i + 1];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 1}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    cout << CreateAcronym(phrase) << endl;\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 2}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::string acronym;\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n        else if (userPhrase[i] == ' ' && isupper(userPhrase[i + 1])) {\n            acronym += userPhrase[i + 1];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    std::string userPhrase;\n    std::getline(std::cin, userPhrase);\n    std::cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 3}
{"problem": 3, "code": "#include <string>\n#include <iostream>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        } else if (userPhrase[i-1] == ' ' && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 4}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.size(); ++i) {\n        if (i == 0 || userPhrase.at(i - 1) == ' ') {\n            if (isupper(userPhrase.at(i))) {\n                acronym += userPhrase.at(i);\n            }\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 5}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (i == 0 && isupper(userPhrase[i])) \n            acronym += userPhrase[i];\n        else if (userPhrase[i] == ' ' && isupper(userPhrase[i + 1])) \n            acronym += userPhrase[i + 1];\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 6}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (i == 0 && isupper(userPhrase[i]))\n            acronym += userPhrase[i];\n        else if (userPhrase[i] == ' ' && isupper(userPhrase[i + 1]))\n            acronym += userPhrase[i + 1];\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 7}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    \n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    \n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    \n    cout << CreateAcronym(userPhrase) << endl;\n    \n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 8}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 9}
{"problem": 3, "code": "#include <string>\n#include <iostream>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.size(); i++) {\n        if (i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n        else if (userPhrase[i] == ' ' && isupper(userPhrase[i + 1])) {\n            acronym += userPhrase[i + 1];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 10}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n\n    cout << CreateAcronym(userPhrase);\n    \n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 1}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::string acronym = \"\";\n    for(int i=0; i<userPhrase.size(); i++) {\n        if(isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    std::string userPhrase;\n    std::getline(std::cin, userPhrase);\n    std::cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 2}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n        else if (userPhrase[i] == ' ' && isupper(userPhrase[i + 1])) {\n            acronym += userPhrase[i + 1];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    std::string userPhrase;\n    std::getline(std::cin, userPhrase);\n    std::cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 3}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n            acronym += userPhrase[i];\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n\n    getline(cin, userPhrase);\n\n    cout << CreateAcronym(userPhrase);\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 4}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase);\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 5}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool createAcronym = true;\n\n    for (char i : userPhrase) {\n        if (createAcronym && isupper(i)) {\n            acronym += i;\n            createAcronym = false;\n        }\n        else if (i == ' ') {\n            createAcronym = true;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 6}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    \n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n        else if (userPhrase[i] == ' ' && i + 1 < userPhrase.length() && isupper(userPhrase[i + 1])) {\n            acronym += userPhrase[i + 1];\n        }\n    }\n    \n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    \n    getline(cin, userPhrase);\n    \n    cout << CreateAcronym(userPhrase) << endl;\n    \n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 7}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase);\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 8}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for(int i = 0; i < userPhrase.length(); i++) {\n        if(i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n        else if(userPhrase[i-1] == ' ' && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 9}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::string acronym = \"\";\n\n    for(int i = 0; i < userPhrase.length(); ++i) {\n        if(i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n        else if(userPhrase[i] == ' ' && isupper(userPhrase[i+1])) {\n            acronym += userPhrase[i+1];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    std::string userPhrase;\n    getline(std::cin, userPhrase);\n    \n    std::cout << CreateAcronym(userPhrase);\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 10}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase){\n    string acronym = \"\";\n    for(int i=0; i<userPhrase.length(); i++){\n        if(i == 0 && isupper(userPhrase[i])){\n            acronym += userPhrase[i];\n        }\n        else if(userPhrase[i-1] == ' ' && isupper(userPhrase[i])){\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 1}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym;\n    for(int i = 0; i < userPhrase.length(); i++) {\n        if(i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        } else if(userPhrase[i-1] == ' ' && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n\n    cout << CreateAcronym(userPhrase);\n\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 2}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase);\n\nint main() {\n   string userPhrase;\n   getline(cin, userPhrase);\n\n   cout << CreateAcronym(userPhrase) << endl;\n\n   return 0;\n}\n\nstring CreateAcronym(string userPhrase) {\n   string acronym = \"\";\n\n   for (int i = 0; i < userPhrase.length(); i++) {\n      if (isupper(userPhrase[i])) {\n         acronym += userPhrase[i];\n      }\n   }\n   \n   return acronym;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 3}
{"problem": 3, "code": "#include <iostream>\n#include <sstream>\n#include <string>\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::string acronym;\n    std::istringstream iss(userPhrase);\n    std::string word;\n    while (iss >> word) {\n        if (isupper(word[0])) {\n            acronym += word[0];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    std::string userPhrase;\n    std::getline(std::cin, userPhrase);\n    std::cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 4}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym;\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 5}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym;\n    stringstream ss(userPhrase);\n    string word;\n    \n    while (ss >> word) {\n        if(isupper(word[0]))\n            acronym += word[0];\n    }\n    \n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n\n    cout << CreateAcronym(userPhrase);\n\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 6}
{"problem": 3, "code": "#include <string>\n#include <sstream>\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::string acronym;\n    std::stringstream ss(userPhrase);\n    std::string word;\n    while (ss >> word) {\n        if (isupper(word[0])) {\n            acronym += word[0];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    std::string phrase = \"Institute of Electrical and Electronics Engineers\";\n    std::string result = CreateAcronym(phrase);\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 7}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n\n    for (int i = 0; i < userPhrase.size(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n\n    string acronym = CreateAcronym(userPhrase);\n\n    cout << acronym;\n\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 8}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::string acronym;\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    std::string userPhrase;\n    getline(std::cin, userPhrase);\n    std::cout << CreateAcronym(userPhrase) << std::endl;\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 9}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::string acronym;\n    for(int i = 0; i < userPhrase.size(); i++){\n        if(isupper(userPhrase[i])){\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    std::string userPhrase;\n    std::getline(std::cin, userPhrase);\n    std::string acronym = CreateAcronym(userPhrase);\n    std::cout << acronym;\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 10}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.size(); i++) {\n        if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 1}
{"problem": 3, "code": "#include <iostream>\n#include <sstream>\n#include <string>\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::string acronym;\n    std::stringstream ss(userPhrase);\n    std::string word;\n\n    while (ss >> word) {\n        if (isupper(word[0])) {\n            acronym += word[0];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    std::string userPhrase;\n    std::getline(std::cin, userPhrase);\n    std::cout << CreateAcronym(userPhrase) << std::endl;\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 2}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nstd::string CreateAcronym(std::string userPhrase);\n\nint main() {\n    std::string userPhrase;\n    getline(std::cin, userPhrase);\n\n    std::cout << CreateAcronym(userPhrase);\n\n    return 0;\n}\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::string acronym = \"\";\n    for (int i = 0; i < userPhrase.size(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 3}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym;\n    for (int i = 0; i < userPhrase.size(); ++i) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 4}
{"problem": 3, "code": "#include <string>\n#include <iostream>\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::string acronym;\n\n    for(int i = 0; i < userPhrase.length(); i++) {\n        if(i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n        else if(userPhrase[i-1] == ' ' && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    std::string userPhrase;\n    std::getline(std::cin, userPhrase);\n    \n    std::string acronym = CreateAcronym(userPhrase);\n\n    std::cout << acronym;\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 5}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <sstream>\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::string result, word;\n    std::stringstream ss(userPhrase);\n\n    while (ss >> word) {\n        if (isupper(word[0]))\n            result += word[0];\n    }\n\n    return result;\n}\n\nint main() {\n    std::string userPhrase;\n    std::getline(std::cin, userPhrase);\n\n    std::cout << CreateAcronym(userPhrase);\n\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 6}
{"problem": 3, "code": "#include <iostream>\n#include <sstream>\n#include <string>\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::string acronym = \"\";\n    std::istringstream iss(userPhrase);\n\n    std::string word;\n    while (iss >> word) {\n        if (isupper(word[0])) {\n            acronym += word[0];\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    std::string userPhrase;\n    std::getline(std::cin, userPhrase);\n\n    std::string acronym = CreateAcronym(userPhrase);\n\n    std::cout << acronym << std::endl;\n\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 7}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase);\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 8}
{"problem": 3, "code": "#include<iostream>\n#include<string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.size(); i++) {\n        if (i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n        else if (userPhrase[i - 1] == ' ' && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 9}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    \n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        } else if (userPhrase[i] == ' ' && i+1 < userPhrase.length() && isupper(userPhrase[i+1])) {\n            acronym += userPhrase[i+1];\n        }\n    }\n    \n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    \n    cout << CreateAcronym(userPhrase);\n    \n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 10}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::string acronym = \"\";\n\n    for (int i = 0; i < userPhrase.size(); i++) {\n        if (i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n        else if (userPhrase[i] == ' ' && isupper(userPhrase[i + 1])) {\n            acronym += userPhrase[i + 1];\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    std::string userPhrase;\n    getline(std::cin, userPhrase);\n    std::cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 1}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    string result = CreateAcronym(userPhrase);\n    cout << result;\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 2}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (userPhrase[i] == ' ') {\n            newWord = true;\n        } else if (newWord && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n            newWord = false;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n\n    string acronym = CreateAcronym(userPhrase);\n    cout << acronym;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 3}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.size(); i++) {\n        if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    string acronym = CreateAcronym(userPhrase);\n    cout << acronym;\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 4}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 5}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase);\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}\n\nstring CreateAcronym(string userPhrase) {\n    string acronym;\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 6}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase);\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    \n    cout << CreateAcronym(userPhrase);\n    \n    return 0;\n}\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    \n    for(int i = 0; i < userPhrase.length(); i++) {\n        if(isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    \n    return acronym;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 7}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym;\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n        else if (userPhrase[i] == ' ' && isupper(userPhrase[i + 1])) {\n            acronym += userPhrase[i + 1];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    \n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 8}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym;\n    for(int i = 0; i < userPhrase.size(); i++) {\n        if(isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n\n    string acronym = CreateAcronym(userPhrase);\n\n    cout << acronym;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 9}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.size(); i++) {\n        if (i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        } else if (userPhrase[i] == ' ' && isupper(userPhrase[i + 1])) {\n            acronym += userPhrase[i + 1];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 10}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nstd::string CreateAcronym(std::string userPhrase);\n\nint main() {\n    std::string userPhrase;\n    getline(std::cin, userPhrase);\n    std::string acronym = CreateAcronym(userPhrase);\n    std::cout << acronym << std::endl;\n\n    return 0;\n}\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::string acronym;\n    bool addChar = true;\n\n    for (char& c : userPhrase) {\n        if (addChar && isupper(c)) {\n            acronym += c;\n            addChar = false;\n        }\n\n        if (c == ' ') {\n            addChar = true;\n        }\n    }\n\n    return acronym;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 1}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase);\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n\n    cout << CreateAcronym(userPhrase) << endl;\n\n    return 0;\n}\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n\n    for (unsigned int i = 0; i < userPhrase.length(); i++) {\n        if (i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n        else if (userPhrase[i] == ' ' && i < userPhrase.length() - 1 && isupper(userPhrase[i + 1])) {\n            acronym += userPhrase[i + 1];\n        }\n    }\n\n    return acronym;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 2}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\n// Function prototype\nstring CreateAcronym(string userPhrase);\n\nint main() {\n    string userPhrase;\n    \n    // Get user input\n    getline(cin, userPhrase);\n    \n    // Call function and print the result\n    cout << CreateAcronym(userPhrase) << endl;\n\n    return 0;\n}\n\n// Function to create Acronym\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    \n    for (int i = 0; i < userPhrase.length(); i++) {\n        // Check if character is upper case\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 3}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase);\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase) << endl;\n    return 0;\n}\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 4}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase);\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    stringstream ss(userPhrase);\n    string word;\n    while (ss >> word) {\n        if (isupper(word[0])) {\n            acronym += word[0];\n        }\n    }\n    return acronym;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 5}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\n// Function to create acronym from given phrase\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.size(); i++) {\n        // If the character is upper case or it is the first character of the phrase\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 6}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase);\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n\n    string acronym = CreateAcronym(userPhrase);\n\n    cout << acronym;\n\n    return 0;\n}\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n            acronym += userPhrase[i];\n        }\n    }\n\n    return acronym;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 7}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\n// Function to create the Acronym\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.size(); i++) {\n        // Check if character is upper case\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    // Get the input phrase from the user\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 8}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n\n    for (int i = 0; i < userPhrase.size(); i++) {\n        // Check if the character is an uppercase letter\n        if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n            acronym += userPhrase[i];\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n\n    // Fetch the phrase\n    getline(cin, userPhrase);\n\n    // Call function to create acronym\n    string acronym = CreateAcronym(userPhrase);\n\n    // Output the acronym\n    cout << acronym;\n\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 9}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\n// function to create an acronym\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool addNextChar = true;\n    for (char& c : userPhrase) {\n        if (c == ' ')\n            addNextChar = true;\n        else if (addNextChar && isupper(c)) {\n            acronym += c;\n            addNextChar = false;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string inputPhrase;\n    getline(cin, inputPhrase);\n    cout << CreateAcronym(inputPhrase);\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 10}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym;\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n        else if (userPhrase[i] == ' ' && i < userPhrase.length() - 1 && isupper(userPhrase[i + 1])) {\n            acronym += userPhrase[i + 1];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string phrase;\n    getline(cin, phrase);\n    cout << CreateAcronym(phrase);\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 1}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym;\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n            acronym.push_back(userPhrase[i]);\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 2}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.size(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 3}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n        if (userPhrase[i] == ' ' && isupper(userPhrase[i+1])) {\n            acronym += userPhrase[i+1];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n\n    getline(cin, userPhrase);\n\n    cout << CreateAcronym(userPhrase);\n\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 4}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool newWord = true;\n    for (char& c : userPhrase) {\n        if (newWord && isupper(c)) {\n            acronym += c;\n            newWord = false;\n        } else if (c == ' ') {\n            newWord = true;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase) << endl;\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 5}
{"problem": 3, "code": "#include <iostream>\n#include <sstream>\n#include <string>\n\nstd::string CreateAcronym(std::string userPhrase);\n\nint main() {\n    std::string userPhrase;\n    std::getline(std::cin, userPhrase);\n\n    std::cout << CreateAcronym(userPhrase) << std::endl;\n\n    return 0;\n}\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::string acronym;\n    std::istringstream ss(userPhrase);\n\n    std::string word;\n    while (ss >> word) {\n        if (isupper(word[0])) {\n            acronym += word[0];\n        }\n    }\n\n    return acronym;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 6}
{"problem": 3, "code": "#include<iostream>\n#include<string>\n#include<sstream>\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::stringstream ss(userPhrase);\n    std::string word, acronym = \"\";\n\n    while (ss >> word) {\n        if (isupper(word[0])) {\n            acronym += word[0];\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    std::string userPhrase;\n\n    std::getline(std::cin, userPhrase);\n    std::string acronym = CreateAcronym(userPhrase);\n    std::cout << acronym;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 7}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (i == 0 || userPhrase[i - 1] == ' ') {\n            if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n                acronym += userPhrase[i];\n            }\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    std::string userPhrase;\n    std::getline(std::cin, userPhrase);\n    std::cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 8}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 9}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for(int i=0; i<userPhrase.length(); i++) {\n        if (i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        } else if (userPhrase[i] == ' ' && i + 1 != userPhrase.length() && isupper(userPhrase[i + 1])) {\n            acronym += userPhrase[i + 1];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 10}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::string acronym = \"\";\n    for(int i=0; i<userPhrase.length(); i++) {\n        if(i == 0 && isupper(userPhrase[i]))\n            acronym += userPhrase[i];\n        else if(userPhrase[i-1] == ' ' && isupper(userPhrase[i]))\n            acronym += userPhrase[i];\n    }\n    return acronym;\n}\n\nint main() {\n    std::string userPhrase;\n    getline(std::cin, userPhrase);\n    std::cout << CreateAcronym(userPhrase) << std::endl;\n    return 0;\n}\n", "class": 1, "version": 10, "model": "GPT-4", "variation": 1}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    bool addNextChar = true;\n\n    for (char& c : userPhrase) {\n        if (addNextChar && isupper(c)) {\n            acronym += c;\n        }\n        \n        if (c == ' ') {\n            addNextChar = true;\n        } else {\n            addNextChar = false;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n\n    cout << CreateAcronym(userPhrase);\n\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 2}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.size(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 3}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n\n    for (int i = 0; i < userPhrase.size(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n\n    getline(cin, userPhrase);\n\n    string acronym = CreateAcronym(userPhrase);\n    cout << acronym;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 4}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::string acronym;\n    for (int i = 0; i < userPhrase.size(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    std::string userPhrase;\n    std::getline(std::cin, userPhrase);\n    std::cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 5}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase);\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase) << endl;\n    return 0;\n}\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.size(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 6}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::string acronym = \"\";\n\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n        else if (userPhrase[i] == ' ' && isupper(userPhrase[i + 1])) {\n            acronym += userPhrase[i + 1];\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    std::string userPhrase;\n    getline(std::cin, userPhrase);\n    std::cout << CreateAcronym(userPhrase) << std::endl;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 7}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym;\n    for(int i = 0; i < userPhrase.size(); ++i) {\n        if (i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n        else if (userPhrase[i-1] == ' ' && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 8}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n        else if (userPhrase[i] == ' ' && isupper(userPhrase[i + 1])) {\n            acronym += userPhrase[i + 1];\n        }\n    }\n    \n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    \n    cout << CreateAcronym(userPhrase) << endl;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 9}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n        else if (userPhrase[i] == ' ' && isupper(userPhrase[i + 1])) {\n            acronym += userPhrase[i + 1];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 10}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.size(); i++) {\n        if(userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char inputChar;\n    string inputStr;\n\n    cin >> inputChar;\n    getline(cin >> ws, inputStr);\n\n    int result = CountCharacters(inputChar, inputStr);\n\n    cout << result;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 1}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    int count = CountCharacters(userChar, userString);\n    cout << count;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 2}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin >> ws, userString);\n\n    cout << CountCharacters(userChar, userString);\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 3}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString);\n    \n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 4}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nint CountCharacters(char userChar, std::string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.size(); ++i) {\n        if(userString[i] == userChar)\n            ++count;\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    std::string userString;\n\n    std::cin >> userChar;\n    std::cin.ignore();\n    std::getline(std::cin, userString);\n\n    std::cout << CountCharacters(userChar, userString);\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 5}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); ++i) {\n        if (userString[i] == userChar) {\n            ++count;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin >> ws, userString);\n\n    cout << CountCharacters(userChar, userString);\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 6}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.size(); i++) {\n        if(userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char inputChar;\n    string inputString;\n    \n    cin >> inputChar;\n    cin.ignore();\n    getline(cin, inputString);\n    \n    cout << CountCharacters(inputChar, inputString);\n    \n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 7}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    cout << CountCharacters(userChar, userString) << endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 8}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.size(); i++) {\n        if(userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString);\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 9}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    int count = CountCharacters(userChar, userString);\n    cout << count << endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 10}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString);\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 1}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.size(); i++) {\n        if(userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 2}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString){\n    int count = 0;\n    for(int i = 0; i < userString.size(); i++){\n        if(userString[i] == userChar){\n            count++;\n        }\n    }\n    return count;\n}\n\nint main(){\n    char userChar;\n    string userString;\n    \n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    \n    cout << CountCharacters(userChar, userString);\n    \n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 3}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.length(); i++)\n    {\n        if(userString[i] == userChar)\n            count++;\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString);\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 4}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString){\n    int count = 0;\n    for(int i = 0; i < userString.size(); i++){\n        if(userString[i] == userChar){\n            count++;\n        }\n    }\n    return count;\n}\n\nint main(){\n    char userChar;\n    string userString;\n    \n    cin >> userChar;\n    getline(cin >> ws, userString);\n    \n    cout << CountCharacters(userChar, userString);\n    \n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 5}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString);\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 6}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char inputChar;\n    string inputString;\n\n    cin >> inputChar;\n    cin.ignore();  \n    getline(cin, inputString);\n\n    int count = CountCharacters(inputChar, inputString);\n\n    cout << count;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 7}
{"problem": 4, "code": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i=0; i<userString.length(); i++) {\n        if(userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    \n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    \n    int count = CountCharacters(userChar, userString);\n    cout << count;\n    \n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 8}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString);\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 9}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.length(); i++) {\n        if(userString[i] == userChar)\n            count++;\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    \n    cin >> userChar;\n    getline(cin >> ws, userString);\n    \n    cout << CountCharacters(userChar, userString);\n    \n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 10}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (char c : userString) {\n        if (c == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char inputChar;\n    string inputString;\n\n    cin >> inputChar;\n    cin.ignore();\n    getline(cin, inputString);\n\n    int count = CountCharacters(inputChar, inputString);\n    cout << count << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 1}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); ++i) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 2}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.length(); i++) {\n        if(userString[i] == userChar)\n            count++;\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    int count = CountCharacters(userChar, userString);\n    cout << count;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 3}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char inputChar;\n    string inputString;\n\n    cin >> inputChar;\n    cin.ignore();\n    getline(cin, inputString);\n\n    int count = CountCharacters(inputChar, inputString);\n    cout << count;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 4}
{"problem": 4, "code": "#include<iostream>\n#include<string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString)\n{\n    int count = 0;\n    for(int i=0; i<userString.length(); i++)\n    {\n        if(userString[i] == userChar)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main()\n{\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 5}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    \n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    \n    int result = CountCharacters(userChar, userString);\n    cout << result;\n    \n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 6}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.length(); i++) {\n        if(userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString);\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 7}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char inputChar;\n    string inputString;\n\n    cin >> inputChar;\n    cin.ignore();\n    getline(cin, inputString);\n\n    int result = CountCharacters(inputChar, inputString);\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 8}
{"problem": 4, "code": "#include<iostream>\n#include<string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString){\n    int count = 0;\n    for(int i = 0; i < userString.size(); i++){\n        if(userString[i] == userChar)\n            count++;\n    }\n    return count;\n}\n\nint main(){\n    char userChar;\n    string userString;\n    \n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    \n    int result = CountCharacters(userChar, userString);\n    cout << result;\n    \n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 9}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin >> ws, userString);\n\n    int count = CountCharacters(userChar, userString);\n\n    cout << count << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 10}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    \n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    \n    int result = CountCharacters(userChar, userString);\n    cout << result;\n    \n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 1}
{"problem": 4, "code": "#include<iostream>\n#include<string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    getline(cin >> ws, userString);\n    cout << CountCharacters(userChar, userString);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 2}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    int count = CountCharacters(userChar, userString);\n    cout << count;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 3}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    cout << CountCharacters(userChar, userString);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 4}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.length(); i++){\n        if(userString[i] == userChar){\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    cout << CountCharacters(userChar, userString);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 5}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    cout << CountCharacters(userChar, userString);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 6}
{"problem": 4, "code": "#include<iostream>\n#include<string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); i++) {\n        if (userString[i] == userChar)\n            count++;\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    \n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    \n    cout << CountCharacters(userChar, userString);\n    \n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 7}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString);\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 8}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.size(); i++){\n        if(userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    \n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n    cout << result;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 9}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    int count = CountCharacters(userChar, userString);\n    cout << count << endl;\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 10}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nint CountCharacters(char userChar, std::string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    std::string userString;\n\n    std::cin >> userChar;\n    std::cin.ignore();\n    std::getline(std::cin, userString);\n\n    std::cout << CountCharacters(userChar, userString);\n\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 1}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (char i : userString) {\n        if (i == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString);\n\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 2}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.size(); i++) {\n        if(userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    cout << CountCharacters(userChar, userString);\n    \n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 3}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString)\n{\n    int count = 0;\n    for(int i = 0; i < userString.size(); i++)\n    {\n        if(userString[i] == userChar)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main()\n{\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    int count = CountCharacters(userChar, userString);\n    cout << count << endl;\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 4}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.size(); i++) {\n        if(userString[i] == userChar)\n            count++;\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    int result = CountCharacters(userChar, userString);\n    cout << result;\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 5}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.length(); i++) {\n        if(userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 6}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); i++) {\n        if (userString[i] == userChar)\n            count++;\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    int count = CountCharacters(userChar, userString);\n    cout << count;\n\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 7}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nint CountCharacters(char userChar, std::string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    std::string userString;\n    \n    std::cin >> userChar;\n    std::cin.ignore();\n    std::getline(std::cin, userString);\n    \n    std::cout << CountCharacters(userChar, userString);\n    \n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 8}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    \n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    \n    cout << CountCharacters(userChar, userString);\n    \n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 9}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    getline(cin >> ws, userString);\n    cout << CountCharacters(userChar, userString);\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 10}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nint CountCharacters(char userChar, std::string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    std::string userString;\n    std::cin >> userChar;\n    std::getline(std::cin.ignore(), userString);\n    std::cout << CountCharacters(userChar, userString);\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 1}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.length(); i++){\n        if(userString[i] == userChar){\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    int result = CountCharacters(userChar, userString);\n    cout << result;\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 2}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString)\n{\n    int count = 0;\n    for (int i = 0; i < userString.size(); i++)\n    {\n        if (userString[i] == userChar)\n            count++;\n    }\n    return count;\n}\n\nint main()\n{\n    char userChar;\n    string userString;\n    \n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 3}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nint CountCharacters(char userChar, std::string userString) {\n    int count = 0;\n    for (char c : userString) {\n        if (c == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    std::string userString;\n\n    std::cin >> userChar;\n    std::cin.ignore();\n    std::getline(std::cin, userString);\n\n    std::cout << CountCharacters(userChar, userString);\n\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 4}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString);\n\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 5}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString){\n    int count = 0;\n    for (int i = 0; i < userString.size(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main(){\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 6}
{"problem": 4, "code": "#include<iostream>\n#include<string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char inputChar;\n    string inputString;\n\n    cin >> inputChar;\n    cin.ignore();\n    getline(cin, inputString);\n\n    cout << CountCharacters(inputChar, inputString);\n\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 7}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); ++i) {\n        if (userString[i] == userChar) {\n            ++count;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin >> ws, userString);\n\n    int count = CountCharacters(userChar, userString);\n    cout << count << endl;\n\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 8}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    \n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    \n    cout << CountCharacters(userChar, userString);\n    \n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 9}
{"problem": 4, "code": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.length(); i++) {\n        if(userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    cout << CountCharacters(userChar, userString);\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 10}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    int result = CountCharacters(userChar, userString);\n    cout << result;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 1}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString){\n    int count = 0;\n    for(int i = 0; i < userString.size(); i++){\n        if(userString[i] == userChar){\n            count++;\n        }\n    }\n    return count;\n}\n\nint main(){\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    int count = CountCharacters(userChar, userString);\n    cout << count << endl;\n    \n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 2}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    getline(cin >> ws, userString);\n    cout << CountCharacters(userChar, userString);\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 3}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char inputChar;\n    string inputString;\n    \n    cin >> inputChar;\n    cin.ignore();\n    getline(cin, inputString);\n    \n    cout << CountCharacters(inputChar, inputString);\n    \n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 4}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 5}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString){\n    int count = 0;\n    for(int i = 0; i < userString.length(); i++){\n        if(userString[i] == userChar)\n            count++;\n    }\n    return count;\n}\n\nint main(){\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    cout << CountCharacters(userChar, userString);\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 6}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString){\n    int count = 0;\n    for(int i = 0; i < userString.length(); i++){\n        if(userString[i] == userChar)\n            count++;\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    cout << CountCharacters(userChar, userString);\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 7}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.size(); i++) {\n        if(userString[i] == userChar)\n            count++;\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    \n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    \n    int result = CountCharacters(userChar, userString);\n    cout << result;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 8}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString);\n\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 9}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.size(); i++) {\n        if(userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    \n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString);\n\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 10}
{"problem": 4, "code": "#include<iostream>\n#include<string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int charCount = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar)\n            charCount++;\n    }\n    return charCount;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString);\n\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 1}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char inputChar;\n    string inputString;\n\n    cin >> inputChar;\n    cin.ignore();\n    getline(cin, inputString);\n\n    cout << CountCharacters(inputChar, inputString);\n\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 2}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\n// Function to count the occurrence of a character in a string\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.size(); i++){\n        if(userString[i] == userChar)\n            count++;\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    // Getting the input from user\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    // Calling the function and printing the output\n    cout << CountCharacters(userChar, userString);\n\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 3}
{"problem": 4, "code": "#include<iostream>\n#include<string>\n\nusing namespace std;\n\n//Function to count characters\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.size(); i++) {\n        if(userString[i] == userChar)\n            count++;\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    \n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString);\n\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 4}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (char c : userString) {\n        if (c == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    \n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    \n    int result = CountCharacters(userChar, userString);\n    \n    cout << result << endl;\n    \n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 5}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar)\n            count++;\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 6}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (char c : userString) {\n        if (c == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    getline(cin >> ws, userString);\n    cout << CountCharacters(userChar, userString);\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 7}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\n//Function to count the number of times a character appears in a string\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    //Get user inputs\n    cin >> userChar;\n    cin.ignore(); // ignore the newline character\n    getline(cin, userString);\n\n    //Output the result\n    cout << CountCharacters(userChar, userString);\n\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 8}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    \n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    \n    cout << CountCharacters(userChar, userString);\n    \n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 9}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin >> ws, userString);\n\n    cout << CountCharacters(userChar, userString);\n\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 10}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString);\n\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 1}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString)\n{\n    int count = 0;\n    for(int i = 0; i < userString.length(); i++)\n    {\n        if(userChar == userString[i])\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main()\n{\n    char inputChar;\n    string inputString;\n\n    cin >> inputChar;\n    cin.ignore();\n    getline(cin, inputString);\n\n    int result = CountCharacters(inputChar, inputString);\n\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 2}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    \n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    \n    cout << CountCharacters(userChar, userString);\n    \n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 3}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString){\n    int count = 0;\n    for(int i = 0; i < userString.size(); i++){\n        if(userString[i] == userChar)\n            count++;\n    }\n    return count;\n}\n\nint main(){\n    char userChar;\n    string userString;\n    \n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    \n    int count = CountCharacters(userChar, userString);\n    \n    cout << count;\n    \n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 4}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.size(); i++) {\n        if(userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 5}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char inputChar;\n    string inputString;\n\n    cin >> inputChar;\n    cin.ignore();\n    getline(cin, inputString);\n    \n    cout << CountCharacters(inputChar, inputString);\n\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 6}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++)\n        if (userString[i] == userChar)\n            count++;\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n\n    cout << result << endl;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 7}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    int count = CountCharacters(userChar, userString);\n    cout << count;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 8}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (char c : userString) {\n        if (c == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    int count = CountCharacters(userChar, userString);\n    cout << count;\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 9}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n    cout << result;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 10}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 1}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    int count = CountCharacters(userChar, userString);\n\n    cout << count;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 2}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); // To ignore the newline character after inputting char\n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n\n    cout << result;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 3}
{"problem": 4, "code": "#include<iostream>\n#include<string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    int count = CountCharacters(userChar, userString);\n    cout << count;\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 4}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    int result = CountCharacters(userChar, userString);\n    cout << result;\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 5}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString){\n    int count = 0;\n    for(int i=0; i<userString.length(); i++){\n        if(userString[i] == userChar){\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    cout << CountCharacters(userChar, userString);\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 6}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    int count = CountCharacters(userChar, userString);\n    cout << count;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 7}
{"problem": 4, "code": "#include<iostream>\n#include<string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString)\n{\n    int count = 0;\n    for(int i = 0; i < userString.length(); i++)\n    {\n        if(userString[i] == userChar)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main()\n{\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    cout << CountCharacters(userChar, userString);\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 8}
{"problem": 4, "code": "#include<iostream>\n#include<string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString){\n    int count = 0;\n    for(int i = 0; i < userString.length(); i++){\n        if(userString[i] == userChar){\n            count++;\n        }\n    }\n    return count;\n}\n\nint main(){\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    cout << CountCharacters(userChar, userString);\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 9}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char inputChar;\n    string inputString;\n    cin >> inputChar;\n    cin.ignore();\n    getline(cin, inputString);\n    cout << CountCharacters(inputChar, inputString);\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 10}
{"problem": 5, "code": "#include<iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 400 == 0) {\n        return true;\n    }\n    else if(userYear % 100 == 0) {\n        return false;\n    }\n    else if(userYear % 4 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cout << \"Enter a year: \";\n    cin >> year;\n\n    if(IsLeapYear(year)) {\n        cout << year << \" is a leap year.\";\n    } else {\n        cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 1}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear){\n    if(userYear % 400 == 0) return true;\n    if(userYear % 100 == 0) return false;\n    if(userYear % 4 == 0) return true;\n    return false;\n}\n\nint main(){\n    int year;\n    std::cin >> year;\n    \n    if(IsLeapYear(year)){\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n    \n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 2}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0 && (userYear % 100 != 0 || userYear % 400 == 0)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int userYear;\n    std::cout << \"Enter a year: \";\n    std::cin >> userYear;\n\n    if (IsLeapYear(userYear)) {\n        std::cout << userYear << \" is a leap year.\";\n    } else {\n        std::cout << userYear << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 3}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear)\n{\n    if (userYear % 400 == 0) \n        return true;\n    if (userYear % 100 == 0)\n        return false;\n    if (userYear % 4 == 0)\n        return true;\n\n    return false;\n}\n\nint main()\n{\n    int year;\n    std::cin >> year;\n    if (IsLeapYear(year))\n        std::cout << year << \" is a leap year.\";\n    else\n        std::cout << year << \" is not a leap year.\";\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 4}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 400 == 0)\n        return true;\n    else if (userYear % 100 == 0)\n        return false;\n    else if (userYear % 4 == 0)\n        return true;\n    else\n        return false;\n}\n\nint main() {\n    int year;\n    std::cin >> year;\n\n    if(IsLeapYear(year))\n        std::cout << year << \" is a leap year.\";\n    else\n        std::cout << year << \" is not a leap year.\";\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 5}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 400 == 0) {\n        return true;\n    }\n    else if (userYear % 100 == 0) {\n        return false;\n    }\n    else if (userYear % 4 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nint main() {\n    int userYear;\n    std::cin >> userYear;\n\n    if (IsLeapYear(userYear)) {\n        std::cout << userYear << \" is a leap year.\";\n    }\n    else {\n        std::cout << userYear << \" is not a leap year.\";\n    }\n    \n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 6}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 400 == 0)\n        return true;\n    if (userYear % 100 == 0)\n        return false;\n    if (userYear % 4 == 0)\n        return true;\n    return false;\n}\n\nint main() {\n    int userYear;\n    std::cin >> userYear;\n    if(IsLeapYear(userYear))\n        std::cout << userYear << \" is a leap year.\";\n    else\n        std::cout << userYear << \" is not a leap year.\";\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 7}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 400 == 0) {\n        return true;\n    } else if (userYear % 100 == 0) {\n        return false;\n    } else if (userYear % 4 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if (IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 8}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 400 == 0)\n        return true;\n    else if(userYear % 100 == 0)\n        return false;\n    else if(userYear % 4 == 0)\n        return true;\n    else\n        return false;\n}\n\nint main() {\n    int year;\n    std::cin >> year;\n    if(IsLeapYear(year))\n        std::cout << year << \" is a leap year.\";\n    else\n        std::cout << year << \" is not a leap year.\";\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 9}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 != 0)\n        return false;\n    else if (userYear % 100 != 0)\n        return true;\n    else if (userYear % 400 != 0)\n        return false;\n    else\n        return true;\n}\n\nint main() {\n    int year;\n    std::cin >> year;\n\n    if (IsLeapYear(year))\n        std::cout << year << \" is a leap year.\";\n    else\n        std::cout << year << \" is not a leap year.\";\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 10}
{"problem": 5, "code": "#include<iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 != 0)\n        return false;\n    else if(userYear % 100 != 0)\n        return true;\n    else if(userYear % 400 != 0)\n        return false;\n    else\n        return true;\n}\n\nint main() {\n    int year;\n    cin >> year;\n\n    if(IsLeapYear(year)) {\n        cout << year << \" is a leap year.\";\n    } else {\n        cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 1}
{"problem": 5, "code": "#include<iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 400 == 0) {\n        return true;\n    } else if (userYear % 100 == 0) {\n        return false;\n    } else if (userYear % 4 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cout << \"Enter a year: \";\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\";\n    } else {\n        cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 2}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0) {\n        if(userYear % 100 == 0) {\n            if(userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cout << \"Enter a year: \";\n    cin >> year;\n\n    if(IsLeapYear(year)) {\n        cout << year << \" is a leap year.\";\n    } else {\n        cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 3}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 400 == 0) {\n        return true;\n    } else if (userYear % 100 == 0) {\n        return false;\n    } else if (userYear % 4 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cout << \"Enter a year: \";\n    cin >> year;\n\n    if(IsLeapYear(year)) {\n        cout << year << \" is a leap year.\";\n    } else {\n        cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 4}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 != 0) {\n        return false;\n    } else if (userYear % 100 != 0) {\n        return true;\n    } else if (userYear % 400 != 0) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n    \n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 5}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 != 0) \n        return false;\n    else if(userYear % 100 != 0)\n        return true;\n    else if(userYear % 400 != 0)\n        return false;\n    else\n        return true;\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 6}
{"problem": 5, "code": "#include<iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 400 == 0)\n        return true;\n    else if(userYear % 100 == 0)\n        return false;\n    else if(userYear % 4 == 0)\n        return true;\n    else\n        return false;\n}\n\nint main() {\n    int year;\n    cout << \"Enter a year: \";\n    cin >> year;\n    if(IsLeapYear(year))\n        cout << year << \" is a leap year.\";\n    else\n        cout << year << \" is not a leap year.\";\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 7}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 400 == 0) {\n        return true;\n    }\n    else if (userYear % 100 == 0) {\n        return false;\n    }\n    else if (userYear % 4 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nint main() {\n    int userYear;\n    std::cout << \"Enter a year: \";\n    std::cin >> userYear;\n\n    if(IsLeapYear(userYear)) {\n        std::cout << userYear << \" is a leap year.\";\n    } else {\n        std::cout << userYear << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 8}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 != 0)\n        return false;\n    else if(userYear % 100 != 0)\n        return true;\n    else if(userYear % 400 != 0)\n        return false;\n    else\n        return true;\n}\n\nint main() {\n    int year;\n    cout << \"Enter a year: \";\n    cin >> year;\n\n    if(IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 9}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0 && (userYear % 100 != 0 || userYear % 400 == 0)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cout << \"Enter a year: \";\n    cin >> year;\n\n    if(IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    }\n    else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 10}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 400 == 0) {\n        return true;\n    } else if(userYear % 100 == 0) {\n        return false;\n    } else if(userYear % 4 == 0) {\n        return true;\n    }\n    return false;\n}\n\nint main() {\n    int year;\n    cout << \"Enter a year: \";\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 1}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 != 0) {\n        return false;\n    } else if(userYear % 100 != 0) {\n        return true;\n    } else if(userYear % 400 != 0) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 2}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0 && (userYear % 100 != 0 || userYear % 400 == 0)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int userYear;\n    std::cout << \"Enter a year: \";\n    std::cin >> userYear;\n\n    if (IsLeapYear(userYear)) {\n        std::cout << userYear << \" is a leap year.\";\n    } else {\n        std::cout << userYear << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 3}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 400 == 0) {\n        return true;\n    }\n    else if (userYear % 100 == 0) {\n        return false;\n    }\n    else if (userYear % 4 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nint main() {\n    int userYear;\n    std::cout << \"Enter a year: \";\n    std::cin >> userYear;\n    \n    if (IsLeapYear(userYear)) {\n        std::cout << userYear << \" is a leap year.\";\n    }\n    else {\n        std::cout << userYear << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 4}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 400 == 0) \n        return true;\n    else if (userYear % 100 == 0) \n        return false;\n    else if (userYear % 4 == 0) \n        return true;\n    else \n        return false;\n}\n\nint main() {\n    int year;\n    std::cin >> year;\n    if (IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\" << std::endl;\n    } else {\n        std::cout << year << \" is not a leap year.\" << std::endl;\n    }\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 5}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 != 0) {\n        return false;\n    } else if (userYear % 100 != 0) {\n        return true;\n    } else if (userYear % 400 != 0) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nint main() {\n    int userYear;\n    std::cout << \"Enter a year: \";\n    std::cin >> userYear;\n    if(IsLeapYear(userYear)){\n        std::cout << userYear << \" is a leap year.\\n\";\n    } else {\n        std::cout << userYear << \" is not a leap year.\\n\";\n    }\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 6}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 400 == 0) {\n        return true;\n    } else if (userYear % 100 == 0) {\n        return false;\n    } else if (userYear % 4 == 0) {\n        return true;\n    }\n    return false;\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if (IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 7}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 400 == 0) {\n        return true;\n    } else if (userYear % 100 == 0) {\n        return false;\n    } else if (userYear % 4 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 8}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 != 0) {\n        return false;\n    } else if (userYear % 100 != 0) {\n        return true;\n    } else if (userYear % 400 != 0) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nint main() {\n    int year;\n    cout << \"Enter a year: \";\n    cin >> year;\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    } else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 9}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0) {\n        if(userYear % 100 == 0) {\n            if(userYear % 400 == 0)\n                return true;\n            else\n                return false;\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cout << \"Enter a year: \";\n    cin >> year;\n\n    if(IsLeapYear(year)) {\n        cout << year << \" is a leap year.\";\n    } else {\n        cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 10}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0) {\n        if(userYear % 100 == 0) {\n            if(userYear % 400 == 0)\n                return true;\n            else\n                return false;\n        }\n        else\n            return true;\n    }\n    else\n        return false;\n}\n\nint main() {\n    int year;\n    cout << \"Enter a year: \";\n    cin >> year;\n\n    if(IsLeapYear(year)) \n        cout << year << \" is a leap year.\";\n    else \n        cout << year << \" is not a leap year.\";\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 1}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 400 == 0) {\n        return true;\n    }\n    if (userYear % 100 == 0) {\n        return false;\n    }\n    if (userYear % 4 == 0) {\n        return true;\n    }\n    return false;\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\\n\";\n    } else {\n        std::cout << year << \" is not a leap year.\\n\";\n    }\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 2}
{"problem": 5, "code": "#include<iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0) {\n        if(userYear % 100 == 0) {\n            if(userYear % 400 == 0)\n                return true;\n            else\n                return false;\n        }\n        else\n            return true;\n    }\n    else\n        return false;\n}\n\nint main() {\n    int year;\n    cout << \"Enter a year: \";\n    cin >> year;\n    if(IsLeapYear(year))\n        cout << year << \" is a leap year.\\n\";\n    else\n        cout << year << \" is not a leap year.\\n\";\n    \n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 3}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0)\n                return true;\n            else\n                return false;\n        }\n        else\n            return true;\n    }\n    else\n        return false;\n}\n\nint main() {\n    int year;\n    cout << \"Enter a year: \";\n    cin >> year;\n    if(IsLeapYear(year))\n        cout << year << \" is a leap year.\";\n    else\n        cout << year << \" is not a leap year.\";\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 4}
{"problem": 5, "code": "#include<iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 400 == 0) {\n        return true;\n    } else if (userYear % 100 == 0) {\n        return false;\n    } else if (userYear % 4 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int userYear;\n    cout << \"Enter a year: \";\n    cin >> userYear;\n    if (IsLeapYear(userYear)) {\n        cout << userYear << \" is a leap year.\";\n    } else {\n        cout << userYear << \" is not a leap year.\";\n    }\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 5}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 400 == 0)\n        return true;\n    if (userYear % 100 == 0)\n        return false;\n    if (userYear % 4 == 0)\n        return true;\n    return false;\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 6}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0) {\n        if(userYear % 100 == 0) {\n            if(userYear % 400 == 0)\n                return true;\n            else\n                return false;\n        }\n        else\n            return true;\n    }\n    else\n        return false;\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year))\n        std::cout << year << \" is a leap year.\";\n    else\n        std::cout << year << \" is not a leap year.\";\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 7}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0) {\n        if(userYear % 100 == 0) {\n            if(userYear % 400 == 0)\n                return true;\n            else\n                return false;\n        }\n        else\n            return true;\n    }\n    else\n        return false;\n}\n\nint main() {\n    int year;\n    cout << \"Enter a year: \";\n    cin >> year;\n\n    if(IsLeapYear(year)) {\n        cout << year << \" is a leap year.\";\n    } else {\n        cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 8}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 != 0)\n        return false; \n    else if(userYear % 100 != 0)\n        return true; \n    else if(userYear % 400 != 0)\n        return false; \n    else\n        return true; \n}\n\nint main() {\n    int year;\n    std::cin >> year;\n    if(IsLeapYear(year))\n        std::cout << year << \" is a leap year.\";\n    else\n        std::cout << year << \" is not a leap year.\";\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 9}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 != 0) {\n        return false;\n    } else if (userYear % 100 != 0) {\n        return true;\n    } else if (userYear % 400 != 0) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nint main() {\n    int userYear;\n    std::cout << \"Enter a year: \";\n    std::cin >> userYear;\n\n    if (IsLeapYear(userYear)) {\n        std::cout << userYear << \" is a leap year.\";\n    } else {\n        std::cout << userYear << \" is not a leap year.\";\n    }\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 10}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 != 0) {\n        return false;\n    } else if (userYear % 100 != 0) {\n        return true;\n    } else if (userYear % 400 != 0) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if (IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 1}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0) {\n        if(userYear % 100 == 0) {\n            if(userYear % 400 == 0)\n                return true;\n            else\n                return false;\n        }\n        else\n            return true;\n    }\n    else\n        return false;\n}\n\nint main() {\n    int year;\n    cout << \"Enter a year: \";\n    cin >> year;\n    \n    if(IsLeapYear(year))\n        cout << year << \" is a leap year.\";\n    else\n        cout << year << \" is not a leap year.\";\n        \n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 2}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0)\n                return true;\n            else\n                return false;\n        }\n        else\n            return true;\n    }\n    else\n        return false;\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n    if (IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\" << std::endl;\n    } else {\n        std::cout << year << \" is not a leap year.\" << std::endl;\n    }\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 3}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0)\n                return true;\n            else\n                return false;\n        }\n        else\n            return true;\n    }\n    else\n        return false;\n}\n\nint main() {\n    int year;\n    std::cin >> year;\n    if (IsLeapYear(year))\n        std::cout << year << \" is a leap year.\";\n    else\n        std::cout << year << \" is not a leap year.\";\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 4}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0) {\n        if(userYear % 100 == 0) {\n            if(userYear % 400 == 0)\n                return true;\n            else\n                return false;\n        }\n        else\n            return true;\n    }\n    else\n        return false;\n}\n\nint main() {\n    int year;\n    std::cin >> year;\n\n    if(IsLeapYear(year))\n        std::cout << year << \" is a leap year.\";\n    else\n        std::cout << year << \" is not a leap year.\";\n\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 5}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 != 0) {\n        return false;\n    } else if (userYear % 100 != 0) {\n        return true;\n    } else if (userYear % 400 != 0) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 6}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 400 == 0)\n        return true;\n    if (userYear % 100 == 0)\n        return false;\n    if (userYear % 4 == 0)\n        return true;\n    return false;\n}\n\nint main() {\n    int year;\n    std::cin >> year;\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 7}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 400 == 0) {\n        return true;\n    } else if(userYear % 100 == 0) {\n        return false;\n    } else if(userYear % 4 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 8}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0 && (userYear % 100 != 0 || userYear % 400 == 0))\n        return true;\n    else\n        return false;\n}\n\nint main() {\n    int year;\n    std::cin >> year;\n    if(IsLeapYear(year))\n        std::cout << year << \" is a leap year.\";\n    else\n        std::cout << year << \" is not a leap year.\";\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 9}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0) {\n        if(userYear % 100 == 0) {\n            if(userYear % 400 == 0)\n                return true;\n            else\n                return false;\n        }\n        else\n            return true;\n    }\n    else\n        return false;\n}\n\nint main() {\n    int year;\n    std::cin >> year;\n    if(IsLeapYear(year))\n        std::cout << year << \" is a leap year.\";\n    else\n        std::cout << year << \" is not a leap year.\";\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 10}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 != 0) {\n        return false;\n    } else if(userYear % 100 != 0) {\n        return true;\n    } else if(userYear % 400 != 0) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 1}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 400 == 0) return true;\n    if (userYear % 100 == 0) return false;\n    if (userYear % 4 == 0) return true;\n    return false;\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n    \n    if (IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 2}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 != 0) {\n        return false;\n    } else if (userYear % 100 != 0) {\n        return true;\n    } else if (userYear % 400 != 0) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year)){\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 3}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 != 0)\n        return false;\n    else if(userYear % 100 != 0)\n        return true;\n    else if(userYear % 400 != 0)\n        return false;\n    else\n        return true;\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year))\n        std::cout << year << \" is a leap year.\\n\";\n    else\n        std::cout << year << \" is not a leap year.\\n\";\n\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 4}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear)\n{\n    if(userYear % 4 == 0)\n    {\n        if(userYear % 100 == 0)\n        {\n            if(userYear % 400 == 0)\n                return true;\n            else\n                return false;\n        }\n        else\n            return true;\n    }\n    else\n        return false;\n}\n\nint main()\n{\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year))\n        std::cout << year << \" is a leap year.\";\n    else\n        std::cout << year << \" is not a leap year.\";\n\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 5}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0 && (userYear % 100 != 0 || userYear % 400 == 0)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 6}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0) {\n        if(userYear % 100 == 0) {\n            if(userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 7}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int year) {\n    if(year % 4 != 0) {\n        return false;\n    } else if(year % 100 != 0) {\n        return true;\n    } else if(year % 400 != 0) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\\n\";\n    } else {\n        std::cout << year << \" is not a leap year.\\n\";\n    }\n    \n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 8}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0) {\n        if(userYear % 100 == 0) {\n            if(userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 9}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 400 == 0) {\n        return true;\n    }\n    else if (userYear % 100 == 0) {\n        return false;\n    }\n    else if (userYear % 4 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nint main() {\n    int userYear;\n    cout << \"Enter a year: \";\n    cin >> userYear;\n    if (IsLeapYear(userYear)) {\n        cout << userYear << \" is a leap year.\";\n    }\n    else {\n        cout << userYear << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 10}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0) {\n        if(userYear % 100 == 0) {\n            if(userYear % 400 == 0)\n                return true;\n            else\n                return false;\n        }\n        else\n            return true;\n    }\n    else\n        return false;\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 1}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 != 0) {\n        return false;\n    } else if (userYear % 100 != 0) {\n        return true;\n    } else if (userYear % 400 != 0) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if (IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\\n\";\n    } else {\n        std::cout << year << \" is not a leap year.\\n\";\n    }\n\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 2}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 400 == 0)\n        return true;\n    else if (userYear % 100 == 0)\n        return false;\n    else if (userYear % 4 == 0)\n        return true;\n    else\n        return false;\n}\n\nint main() {\n    int year;\n    cout << \"Enter a year: \";\n    cin >> year;\n\n    if (IsLeapYear(year))\n        cout << year << \" is a leap year.\";\n    else\n        cout << year << \" is not a leap year.\";\n        \n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 3}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0 && (userYear % 100 != 0 || userYear % 400 == 0)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int userYear;\n    std::cout << \"Enter a year: \";\n    std::cin >> userYear;\n\n    if(IsLeapYear(userYear)) {\n        std::cout << userYear << \" is a leap year.\";\n    } else {\n        std::cout << userYear << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 4}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 != 0) {\n        return false;\n    } else if (userYear % 100 != 0) {\n        return true;\n    } else if (userYear % 400 != 0) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n    if (IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 5}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0) {\n        if(userYear % 100 == 0) {\n            if(userYear % 400 == 0)\n                return true;\n            else\n                return false;\n        }\n        else\n            return true;\n    }\n    else\n        return false;\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 6}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 400 == 0) {\n        return true;\n    }\n    else if (userYear % 100 == 0) {\n        return false;\n    }\n    else if (userYear % 4 == 0) {\n        return true;\n    }\n    return false;\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if (IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 7}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear){\n    if (userYear % 4 != 0){\n        return false;\n    }\n    else if (userYear % 100 != 0){\n        return true;\n    }\n    else if (userYear % 400 != 0){\n        return false;\n    }\n    else{\n        return true;\n    }\n}\n\nint main(){\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n    if(IsLeapYear(year)){\n        std::cout << year << \" is a leap year.\";\n    }\n    else{\n        std::cout << year << \" is not a leap year.\";\n    }\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 8}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear){\n    if(userYear % 4 == 0){\n        if(userYear % 100 == 0){\n            if(userYear % 400 == 0)\n                return true;\n            else\n                return false;\n        }\n        else\n            return true;\n    }\n    else\n        return false;\n}\n\nint main(){\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n    if(IsLeapYear(year))\n        std::cout << year << \" is a leap year.\";\n    else\n        std::cout << year << \" is not a leap year.\";\n\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 9}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0) {\n        if(userYear % 100 == 0) {\n            if(userYear % 400 == 0)\n                return true;\n            else\n                return false;\n        } else\n            return true;\n    } else\n        return false;\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year))\n        std::cout << year << \" is a leap year.\";\n    else\n        std::cout << year << \" is not a leap year.\";\n\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 10}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0) {\n        if(userYear % 100 == 0) {\n            if(userYear % 400 == 0)\n                return true;\n            else\n                return false;\n        }\n        else\n            return true;\n    }\n    else\n        return false;\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n    if(IsLeapYear(year))\n        std::cout << year << \" is a leap year.\";\n    else\n        std::cout << year << \" is not a leap year.\";\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 1}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0) {\n        if(userYear % 100 == 0) {\n            if(userYear % 400 == 0)\n                return true;\n            else\n                return false;\n        } \n        else\n            return true;\n    } \n    else\n        return false;\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 2}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 != 0)\n        return false; // not divisible by 4 means it's not a leap year\n    else if (userYear % 100 != 0)\n        return true; // not a century year means it's a leap year\n    else if (userYear % 400 != 0)\n        return false; // century year but not divisible by 400 means it's not a leap year\n    else\n        return true; // century year and divisible by 400 means it's a leap year\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if (IsLeapYear(year))\n        std::cout << year << \" is a leap year.\";\n    else\n        std::cout << year << \" is not a leap year.\";\n\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 3}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0) {\n        if(userYear % 100 == 0) {\n            if(userYear % 400 == 0)\n                return true;\n            else\n                return false;\n        }\n        else\n            return true;\n    }\n    else\n        return false;\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year))\n        std::cout << year << \" is a leap year.\";\n    else\n        std::cout << year << \" is not a leap year.\";\n\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 4}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0)\n                return true;\n            else\n                return false;\n        } else\n            return true;\n    } else\n        return false;\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n    \n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 5}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear)\n{\n    if(userYear % 4 == 0)\n    {\n        if( userYear % 100 == 0)\n        {\n            if (userYear % 400 == 0)\n                return true;\n            else\n                return false;\n        }\n        else\n            return true;\n    }\n    else\n        return false;\n}\n\nint main()\n{\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year)) \n    {\n        std::cout << year << \" is a leap year.\";\n    }\n    else \n    {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 6}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 400 == 0) {\n        return true;\n    }\n    else if (userYear % 100 == 0) {\n        return false;\n    }\n    else if (userYear % 4 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nint main() {\n    int userYear;\n    std::cout << \"Enter a year: \";\n    std::cin >> userYear;\n\n    if (IsLeapYear(userYear)) {\n        std::cout << userYear << \" is a leap year.\";\n    }\n    else {\n        std::cout << userYear << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 7}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 != 0) {\n        return false; \n    } else if(userYear % 100 != 0) {\n        return true; \n    } else if(userYear % 400 != 0) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 8}
{"problem": 5, "code": "#include<iostream>\nusing namespace std;\n\n// Function to check if a year is a leap year or not\nbool IsLeapYear(int year)\n{\n    if(year % 4 == 0)\n    {\n        if( year % 100 == 0)\n        {\n            // year is divisible by 400, hence the year is a leap year\n            if ( year % 400 == 0)\n                return true;\n            else\n                return false;\n        }\n        else\n            return true;\n    }\n    else\n        return false;\n}\n\nint main() \n{\n    int year;\n    cout << \"Enter a year: \";\n    cin >> year;\n    if(IsLeapYear(year)) \n        cout << year << \" is a leap year\";\n    else \n        cout << year << \" is not a leap year\";\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 9}
{"problem": 5, "code": "#include <iostream>\n\n// Function to check if a year is a leap year\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    // Call the function and display the result\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 10}
{"problem": 5, "code": "#include<iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0) {\n        if(userYear % 100 == 0) {\n            if(userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int userYear;\n    cout << \"Enter a year: \";\n    cin >> userYear;\n    if(IsLeapYear(userYear)) {\n        cout << userYear << \" is a leap year.\";\n    } else {\n        cout << userYear << \" is not a leap year.\";\n    }\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 1}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0) {\n        if(userYear % 100 == 0) {\n            if(userYear % 400 == 0)\n                return true;\n            else\n                return false;\n        }\n        else\n            return true;\n    }\n    else\n        return false;\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n    \n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 2}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 != 0) \n        return false; \n    else if(userYear % 100 != 0) \n        return true; \n    else if(userYear % 400 != 0)\n        return false; \n    else \n        return true;\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year)) \n        std::cout << year << \" is a leap year.\";\n    else \n        std::cout << year << \" is not a leap year.\";\n\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 3}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 400 == 0) {\n        return true;\n    } else if(userYear % 100 == 0) {\n        return false;\n    } else if(userYear % 4 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int userYear;\n    std::cout << \"Enter a year: \";\n    std::cin >> userYear;\n\n    if(IsLeapYear(userYear)) {\n        std::cout << userYear << \" is a leap year.\\n\";\n    } else {\n        std::cout << userYear << \" is not a leap year.\\n\";\n    }\n\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 4}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear){\n    if(userYear % 4 == 0){\n        if(userYear % 100 == 0){\n            if(userYear % 400 == 0)\n                return true;\n            else\n                return false;\n        }\n        else\n            return true;\n    }\n    else\n        return false;\n}\n\nint main(){\n    int year;\n    cout << \"Enter a year: \";\n    cin >> year;\n\n    if(IsLeapYear(year))\n        cout << year << \" is a leap year.\";\n    else\n        cout << year << \" is not a leap year.\";\n\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 5}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0) {\n        if(userYear % 100 == 0) {\n            if(userYear % 400 == 0)\n                return true;\n            else\n                return false;\n        } else\n            return true;\n    } else\n        return false;\n}\n\nint main() {\n    int year;\n    std::cin >> year;\n    if(IsLeapYear(year))\n        std::cout << year << \" is a leap year.\";\n    else\n        std::cout << year << \" is not a leap year.\";\n    \n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 6}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 != 0) {\n        return false;\n    } else if (userYear % 100 != 0) {\n        return true;\n    } else if (userYear % 400 != 0) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nint main() {\n    int year;\n    cout << \"Enter a year: \";\n    cin >> year;\n\n    if(IsLeapYear(year)){\n        cout << year << \" is a leap year.\";\n    } else {\n        cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 7}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 400 == 0)\n        return true;\n    if (userYear % 100 == 0)\n        return false;\n    if (userYear % 4 == 0)\n        return true;\n    return false;\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n    if (IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\\n\";\n    } else {\n        std::cout << year << \" is not a leap year.\\n\";\n    }\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 8}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 400 == 0)\n        return true;\n    else if (userYear % 100 == 0)\n        return false;\n    else if (userYear % 4 == 0)\n        return true;\n    else\n        return false;\n}\n\nint main() {\n    int userYear;\n    std::cout << \"Enter a year: \";\n    std::cin >> userYear;\n    if (IsLeapYear(userYear))\n        std::cout << userYear << \" is a leap year.\";\n    else\n        std::cout << userYear << \" is not a leap year.\";\n    \n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 9}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0) {\n        if(userYear % 100 == 0) {\n            if(userYear % 400 == 0)\n                return true;\n            else\n                return false;\n        }\n        else\n            return true;\n    }\n    else\n        return false;\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n    if(IsLeapYear(year))\n        std::cout << year << \" is a leap year.\";\n    else\n        std::cout << year << \" is not a leap year.\";\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 10}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 != 0) {\n        return false;\n    } else if(userYear % 100 != 0) {\n        return true;\n    } else if(userYear % 400 != 0) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 1}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0) {\n        if(userYear % 100 == 0) {\n            if(userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int userYear;\n\n    std::cout << \"Enter a year: \";\n    std::cin >> userYear;\n\n    if(IsLeapYear(userYear)) {\n        std::cout << userYear << \" is a leap year.\";\n    } else {\n        std::cout << userYear << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 2}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0)\n                return true;\n            else\n                return false;\n        }\n        else\n            return true;\n    }\n    else\n        return false;\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n    \n    if (IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 3}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear){\n    if(userYear % 400 == 0){\n        return true;\n    }\n    else if(userYear % 100 == 0){\n        return false;\n    }\n    else if(userYear % 4 == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nint main(){\n    int year;\n    std::cin >> year;\n    if(IsLeapYear(year)){\n        std::cout << year << \" is a leap year.\";\n    }\n    else{\n        std::cout << year << \" is not a leap year.\";\n    }\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 4}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0) {\n        if(userYear % 100 == 0) {\n            if(userYear % 400 == 0)\n                return true;\n            else\n                return false;\n        }\n        else\n            return true;\n    }\n    else\n        return false;\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year))\n        std::cout << year << \" is a leap year.\\n\";\n    else\n        std::cout << year << \" is not a leap year.\\n\";\n\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 5}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0) {\n        if(userYear % 100 == 0) {\n            if(userYear % 400 == 0)\n                return true;\n            else\n                return false;\n        }\n        else\n            return true;\n    }\n    else\n        return false;\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year))\n        std::cout << year << \" is a leap year.\";\n    else\n        std::cout << year << \" is not a leap year.\";\n\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 6}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0) {\n        if(userYear % 100 == 0) {\n            if(userYear % 400 == 0)\n                return true;\n            else\n                return false;\n        } else\n            return true;\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int userYear;\n    std::cin >> userYear;\n    if(IsLeapYear(userYear))\n        std::cout << userYear << \" is a leap year.\";\n    else\n        std::cout << userYear << \" is not a leap year.\";\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 7}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0) {\n        if (userYear % 100 == 0) {\n            if (userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cout << \"Enter a year: \";\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\";\n    } else {\n        cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 8}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0) {\n        if(userYear % 100 == 0 && userYear % 400 != 0) {\n            return false;\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 9}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 != 0) {\n        return false;\n    } else if(userYear % 100 != 0) {\n        return true;\n    } else if(userYear % 400 != 0) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 10}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    auto it = std::find(nameVec.begin(), nameVec.end(), contactName);\n    if (it != nameVec.end()) {\n        int index = std::distance(nameVec.begin(), it);\n        return phoneNumberVec[index];\n    } else {\n        return \"Contact not found\";\n    }\n}\n\nint main() {\n    std::vector<std::string> names;\n    std::vector<std::string> phoneNumbers;\n    int n;\n    std::cin >> n;\n    for(int i = 0; i < n; ++i) {\n        std::string name;\n        std::string number;\n        std::cin >> name >> number;\n        names.push_back(name);\n        phoneNumbers.push_back(number);\n    }\n    std::string contact;\n    std::cin >> contact;\n    std::cout << GetPhoneNumber(names, phoneNumbers, contact);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 1}
{"problem": 6, "code": "#include<iostream>\n#include<vector>\n#include<string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName)\n            return phoneNumberVec[i];\n    }\n    return \"Contact not found!\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n\n    std::vector<std::string> nameVec(n);\n    std::vector<std::string> phoneNumberVec(n);\n\n    for (int i = 0; i < n; i++)\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n\n    std::string contactName;\n    std::cin >> contactName;\n\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 2}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n\n    std::vector<std::string> names(N);\n    std::vector<std::string> phoneNumbers(N);\n\n    for (int i = 0; i < N; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n\n    std::string contactName;\n    std::cin >> contactName;\n\n    std::string phoneNumber = GetPhoneNumber(names, phoneNumbers, contactName);\n\n    std::cout << phoneNumber << std::endl;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 3}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> names(N);\n    std::vector<std::string> phoneNumbers(N);\n    for(int i=0; i<N; i++){\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 4}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n\n    std::vector<std::string> names(n);\n    std::vector<std::string> phoneNumbers(n);\n\n    for (int i = 0; i < n; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n\n    std::string contactName;\n    std::cin >> contactName;\n\n    std::string phoneNumber = GetPhoneNumber(names, phoneNumbers, contactName);\n    std::cout << phoneNumber;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 5}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n\n    std::vector<std::string> nameVec(N), phoneNumberVec(N);\n    for(int i = 0; i < N; i++) {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    std::string contactName;\n    std::cin >> contactName;\n\n    std::string result = GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n    std::cout << result;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 6}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> names(N);\n    std::vector<std::string> phoneNumbers(N);\n    for (int i = 0; i < N; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 7}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<std::string> names(n), phoneNumbers(n);\n    for (int i = 0; i < n; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    std::string name;\n    std::cin >> name;\n    std::cout << GetPhoneNumber(names, phoneNumbers, name) << std::endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 8}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n\n    return \"Contact not found.\";\n}\n\nint main() {\n    std::vector<std::string> nameVec;\n    std::vector<std::string> phoneNumberVec;\n    int N;\n    std::string name, phoneNumber;\n\n    std::cin >> N;\n    for (int i = 0; i < N; ++i) {\n        std::cin >> name >> phoneNumber;\n        nameVec.push_back(name);\n        phoneNumberVec.push_back(phoneNumber);\n    }\n\n    std::string contactName;\n    std::cin >> contactName;\n\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n    \n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 9}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for(int i = 0; i < nameVec.size(); i++) {\n        if(nameVec[i] == contactName)\n            return phoneNumberVec[i];\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n\n    std::vector<std::string> nameVec(N);\n    std::vector<std::string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; i++) {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    std::string contactName;\n    std::cin >> contactName;\n\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 10}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<std::string> names(n);\n    std::vector<std::string> phoneNumbers(n);\n    for (int i = 0; i < n; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 1}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> names(N);\n    std::vector<std::string> phoneNumbers(N);\n\n    for (int i = 0; i < N; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n\n    std::string nameToSearch;\n    std::cin >> nameToSearch;\n\n    std::cout << GetPhoneNumber(names, phoneNumbers, nameToSearch) << std::endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 2}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found.\";\n}\n\nint main() {\n    std::vector<std::string> names;\n    std::vector<std::string> phoneNumbers;\n    int n;\n    std::cin >> n;\n    for (int i = 0; i < n; i++) {\n        std::string name, phoneNumber;\n        std::cin >> name >> phoneNumber;\n        names.push_back(name);\n        phoneNumbers.push_back(phoneNumber);\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName) << std::endl;\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 3}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<std::string> names(n);\n    std::vector<std::string> phoneNumbers(n);\n    for (int i = 0; i < n; i++) {\n        std::cin >> names[i];\n        std::cin >> phoneNumbers[i];\n    }\n    std::string lookupName;\n    std::cin >> lookupName;\n    std::cout << GetPhoneNumber(names, phoneNumbers, lookupName);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 4}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"\";\n}\n\nint main() {\n    std::vector<std::string> names;\n    std::vector<std::string> phoneNumbers;\n    int n;\n    std::cin >> n;\n    for (int i = 0; i < n; i++) {\n        std::string name, phoneNumber;\n        std::cin >> name >> phoneNumber;\n        names.push_back(name);\n        phoneNumbers.push_back(phoneNumber);\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 5}
{"problem": 6, "code": "#include<iostream>\n#include<string>\n#include<vector>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName){\n    for(int i = 0; i < nameVec.size(); i++){\n        if(nameVec[i] == contactName){\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not Found\";\n}\n\nint main(){\n    int N;\n    std::cin >> N;\n    std::vector<std::string> nameVec(N);\n    std::vector<std::string> phoneNumberVec(N);\n    for(int i = 0; i < N; i++){\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << std::endl;\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 6}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> nameVec(N);\n    std::vector<std::string> phoneNumberVec(N);\n    for (int i = 0; i < N; i++) {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 7}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact Not Found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> nameVec(N);\n    std::vector<std::string> phoneNumberVec(N);\n    for (int i = 0; i < N; i++) {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 8}
{"problem": 6, "code": "#include<iostream>\n#include<vector>\n#include<string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName){\n    for(int i=0; i<nameVec.size(); i++){\n        if(nameVec[i] == contactName){\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main(){\n    int N;\n    std::cin >> N;\n    std::vector<std::string> nameVec(N), phoneNumberVec(N);\n    for(int i=0; i<N; i++){\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << std::endl;\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 9}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> nameVec(N);\n    std::vector<std::string> phoneNumberVec(N);\n    for (int i = 0; i < N; i++) {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 10}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> names(N);\n    std::vector<std::string> phoneNumbers(N);\n    for(int i = 0; i < N; ++i) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName) << std::endl;\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 1}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n    for (int i = 0; i < N; i++) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    string contactName;\n    cin >> contactName;\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 2}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName){\n    for(int i = 0; i < nameVec.size(); i++){\n        if(nameVec[i] == contactName){\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found.\";\n}\n\nint main(){\n    int N;\n    std::cin >> N;\n    std::vector<std::string> nameVec(N);\n    std::vector<std::string> phoneNumberVec(N);\n    for(int i = 0; i < N; i++){\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << std::endl;\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 3}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> names(N);\n    std::vector<std::string> phoneNumbers(N);\n    for (int i = 0; i < N; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    std::string name;\n    std::cin >> name;\n    std::cout << GetPhoneNumber(names, phoneNumbers, name) << std::endl;\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 4}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> nameVec(N), phoneNumberVec(N);\n    for (int i = 0; i < N; i++) {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 5}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for(int i = 0; i < nameVec.size(); i++) {\n        if(nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found.\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<std::string> nameVec(n), phoneNumberVec(n);\n    for(int i = 0; i < n; i++) {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << std::endl;\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 6}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for(int i = 0; i < nameVec.size(); i++) {\n        if(nameVec[i] == contactName)\n            return phoneNumberVec[i];\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> names(N);\n    std::vector<std::string> phoneNumbers(N);\n    for(int i = 0; i < N; i++)\n        std::cin >> names[i] >> phoneNumbers[i];\n\n    std::string contactName;\n    std::cin >> contactName;\n\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 7}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName)\n            return phoneNumberVec[i];\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n    for (int i = 0; i < N; i++) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    string contactName;\n    cin >> contactName;\n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 8}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> names(N);\n    std::vector<std::string> phoneNumbers(N);\n\n    for (int i = 0; i < N; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n\n    std::string contactName;\n    std::cin >> contactName;\n\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName) << std::endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 9}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found!\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> names(N);\n    std::vector<std::string> phoneNumbers(N);\n    for (int i = 0; i < N; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 10}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found.\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<std::string> names(n);\n    std::vector<std::string> phoneNumbers(n);\n    for (int i = 0; i < n; ++i) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName) << std::endl;\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 1}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName)\n            return phoneNumberVec[i];\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    std::string name, phoneNumber, contactName;\n    std::vector<std::string> nameVec, phoneNumberVec;\n\n    std::cin >> N;\n    for (int i = 0; i < N; i++) {\n        std::cin >> name >> phoneNumber;\n        nameVec.push_back(name);\n        phoneNumberVec.push_back(phoneNumber);\n    }\n\n    std::cin >> contactName;\n\n    std::string result = GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n    std::cout << result;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 2}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not Found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n    for (int i = 0; i < N; i++) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n    string contactName;\n    cin >> contactName;\n    cout << GetPhoneNumber(names, phoneNumbers, contactName) << endl;\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 3}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for(int i = 0; i < nameVec.size(); i++){\n        if(nameVec[i] == contactName){\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<std::string> nameVec(n);\n    std::vector<std::string> phoneNumberVec(n);\n    for(int i = 0; i < n; i++){\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << std::endl;\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 4}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> nameVec(N);\n    vector<string> phoneNumberVec(N);\n    for (int i = 0; i < N; i++) {\n        cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    string phoneNumber = GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n    cout << phoneNumber;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 5}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n\n    std::vector<std::string> names(N);\n    std::vector<std::string> phoneNumbers(N);\n\n    for (int i = 0; i < N; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n\n    std::string contactName;\n    std::cin >> contactName;\n\n    std::string result = GetPhoneNumber(names, phoneNumbers, contactName);\n\n    if (result != \"\") {\n        std::cout << result;\n    } else {\n        std::cout << \"Contact not found\";\n    }\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 6}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    \n    std::vector<std::string> nameVec(N), phoneNumberVec(N);\n    for (int i = 0; i < N; i++) {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    \n    std::string contactName;\n    std::cin >> contactName;\n    \n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n    \n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 7}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<std::string> names(n);\n    std::vector<std::string> phoneNumbers(n);\n\n    for (int i = 0; i < n; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    \n    std::string contactName;\n    std::cin >> contactName;\n    \n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName) << std::endl;\n    \n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 8}
{"problem": 6, "code": "#include<iostream>\n#include<vector>\n#include<string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName){\n    for(int i = 0; i < nameVec.size(); i++){\n        if(nameVec[i] == contactName){\n            return phoneNumberVec[i];\n        }\n    }\n    return \"No contact found\";\n}\n\nint main(){\n    int n;\n    cin >> n;\n    vector<string> names(n);\n    vector<string> phoneNumbers(n);\n    for(int i = 0; i < n; i++){\n        cin >> names[i];\n        cin >> phoneNumbers[i];\n    }\n    string name;\n    cin >> name;\n    cout << GetPhoneNumber(names, phoneNumbers, name) << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 9}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for(int i = 0; i < nameVec.size(); i++) {\n        if(nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found.\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<std::string> names(n);\n    std::vector<std::string> phoneNumbers(n);\n    for(int i = 0; i < n; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName) << std::endl;\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 10}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for(int i = 0; i < nameVec.size(); i++) {\n        if(nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found.\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n\n    std::vector<std::string> nameVec(n);\n    std::vector<std::string> phoneNumberVec(n);\n\n    for(int i = 0; i < n; i++) {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    std::string contactName;\n    std::cin >> contactName;\n\n    std::string result = GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n\n    std::cout << result << std::endl;\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 1}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    std::vector<std::string> names;\n    std::vector<std::string> phoneNumbers;\n    int n;\n    std::string tempName, tempNumber, contactName;\n\n    std::cin >> n;\n    for (int i = 0; i < n; i++) {\n        std::cin >> tempName >> tempNumber;\n        names.push_back(tempName);\n        phoneNumbers.push_back(tempNumber);\n    }\n\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName);\n\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 2}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<std::string> nameVec(n);\n    std::vector<std::string> phoneNumberVec(n);\n    for (int i = 0; i < n; i++) {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 3}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found.\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n\n    std::vector<std::string> names(N);\n    std::vector<std::string> phoneNumbers(N);\n    for (int i = 0; i < N; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n\n    std::string contactName;\n    std::cin >> contactName;\n\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName);\n\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 4}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName)\n            return phoneNumberVec[i];\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    std::string name, phone, contactName;\n    std::vector<std::string> nameVec, phoneVec;\n    std::cin >> N;\n    for (int i = 0; i < N; i++) {\n        std::cin >> name >> phone;\n        nameVec.push_back(name);\n        phoneVec.push_back(phone);\n    }\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(nameVec, phoneVec, contactName);\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 5}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact Not Found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    \n    std::vector<std::string> nameVec(N);\n    std::vector<std::string> phoneNumberVec(N);\n    \n    for (int i = 0; i < N; i++) {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    \n    std::string contactName;\n    std::cin >> contactName;\n    \n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << std::endl;\n    \n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 6}
{"problem": 6, "code": "#include<iostream>\n#include<vector>\n#include<string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for(int i = 0; i < nameVec.size(); i++) {\n        if(nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int n;\n    std::string name, phoneNumber, contactName;\n    std::vector<std::string> nameVec, phoneNumberVec;\n\n    std::cin >> n;\n    for(int i = 0; i < n; i++) {\n        std::cin >> name >> phoneNumber;\n        nameVec.push_back(name);\n        phoneNumberVec.push_back(phoneNumber);\n    }\n\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 7}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for(int i = 0; i < nameVec.size(); i++) {\n        if(nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found.\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<std::string> nameVec(n);\n    std::vector<std::string> phoneNumberVec(n);\n    for(int i = 0; i < n; i++) {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << std::endl;\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 8}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for(int i=0; i<nameVec.size(); i++) {\n        if(nameVec[i] == contactName)\n            return phoneNumberVec[i];\n    }\n    return \"Contact not found.\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> names(N);\n    std::vector<std::string> phoneNumbers(N);\n    for(int i=0; i<N; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::string phoneNumber = GetPhoneNumber(names, phoneNumbers, contactName);\n    std::cout << phoneNumber;\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 9}
{"problem": 6, "code": "#include<iostream>\n#include<vector>\n#include<string>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n    vector<string> names(n);\n    vector<string> phoneNumbers(n);\n    for (int i = 0; i < n; i++) {\n        cin >> names[i];\n        cin >> phoneNumbers[i];\n    }\n    string query;\n    cin >> query;\n    string result = GetPhoneNumber(names, phoneNumbers, query);\n    cout << result;\n    return 0;\n}", "class": 1, "version": 5, "model": "GPT-4", "variation": 10}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n\n    std::vector<std::string> nameVec(n);\n    std::vector<std::string> phoneNumberVec(n);\n\n    for(int i = 0; i < n; i++) {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    std::string contactName;\n    std::cin >> contactName;\n\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << std::endl;\n\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 1}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    std::string name, phone, contactName;\n    std::vector<std::string> nameVec, phoneNumberVec;\n\n    std::cin >> N;\n    for (int i = 0; i < N; i++) {\n        std::cin >> name >> phone;\n        nameVec.push_back(name);\n        phoneNumberVec.push_back(phone);\n    }\n\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << std::endl;\n\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 2}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    auto it = std::find(nameVec.begin(), nameVec.end(), contactName);\n    if (it != nameVec.end()){\n        int index = std::distance(nameVec.begin(), it);\n        return phoneNumberVec[index];\n    }\n    else\n        return \"Contact not found\";\n}\n\nint main() {\n    std::vector<std::string> names;\n    std::vector<std::string> phoneNumbers;\n    int n;\n    std::cin >> n;\n    for(int i = 0; i < n; i++){\n        std::string name, phoneNumber;\n        std::cin >> name >> phoneNumber;\n        names.push_back(name);\n        phoneNumbers.push_back(phoneNumber);\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName);\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 3}
{"problem": 6, "code": "#include<iostream>\n#include<vector>\n#include<string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> names(N);\n    std::vector<std::string> phoneNumbers(N);\n    for (int i = 0; i < N; ++i) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    std::string targetName;\n    std::cin >> targetName;\n    std::cout << GetPhoneNumber(names, phoneNumbers, targetName);\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 4}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for (int i = 0; i < N; i++) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName);\n\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 5}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    std::string name, phone, contactName;\n    std::vector<std::string> nameVec, phoneNumberVec;\n\n    std::cin >> N;\n    for (int i = 0; i < N; i++) {\n        std::cin >> name >> phone;\n        nameVec.push_back(name);\n        phoneNumberVec.push_back(phone);\n    }\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 6}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    auto it = std::find(nameVec.begin(), nameVec.end(), contactName);\n    if(it != nameVec.end()){\n        int index = std::distance(nameVec.begin(), it);\n        return phoneNumberVec[index];\n    } else {\n        return \"Contact not found\";\n    }\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n\n    std::vector<std::string> nameVec(N);\n    std::vector<std::string> phoneNumberVec(N);\n\n    for(int i = 0; i < N; i++) {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    std::string contactName;\n    std::cin >> contactName;\n\n    std::string phoneNumber = GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n\n    std::cout << phoneNumber;\n\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 7}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    auto it = std::find(nameVec.begin(), nameVec.end(), contactName);\n    if (it != nameVec.end()) {\n        int index = std::distance(nameVec.begin(), it);\n        return phoneNumberVec[index];\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    std::vector<std::string> names, phoneNumbers;\n    int N;\n    std::cin >> N;\n    std::string name, phoneNumber;\n    for (int i = 0; i < N; ++i) {\n        std::cin >> name >> phoneNumber;\n        names.push_back(name);\n        phoneNumbers.push_back(phoneNumber);\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::string result = GetPhoneNumber(names, phoneNumbers, contactName);\n    std::cout << result;\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 8}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    auto it = std::find(nameVec.begin(), nameVec.end(), contactName);\n    if (it != nameVec.end()) {\n        int index = std::distance(nameVec.begin(), it);\n        return phoneNumberVec[index];\n    } else {\n        return \"Contact not found\";\n    }\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<std::string> nameVec(n);\n    std::vector<std::string> phoneNumberVec(n);\n    for (int i = 0; i < n; ++i) {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << std::endl;\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 9}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName)\n{\n    for (int i = 0; i < nameVec.size(); i++)\n    {\n        if (nameVec[i] == contactName)\n        {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main()\n{\n    int N;\n    std::cin >> N;\n    std::vector<std::string> names(N), phoneNumbers(N);\n    for (int i = 0; i < N; i++)\n    {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    std::string searchName;\n    std::cin >> searchName;\n    std::cout << GetPhoneNumber(names, phoneNumbers, searchName);\n    return 0;\n}", "class": 1, "version": 6, "model": "GPT-4", "variation": 10}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    std::vector<std::string> nameVec;\n    std::vector<std::string> phoneNumberVec;\n\n    int N;\n    std::cin >> N;\n    for (int i = 0; i < N; i++) {\n        std::string name, phoneNumber;\n        std::cin >> name >> phoneNumber;\n        nameVec.push_back(name);\n        phoneNumberVec.push_back(phoneNumber);\n    }\n\n    std::string contactName;\n    std::cin >> contactName;\n\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 1}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName){\n    for (int i = 0; i < nameVec.size(); i++){\n        if (nameVec[i] == contactName){\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> names(N), phoneNumbers(N);\n    for (int i = 0; i < N; i++){\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    std::string name;\n    std::cin >> name;\n    std::cout << GetPhoneNumber(names, phoneNumbers, name);\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 2}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for(int i = 0; i < nameVec.size(); i++) {\n        if(nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> names(N);\n    std::vector<std::string> phoneNumbers(N);\n    for(int i = 0; i < N; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName);\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 3}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName)\n{\n    for (int i = 0; i < nameVec.size(); i++)\n    {\n        if (nameVec[i] == contactName)\n        {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"\";\n}\n\nint main()\n{\n    int N;\n    std::cin >> N;\n    std::vector<std::string> names(N);\n    std::vector<std::string> phoneNumbers(N);\n    for (int i = 0; i < N; i++)\n    {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName);\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 4}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    std::vector<std::string> names;\n    std::vector<std::string> phoneNumbers;\n    int n;\n    std::cin >> n;\n    for (int i = 0; i < n; i++) {\n        std::string name, phoneNumber;\n        std::cin >> name >> phoneNumber;\n        names.push_back(name);\n        phoneNumbers.push_back(phoneNumber);\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName);\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 5}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n\n    std::vector<std::string> names(n);\n    std::vector<std::string> phoneNumbers(n);\n\n    for (int i = 0; i < n; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n\n    std::string contactName;\n    std::cin >> contactName;\n\n    std::string phoneNumber = GetPhoneNumber(names, phoneNumbers, contactName);\n    std::cout << phoneNumber;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 6}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<std::string> nameVec(n);\n    std::vector<std::string> phoneNumberVec(n);\n    \n    for (int i = 0; i < n; i++) {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    \n    std::string contactName;\n    std::cin >> contactName;\n    \n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 7}
{"problem": 6, "code": "#include<iostream>\n#include<vector>\n#include<string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName)\n{\n    for(int i = 0; i < nameVec.size(); i++)\n    {\n        if(nameVec[i] == contactName)\n        {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found!\";\n}\n\nint main()\n{\n    int N;\n    std::cin >> N;\n    std::vector<std::string> nameVec(N);\n    std::vector<std::string> phoneNumberVec(N);\n    for(int i = 0; i < N; i++)\n    {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 8}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact Not Found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n    \n    for(int i = 0; i < N; i++) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n    string contactName;\n    cin >> contactName;\n\n    string phoneNumber = GetPhoneNumber(names, phoneNumbers, contactName);\n\n    cout << phoneNumber;\n\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 9}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for(int i = 0; i < nameVec.size(); i++) {\n        if(nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact Not Found\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<std::string> names(n);\n    std::vector<std::string> phoneNumbers(n);\n    for(int i = 0; i < n; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    std::string name;\n    std::cin >> name;\n    std::cout << GetPhoneNumber(names, phoneNumbers, name) << std::endl;\n    return 0;\n}", "class": 1, "version": 7, "model": "GPT-4", "variation": 10}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found!\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<std::string> names(n), phoneNumbers(n);\n    for (int i = 0; i < n; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    std::string name;\n    std::cin >> name;\n    std::cout << GetPhoneNumber(names, phoneNumbers, name);\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 1}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<std::string> names(n);\n    std::vector<std::string> phoneNumbers(n);\n    for (int i = 0; i < n; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName) << std::endl;\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 2}
{"problem": 6, "code": "#include<iostream>\n#include<vector>\n#include<string>\nusing namespace std;\n\n// Function to get the phone number\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName){\n    for(int i=0; i<nameVec.size(); i++){\n        if(nameVec[i]==contactName){\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main(){\n    int n;\n    cin >> n;\n    vector<string> names(n);\n    vector<string> phoneNumbers(n);\n    for(int i=0; i<n; i++){\n        cin >> names[i] >> phoneNumbers[i];\n    }\n    string name;\n    cin >> name;\n    cout << GetPhoneNumber(names, phoneNumbers, name) << endl;\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 3}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName)\n{\n    auto it = std::find(nameVec.begin(), nameVec.end(), contactName);\n\n    if (it != nameVec.end())\n    {\n        int index = std::distance(nameVec.begin(), it);\n        return phoneNumberVec[index];\n    }\n    else\n    {\n        return \"Contact Not Found\";\n    }\n}\n\nint main()\n{\n    std::vector<std::string> names;\n    std::vector<std::string> phoneNumbers;\n    int n;\n    std::cin >> n;\n\n    for (int i = 0; i < n; ++i)\n    {\n        std::string name;\n        std::string phoneNumber;\n        std::cin >> name >> phoneNumber;\n        names.push_back(name);\n        phoneNumbers.push_back(phoneNumber);\n    }\n\n    std::string query;\n    std::cin >> query;\n\n    std::cout << GetPhoneNumber(names, phoneNumbers, query);\n\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 4}
{"problem": 6, "code": "#include<iostream>\n#include<vector>\n#include<string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Name not found in contact list.\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<std::string> nameVec(n), phoneNumberVec(n);\n    for(int i = 0; i < n; i++) {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 5}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName)\n{\n    for(int i = 0; i < nameVec.size(); i++)\n    {\n        if(nameVec[i] == contactName)\n        {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main()\n{\n    int N;\n    std::cin >> N;\n\n    std::vector<std::string> names(N);\n    std::vector<std::string> phoneNumbers(N);\n\n    for(int i = 0; i < N; i++)\n    {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n\n    std::string contactName;\n    std::cin >> contactName;\n\n    std::string phoneNumber = GetPhoneNumber(names, phoneNumbers, contactName);\n\n    std::cout << phoneNumber << std::endl;\n\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 6}
{"problem": 6, "code": "#include<iostream>\n#include<vector>\n#include<string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<std::string> names(n);\n    std::vector<std::string> phoneNumbers(n);\n\n    for (int i = 0; i < n; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n\n    std::string contactName;\n    std::cin >> contactName;\n\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName);\n\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 7}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Name not found!\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<std::string> nameVec(n), phoneNumberVec(n);\n    for (int i = 0; i < n; i++) {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 8}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<std::string> names(n);\n    std::vector<std::string> phoneNumbers(n);\n    for (int i = 0; i < n; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    std::string name;\n    std::cin >> name;\n    std::cout << GetPhoneNumber(names, phoneNumbers, name) << std::endl;\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 9}
{"problem": 6, "code": "#include<iostream>\n#include<vector>\n#include<string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName)\n            return phoneNumberVec[i];\n    }\n    return \"Contact not found.\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<std::string> names(n);\n    std::vector<std::string> phoneNumbers(n);\n    for(int i = 0; i < n; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    std::string lookupName;\n    std::cin >> lookupName;\n    std::cout << GetPhoneNumber(names, phoneNumbers, lookupName);\n    return 0;\n}", "class": 1, "version": 8, "model": "GPT-4", "variation": 10}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n\n    std::vector<std::string> nameVec(N);\n    std::vector<std::string> phoneNumberVec(N);\n\n    for (int i = 0; i < N; i++) {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    std::string contactName;\n    std::cin >> contactName;\n\n    std::string result = GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 1}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> nameVec(N), phoneNumberVec(N);\n    for (int i = 0; i < N; ++i) {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << std::endl;\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 2}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    \n    std::vector<std::string> names(N);\n    std::vector<std::string> phoneNumbers(N);\n    \n    for (int i = 0; i < N; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    \n    std::string contactName;\n    std::cin >> contactName;\n    \n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName);\n    \n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 3}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName)\n            return phoneNumberVec[i];\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n\n    std::vector<std::string> names(N);\n    std::vector<std::string> phoneNumbers(N);\n\n    for (int i = 0; i < N; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n\n    std::string contactName;\n    std::cin >> contactName;\n\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName);\n\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 4}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for(int i = 0; i < nameVec.size(); i++) {\n        if(nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> names(N);\n    std::vector<std::string> phoneNumbers(N);\n    for(int i = 0; i < N; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::string phoneNumber = GetPhoneNumber(names, phoneNumbers, contactName);\n    std::cout << phoneNumber;\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 5}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for(int i = 0; i < nameVec.size(); i++) {\n        if(nameVec[i] == contactName)\n            return phoneNumberVec[i];\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    std::vector<std::string> names;\n    std::vector<std::string> phoneNumbers;\n    int N;\n    std::cin >> N;\n    for(int i = 0; i < N; i++) {\n        std::string name, phoneNumber;\n        std::cin >> name >> phoneNumber;\n        names.push_back(name);\n        phoneNumbers.push_back(phoneNumber);\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName);\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 6}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n    vector<string> names(n), phoneNumbers(n);\n    for (int i = 0; i < n; i++) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n    string targetName;\n    cin >> targetName;\n    cout << GetPhoneNumber(names, phoneNumbers, targetName);\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 7}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName)\n            return phoneNumberVec[i];\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n\n    std::vector<std::string> names(n);\n    std::vector<std::string> phoneNumbers(n);\n\n    for (int i = 0; i < n; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n\n    std::string contactName;\n    std::cin >> contactName;\n\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName);\n\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 8}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName){\n    for(int i = 0; i < nameVec.size(); i++){\n        if(nameVec[i] == contactName){\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main(){\n    int N;\n    std::cin >> N;\n    std::vector<std::string> nameVec(N);\n    std::vector<std::string> phoneNumberVec(N);\n    for(int i = 0; i < N; i++){\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::string phoneNumber = GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n    std::cout << phoneNumber;\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 9}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> names(N), phoneNumbers(N);\n    for (int i = 0; i < N; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName);\n    return 0;\n}", "class": 1, "version": 9, "model": "GPT-4", "variation": 10}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> names(N);\n    std::vector<std::string> phoneNumbers(N);\n\n    for (int i = 0; i < N; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n\n    std::string contactName;\n    std::cin >> contactName;\n\n    std::string phoneNumber = GetPhoneNumber(names, phoneNumbers, contactName);\n\n    std::cout << phoneNumber << std::endl;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 1}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    vector<string> names;\n    vector<string> phoneNumbers;\n    int N;\n    cin >> N;\n\n    for (int i = 0; i < N; i++) {\n        string name;\n        string phoneNumber;\n        cin >> name >> phoneNumber;\n        names.push_back(name);\n        phoneNumbers.push_back(phoneNumber);\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName);\n\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 2}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> nameVec(N), phoneNumberVec(N);\n    for (int i = 0; i < N; i++) {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 3}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> nameVec(N);\n    std::vector<std::string> phoneNumberVec(N);\n    for(int i = 0; i < N; i++) {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << std::endl;\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 4}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for(int i = 0; i < nameVec.size(); i++){\n        if(nameVec[i] == contactName){\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    \n    std::vector<std::string> names(N);\n    std::vector<std::string> phoneNumbers(N);\n    \n    for(int i = 0; i < N; i++){\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    \n    std::string contactName;\n    std::cin >> contactName;\n    \n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName);\n    \n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 5}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName){\n    for(int i=0; i<nameVec.size(); i++){\n        if(nameVec[i]==contactName){\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main(){\n    int N;\n    std::cin >> N;\n    std::vector<std::string> names(N), phoneNumbers(N);\n    \n    for(int i=0; i<N; i++){\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    std::string lookupName;\n    std::cin >> lookupName;\n\n    std::string result = GetPhoneNumber(names, phoneNumbers, lookupName);\n\n    std::cout << result;\n\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 6}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName)\n{\n    for (int i = 0; i < nameVec.size(); i++)\n    {\n        if (nameVec[i] == contactName)\n        {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found.\";\n}\n\nint main()\n{\n    int n;\n    std::cin >> n;\n    std::vector<std::string> names(n);\n    std::vector<std::string> phoneNumbers(n);\n    \n    for (int i = 0; i < n; i++)\n    {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    \n    std::string contactName;\n    std::cin >> contactName;\n    \n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName) << std::endl;\n    \n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 7}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for(int i = 0; i < nameVec.size(); i++) {\n        if(nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found.\";\n}\n\nint main() {\n    std::vector<std::string> names;\n    std::vector<std::string> phoneNumbers;\n    int n;\n    std::cin >> n;\n    for(int i = 0; i < n; i++) {\n        std::string name, phoneNumber;\n        std::cin >> name >> phoneNumber;\n        names.push_back(name);\n        phoneNumbers.push_back(phoneNumber);\n    }\n    std::string query;\n    std::cin >> query;\n    std::cout << GetPhoneNumber(names, phoneNumbers, query) << std::endl;\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 8}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for(int i = 0; i < nameVec.size(); i++) {\n        if(nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n    \n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n\n    for(int i = 0; i < N; i++) {\n        cin >> names[i];\n        cin >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName);\n\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 9}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact Not Found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n\n    std::vector<std::string> names(N);\n    std::vector<std::string> phoneNumbers(N);\n\n    for (int i = 0; i < N; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n\n    std::string contactName;\n    std::cin >> contactName;\n\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName) << \"\\n\";\n\n    return 0;\n}", "class": 1, "version": 10, "model": "GPT-4", "variation": 10}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if(std::abs(a) > std::abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    std::cin >> num1;\n    std::cin >> num2;\n\n    std::cout << MaxMagnitude(num1, num2);\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 1}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if(abs(a) > abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 2}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if(abs(num1) > abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 3}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (std::abs(a) > std::abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 4}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if(abs(a) > abs(b)) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nint main() {\n    int a, b;\n    std::cin >> a >> b;\n    std::cout << MaxMagnitude(a, b);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 5}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (std::abs(a) > std::abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int x, y;\n    std::cin >> x >> y;\n    std::cout << MaxMagnitude(x, y);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 6}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if(std::abs(num1) > std::abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int a, b;\n    std::cin >> a >> b;\n\n    std::cout << MaxMagnitude(a, b);\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 7}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if(std::abs(num1) > std::abs(num2))\n        return num1;\n    else\n        return num2;\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 8}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (std::abs(a) > std::abs(b))\n        return a;\n    else\n        return b;\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 9}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2){\n    if(abs(num1) > abs(num2))\n        return num1;\n    else\n        return num2;\n}\n\nint main(){\n    int num1, num2;\n\n    std::cin >> num1;\n    std::cin >> num2;\n\n    std::cout << MaxMagnitude(num1, num2);\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 10}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint MaxMagnitude(int num1, int num2){\n    if(abs(num1) > abs(num2)){\n        return num1;\n    }\n    else{\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    cout << \"Enter two numbers: \";\n    cin >> num1 >> num2;\n    cout << \"The number with the largest magnitude is: \" << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 1}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) > std::abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int x, y;\n    std::cin >> x >> y;\n    std::cout << MaxMagnitude(x, y);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 2}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (abs(a) > abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int x, y;\n\n    std::cin >> x >> y;\n\n    std::cout << MaxMagnitude(x, y);\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 3}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n  if (std::abs(num1) > std::abs(num2)) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nint main() {\n  int num1, num2;\n\n  std::cout << \"Enter first number: \";\n  std::cin >> num1;\n  std::cout << \"Enter second number: \";\n  std::cin >> num2;\n\n  int maxMagnitudeValue = MaxMagnitude(num1, num2);\n\n  std::cout << \"The number with the largest magnitude is: \" << maxMagnitudeValue;\n\n  return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 4}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if(abs(num1) > abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    std::cin >> num1 >> num2;\n\n    std::cout << MaxMagnitude(num1, num2);\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 5}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if(abs(num1) > abs(num2)) {\n        return num1;\n    }\n    else {\n        return num2;\n    }\n}\n\nint main() {\n    int number1, number2;\n\n    std::cout << \"Enter two numbers: \";\n    std::cin >> number1 >> number2;\n\n    int result = MaxMagnitude(number1, number2);\n\n    std::cout << \"The number with the largest magnitude is: \" << result << std::endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 6}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if(abs(num1) > abs(num2))\n        return num1;\n    else\n        return num2;\n}\n\nint main() {\n    int a, b;\n    std::cin >> a >> b;\n    std::cout << MaxMagnitude(a, b);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 7}
{"problem": 1, "code": "#include<iostream>\n#include<cstdlib> \n\nint MaxMagnitude(int a, int b){\n    if(abs(a) > abs(b)){\n        return a;\n    }\n    else{\n        return b;\n    }\n}\n\nint main(){\n    int num1, num2;\n    \n    std::cout << \"Enter first number: \";\n    std::cin >> num1;\n\n    std::cout << \"Enter second number: \";\n    std::cin >> num2;\n    \n    int result = MaxMagnitude(num1, num2);\n    \n    std::cout << \"The number with the largest magnitude is: \" << result << std::endl;\n    \n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 8}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (abs(a) > abs(b)) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cout << \"Enter two integers: \";\n    std::cin >> num1 >> num2;\n\n    int maxMagnitudeNum = MaxMagnitude(num1, num2);\n    std::cout << \"The number with the maximum magnitude is: \" << maxMagnitudeNum;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 9}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) > abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int number1, number2;\n\n    std::cin >> number1 >> number2;\n\n    std::cout << MaxMagnitude(number1, number2);\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 10}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (abs(a) > abs(b)) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 1}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) > std::abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int number1, number2;\n    \n    std::cin >> number1 >> number2;\n    \n    std::cout << MaxMagnitude(number1, number2);\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 2}
{"problem": 1, "code": "#include<iostream>\n#include<cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (abs(a) > abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 3}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (std::abs(a) > std::abs(b))\n        return a;\n    else\n        return b;\n}\n\nint main() {\n    int x, y;\n    std::cin >> x >> y;\n    std::cout << MaxMagnitude(x, y);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 4}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (abs(a) > abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    \n    std::cout << MaxMagnitude(num1, num2);\n    \n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 5}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (abs(a) > abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int x, y;\n    std::cin >> x >> y;\n\n    std::cout << MaxMagnitude(x, y);\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 6}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) > std::abs(num2)) {\n        return num1;\n    } \n    else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 7}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (std::abs(a) > std::abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    std::cin >> num1 >> num2;\n\n    std::cout << MaxMagnitude(num1, num2);\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 8}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (std::abs(a) > std::abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 9}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) > std::abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 10}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b){\n    if (std::abs(a) > std::abs(b)){\n        return a;\n    }\n    else{\n        return b;\n    }\n}\n\nint main(){\n    int x, y;\n    std::cin >> x >> y;\n    std::cout << MaxMagnitude(x, y);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 1}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) > std::abs(num2))\n        return num1;\n    else\n        return num2;\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 2}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if(abs(num1) >= abs(num2))\n        return num1;\n    else\n        return num2;\n}\n\nint main() {\n    int a, b;\n    std::cin >> a >> b;\n    std::cout << MaxMagnitude(a, b);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 3}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) > std::abs(num2)) {\n        return num1;\n    }\n    else {\n        return num2;\n    }\n}\n\nint main() {\n    int input1, input2;\n    std::cin >> input1 >> input2;\n\n    std::cout << MaxMagnitude(input1, input2);\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 4}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) > std::abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int a, b;\n    std::cin >> a >> b;\n    std::cout << MaxMagnitude(a, b);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 5}
{"problem": 1, "code": "#include<iostream>\n#include<cmath>\n\nint MaxMagnitude(int a, int b) {\n    if (abs(a) > abs(b))\n        return a;\n    else\n        return b;\n}\n\nint main() {\n    int num1, num2;\n    std::cin >> num1 >> num2;\n    std::cout << MaxMagnitude(num1, num2);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 6}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (abs(num1) > abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cout << \"Enter two numbers: \";\n    std::cin >> num1 >> num2;\n\n    int maxMag = MaxMagnitude(num1, num2);\n    std::cout << \"The number with the largest magnitude is: \" << maxMag << std::endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 7}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int num1, int num2) {\n    if (std::abs(num1) > std::abs(num2)) {\n        return num1;\n    } else {\n        return num2;\n    }\n}\n\nint main() {\n    int input1, input2;\n    std::cin >> input1 >> input2;\n    std::cout << MaxMagnitude(input1, input2);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 8}
{"problem": 1, "code": "#include <iostream>\n#include <cstdlib> // required for abs()\n\nint MaxMagnitude(int a, int b) {\n    if(abs(a) > abs(b)) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    std::cout << \"Enter two integers: \";\n    std::cin >> num1 >> num2;\n\n    int result = MaxMagnitude(num1, num2);\n    std::cout << \"The integer with the largest magnitude is: \" << result << std::endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 9}
{"problem": 1, "code": "#include <iostream>\n#include <cmath>\n\nint MaxMagnitude(int a, int b) {\n    if(abs(a) > abs(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n\n    std::cin >> num1 >> num2;\n\n    std::cout << MaxMagnitude(num1, num2);\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 10}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 1}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps){\n    return userSteps/2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 2}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n\n    std::cout << StepsToMiles(steps);\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 3}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int userSteps;\n    std::cin >> userSteps;\n    std::cout << StepsToMiles(userSteps);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 4}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 5}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    \n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 6}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 7}
{"problem": 2, "code": "#include<iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 8}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 9}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 10}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps) << std::endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 1}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return (double)userSteps / 2000;\n}\n\nint main() {\n    int userSteps;\n    cin >> userSteps;\n    cout << StepsToMiles(userSteps);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 2}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    double miles = userSteps / 2000.0;\n    return miles;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 3}
{"problem": 2, "code": "#include<iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 4}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int userSteps;\n    std::cin >> userSteps;\n    std::cout << StepsToMiles(userSteps);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 5}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int userSteps;\n    std::cin >> userSteps;\n    std::cout << StepsToMiles(userSteps);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 6}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 7}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    cout << \"Enter the number of steps: \";\n    cin >> steps;\n    cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 8}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int userSteps;\n    std::cin >> userSteps;\n    std::cout << StepsToMiles(userSteps);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 9}
{"problem": 2, "code": "#include<iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    cout << \"Enter the number of steps: \";\n    cin >> steps;\n    cout << \"Miles walked: \" << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 10}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int userSteps;\n    std::cin >> userSteps;\n    std::cout << StepsToMiles(userSteps);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 1}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps){\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 2}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 3}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 4}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 5}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 6}
{"problem": 2, "code": "#include<iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 7}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 8}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 9}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return (double)userSteps / 2000;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n\n    cout << StepsToMiles(steps);\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 10}
{"problem": 2, "code": "#include<iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 1}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 2}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 3}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 4}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps){\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n\n    double miles = StepsToMiles(steps);\n    std::cout << miles;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 5}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 6}
{"problem": 2, "code": "#include <iostream>\nusing namespace std;\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    cin >> steps;\n    cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 7}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 8}
{"problem": 2, "code": "#include<iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return userSteps / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 9}
{"problem": 2, "code": "#include <iostream>\n\ndouble StepsToMiles(int userSteps) {\n    return static_cast<double>(userSteps) / 2000.0;\n}\n\nint main() {\n    int steps;\n    std::cin >> steps;\n    std::cout << StepsToMiles(steps);\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 10}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym;\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (i == 0 && isupper(userPhrase[i])) {\n            acronym.push_back(userPhrase[i]);\n        }\n        if (userPhrase[i] == ' ' && isupper(userPhrase[i + 1])) {\n            acronym.push_back(userPhrase[i + 1]);\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase) << endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 1}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase);\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    string acronym = CreateAcronym(userPhrase);\n    cout << acronym;\n    return 0;\n}\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 2}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::string acronym;\n    for (int i = 0; i < userPhrase.size(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    std::string userPhrase;\n    getline(std::cin, userPhrase);\n    std::cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 3}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.size(); i++) {\n        if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z')\n            acronym += userPhrase[i];\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 4}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    \n    for (int i = 0; i < userPhrase.size(); i++) {\n        if(isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 5}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::string acronym;\n    for (int i = 0; i < userPhrase.size(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    std::string userPhrase;\n    getline(std::cin, userPhrase);\n    std::cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 6}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    \n    for(int i = 0; i < userPhrase.length(); i++) {\n        if(isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    \n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    \n    cout << CreateAcronym(userPhrase);\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 7}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        } else if (userPhrase[i-1] == ' ' && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string input;\n    getline(cin, input);\n\n    string output = CreateAcronym(input);\n\n    cout << output;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 8}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        } else if (userPhrase[i] == ' ' && isupper(userPhrase[i + 1])) {\n            acronym += userPhrase[i + 1];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    std::string phrase;\n    getline(std::cin, phrase);\n    std::cout << CreateAcronym(phrase);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 9}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym;\n    bool addLetter = true;\n\n    for (char& c : userPhrase) {\n        if (addLetter && isupper(c)) {\n            acronym += c;\n            addLetter = false;\n        }\n        if (c == ' ') {\n            addLetter = true;\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 10}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n        else if (userPhrase[i] == ' ' && isupper(userPhrase[i + 1])) {\n            acronym += userPhrase[i + 1];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 1}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 2}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    string acronym = CreateAcronym(userPhrase);\n    cout << acronym;\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 3}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.size(); ++i) {\n        if (isupper(userPhrase.at(i))) {\n            acronym += userPhrase.at(i);\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 4}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase);\n\nint main() {\n   string userPhrase;\n   getline(cin, userPhrase);\n   cout << CreateAcronym(userPhrase) << endl;\n\n   return 0;\n}\n\nstring CreateAcronym(string userPhrase) {\n   string acronym = \"\";\n\n   for (int i = 0; i < userPhrase.length(); i++) {\n      if (isupper(userPhrase[i])) {\n         acronym += userPhrase[i];\n      }\n   }\n   \n   return acronym;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 5}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n        else if (userPhrase[i] == ' ' && isupper(userPhrase[i + 1])) {\n            acronym += userPhrase[i + 1];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    std::string userPhrase;\n    getline(std::cin, userPhrase);\n    std::cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 6}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for(int i = 0; i < userPhrase.length(); i++) {\n        if(i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n        else if(userPhrase[i] == ' ' && isupper(userPhrase[i+1])) {\n            acronym += userPhrase[i+1];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase) << endl;\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 7}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.size(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 8}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nstd::string CreateAcronym(std::string userPhrase);\n\nint main() {\n    std::string userPhrase;\n    std::getline(std::cin, userPhrase);\n\n    std::string result = CreateAcronym(userPhrase);\n    std::cout << result << std::endl;\n\n    return 0;\n}\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n        else if (userPhrase[i] == ' ' && isupper(userPhrase[i + 1])) {\n            acronym += userPhrase[i + 1];\n        }\n    }\n    return acronym;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 9}
{"problem": 3, "code": "#include <iostream>\n#include <sstream>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    stringstream ss(userPhrase);\n    string word;\n    \n    while (ss >> word) {\n        if (isupper(word[0])) {\n            acronym += word[0];\n        }\n    }\n    \n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    string acronym = CreateAcronym(userPhrase);\n    cout << acronym << endl;\n    \n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 10}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym;\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 1}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    string result = CreateAcronym(userPhrase);\n    cout << result;\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 2}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::string acronym;\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    std::string userPhrase;\n\n    std::getline(std::cin, userPhrase);\n\n    std::cout << CreateAcronym(userPhrase);\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 3}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym;\n    for(int i=0; i<userPhrase.length(); i++) {\n        if(isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 4}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::string acronym = \"\";\n    bool shouldAddLetter = true;\n\n    for (char c : userPhrase) {\n        if (c == ' ') {\n            shouldAddLetter = true;\n        } else if (shouldAddLetter && isupper(c)) {\n            acronym += c;\n            shouldAddLetter = false;\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    std::string userPhrase;\n    std::getline(std::cin, userPhrase);\n\n    std::cout << CreateAcronym(userPhrase) << std::endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 5}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::string acronym;\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    std::string userPhrase;\n    getline(std::cin, userPhrase);\n    std::cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 6}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 7}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nstd::string CreateAcronym(std::string userPhrase) {\n    std::string acronym;\n\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (i == 0 && isupper(userPhrase[i])) {\n            acronym.push_back(userPhrase[i]);\n        }\n        else if (userPhrase[i - 1] == ' ' && isupper(userPhrase[i])) {\n            acronym.push_back(userPhrase[i]);\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    std::string userPhrase;\n\n    std::getline(std::cin, userPhrase);\n    \n    std::string result = CreateAcronym(userPhrase);\n\n    std::cout << result;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 8}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n            acronym += userPhrase[i];\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n\n    getline(cin, userPhrase);\n\n    cout << CreateAcronym(userPhrase);\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 9}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 10}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n\n    for (int i = 0; i < userPhrase.size(); i++) {\n        if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n            acronym += userPhrase[i];\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n\n    getline(cin, userPhrase);\n\n    cout << CreateAcronym(userPhrase);\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 1}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for(int i = 0; i < userPhrase.size(); i++) {\n        if(i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n        else if(userPhrase[i] == ' ' && isupper(userPhrase[i + 1])) {\n            acronym += userPhrase[i + 1];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 2}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase);\n\nint main() {\n    string userPhrase;\n\n    getline(cin, userPhrase);\n\n    cout << CreateAcronym(userPhrase) << endl;\n\n    return 0;\n}\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 3}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        } else if (userPhrase[i] == ' ' && isupper(userPhrase[i + 1])) {\n            acronym += userPhrase[i + 1];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 4}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 5}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (userPhrase[i] >= 'A' && userPhrase[i] <= 'Z') {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 6}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase);\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    \n    cout << CreateAcronym(userPhrase) << endl;\n    \n    return 0;\n}\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n    return acronym;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 7}
{"problem": 3, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n    for (int i = 0; i < userPhrase.size(); i++) {\n        if (i == 0 && isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        } else if (userPhrase[i] == ' ' && isupper(userPhrase[i + 1])) {\n            acronym += userPhrase[i + 1];\n        }\n    }\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n    getline(cin, userPhrase);\n    cout << CreateAcronym(userPhrase);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 8}
{"problem": 3, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n\n    for (int i = 0; i < userPhrase.length(); i++) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n\n    getline(cin, userPhrase);\n\n    cout << CreateAcronym(userPhrase) << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 9}
{"problem": 3, "code": "#include <string>\n#include <iostream>\nusing namespace std;\n\nstring CreateAcronym(string userPhrase) {\n    string acronym = \"\";\n\n    for (int i = 0; i < userPhrase.length(); ++i) {\n        if (isupper(userPhrase[i])) {\n            acronym += userPhrase[i];\n        }\n    }\n\n    return acronym;\n}\n\nint main() {\n    string userPhrase;\n\n    getline(cin, userPhrase);\n\n    cout << CreateAcronym(userPhrase) << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 10}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    cout << CountCharacters(userChar, userString);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 1}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.length(); i++){\n        if(userString[i] == userChar){\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    cout << CountCharacters(userChar, userString);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 2}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.length(); i++) {\n        if(userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    \n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n    cout << result;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 3}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString);\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 4}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char inputChar;\n    string inputString;\n\n    cin >> inputChar;\n    cin.ignore();\n    getline(cin, inputString);\n\n    int result = CountCharacters(inputChar, inputString);\n\n    cout << result;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 5}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString);\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 6}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.length(); i++) {\n        if(userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    cout << CountCharacters(userChar, userString);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 7}
{"problem": 4, "code": "#include<iostream>\n#include<string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i=0; i<userString.length(); i++) {\n        if(userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    \n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    int count = CountCharacters(userChar, userString);\n    \n    cout << count;\n    \n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 8}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin >> ws, userString);\n\n    cout << CountCharacters(userChar, userString);\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 9}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    \n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    \n    int charCount = CountCharacters(userChar, userString);\n    cout << charCount;\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 10}
{"problem": 4, "code": "#include<iostream>\n#include<string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 1}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); ++i) {\n        if (userString[i] == userChar) {\n            ++count;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 2}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.size(); i++) {\n        if(userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    getline(cin >> ws, userString);\n    cout << CountCharacters(userChar, userString);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 3}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.size(); i++) {\n        if(userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n    cout << result;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 4}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    getline(cin >> ws, userString);\n\n    int count = CountCharacters(userChar, userString);\n\n    cout << count;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 5}
{"problem": 4, "code": "#include<iostream>\n#include<string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.size(); i++) {\n        if(userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString);\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 6}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++)\n        if (userString[i] == userChar) \n            count++;\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n\n    cout << result;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 7}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    \n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    \n    int count = CountCharacters(userChar, userString);\n    \n    cout << count;\n    \n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 8}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.length(); i++) {\n        if(userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    getline(cin >> ws, userString);\n    int count = CountCharacters(userChar, userString);\n    cout << count;\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 9}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); ++i) {\n        if (userString[i] == userChar) {\n            ++count;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 10}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString);\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 1}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.length(); i++) {\n        if(userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString);\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 2}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 3}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.size(); i++) {\n        if(userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    cout << CountCharacters(userChar, userString);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 4}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    int result = CountCharacters(userChar, userString);\n    cout << result;\n    \n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 5}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); ++i) {\n        if (userString[i] == userChar) {\n            ++count;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString);\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 6}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    \n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    \n    int count = CountCharacters(userChar, userString);\n    cout << count << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 7}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.size(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString);\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 8}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    int count = CountCharacters(userChar, userString);\n    cout << count;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 9}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.size(); i++) {\n        if(userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 10}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.size(); i++) {\n        if(userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    int count = CountCharacters(userChar, userString);\n    cout << count;\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 1}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 2}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    getline(cin >> ws, userString);\n    cout << CountCharacters(userChar, userString);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 3}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    \n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString);\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 4}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.length(); i++) {\n        if(userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    cout << CountCharacters(userChar, userString) << endl;\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 5}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n    cout << CountCharacters(userChar, userString);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 6}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString);\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 7}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for(int i = 0; i < userString.length(); i++) {\n        if(userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore();\n    getline(cin, userString);\n    cout << CountCharacters(userChar, userString);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 8}
{"problem": 4, "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint CountCharacters(char userChar, string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    string userString;\n    cin >> userChar;\n    cin.ignore(); \n    getline(cin, userString);\n\n    cout << CountCharacters(userChar, userString) << endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 9}
{"problem": 4, "code": "#include <iostream>\n#include <string>\n\nint CountCharacters(char userChar, std::string userString) {\n    int count = 0;\n    for (int i = 0; i < userString.length(); i++) {\n        if (userString[i] == userChar)\n            count++;\n    }\n    return count;\n}\n\nint main() {\n    char userChar;\n    std::string userString;\n    \n    std::cin >> userChar;\n    std::cin.ignore();\n    std::getline(std::cin, userString);\n\n    std::cout << CountCharacters(userChar, userString);\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 10}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 != 0) {\n        return false;\n    } else if (userYear % 100 != 0) {\n        return true;\n    } else if (userYear % 400 != 0) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nint main() {\n    int userYear;\n    std::cout << \"Enter a year: \";\n    std::cin >> userYear;\n\n    if (IsLeapYear(userYear)) {\n        std::cout << userYear << \" is a leap year.\";\n    } else {\n        std::cout << userYear << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 1}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 != 0) {\n        return false;\n    } else if(userYear % 100 != 0) {\n        return true;\n    } else if(userYear % 400 != 0) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n    \n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n    \n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 2}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear){\n    if(userYear % 4 == 0 && (userYear % 100 != 0 || userYear % 400 == 0)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nint main(){\n    int year;\n    std::cin >> year;\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 3}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 != 0) {\n        return false;\n    } else if (userYear % 100 != 0) {\n        return true;\n    } else if (userYear % 400 != 0) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 4}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0 && (userYear % 100 != 0 || userYear % 400 == 0))\n        return true;\n    else\n        return false;\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year))\n        std::cout << year << \" is a leap year.\";\n    else\n        std::cout << year << \" is not a leap year.\";\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 5}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 != 0) {\n        return false;\n    } else if(userYear % 100 != 0) {\n        return true;\n    } else if(userYear % 400 != 0) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 6}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 400 == 0)\n        return true;\n    else if (userYear % 100 == 0)\n        return false;\n    else if (userYear % 4 == 0)\n        return true;\n    else\n        return false;\n}\n\nint main() {\n    int year;\n    std::cin >> year;\n    if(IsLeapYear(year))\n        std::cout<< year << \" is a leap year\";\n    else\n        std::cout<< year << \" is not a leap year\";\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 7}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 != 0) {\n        return false;\n    } else if (userYear % 100 != 0) {\n        return true;\n    } else if (userYear % 400 != 0) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 8}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 400 == 0) {\n        return true;\n    } else if(userYear % 100 == 0) {\n        return false;\n    } else if(userYear % 4 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 9}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0) {\n        if(userYear % 100 == 0) {\n            if(userYear % 400 == 0)\n                return true;\n            else\n                return false;\n        }\n        else\n            return true;\n    }\n    else\n        return false;\n}\n\nint main() {\n    int year;\n    std::cin >> year;\n    if(IsLeapYear(year))\n        std::cout << year << \" is a leap year.\";\n    else\n        std::cout << year << \" is not a leap year.\";\n\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 10}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear){\n    if (userYear % 400 == 0) {\n        return true;\n    }\n    else if (userYear % 100 == 0) {\n        return false;\n    }\n    else if (userYear % 4 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nint main(){\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year)){\n        std::cout << year << \" is a leap year.\";\n    }\n    else{\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 1}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 400 == 0) {\n        return true;\n    } else if (userYear % 100 == 0) {\n        return false;\n    } else if (userYear % 4 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n    \n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 2}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 400 == 0) {\n        return true;\n    } else if(userYear % 100 == 0) {\n        return false;\n    } else if(userYear % 4 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cout << \"Enter a year: \";\n    cin >> year;\n    if(IsLeapYear(year)) {\n        cout << year << \" is a leap year.\";\n    } else {\n        cout << year << \" is not a leap year.\";\n    }\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 3}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear)\n{\n    if (userYear % 4 != 0)\n    {\n        return false;\n    }\n    else if (userYear % 100 != 0)\n    {\n        return true;\n    }\n    else if (userYear % 400 != 0)\n    {\n        return false;\n    }\n    else\n    {\n        return true;\n    }\n}\n\nint main()\n{\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if (IsLeapYear(year))\n    {\n        std::cout << year << \" is a leap year.\";\n    }\n    else\n    {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 4}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 400 == 0) {\n        return true;\n    }\n    else if(userYear % 100 == 0) {\n        return false;\n    }\n    else if(userYear % 4 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    }\n    else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 5}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0 && (userYear % 100 != 0 || userYear % 400 == 0)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 6}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0) {\n        if(userYear % 100 == 0) {\n            if(userYear % 400 == 0)\n                return true;\n            else\n                return false;\n        }\n        else\n            return true;\n    }\n    else\n        return false;\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    }\n    else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 7}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 400 == 0) {\n        return true;\n    }\n    else if (userYear % 100 == 0) {\n        return false;\n    }\n    else if (userYear % 4 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cout << \"Enter a year: \";\n    cin >> year;\n\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\" << endl;\n    }\n    else {\n        cout << year << \" is not a leap year.\" << endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 8}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 != 0) {\n        return false;\n    } else if (userYear % 100 != 0) {\n        return true;\n    } else if (userYear % 400 != 0) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if (IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\\n\";\n    } else {\n        std::cout << year << \" is not a leap year.\\n\";\n    }\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 9}
{"problem": 5, "code": "#include<iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n  if(userYear % 4 == 0) {\n    if(userYear % 100 == 0) {\n      if(userYear % 400 == 0)\n        return true;\n      else\n        return false;\n    }\n    else\n      return true;\n  }\n  else\n    return false;\n}\n\nint main() {\n  int year;\n  cout<<\"Enter a year: \";\n  cin>>year;\n  if(IsLeapYear(year))\n    cout<<year<<\" is a leap year.\";\n  else\n    cout<<year<<\" is not a leap year.\";\n  return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 10}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0) {\n        if(userYear % 100 == 0 && userYear % 400 != 0) \n            return false;\n        else \n            return true;\n    } else \n        return false;\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year)) \n        std::cout << year << \" is a leap year.\";\n    else \n        std::cout << year << \" is not a leap year.\";\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 1}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0 && (userYear % 100 != 0 || userYear % 400 == 0))\n        return true;\n    else\n        return false;\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if (IsLeapYear(year))\n        std::cout << year << \" is a leap year.\";\n    else\n        std::cout << year << \" is not a leap year.\";\n        \n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 2}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0 && (userYear % 100 != 0 || userYear % 400 == 0)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n    \n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 3}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear){\n    if(userYear % 4 == 0){\n        if(userYear % 100 == 0){\n            if(userYear % 400 == 0){\n                return true;\n            }\n            else{\n                return false;\n            }\n        }\n        else{\n            return true;\n        }\n    }\n    else{\n        return false;\n    }\n}\n\nint main(){\n    int year;\n    std::cin >> year;\n    if(IsLeapYear(year)){\n        std::cout << year << \" is a leap year.\";\n    }\n    else{\n        std::cout << year << \" is not a leap year.\";\n    }\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 4}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0) {\n        if(userYear % 100 == 0) {\n            if(userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 5}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0 && (userYear % 100 != 0 || userYear % 400 == 0)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n  \n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 6}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0){\n        if(userYear % 100 == 0){\n            if(userYear % 400 == 0){\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main(){\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year)){\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 7}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 400 == 0) {\n        return true;\n    } else if (userYear % 100 == 0) {\n        return false;\n    } else if (userYear % 4 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if (IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\" << std::endl;\n    } else {\n        std::cout << year << \" is not a leap year.\" << std::endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 8}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0){\n        if(userYear % 100 == 0){\n            if(userYear % 400 == 0){\n                return true;\n            }else{\n                return false;\n            }\n        }else{\n            return true;\n        }\n    }else{\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year)){\n        std::cout << year << \" is a leap year.\" << std::endl;\n    }else{\n        std::cout << year << \" is not a leap year.\" << std::endl;\n    }\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 9}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear){\n    if(userYear % 4 != 0){\n        return false;\n    }\n    else if(userYear % 100 != 0){\n        return true;\n    }\n    else if(userYear % 400 != 0){\n        return false;\n    }\n    else{\n        return true;\n    }\n}\n\nint main(){\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year)){\n        std::cout << year << \" is a leap year.\";\n    }\n    else{\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 10}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 != 0) {\n        return false;\n    } else if(userYear % 100 != 0) {\n        return true;\n    } else if(userYear % 400 != 0) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nint main() {\n    int year;\n\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 1}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0) {\n        if(userYear % 100 == 0) {\n            if(userYear % 400 == 0)\n                return true;\n            else\n                return false;\n        }\n        else\n            return true;\n    }\n    else\n        return false;\n}\n\nint main() {\n    int year;\n    std::cin >> year;\n\n    if(IsLeapYear(year))\n        std::cout << year << \" is a leap year.\";\n    else\n        std::cout << year << \" is not a leap year.\";\n        \n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 2}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 400 == 0) {\n        return true;\n    }\n    else if (userYear % 100 == 0) {\n        return false;\n    }\n    else if (userYear % 4 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    cout << \"Enter a year: \";\n    cin >> year;\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\";\n    }\n    else {\n        cout << year << \" is not a leap year.\";\n    }\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 3}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 != 0) {\n        return false;\n    } else if (userYear % 100 != 0) {\n        return true;\n    } else if (userYear % 400 != 0) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 4}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 == 0 && (userYear % 100 != 0 || userYear % 400 == 0)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if (IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 5}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0) {\n        if(userYear % 100 == 0) {\n            if(userYear % 400 == 0) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    } else {\n        std::cout << year << \" is not a leap year.\";\n    }\n    \n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 6}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0 && (userYear % 100 != 0 || userYear % 400 == 0))\n        return true;\n    else\n        return false;\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n    \n    if(IsLeapYear(year))\n        std::cout << year << \" is a leap year.\";\n    else\n        std::cout << year << \" is not a leap year.\";\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 7}
{"problem": 5, "code": "#include <iostream>\nusing namespace std;\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 != 0) {\n        return false;\n    } else if (userYear % 100 != 0) {\n        return true;\n    } else if (userYear % 400 != 0) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nint main() {\n    int year;\n    cout << \"Enter a year: \";\n    cin >> year;\n    if (IsLeapYear(year)) {\n        cout << year << \" is a leap year.\";\n    } else {\n        cout << year << \" is not a leap year.\";\n    }\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 8}
{"problem": 5, "code": "#include <iostream>\n\nbool IsLeapYear(int userYear) {\n    if(userYear % 4 == 0) {\n        if(userYear % 100 == 0) {\n            if(userYear % 400 == 0)\n                return true;\n            else\n                return false;\n        }\n        else\n            return true;\n    }\n    else\n        return false;\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n\n    if(IsLeapYear(year))\n        std::cout << year << \" is a leap year.\";\n    else\n        std::cout << year << \" is not a leap year.\";\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 9}
{"problem": 5, "code": "#include<iostream>\n\nbool IsLeapYear(int userYear) {\n    if (userYear % 4 != 0) {\n        return false;\n    }\n    else if (userYear % 100 != 0) {\n        return true;\n    }\n    else if (userYear % 400 != 0) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\n\nint main() {\n    int year;\n    std::cout << \"Enter a year: \";\n    std::cin >> year;\n    if (IsLeapYear(year)) {\n        std::cout << year << \" is a leap year.\";\n    }\n    else {\n        std::cout << year << \" is not a leap year.\";\n    }\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 10}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found!\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> names(N);\n    std::vector<std::string> phoneNumbers(N);\n    for (int i = 0; i < N; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName) << std::endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 1}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for(int i = 0; i < nameVec.size(); i++){\n        if(nameVec[i] == contactName){\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not Found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> nameVec(N);\n    std::vector<std::string> phoneNumberVec(N);\n    for (int i = 0; i < N; i++) {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 2}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<std::string> names(n), phoneNumbers(n);\n    for (int i = 0; i < n; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 3}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> nameVec(N);\n    std::vector<std::string> phoneNumberVec(N);\n    for (int i = 0; i < N; i++) {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 4}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    std::vector<std::string> names;\n    std::vector<std::string> phoneNumbers;\n    int n;\n    std::cin >> n;\n    for (int i = 0; i < n; i++) {\n        std::string name, phoneNumber;\n        std::cin >> name >> phoneNumber;\n        names.push_back(name);\n        phoneNumbers.push_back(phoneNumber);\n    }\n    std::string searchName;\n    std::cin >> searchName;\n    std::cout << GetPhoneNumber(names, phoneNumbers, searchName);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 5}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName)\n            return phoneNumberVec[i];\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<std::string> nameVec(n);\n    std::vector<std::string> phoneNumberVec(n);\n    for (int i = 0; i < n; i++) {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << std::endl;\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 6}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName)\n{\n    for (int i = 0; i < nameVec.size(); i++)\n    {\n        if (nameVec[i] == contactName)\n        {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main()\n{\n    int n;\n    std::cin >> n;\n    std::vector<std::string> names(n);\n    std::vector<std::string> phoneNumbers(n);\n    for (int i = 0; i < n; i++)\n    {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    std::string name;\n    std::cin >> name;\n    std::cout << GetPhoneNumber(names, phoneNumbers, name);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 7}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<std::string> nameVec(n);\n    std::vector<std::string> phoneNumberVec(n);\n    for (int i = 0; i < n; i++) {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 8}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for(int i = 0; i < nameVec.size(); i++) {\n        if(nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not Found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> names(N), phoneNumbers(N);\n    for(int i = 0; i < N; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 9}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for(int i = 0; i < nameVec.size(); i++) {\n        if(nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact Not Found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> nameVec(N);\n    std::vector<std::string> phoneNumberVec(N);\n    for(int i = 0; i < N; i++) {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n    return 0;\n}", "class": 1, "version": 1, "model": "GPT-4", "variation": 10}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<std::string> nameVec(n), phoneNumberVec(n);\n    for (int i = 0; i < n; i++) {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 1}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (size_t i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found.\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<std::string> names(n);\n    std::vector<std::string> phoneNumbers(n);\n    for (int i = 0; i < n; ++i) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    std::string searchName;\n    std::cin >> searchName;\n    std::cout << GetPhoneNumber(names, phoneNumbers, searchName) << std::endl;\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 2}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found!\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<std::string> names(n);\n    std::vector<std::string> phoneNumbers(n);\n    \n    for (int i = 0; i < n; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    \n    std::string contactName;\n    std::cin >> contactName;\n    \n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName);\n    \n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 3}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact Not Found\";\n}\n\nint main() {\n    vector<string> names;\n    vector<string> phoneNumbers;\n    int n;\n    cin >> n;\n    for(int i = 0; i < n; i++){\n        string name;\n        string number;\n        cin >> name >> number;\n        names.push_back(name);\n        phoneNumbers.push_back(number);\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, contactName);\n    \n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 4}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found.\";\n}\n\nint main() {\n    std::vector<std::string> names;\n    std::vector<std::string> phoneNumbers;\n    int n;\n    std::cin >> n;\n\n    for (int i = 0; i < n; ++i) {\n        std::string name, phoneNumber;\n        std::cin >> name >> phoneNumber;\n        names.push_back(name);\n        phoneNumbers.push_back(phoneNumber);\n    }\n\n    std::string contactName;\n    std::cin >> contactName;\n\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName);\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 5}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n\n    std::vector<std::string> names(n);\n    std::vector<std::string> phoneNumbers(n);\n\n    for (int i = 0; i < n; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n\n    std::string contactName;\n    std::cin >> contactName;\n\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName);\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 6}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName){\n    for(int i = 0; i < nameVec.size(); i++){\n        if(nameVec[i] == contactName){\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main(){\n    std::vector<std::string> nameVec;\n    std::vector<std::string> phoneNumberVec;\n    int N;\n    std::string name, phoneNumber, searchName;\n\n    std::cin >> N;\n    for(int i = 0; i < N; i++){\n        std::cin >> name >> phoneNumber;\n        nameVec.push_back(name);\n        phoneNumberVec.push_back(phoneNumber);\n    }\n    std::cin >> searchName;\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, searchName);\n    \n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 7}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact Not Found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> names(N);\n    std::vector<std::string> phoneNumbers(N);\n    for (int i = 0; i < N; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 8}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<std::string> names(n);\n    std::vector<std::string> phoneNumbers(n);\n    for (int i = 0; i < n; i++) {\n        std::cin >> names[i];\n        std::cin >> phoneNumbers[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName);\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 9}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); ++i) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found!\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n    vector<string> names(n);\n    vector<string> phoneNumbers(n);\n\n    for (int i = 0; i < n; ++i) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string targetName;\n    cin >> targetName;\n\n    cout << GetPhoneNumber(names, phoneNumbers, targetName) << endl;\n\n    return 0;\n}", "class": 1, "version": 2, "model": "GPT-4", "variation": 10}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for(int i = 0; i < nameVec.size(); i++) {\n        if(nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n\n    std::vector<std::string> nameVec(n);\n    std::vector<std::string> phoneNumberVec(n);\n\n    for(int i = 0; i < n; i++) {\n        std::cin >> nameVec[i];\n        std::cin >> phoneNumberVec[i];\n    }\n\n    std::string contactName;\n    std::cin >> contactName;\n\n    std::string contactNumber = GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n\n    std::cout << contactNumber;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 1}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for(int i = 0; i < nameVec.size(); i++) {\n        if(nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    std::vector<std::string> names;\n    std::vector<std::string> phoneNumbers;\n    int n;\n    std::cin >> n;\n    \n    for(int i = 0; i < n; i++) {\n        std::string name, phoneNumber;\n        std::cin >> name >> phoneNumber;\n        names.push_back(name);\n        phoneNumbers.push_back(phoneNumber);\n    }\n\n    std::string contactName;\n    std::cin >> contactName;\n\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 2}
{"problem": 6, "code": "#include<iostream>\n#include<vector>\n#include<string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName){\n    for (int i=0; i<nameVec.size(); i++){\n        if(nameVec[i] == contactName)\n            return phoneNumberVec[i];\n    }\n    return \"Not found!\";\n}\n\nint main(){\n    int N;\n    std::cin >> N;\n\n    std::vector<std::string> nameVec(N);\n    std::vector<std::string> phoneNumberVec(N);\n\n    for(int i = 0; i < N; i++)\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n\n    std::string contactName;\n    std::cin >> contactName;\n\n    std::string result = GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n    std::cout << result;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 3}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName)\n{\n    for (int i = 0; i < nameVec.size(); i++)\n    {\n        if (nameVec[i] == contactName)\n        {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"\";\n}\n\nint main()\n{\n    int n;\n    std::cin >> n;\n    std::vector<std::string> nameVec(n);\n    std::vector<std::string> phoneNumberVec(n);\n    for(int i = 0; i < n; i++)\n    {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 4}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for(int i = 0; i < nameVec.size(); i++) {\n        if(nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> names(N);\n    std::vector<std::string> phoneNumbers(N);\n    for(int i = 0; i < N; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName) << std::endl;\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 5}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Not Found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> names(N);\n    std::vector<std::string> phoneNumbers(N);\n    for (int i = 0; i < N; i++) {\n        std::cin >> names[i];\n        std::cin >> phoneNumbers[i];\n    }\n    std::string searchName;\n    std::cin >> searchName;\n    std::cout << GetPhoneNumber(names, phoneNumbers, searchName);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 6}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for(int i = 0; i < nameVec.size(); i++) {\n        if(nameVec[i] == contactName)\n            return phoneNumberVec[i];\n    }\n    return \"Name not found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> nameVec(N);\n    std::vector<std::string> phoneNumberVec(N);\n    for(int i = 0; i < N; i++) {\n        std::cin >> nameVec[i];\n        std::cin >> phoneNumberVec[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 7}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n\n    std::vector<std::string> names(n);\n    std::vector<std::string> phoneNumbers(n);\n\n    for(int i = 0; i < n; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n\n    std::string queryName;\n    std::cin >> queryName;\n\n    std::string phoneNumber = GetPhoneNumber(names, phoneNumbers, queryName);\n\n    std::cout << phoneNumber << std::endl;\n\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 8}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> nameVec(N);\n    std::vector<std::string> phoneNumberVec(N);\n    for (int i = 0; i < N; i++) {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << std::endl;\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 9}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (size_t i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<std::string> nameVec(n);\n    std::vector<std::string> phoneNumberVec(n);\n    for(int i = 0; i < n; i++) {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n    return 0;\n}", "class": 1, "version": 3, "model": "GPT-4", "variation": 10}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<std::string> names(n);\n    std::vector<std::string> phoneNumbers(n);\n    \n    for (int i = 0; i < n; i++) {\n        std::cin >> names[i];\n        std::cin >> phoneNumbers[i];\n    }\n    \n    std::string nameToFind;\n    std::cin >> nameToFind;\n    \n    std::cout << GetPhoneNumber(names, phoneNumbers, nameToFind) << std::endl;\n    \n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 1}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    cin >> N;\n    \n    vector<string> names(N);\n    vector<string> phoneNumbers(N);\n    \n    for (int i = 0; i < N; i++) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n    \n    string query;\n    cin >> query;\n    \n    cout << GetPhoneNumber(names, phoneNumbers, query) << endl;\n    \n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 2}
{"problem": 6, "code": "#include <iostream>\n#include <string>\n#include <vector>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<std::string> names(n), numbers(n);\n    for (int i = 0; i < n; i++) {\n        std::cin >> names[i] >> numbers[i];\n    }\n    std::string searchName;\n    std::cin >> searchName;\n    std::cout << GetPhoneNumber(names, numbers, searchName);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 3}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName)\n{\n    for(int i = 0; i < nameVec.size(); i++)\n    {\n        if(nameVec[i] == contactName)\n        {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main()\n{\n    int N;\n    std::cin >> N;\n    std::vector<std::string> names(N);\n    std::vector<std::string> phoneNumbers(N);\n\n    for(int i = 0; i < N; i++)\n    {\n        std::cin >> names[i];\n        std::cin >> phoneNumbers[i];\n    }\n\n    std::string contactName;\n    std::cin >> contactName;\n\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName) << std::endl;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 4}
{"problem": 6, "code": "#include<iostream>\n#include<vector>\n#include<string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> names(N);\n    std::vector<std::string> phoneNumbers(N);\n    for (int i = 0; i < N; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName);\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 5}
{"problem": 6, "code": "#include<iostream>\n#include<vector>\n#include<string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for(int i = 0; i < nameVec.size(); i++) {\n        if(nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found.\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n    \n    vector<string> names(n);\n    vector<string> phoneNumbers(n);\n\n    for(int i = 0; i < n; i++) {\n        cin >> names[i] >> phoneNumbers[i];\n    }\n\n    string contactName;\n    cin >> contactName;\n\n    string phoneNumber = GetPhoneNumber(names, phoneNumbers, contactName);\n    \n    cout << phoneNumber;\n\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 6}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n    std::vector<std::string> nameVec(N);\n    std::vector<std::string> phoneNumberVec(N);\n    for(int i = 0; i < N; i++) {\n        std::cin >> nameVec[i] >> phoneNumberVec[i];\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName) << std::endl;\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 7}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName)\n            return phoneNumberVec[i];\n    }\n    return \"Name not found!\";\n}\n\nint main() {\n    int N;\n    std::cin >> N;\n\n    std::vector<std::string> names(N);\n    std::vector<std::string> phoneNumbers(N);\n\n    for (int i = 0; i < N; i++) {\n        std::cin >> names[i] >> phoneNumbers[i];\n    }\n\n    std::string query;\n    std::cin >> query;\n\n    std::cout << GetPhoneNumber(names, phoneNumbers, query) << std::endl;\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 8}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string GetPhoneNumber(std::vector<std::string> nameVec, std::vector<std::string> phoneNumberVec, std::string contactName)\n{\n    for (int i = 0; i < nameVec.size(); i++)\n    {\n        if (nameVec[i] == contactName)\n        {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Name not found.\";\n}\n\nint main()\n{\n    std::vector<std::string> names;\n    std::vector<std::string> phoneNumbers;\n    int n;\n    std::cin >> n;\n    for (int i = 0; i < n; i++)\n    {\n        std::string name, phoneNumber;\n        std::cin >> name >> phoneNumber;\n        names.push_back(name);\n        phoneNumbers.push_back(phoneNumber);\n    }\n    std::string contactName;\n    std::cin >> contactName;\n    std::cout << GetPhoneNumber(names, phoneNumbers, contactName) << std::endl;\n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 9}
{"problem": 6, "code": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring GetPhoneNumber(vector<string> nameVec, vector<string> phoneNumberVec, string contactName) {\n    for (int i = 0; i < nameVec.size(); i++) {\n        if (nameVec[i] == contactName) {\n            return phoneNumberVec[i];\n        }\n    }\n    return \"Contact not found\";\n}\n\nint main() {\n    vector<string> nameVec;\n    vector<string> phoneNumberVec;\n    int n;\n    string name, phone, contactName;\n\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        cin >> name >> phone;\n        nameVec.push_back(name);\n        phoneNumberVec.push_back(phone);\n    }\n    cin >> contactName;\n    \n    cout << GetPhoneNumber(nameVec, phoneNumberVec, contactName);\n    \n    return 0;\n}", "class": 1, "version": 4, "model": "GPT-4", "variation": 10}
